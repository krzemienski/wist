!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=75)}([function(e,t,n){"use strict";var i=n(5),r=["kind","resolve","construct","instanceOf","predicate","represent","defaultStyle","styleAliases"],s=["scalar","sequence","mapping"];e.exports=function(e,t){var n,a;if(t=t||{},Object.keys(t).forEach(function(t){if(-1===r.indexOf(t))throw new i('Unknown option "'+t+'" is met in definition of "'+e+'" YAML type.')}),this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.defaultStyle=t.defaultStyle||null,this.styleAliases=(n=t.styleAliases||null,a={},null!==n&&Object.keys(n).forEach(function(e){n[e].forEach(function(t){a[String(t)]=e})}),a),-1===s.indexOf(this.kind))throw new i('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}},function(e,t){e.exports=require("path")},function(e,t,n){"use strict";var i=n(3),r=n(5),s=n(0);function a(e,t,n){var i=[];return e.include.forEach(function(e){n=a(e,t,n)}),e[t].forEach(function(e){n.forEach(function(t,n){t.tag===e.tag&&t.kind===e.kind&&i.push(n)}),n.push(e)}),n.filter(function(e,t){return-1===i.indexOf(t)})}function o(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach(function(e){if(e.loadKind&&"scalar"!==e.loadKind)throw new r("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")}),this.compiledImplicit=a(this,"implicit",[]),this.compiledExplicit=a(this,"explicit",[]),this.compiledTypeMap=function(){var e,t,n={scalar:{},sequence:{},mapping:{},fallback:{}};function i(e){n[e.kind][e.tag]=n.fallback[e.tag]=e}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(i);return n}(this.compiledImplicit,this.compiledExplicit)}o.DEFAULT=null,o.create=function(){var e,t;switch(arguments.length){case 1:e=o.DEFAULT,t=arguments[0];break;case 2:e=arguments[0],t=arguments[1];break;default:throw new r("Wrong number of arguments for Schema.create function")}if(e=i.toArray(e),t=i.toArray(t),!e.every(function(e){return e instanceof o}))throw new r("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!t.every(function(e){return e instanceof s}))throw new r("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new o({include:e,explicit:t})},e.exports=o},function(e,t,n){"use strict";function i(e){return void 0===e||null===e}e.exports.isNothing=i,e.exports.isObject=function(e){return"object"==typeof e&&null!==e},e.exports.toArray=function(e){return Array.isArray(e)?e:i(e)?[]:[e]},e.exports.repeat=function(e,t){var n,i="";for(n=0;n<t;n+=1)i+=e;return i},e.exports.isNegativeZero=function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},e.exports.extend=function(e,t){var n,i,r,s;if(t)for(n=0,i=(s=Object.keys(t)).length;n<i;n+=1)e[r=s[n]]=t[r];return e}},function(e,t,n){"use strict";var i=n(2);e.exports=new i({include:[n(14)],implicit:[n(30),n(29)],explicit:[n(28),n(26),n(25),n(24)]})},function(e,t,n){"use strict";function i(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=(this.reason||"(unknown reason)")+(this.mark?" "+this.mark.toString():""),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||""}i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i.prototype.toString=function(e){var t=this.name+": ";return t+=this.reason||"(unknown reason)",!e&&this.mark&&(t+=" "+this.mark.toString()),t},e.exports=i},function(e,t){e.exports=require("fs")},function(e,t,n){var i,r,s,a,o,u,c,h,l,p={}.toString;function f(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}i=n(72),r=n(71),s=n(70),a=n(69),o=n(68),u=function(e){return e},c=f(function(e,t){return p.call(t).slice(8,-1)===e}),h=f(function(e,t){var n,i=[];for(n=0;n<e;++n)i.push(t);return i}),a.empty=r.empty,a.slice=r.slice,a.take=r.take,a.drop=r.drop,a.splitAt=r.splitAt,a.takeWhile=r.takeWhile,a.dropWhile=r.dropWhile,a.span=r.span,a.breakStr=r.breakList,(l={Func:i,List:r,Obj:s,Str:a,Num:o,id:u,isType:c,replicate:h}).each=r.each,l.map=r.map,l.filter=r.filter,l.compact=r.compact,l.reject=r.reject,l.partition=r.partition,l.find=r.find,l.head=r.head,l.first=r.first,l.tail=r.tail,l.last=r.last,l.initial=r.initial,l.empty=r.empty,l.reverse=r.reverse,l.difference=r.difference,l.intersection=r.intersection,l.union=r.union,l.countBy=r.countBy,l.groupBy=r.groupBy,l.fold=r.fold,l.foldl=r.foldl,l.fold1=r.fold1,l.foldl1=r.foldl1,l.foldr=r.foldr,l.foldr1=r.foldr1,l.unfoldr=r.unfoldr,l.andList=r.andList,l.orList=r.orList,l.any=r.any,l.all=r.all,l.unique=r.unique,l.uniqueBy=r.uniqueBy,l.sort=r.sort,l.sortWith=r.sortWith,l.sortBy=r.sortBy,l.sum=r.sum,l.product=r.product,l.mean=r.mean,l.average=r.average,l.concat=r.concat,l.concatMap=r.concatMap,l.flatten=r.flatten,l.maximum=r.maximum,l.minimum=r.minimum,l.maximumBy=r.maximumBy,l.minimumBy=r.minimumBy,l.scan=r.scan,l.scanl=r.scanl,l.scan1=r.scan1,l.scanl1=r.scanl1,l.scanr=r.scanr,l.scanr1=r.scanr1,l.slice=r.slice,l.take=r.take,l.drop=r.drop,l.splitAt=r.splitAt,l.takeWhile=r.takeWhile,l.dropWhile=r.dropWhile,l.span=r.span,l.breakList=r.breakList,l.zip=r.zip,l.zipWith=r.zipWith,l.zipAll=r.zipAll,l.zipAllWith=r.zipAllWith,l.at=r.at,l.elemIndex=r.elemIndex,l.elemIndices=r.elemIndices,l.findIndex=r.findIndex,l.findIndices=r.findIndices,l.apply=i.apply,l.curry=i.curry,l.flip=i.flip,l.fix=i.fix,l.over=i.over,l.split=a.split,l.join=a.join,l.lines=a.lines,l.unlines=a.unlines,l.words=a.words,l.unwords=a.unwords,l.chars=a.chars,l.unchars=a.unchars,l.repeat=a.repeat,l.capitalize=a.capitalize,l.camelize=a.camelize,l.dasherize=a.dasherize,l.values=s.values,l.keys=s.keys,l.pairsToObj=s.pairsToObj,l.objToPairs=s.objToPairs,l.listsToObj=s.listsToObj,l.objToLists=s.objToLists,l.max=o.max,l.min=o.min,l.negate=o.negate,l.abs=o.abs,l.signum=o.signum,l.quot=o.quot,l.rem=o.rem,l.div=o.div,l.mod=o.mod,l.recip=o.recip,l.pi=o.pi,l.tau=o.tau,l.exp=o.exp,l.sqrt=o.sqrt,l.ln=o.ln,l.pow=o.pow,l.sin=o.sin,l.tan=o.tan,l.cos=o.cos,l.acos=o.acos,l.asin=o.asin,l.atan=o.atan,l.atan2=o.atan2,l.truncate=o.truncate,l.round=o.round,l.ceiling=o.ceiling,l.floor=o.floor,l.isItNaN=o.isItNaN,l.even=o.even,l.odd=o.odd,l.gcd=o.gcd,l.lcm=o.lcm,l.VERSION="1.1.2",e.exports=l},function(e,t,n){"use strict";var i=n(2);e.exports=i.DEFAULT=new i({include:[n(4)],explicit:[n(23),n(22),n(21)]})},function(e,t,n){"use strict";var i=n(2);e.exports=new i({explicit:[n(37),n(36),n(35)]})},function(e,t,n){"use strict";const i=n(50),r=n(1),s=["off","warn","error"],a=s.reduce((e,t,n)=>(e[t]=n,e),{}),o=[0,1,2,"off","warn","error"];e.exports={createEmptyConfig:()=>({globals:{},env:{},rules:{},parserOptions:{}}),createEnvironmentConfig(e,t){const n=this.createEmptyConfig();return e&&(n.env=e,Object.keys(e).filter(t=>e[t]).forEach(e=>{const i=t.get(e);i&&(i.globals&&Object.assign(n.globals,i.globals),i.parserOptions&&Object.assign(n.parserOptions,i.parserOptions))})),n},applyEnvironments(e,t){return e.env&&"object"==typeof e.env?this.merge(this.createEnvironmentConfig(e.env,t),e):e},merge:function e(t,n,i,r){const s=Array.isArray(n)||Array.isArray(t);let a=s&&[]||{};return i=!!i,r=!!r,s?(t=t||[],a=r&&Array.isArray(n)&&n.length>1?a.concat(n):a.concat(t),"object"==typeof n||Array.isArray(n)||(n=[n]),Object.keys(n).forEach((s,o)=>{s=n[o],void 0===a[o]?a[o]=s:"object"==typeof s?a[o]=r?s:e(t[o],s,i,r):i?-1===a.indexOf(s)&&a.push(s):a[o]=s})):(t&&"object"==typeof t&&Object.keys(t).forEach(e=>{a[e]=t[e]}),Object.keys(n).forEach(s=>{"overrides"===s?a[s]=(t[s]||[]).concat(n[s]||[]):Array.isArray(n[s])||Array.isArray(t[s])?a[s]=e(t[s],n[s],"plugins"===s||"extends"===s,r):"object"==typeof n[s]&&n[s]&&"exported"!==s&&"astGlobals"!==s?a[s]=e(t[s]||{},n[s],i,"rules"===s):a[s]=n[s]})),a},normalize(e){e.rules&&Object.keys(e.rules).forEach(t=>{const n=e.rules[t];"string"==typeof n?e.rules[t]=a[n.toLowerCase()]||0:Array.isArray(n)&&"string"==typeof n[0]&&(n[0]=a[n[0].toLowerCase()]||0)})},normalizeToStrings(e){e.rules&&Object.keys(e.rules).forEach(t=>{const n=e.rules[t];"number"==typeof n?e.rules[t]=s[n]||s[0]:Array.isArray(n)&&"number"==typeof n[0]&&(n[0]=s[n[0]]||s[0])})},isErrorSeverity(e){let t=Array.isArray(e)?e[0]:e;return"string"==typeof t&&(t=a[t.toLowerCase()]||0),"number"==typeof t&&2===t},isValidSeverity(e){let t=Array.isArray(e)?e[0]:e;return"string"==typeof t&&(t=t.toLowerCase()),-1!==o.indexOf(t)},isEverySeverityValid(e){return Object.keys(e).every(t=>this.isValidSeverity(e[t]))},getConfigFromVector(e,t){const n=t.getMergedVectorConfig(e);if(n)return n;const i=Array.from(e);let r,s=i.length-1;for(;s>=0&&!(r=t.getMergedVectorConfig(i));)i.pop(),s--;r||(r={});let a=r;for(let n=s+1;n<e.length;n++)a=this.mergeVectorEntry(a,e[n],t),t.setMergedVectorConfig(e.slice(0,n+1),a);return a},mergeVectorEntry(e,t,n){const i=Object.assign({},n.getConfig(t.filePath));let r,s=Object.assign({},e);return r=i.overrides?i.overrides.filter((e,n)=>-1!==t.matchingOverrides.indexOf(n)):[],delete(s=this.merge(s,i)).overrides,(s=r.reduce((e,t)=>this.merge(e,t),s)).filePath?(delete s.filePath,delete s.baseDirectory):s.files&&delete s.files,s},pathMatchesGlobs(e,t,n){const s=[].concat(t),a=[].concat(n||[]);s.concat(a).forEach(e=>{if(r.isAbsolute(e)||e.includes(".."))throw new Error(`Invalid override pattern (expected relative path not containing '..'): ${e}`)});const o={matchBase:!0};return s.some(t=>i(e,t,o))&&!a.some(t=>i(e,t,o))}}},function(e,t){function n(e){var t=new Error('Cannot find module "'+e+'".');throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=11},function(e,t,n){(function(){var t,i,r;t=n(60),i=n(59),r=function(e,n,r){return i(t(e),n,r)},e.exports={VERSION:"0.3.2",typeCheck:r,parsedTypeCheck:i,parseType:t}}).call(this)},function(e,t,n){"use strict";var i=n(2);e.exports=new i({include:[n(9)],implicit:[n(34),n(33),n(32),n(31)]})},function(e,t,n){"use strict";var i=n(2);e.exports=new i({include:[n(13)]})},function(e,t,n){(function(){var t,i,r,s,a,o,u,c;t=n(7),i=t.map,r=t.sortBy,s=n(66),a=function(e,t){var n,a,o;if(e.length)return n=i(function(e){var n,i,r;return i=(n=t.length>e.length?[t,e]:[e,t])[0],r=n[1],{string:e,distance:s.get(i,r)}})(e),o=(a=r(function(e){return e.distance},n)[0]).string,a.distance,o},o=function(e){return 1===e.length||"NUM"===e?"-"+e:"--"+e},u=function(e){return/^[A-Z]/.test(e)?e:t.dasherize(e)},c=function(e){return e.length<3?e.join(" or "):e.slice(0,-1).join(", ")+", or "+e[e.length-1]},e.exports={closestString:a,nameToRaw:o,dasherize:u,naturalJoin:c}}).call(this)},function(e,t,n){"use strict";e.exports={info(){console.log.apply(console,Array.from(arguments))},error(){console.error.apply(console,Array.from(arguments))}}},function(e,t,n){"use strict";const i=n(6),r=n(1);function s(e){try{return i.readdirSync(e)}catch(e){return[]}}function a(e,t,n){const s={};return e.forEach(e=>{if(n.indexOf(e)>=0){const n=r.resolve(t,e);i.statSync(n).isFile()&&(s[e]=n)}}),s}e.exports=class{constructor(e,t){this.fileNames=Array.isArray(e)?e:[e],this.cwd=t||process.cwd(),this.cache={}}*findAllInDirectoryAndParents(e){const t=this.cache;if(e=e?r.resolve(this.cwd,e):this.cwd,t.hasOwnProperty(e))return void(yield*t[e]);const n=[],i=this.fileNames;let o=0;do{n[o++]=e,t[e]=[];const u=a(s(e),e,i);if(Object.keys(u).length)for(let e=0;e<i.length;e++)if(u[i[e]]){const r=u[i[e]];for(let e=0;e<o;e++)t[n[e]].push(r);yield r;break}const c=e;if((e=r.dirname(e))===c)return}while(!t.hasOwnProperty(e));for(let i=0;i<o;i++)n.push.apply(t[n[i]],t[e]);yield*t[n[0]]}}},function(e,t,n){"use strict";function i(e){return JSON.stringify(e)}e.exports=class{constructor(){this.configFullNameCache=new Map,this.localHierarchyCache=new Map,this.mergedVectorCache=new Map,this.mergedCache=new Map}getConfig(e){return this.configFullNameCache.get(e)}setConfig(e,t){this.configFullNameCache.set(e,t)}getHierarchyLocalConfigs(e){return this.localHierarchyCache.get(e)}setHierarchyLocalConfigs(e,t){e.forEach((e,n)=>{const i=t.slice(0,t.length-n);this.localHierarchyCache.set(e,i)})}getMergedVectorConfig(e){return this.mergedVectorCache.get(i(e))}setMergedVectorConfig(e,t){this.mergedVectorCache.set(i(e),t)}getMergedConfig(e){return this.mergedCache.get(i(e))}setMergedConfig(e,t){this.mergedCache.set(i(e),t)}}},function(e,t,n){"use strict";var i=n(3),r=n(5),s=n(8),a=n(4),o=Object.prototype.toString,u=Object.prototype.hasOwnProperty,c=9,h=10,l=32,p=33,f=34,d=35,m=37,x=38,g=39,y=42,D=44,v=45,E=58,C=62,A=63,S=64,w=91,F=93,b=96,k=123,B=124,T=125,N={0:"\\0",7:"\\a",8:"\\b",9:"\\t",10:"\\n",11:"\\v",12:"\\f",13:"\\r",27:"\\e",34:'\\"',92:"\\\\",133:"\\N",160:"\\_",8232:"\\L",8233:"\\P"},I=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"];function M(e){var t,n,s;if(t=e.toString(16).toUpperCase(),e<=255)n="x",s=2;else if(e<=65535)n="u",s=4;else{if(!(e<=4294967295))throw new r("code point within a string may not be greater than 0xFFFFFFFF");n="U",s=8}return"\\"+n+i.repeat("0",s-t.length)+t}function O(e){this.schema=e.schema||s,this.indent=Math.max(1,e.indent||2),this.skipInvalid=e.skipInvalid||!1,this.flowLevel=i.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,t){var n,i,r,s,a,o,c;if(null===t)return{};for(n={},r=0,s=(i=Object.keys(t)).length;r<s;r+=1)a=i[r],o=String(t[a]),"!!"===a.slice(0,2)&&(a="tag:yaml.org,2002:"+a.slice(2)),(c=e.compiledTypeMap.fallback[a])&&u.call(c.styleAliases,o)&&(o=c.styleAliases[o]),n[a]=o;return n}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function P(e,t){for(var n,r=i.repeat(" ",t),s=0,a=-1,o="",u=e.length;s<u;)-1===(a=e.indexOf("\n",s))?(n=e.slice(s),s=u):(n=e.slice(s,a+1),s=a+1),n.length&&"\n"!==n&&(o+=r),o+=n;return o}function L(e,t){return"\n"+i.repeat(" ",e.indent*t)}function j(e){return e===l||e===c}function J(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&65279!==e||65536<=e&&e<=1114111}function U(e){return J(e)&&65279!==e&&e!==D&&e!==w&&e!==F&&e!==k&&e!==T&&e!==E&&e!==d}var z=1,X=2,R=3,K=4,_=5;function H(e,t,n,i,r){var s,a,o,u=!1,c=!1,l=-1!==i,N=-1,I=J(o=e.charCodeAt(0))&&65279!==o&&!j(o)&&o!==v&&o!==A&&o!==E&&o!==D&&o!==w&&o!==F&&o!==k&&o!==T&&o!==d&&o!==x&&o!==y&&o!==p&&o!==B&&o!==C&&o!==g&&o!==f&&o!==m&&o!==S&&o!==b&&!j(e.charCodeAt(e.length-1));if(t)for(s=0;s<e.length;s++){if(!J(a=e.charCodeAt(s)))return _;I=I&&U(a)}else{for(s=0;s<e.length;s++){if((a=e.charCodeAt(s))===h)u=!0,l&&(c=c||s-N-1>i&&" "!==e[N+1],N=s);else if(!J(a))return _;I=I&&U(a)}c=c||l&&s-N-1>i&&" "!==e[N+1]}return u||c?" "===e[0]&&n>9?_:c?K:R:I&&!r(e)?z:X}function W(e,t,n,i){e.dump=function(){if(0===t.length)return"''";if(!e.noCompatMode&&-1!==I.indexOf(t))return"'"+t+"'";var s=e.indent*Math.max(1,n),a=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-s),o=i||e.flowLevel>-1&&n>=e.flowLevel;switch(H(t,o,e.indent,a,function(t){return function(e,t){var n,i;for(n=0,i=e.implicitTypes.length;n<i;n+=1)if(e.implicitTypes[n].resolve(t))return!0;return!1}(e,t)})){case z:return t;case X:return"'"+t.replace(/'/g,"''")+"'";case R:return"|"+V(t,e.indent)+q(P(t,s));case K:return">"+V(t,e.indent)+q(P(function(e,t){var n,i,r=/(\n+)([^\n]*)/g,s=(o=e.indexOf("\n"),o=-1!==o?o:e.length,r.lastIndex=o,G(e.slice(0,o),t)),a="\n"===e[0]||" "===e[0];var o;for(;i=r.exec(e);){var u=i[1],c=i[2];n=" "===c[0],s+=u+(a||n||""===c?"":"\n")+G(c,t),a=n}return s}(t,a),s));case _:return'"'+function(e){for(var t,n,i="",r=0;r<e.length;r++)t=e.charCodeAt(r),n=N[t],i+=!n&&J(t)?e[r]:n||M(t);return i}(t)+'"';default:throw new r("impossible error: invalid scalar style")}}()}function V(e,t){var n=" "===e[0]?String(t):"",i="\n"===e[e.length-1];return n+(i&&("\n"===e[e.length-2]||"\n"===e)?"+":i?"":"-")+"\n"}function q(e){return"\n"===e[e.length-1]?e.slice(0,-1):e}function G(e,t){if(""===e||" "===e[0])return e;for(var n,i,r=/ [^ ]/g,s=0,a=0,o=0,u="";n=r.exec(e);)(o=n.index)-s>t&&(i=a>s?a:o,u+="\n"+e.slice(s,i),s=i+1),a=o;return u+="\n",e.length-s>t&&a>s?u+=e.slice(s,a)+"\n"+e.slice(a+1):u+=e.slice(s),u.slice(1)}function Y(e,t,n){var i,s,a,c,h,l;for(a=0,c=(s=n?e.explicitTypes:e.implicitTypes).length;a<c;a+=1)if(((h=s[a]).instanceOf||h.predicate)&&(!h.instanceOf||"object"==typeof t&&t instanceof h.instanceOf)&&(!h.predicate||h.predicate(t))){if(e.tag=n?h.tag:"?",h.represent){if(l=e.styleMap[h.tag]||h.defaultStyle,"[object Function]"===o.call(h.represent))i=h.represent(t,l);else{if(!u.call(h.represent,l))throw new r("!<"+h.tag+'> tag resolver accepts not "'+l+'" style');i=h.represent[l](t,l)}e.dump=i}return!0}return!1}function $(e,t,n,i,s,a){e.tag=null,e.dump=n,Y(e,n,!1)||Y(e,n,!0);var u=o.call(e.dump);i&&(i=e.flowLevel<0||e.flowLevel>t);var c,l,p="[object Object]"===u||"[object Array]"===u;if(p&&(l=-1!==(c=e.duplicates.indexOf(n))),(null!==e.tag&&"?"!==e.tag||l||2!==e.indent&&t>0)&&(s=!1),l&&e.usedDuplicates[c])e.dump="*ref_"+c;else{if(p&&l&&!e.usedDuplicates[c]&&(e.usedDuplicates[c]=!0),"[object Object]"===u)i&&0!==Object.keys(e.dump).length?(!function(e,t,n,i){var s,a,o,u,c,l,p="",f=e.tag,d=Object.keys(n);if(!0===e.sortKeys)d.sort();else if("function"==typeof e.sortKeys)d.sort(e.sortKeys);else if(e.sortKeys)throw new r("sortKeys must be a boolean or a function");for(s=0,a=d.length;s<a;s+=1)l="",i&&0===s||(l+=L(e,t)),u=n[o=d[s]],$(e,t+1,o,!0,!0,!0)&&((c=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&h===e.dump.charCodeAt(0)?l+="?":l+="? "),l+=e.dump,c&&(l+=L(e,t)),$(e,t+1,u,!0,c)&&(e.dump&&h===e.dump.charCodeAt(0)?l+=":":l+=": ",p+=l+=e.dump));e.tag=f,e.dump=p||"{}"}(e,t,e.dump,s),l&&(e.dump="&ref_"+c+e.dump)):(!function(e,t,n){var i,r,s,a,o,u="",c=e.tag,h=Object.keys(n);for(i=0,r=h.length;i<r;i+=1)o="",0!==i&&(o+=", "),a=n[s=h[i]],$(e,t,s,!1,!1)&&(e.dump.length>1024&&(o+="? "),o+=e.dump+":"+(e.condenseFlow?"":" "),$(e,t,a,!1,!1)&&(u+=o+=e.dump));e.tag=c,e.dump="{"+u+"}"}(e,t,e.dump),l&&(e.dump="&ref_"+c+" "+e.dump));else if("[object Array]"===u)i&&0!==e.dump.length?(!function(e,t,n,i){var r,s,a="",o=e.tag;for(r=0,s=n.length;r<s;r+=1)$(e,t+1,n[r],!0,!0)&&(i&&0===r||(a+=L(e,t)),e.dump&&h===e.dump.charCodeAt(0)?a+="-":a+="- ",a+=e.dump);e.tag=o,e.dump=a||"[]"}(e,t,e.dump,s),l&&(e.dump="&ref_"+c+e.dump)):(!function(e,t,n){var i,r,s="",a=e.tag;for(i=0,r=n.length;i<r;i+=1)$(e,t,n[i],!1,!1)&&(0!==i&&(s+=","+(e.condenseFlow?"":" ")),s+=e.dump);e.tag=a,e.dump="["+s+"]"}(e,t,e.dump),l&&(e.dump="&ref_"+c+" "+e.dump));else{if("[object String]"!==u){if(e.skipInvalid)return!1;throw new r("unacceptable kind of an object to dump "+u)}"?"!==e.tag&&W(e,e.dump,t,a)}null!==e.tag&&"?"!==e.tag&&(e.dump="!<"+e.tag+"> "+e.dump)}return!0}function Z(e,t){var n,i,r=[],s=[];for(function e(t,n,i){var r,s,a;if(null!==t&&"object"==typeof t)if(-1!==(s=n.indexOf(t)))-1===i.indexOf(s)&&i.push(s);else if(n.push(t),Array.isArray(t))for(s=0,a=t.length;s<a;s+=1)e(t[s],n,i);else for(r=Object.keys(t),s=0,a=r.length;s<a;s+=1)e(t[r[s]],n,i)}(e,r,s),n=0,i=s.length;n<i;n+=1)t.duplicates.push(r[s[n]]);t.usedDuplicates=new Array(i)}function Q(e,t){var n=new O(t=t||{});return n.noRefs||Z(e,n),$(n,0,e,!0,!0)?n.dump+"\n":""}e.exports.dump=Q,e.exports.safeDump=function(e,t){return Q(e,i.extend({schema:a},t))}},function(e,t,n){var i;i=function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(3),s=n(8),a=n(15);function o(e,t,n){var a=null,o=function(e,t){n&&n(e,t),a&&a.visit(e,t)},u="function"==typeof n?o:null,c=!1;if(t){c="boolean"==typeof t.comment&&t.comment;var h="boolean"==typeof t.attachComment&&t.attachComment;(c||h)&&((a=new i.CommentHandler).attach=h,t.comment=!0,u=o)}var l,p=!1;t&&"string"==typeof t.sourceType&&(p="module"===t.sourceType),l=t&&"boolean"==typeof t.jsx&&t.jsx?new r.JSXParser(e,t,u):new s.Parser(e,t,u);var f=p?l.parseModule():l.parseScript();return c&&a&&(f.comments=a.comments),l.config.tokens&&(f.tokens=l.tokens),l.config.tolerant&&(f.errors=l.errorHandler.errors),f}t.parse=o,t.parseModule=function(e,t,n){var i=t||{};return i.sourceType="module",o(e,i,n)},t.parseScript=function(e,t,n){var i=t||{};return i.sourceType="script",o(e,i,n)},t.tokenize=function(e,t,n){var i,r=new a.Tokenizer(e,t);i=[];try{for(;;){var s=r.getNextToken();if(!s)break;n&&(s=n(s)),i.push(s)}}catch(e){r.errorHandler.tolerate(e)}return r.errorHandler.tolerant&&(i.errors=r.errors()),i};var u=n(2);t.Syntax=u.Syntax,t.version="4.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=function(){function e(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[]}return e.prototype.insertInnerComments=function(e,t){if(e.type===i.Syntax.BlockStatement&&0===e.body.length){for(var n=[],r=this.leading.length-1;r>=0;--r){var s=this.leading[r];t.end.offset>=s.start&&(n.unshift(s.comment),this.leading.splice(r,1),this.trailing.splice(r,1))}n.length&&(e.innerComments=n)}},e.prototype.findTrailingComments=function(e){var t=[];if(this.trailing.length>0){for(var n=this.trailing.length-1;n>=0;--n){var i=this.trailing[n];i.start>=e.end.offset&&t.unshift(i.comment)}return this.trailing.length=0,t}var r=this.stack[this.stack.length-1];if(r&&r.node.trailingComments){var s=r.node.trailingComments[0];s&&s.range[0]>=e.end.offset&&(t=r.node.trailingComments,delete r.node.trailingComments)}return t},e.prototype.findLeadingComments=function(e){for(var t,n=[];this.stack.length>0;){if(!((s=this.stack[this.stack.length-1])&&s.start>=e.start.offset))break;t=s.node,this.stack.pop()}if(t){for(var i=(t.leadingComments?t.leadingComments.length:0)-1;i>=0;--i){var r=t.leadingComments[i];r.range[1]<=e.start.offset&&(n.unshift(r),t.leadingComments.splice(i,1))}return t.leadingComments&&0===t.leadingComments.length&&delete t.leadingComments,n}for(i=this.leading.length-1;i>=0;--i){var s;(s=this.leading[i]).start<=e.start.offset&&(n.unshift(s.comment),this.leading.splice(i,1))}return n},e.prototype.visitNode=function(e,t){if(!(e.type===i.Syntax.Program&&e.body.length>0)){this.insertInnerComments(e,t);var n=this.findTrailingComments(t),r=this.findLeadingComments(t);r.length>0&&(e.leadingComments=r),n.length>0&&(e.trailingComments=n),this.stack.push({node:e,start:t.start.offset})}},e.prototype.visitComment=function(e,t){var n="L"===e.type[0]?"Line":"Block",i={type:n,value:e.value};if(e.range&&(i.range=e.range),e.loc&&(i.loc=e.loc),this.comments.push(i),this.attach){var r={comment:{type:n,value:e.value,range:[t.start.offset,t.end.offset]},start:t.start.offset};e.loc&&(r.comment.loc=e.loc),e.type=n,this.leading.push(r),this.trailing.push(r)}},e.prototype.visit=function(e,t){"LineComment"===e.type?this.visitComment(e,t):"BlockComment"===e.type?this.visitComment(e,t):this.attach&&this.visitNode(e,t)},e}();t.CommentHandler=r},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForOfStatement:"ForOfStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"}},function(e,t,n){"use strict";var i,r=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var s=n(4),a=n(5),o=n(6),u=n(7),c=n(8),h=n(13),l=n(14);function p(e){var t;switch(e.type){case o.JSXSyntax.JSXIdentifier:t=e.name;break;case o.JSXSyntax.JSXNamespacedName:var n=e;t=p(n.namespace)+":"+p(n.name);break;case o.JSXSyntax.JSXMemberExpression:var i=e;t=p(i.object)+"."+p(i.property)}return t}h.TokenName[100]="JSXIdentifier",h.TokenName[101]="JSXText";var f=function(e){function t(t,n,i){return e.call(this,t,n,i)||this}return r(t,e),t.prototype.parsePrimaryExpression=function(){return this.match("<")?this.parseJSXRoot():e.prototype.parsePrimaryExpression.call(this)},t.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.line,this.scanner.lineStart=this.startMarker.index-this.startMarker.column},t.prototype.finishJSX=function(){this.nextToken()},t.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX("}"),this.config.tokens&&this.tokens.pop()},t.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.createJSXChildNode=function(){return{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.scanXHTMLEntity=function(e){for(var t="&",n=!0,i=!1,r=!1,a=!1;!this.scanner.eof()&&n&&!i;){var o=this.scanner.source[this.scanner.index];if(o===e)break;if(i=";"===o,t+=o,++this.scanner.index,!i)switch(t.length){case 2:r="#"===o;break;case 3:r&&(n=(a="x"===o)||s.Character.isDecimalDigit(o.charCodeAt(0)),r=r&&!a);break;default:n=(n=n&&!(r&&!s.Character.isDecimalDigit(o.charCodeAt(0))))&&!(a&&!s.Character.isHexDigit(o.charCodeAt(0)))}}if(n&&i&&t.length>2){var u=t.substr(1,t.length-2);r&&u.length>1?t=String.fromCharCode(parseInt(u.substr(1),10)):a&&u.length>2?t=String.fromCharCode(parseInt("0"+u.substr(1),16)):r||a||!l.XHTMLEntities[u]||(t=l.XHTMLEntities[u])}return t},t.prototype.lexJSX=function(){var e=this.scanner.source.charCodeAt(this.scanner.index);if(60===e||62===e||47===e||58===e||61===e||123===e||125===e)return{type:7,value:o=this.scanner.source[this.scanner.index++],lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index};if(34===e||39===e){for(var t=this.scanner.index,n=this.scanner.source[this.scanner.index++],i="";!this.scanner.eof();){if((u=this.scanner.source[this.scanner.index++])===n)break;i+="&"===u?this.scanXHTMLEntity(n):u}return{type:8,value:i,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(46===e){var r=this.scanner.source.charCodeAt(this.scanner.index+1),a=this.scanner.source.charCodeAt(this.scanner.index+2),o=46===r&&46===a?"...":".";t=this.scanner.index;return this.scanner.index+=o.length,{type:7,value:o,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(96===e)return{type:10,value:"",lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(s.Character.isIdentifierStart(e)&&92!==e){t=this.scanner.index;for(++this.scanner.index;!this.scanner.eof();){var u=this.scanner.source.charCodeAt(this.scanner.index);if(s.Character.isIdentifierPart(u)&&92!==u)++this.scanner.index;else{if(45!==u)break;++this.scanner.index}}return{type:100,value:this.scanner.source.slice(t,this.scanner.index),lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}return this.scanner.lex()},t.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;var e=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(e)),e},t.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;for(var e=this.scanner.index,t="";!this.scanner.eof();){var n=this.scanner.source[this.scanner.index];if("{"===n||"<"===n)break;++this.scanner.index,t+=n,s.Character.isLineTerminator(n.charCodeAt(0))&&(++this.scanner.lineNumber,"\r"===n&&"\n"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index)}this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart;var i={type:101,value:t,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:e,end:this.scanner.index};return t.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(i)),i},t.prototype.peekJSXToken=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.lexJSX();return this.scanner.restoreState(e),t},t.prototype.expectJSX=function(e){var t=this.nextJSXToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},t.prototype.matchJSX=function(e){var t=this.peekJSXToken();return 7===t.type&&t.value===e},t.prototype.parseJSXIdentifier=function(){var e=this.createJSXNode(),t=this.nextJSXToken();return 100!==t.type&&this.throwUnexpectedToken(t),this.finalize(e,new a.JSXIdentifier(t.value))},t.prototype.parseJSXElementName=function(){var e=this.createJSXNode(),t=this.parseJSXIdentifier();if(this.matchJSX(":")){var n=t;this.expectJSX(":");var i=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXNamespacedName(n,i))}else if(this.matchJSX("."))for(;this.matchJSX(".");){var r=t;this.expectJSX(".");var s=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXMemberExpression(r,s))}return t},t.prototype.parseJSXAttributeName=function(){var e,t=this.createJSXNode(),n=this.parseJSXIdentifier();if(this.matchJSX(":")){var i=n;this.expectJSX(":");var r=this.parseJSXIdentifier();e=this.finalize(t,new a.JSXNamespacedName(i,r))}else e=n;return e},t.prototype.parseJSXStringLiteralAttribute=function(){var e=this.createJSXNode(),t=this.nextJSXToken();8!==t.type&&this.throwUnexpectedToken(t);var n=this.getTokenRaw(t);return this.finalize(e,new u.Literal(t.value,n))},t.prototype.parseJSXExpressionAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.finishJSX(),this.match("}")&&this.tolerateError("JSX attributes must only be assigned a non-empty expression");var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXExpressionContainer(t))},t.prototype.parseJSXAttributeValue=function(){return this.matchJSX("{")?this.parseJSXExpressionAttribute():this.matchJSX("<")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},t.prototype.parseJSXNameValueAttribute=function(){var e=this.createJSXNode(),t=this.parseJSXAttributeName(),n=null;return this.matchJSX("=")&&(this.expectJSX("="),n=this.parseJSXAttributeValue()),this.finalize(e,new a.JSXAttribute(t,n))},t.prototype.parseJSXSpreadAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.expectJSX("..."),this.finishJSX();var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXSpreadAttribute(t))},t.prototype.parseJSXAttributes=function(){for(var e=[];!this.matchJSX("/")&&!this.matchJSX(">");){var t=this.matchJSX("{")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();e.push(t)}return e},t.prototype.parseJSXOpeningElement=function(){var e=this.createJSXNode();this.expectJSX("<");var t=this.parseJSXElementName(),n=this.parseJSXAttributes(),i=this.matchJSX("/");return i&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new a.JSXOpeningElement(t,i,n))},t.prototype.parseJSXBoundaryElement=function(){var e=this.createJSXNode();if(this.expectJSX("<"),this.matchJSX("/")){this.expectJSX("/");var t=this.parseJSXElementName();return this.expectJSX(">"),this.finalize(e,new a.JSXClosingElement(t))}var n=this.parseJSXElementName(),i=this.parseJSXAttributes(),r=this.matchJSX("/");return r&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new a.JSXOpeningElement(n,r,i))},t.prototype.parseJSXEmptyExpression=function(){var e=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.finalize(e,new a.JSXEmptyExpression)},t.prototype.parseJSXExpressionContainer=function(){var e,t=this.createJSXNode();return this.expectJSX("{"),this.matchJSX("}")?(e=this.parseJSXEmptyExpression(),this.expectJSX("}")):(this.finishJSX(),e=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(t,new a.JSXExpressionContainer(e))},t.prototype.parseJSXChildren=function(){for(var e=[];!this.scanner.eof();){var t=this.createJSXChildNode(),n=this.nextJSXText();if(n.start<n.end){var i=this.getTokenRaw(n),r=this.finalize(t,new a.JSXText(n.value,i));e.push(r)}if("{"!==this.scanner.source[this.scanner.index])break;var s=this.parseJSXExpressionContainer();e.push(s)}return e},t.prototype.parseComplexJSXElement=function(e){for(var t=[];!this.scanner.eof();){e.children=e.children.concat(this.parseJSXChildren());var n=this.createJSXChildNode(),i=this.parseJSXBoundaryElement();if(i.type===o.JSXSyntax.JSXOpeningElement){var r=i;if(r.selfClosing){var s=this.finalize(n,new a.JSXElement(r,[],null));e.children.push(s)}else t.push(e),e={node:n,opening:r,closing:null,children:[]}}if(i.type===o.JSXSyntax.JSXClosingElement){e.closing=i;var u=p(e.opening.name);if(u!==p(e.closing.name)&&this.tolerateError("Expected corresponding JSX closing tag for %0",u),!(t.length>0))break;s=this.finalize(e.node,new a.JSXElement(e.opening,e.children,e.closing));(e=t[t.length-1]).children.push(s),t.pop()}}return e},t.prototype.parseJSXElement=function(){var e=this.createJSXNode(),t=this.parseJSXOpeningElement(),n=[],i=null;if(!t.selfClosing){var r=this.parseComplexJSXElement({node:e,opening:t,closing:i,children:n});n=r.children,i=r.closing}return this.finalize(e,new a.JSXElement(t,n,i))},t.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var e=this.parseJSXElement();return this.finishJSX(),e},t.prototype.isStartOfExpression=function(){return e.prototype.isStartOfExpression.call(this)||this.match("<")},t}(c.Parser);t.JSXParser=f},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};t.Character={fromCodePoint:function(e){return e<65536?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10))+String.fromCharCode(56320+(e-65536&1023))},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&n.NonAsciiIdentifierStart.test(t.Character.fromCodePoint(e))},isIdentifierPart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&n.NonAsciiIdentifierPart.test(t.Character.fromCodePoint(e))},isDecimalDigit:function(e){return e>=48&&e<=57},isHexDigit:function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},isOctalDigit:function(e){return e>=48&&e<=55}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(6),r=function(){return function(e){this.type=i.JSXSyntax.JSXClosingElement,this.name=e}}();t.JSXClosingElement=r;var s=function(){return function(e,t,n){this.type=i.JSXSyntax.JSXElement,this.openingElement=e,this.children=t,this.closingElement=n}}();t.JSXElement=s;var a=function(){return function(){this.type=i.JSXSyntax.JSXEmptyExpression}}();t.JSXEmptyExpression=a;var o=function(){return function(e){this.type=i.JSXSyntax.JSXExpressionContainer,this.expression=e}}();t.JSXExpressionContainer=o;var u=function(){return function(e){this.type=i.JSXSyntax.JSXIdentifier,this.name=e}}();t.JSXIdentifier=u;var c=function(){return function(e,t){this.type=i.JSXSyntax.JSXMemberExpression,this.object=e,this.property=t}}();t.JSXMemberExpression=c;var h=function(){return function(e,t){this.type=i.JSXSyntax.JSXAttribute,this.name=e,this.value=t}}();t.JSXAttribute=h;var l=function(){return function(e,t){this.type=i.JSXSyntax.JSXNamespacedName,this.namespace=e,this.name=t}}();t.JSXNamespacedName=l;var p=function(){return function(e,t,n){this.type=i.JSXSyntax.JSXOpeningElement,this.name=e,this.selfClosing=t,this.attributes=n}}();t.JSXOpeningElement=p;var f=function(){return function(e){this.type=i.JSXSyntax.JSXSpreadAttribute,this.argument=e}}();t.JSXSpreadAttribute=f;var d=function(){return function(e,t){this.type=i.JSXSyntax.JSXText,this.value=e,this.raw=t}}();t.JSXText=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSXSyntax={JSXAttribute:"JSXAttribute",JSXClosingElement:"JSXClosingElement",JSXElement:"JSXElement",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXIdentifier:"JSXIdentifier",JSXMemberExpression:"JSXMemberExpression",JSXNamespacedName:"JSXNamespacedName",JSXOpeningElement:"JSXOpeningElement",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=function(){return function(e){this.type=i.Syntax.ArrayExpression,this.elements=e}}();t.ArrayExpression=r;var s=function(){return function(e){this.type=i.Syntax.ArrayPattern,this.elements=e}}();t.ArrayPattern=s;var a=function(){return function(e,t,n){this.type=i.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!1}}();t.ArrowFunctionExpression=a;var o=function(){return function(e,t,n){this.type=i.Syntax.AssignmentExpression,this.operator=e,this.left=t,this.right=n}}();t.AssignmentExpression=o;var u=function(){return function(e,t){this.type=i.Syntax.AssignmentPattern,this.left=e,this.right=t}}();t.AssignmentPattern=u;var c=function(){return function(e,t,n){this.type=i.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!0}}();t.AsyncArrowFunctionExpression=c;var h=function(){return function(e,t,n){this.type=i.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0}}();t.AsyncFunctionDeclaration=h;var l=function(){return function(e,t,n){this.type=i.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0}}();t.AsyncFunctionExpression=l;var p=function(){return function(e){this.type=i.Syntax.AwaitExpression,this.argument=e}}();t.AwaitExpression=p;var f=function(){return function(e,t,n){var r="||"===e||"&&"===e;this.type=r?i.Syntax.LogicalExpression:i.Syntax.BinaryExpression,this.operator=e,this.left=t,this.right=n}}();t.BinaryExpression=f;var d=function(){return function(e){this.type=i.Syntax.BlockStatement,this.body=e}}();t.BlockStatement=d;var m=function(){return function(e){this.type=i.Syntax.BreakStatement,this.label=e}}();t.BreakStatement=m;var x=function(){return function(e,t){this.type=i.Syntax.CallExpression,this.callee=e,this.arguments=t}}();t.CallExpression=x;var g=function(){return function(e,t){this.type=i.Syntax.CatchClause,this.param=e,this.body=t}}();t.CatchClause=g;var y=function(){return function(e){this.type=i.Syntax.ClassBody,this.body=e}}();t.ClassBody=y;var D=function(){return function(e,t,n){this.type=i.Syntax.ClassDeclaration,this.id=e,this.superClass=t,this.body=n}}();t.ClassDeclaration=D;var v=function(){return function(e,t,n){this.type=i.Syntax.ClassExpression,this.id=e,this.superClass=t,this.body=n}}();t.ClassExpression=v;var E=function(){return function(e,t){this.type=i.Syntax.MemberExpression,this.computed=!0,this.object=e,this.property=t}}();t.ComputedMemberExpression=E;var C=function(){return function(e,t,n){this.type=i.Syntax.ConditionalExpression,this.test=e,this.consequent=t,this.alternate=n}}();t.ConditionalExpression=C;var A=function(){return function(e){this.type=i.Syntax.ContinueStatement,this.label=e}}();t.ContinueStatement=A;var S=function(){return function(){this.type=i.Syntax.DebuggerStatement}}();t.DebuggerStatement=S;var w=function(){return function(e,t){this.type=i.Syntax.ExpressionStatement,this.expression=e,this.directive=t}}();t.Directive=w;var F=function(){return function(e,t){this.type=i.Syntax.DoWhileStatement,this.body=e,this.test=t}}();t.DoWhileStatement=F;var b=function(){return function(){this.type=i.Syntax.EmptyStatement}}();t.EmptyStatement=b;var k=function(){return function(e){this.type=i.Syntax.ExportAllDeclaration,this.source=e}}();t.ExportAllDeclaration=k;var B=function(){return function(e){this.type=i.Syntax.ExportDefaultDeclaration,this.declaration=e}}();t.ExportDefaultDeclaration=B;var T=function(){return function(e,t,n){this.type=i.Syntax.ExportNamedDeclaration,this.declaration=e,this.specifiers=t,this.source=n}}();t.ExportNamedDeclaration=T;var N=function(){return function(e,t){this.type=i.Syntax.ExportSpecifier,this.exported=t,this.local=e}}();t.ExportSpecifier=N;var I=function(){return function(e){this.type=i.Syntax.ExpressionStatement,this.expression=e}}();t.ExpressionStatement=I;var M=function(){return function(e,t,n){this.type=i.Syntax.ForInStatement,this.left=e,this.right=t,this.body=n,this.each=!1}}();t.ForInStatement=M;var O=function(){return function(e,t,n){this.type=i.Syntax.ForOfStatement,this.left=e,this.right=t,this.body=n}}();t.ForOfStatement=O;var P=function(){return function(e,t,n,r){this.type=i.Syntax.ForStatement,this.init=e,this.test=t,this.update=n,this.body=r}}();t.ForStatement=P;var L=function(){return function(e,t,n,r){this.type=i.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=r,this.expression=!1,this.async=!1}}();t.FunctionDeclaration=L;var j=function(){return function(e,t,n,r){this.type=i.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=r,this.expression=!1,this.async=!1}}();t.FunctionExpression=j;var J=function(){return function(e){this.type=i.Syntax.Identifier,this.name=e}}();t.Identifier=J;var U=function(){return function(e,t,n){this.type=i.Syntax.IfStatement,this.test=e,this.consequent=t,this.alternate=n}}();t.IfStatement=U;var z=function(){return function(e,t){this.type=i.Syntax.ImportDeclaration,this.specifiers=e,this.source=t}}();t.ImportDeclaration=z;var X=function(){return function(e){this.type=i.Syntax.ImportDefaultSpecifier,this.local=e}}();t.ImportDefaultSpecifier=X;var R=function(){return function(e){this.type=i.Syntax.ImportNamespaceSpecifier,this.local=e}}();t.ImportNamespaceSpecifier=R;var K=function(){return function(e,t){this.type=i.Syntax.ImportSpecifier,this.local=e,this.imported=t}}();t.ImportSpecifier=K;var _=function(){return function(e,t){this.type=i.Syntax.LabeledStatement,this.label=e,this.body=t}}();t.LabeledStatement=_;var H=function(){return function(e,t){this.type=i.Syntax.Literal,this.value=e,this.raw=t}}();t.Literal=H;var W=function(){return function(e,t){this.type=i.Syntax.MetaProperty,this.meta=e,this.property=t}}();t.MetaProperty=W;var V=function(){return function(e,t,n,r,s){this.type=i.Syntax.MethodDefinition,this.key=e,this.computed=t,this.value=n,this.kind=r,this.static=s}}();t.MethodDefinition=V;var q=function(){return function(e){this.type=i.Syntax.Program,this.body=e,this.sourceType="module"}}();t.Module=q;var G=function(){return function(e,t){this.type=i.Syntax.NewExpression,this.callee=e,this.arguments=t}}();t.NewExpression=G;var Y=function(){return function(e){this.type=i.Syntax.ObjectExpression,this.properties=e}}();t.ObjectExpression=Y;var $=function(){return function(e){this.type=i.Syntax.ObjectPattern,this.properties=e}}();t.ObjectPattern=$;var Z=function(){return function(e,t,n,r,s,a){this.type=i.Syntax.Property,this.key=t,this.computed=n,this.value=r,this.kind=e,this.method=s,this.shorthand=a}}();t.Property=Z;var Q=function(){return function(e,t,n,r){this.type=i.Syntax.Literal,this.value=e,this.raw=t,this.regex={pattern:n,flags:r}}}();t.RegexLiteral=Q;var ee=function(){return function(e){this.type=i.Syntax.RestElement,this.argument=e}}();t.RestElement=ee;var te=function(){return function(e){this.type=i.Syntax.ReturnStatement,this.argument=e}}();t.ReturnStatement=te;var ne=function(){return function(e){this.type=i.Syntax.Program,this.body=e,this.sourceType="script"}}();t.Script=ne;var ie=function(){return function(e){this.type=i.Syntax.SequenceExpression,this.expressions=e}}();t.SequenceExpression=ie;var re=function(){return function(e){this.type=i.Syntax.SpreadElement,this.argument=e}}();t.SpreadElement=re;var se=function(){return function(e,t){this.type=i.Syntax.MemberExpression,this.computed=!1,this.object=e,this.property=t}}();t.StaticMemberExpression=se;var ae=function(){return function(){this.type=i.Syntax.Super}}();t.Super=ae;var oe=function(){return function(e,t){this.type=i.Syntax.SwitchCase,this.test=e,this.consequent=t}}();t.SwitchCase=oe;var ue=function(){return function(e,t){this.type=i.Syntax.SwitchStatement,this.discriminant=e,this.cases=t}}();t.SwitchStatement=ue;var ce=function(){return function(e,t){this.type=i.Syntax.TaggedTemplateExpression,this.tag=e,this.quasi=t}}();t.TaggedTemplateExpression=ce;var he=function(){return function(e,t){this.type=i.Syntax.TemplateElement,this.value=e,this.tail=t}}();t.TemplateElement=he;var le=function(){return function(e,t){this.type=i.Syntax.TemplateLiteral,this.quasis=e,this.expressions=t}}();t.TemplateLiteral=le;var pe=function(){return function(){this.type=i.Syntax.ThisExpression}}();t.ThisExpression=pe;var fe=function(){return function(e){this.type=i.Syntax.ThrowStatement,this.argument=e}}();t.ThrowStatement=fe;var de=function(){return function(e,t,n){this.type=i.Syntax.TryStatement,this.block=e,this.handler=t,this.finalizer=n}}();t.TryStatement=de;var me=function(){return function(e,t){this.type=i.Syntax.UnaryExpression,this.operator=e,this.argument=t,this.prefix=!0}}();t.UnaryExpression=me;var xe=function(){return function(e,t,n){this.type=i.Syntax.UpdateExpression,this.operator=e,this.argument=t,this.prefix=n}}();t.UpdateExpression=xe;var ge=function(){return function(e,t){this.type=i.Syntax.VariableDeclaration,this.declarations=e,this.kind=t}}();t.VariableDeclaration=ge;var ye=function(){return function(e,t){this.type=i.Syntax.VariableDeclarator,this.id=e,this.init=t}}();t.VariableDeclarator=ye;var De=function(){return function(e,t){this.type=i.Syntax.WhileStatement,this.test=e,this.body=t}}();t.WhileStatement=De;var ve=function(){return function(e,t){this.type=i.Syntax.WithStatement,this.object=e,this.body=t}}();t.WithStatement=ve;var Ee=function(){return function(e,t){this.type=i.Syntax.YieldExpression,this.argument=e,this.delegate=t}}();t.YieldExpression=Ee},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(9),r=n(10),s=n(11),a=n(7),o=n(12),u=n(2),c=n(13),h=function(){function e(e,t,n){void 0===t&&(t={}),this.config={range:"boolean"==typeof t.range&&t.range,loc:"boolean"==typeof t.loc&&t.loc,source:null,tokens:"boolean"==typeof t.tokens&&t.tokens,comment:"boolean"==typeof t.comment&&t.comment,tolerant:"boolean"==typeof t.tolerant&&t.tolerant},this.config.loc&&t.source&&null!==t.source&&(this.config.source=String(t.source)),this.delegate=n,this.errorHandler=new r.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new o.Scanner(e,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={")":0,";":0,",":0,"=":0,"]":0,"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":11,"/":11,"%":11},this.lookahead={type:2,value:"",lineNumber:this.scanner.lineNumber,lineStart:0,start:0,end:0},this.hasLineTerminator=!1,this.context={isModule:!1,await:!1,allowIn:!0,allowStrictDirective:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:!1},this.tokens=[],this.startMarker={index:0,line:this.scanner.lineNumber,column:0},this.lastMarker={index:0,line:this.scanner.lineNumber,column:0},this.nextToken(),this.lastMarker={index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}return e.prototype.throwError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Array.prototype.slice.call(arguments,1),s=e.replace(/%(\d)/g,function(e,t){return i.assert(t<r.length,"Message reference must be in range"),r[t]}),a=this.lastMarker.index,o=this.lastMarker.line,u=this.lastMarker.column+1;throw this.errorHandler.createError(a,o,u,s)},e.prototype.tolerateError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Array.prototype.slice.call(arguments,1),s=e.replace(/%(\d)/g,function(e,t){return i.assert(t<r.length,"Message reference must be in range"),r[t]}),a=this.lastMarker.index,o=this.scanner.lineNumber,u=this.lastMarker.column+1;this.errorHandler.tolerateError(a,o,u,s)},e.prototype.unexpectedTokenError=function(e,t){var n,i=t||s.Messages.UnexpectedToken;if(e?(t||(i=2===e.type?s.Messages.UnexpectedEOS:3===e.type?s.Messages.UnexpectedIdentifier:6===e.type?s.Messages.UnexpectedNumber:8===e.type?s.Messages.UnexpectedString:10===e.type?s.Messages.UnexpectedTemplate:s.Messages.UnexpectedToken,4===e.type&&(this.scanner.isFutureReservedWord(e.value)?i=s.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(e.value)&&(i=s.Messages.StrictReservedWord))),n=e.value):n="ILLEGAL",i=i.replace("%0",n),e&&"number"==typeof e.lineNumber){var r=e.start,a=e.lineNumber,o=this.lastMarker.index-this.lastMarker.column,u=e.start-o+1;return this.errorHandler.createError(r,a,u,i)}r=this.lastMarker.index,a=this.lastMarker.line,u=this.lastMarker.column+1;return this.errorHandler.createError(r,a,u,i)},e.prototype.throwUnexpectedToken=function(e,t){throw this.unexpectedTokenError(e,t)},e.prototype.tolerateUnexpectedToken=function(e,t){this.errorHandler.tolerate(this.unexpectedTokenError(e,t))},e.prototype.collectComments=function(){if(this.config.comment){var e=this.scanner.scanComments();if(e.length>0&&this.delegate)for(var t=0;t<e.length;++t){var n=e[t],i=void 0;i={type:n.multiLine?"BlockComment":"LineComment",value:this.scanner.source.slice(n.slice[0],n.slice[1])},this.config.range&&(i.range=n.range),this.config.loc&&(i.loc=n.loc);var r={start:{line:n.loc.start.line,column:n.loc.start.column,offset:n.range[0]},end:{line:n.loc.end.line,column:n.loc.end.column,offset:n.range[1]}};this.delegate(i,r)}}else this.scanner.scanComments()},e.prototype.getTokenRaw=function(e){return this.scanner.source.slice(e.start,e.end)},e.prototype.convertToken=function(e){var t={type:c.TokenName[e.type],value:this.getTokenRaw(e)};if(this.config.range&&(t.range=[e.start,e.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.line,column:this.startMarker.column},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),9===e.type){var n=e.pattern,i=e.flags;t.regex={pattern:n,flags:i}}return t},e.prototype.nextToken=function(){var e=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.collectComments(),this.scanner.index!==this.startMarker.index&&(this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart);var t=this.scanner.lex();return this.hasLineTerminator=e.lineNumber!==t.lineNumber,t&&this.context.strict&&3===t.type&&this.scanner.isStrictModeReservedWord(t.value)&&(t.type=4),this.lookahead=t,this.config.tokens&&2!==t.type&&this.tokens.push(this.convertToken(t)),e},e.prototype.nextRegexToken=function(){this.collectComments();var e=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(e))),this.lookahead=e,this.nextToken(),e},e.prototype.createNode=function(){return{index:this.startMarker.index,line:this.startMarker.line,column:this.startMarker.column}},e.prototype.startNode=function(e){return{index:e.start,line:e.lineNumber,column:e.start-e.lineStart}},e.prototype.finalize=function(e,t){if(this.config.range&&(t.range=[e.index,this.lastMarker.index]),this.config.loc&&(t.loc={start:{line:e.line,column:e.column},end:{line:this.lastMarker.line,column:this.lastMarker.column}},this.config.source&&(t.loc.source=this.config.source)),this.delegate){var n={start:{line:e.line,column:e.column,offset:e.index},end:{line:this.lastMarker.line,column:this.lastMarker.column,offset:this.lastMarker.index}};this.delegate(t,n)}return t},e.prototype.expect=function(e){var t=this.nextToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var e=this.lookahead;7===e.type&&","===e.value?this.nextToken():7===e.type&&";"===e.value?(this.nextToken(),this.tolerateUnexpectedToken(e)):this.tolerateUnexpectedToken(e,s.Messages.UnexpectedToken)}else this.expect(",")},e.prototype.expectKeyword=function(e){var t=this.nextToken();4===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.match=function(e){return 7===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchKeyword=function(e){return 4===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchContextualKeyword=function(e){return 3===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchAssign=function(){if(7!==this.lookahead.type)return!1;var e=this.lookahead.value;return"="===e||"*="===e||"**="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e},e.prototype.isolateCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,i=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var r=e.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=t,this.context.isAssignmentTarget=n,this.context.firstCoverInitializedNameError=i,r},e.prototype.inheritCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,i=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var r=e.call(this);return this.context.isBindingElement=this.context.isBindingElement&&t,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&n,this.context.firstCoverInitializedNameError=i||this.context.firstCoverInitializedNameError,r},e.prototype.consumeSemicolon=function(){this.match(";")?this.nextToken():this.hasLineTerminator||(2===this.lookahead.type||this.match("}")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.line=this.startMarker.line,this.lastMarker.column=this.startMarker.column)},e.prototype.parsePrimaryExpression=function(){var e,t,n,i=this.createNode();switch(this.lookahead.type){case 3:(this.context.isModule||this.context.await)&&"await"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),e=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(i,new a.Identifier(this.nextToken().value));break;case 6:case 8:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,s.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.Literal(t.value,n));break;case 1:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.Literal("true"===t.value,n));break;case 5:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.Literal(null,n));break;case 10:e=this.parseTemplateLiteral();break;case 7:switch(this.lookahead.value){case"(":this.context.isBindingElement=!1,e=this.inheritCoverGrammar(this.parseGroupExpression);break;case"[":e=this.inheritCoverGrammar(this.parseArrayInitializer);break;case"{":e=this.inheritCoverGrammar(this.parseObjectInitializer);break;case"/":case"/=":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,t=this.nextRegexToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.RegexLiteral(t.regex,n,t.pattern,t.flags));break;default:e=this.throwUnexpectedToken(this.nextToken())}break;case 4:!this.context.strict&&this.context.allowYield&&this.matchKeyword("yield")?e=this.parseIdentifierName():!this.context.strict&&this.matchKeyword("let")?e=this.finalize(i,new a.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword("function")?e=this.parseFunctionExpression():this.matchKeyword("this")?(this.nextToken(),e=this.finalize(i,new a.ThisExpression)):e=this.matchKeyword("class")?this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:e=this.throwUnexpectedToken(this.nextToken())}return e},e.prototype.parseSpreadElement=function(){var e=this.createNode();this.expect("...");var t=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(e,new a.SpreadElement(t))},e.prototype.parseArrayInitializer=function(){var e=this.createNode(),t=[];for(this.expect("[");!this.match("]");)if(this.match(","))this.nextToken(),t.push(null);else if(this.match("...")){var n=this.parseSpreadElement();this.match("]")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(",")),t.push(n)}else t.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match("]")||this.expect(",");return this.expect("]"),this.finalize(e,new a.ArrayExpression(t))},e.prototype.parsePropertyMethod=function(e){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var t=this.context.strict,n=this.context.allowStrictDirective;this.context.allowStrictDirective=e.simple;var i=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&e.firstRestricted&&this.tolerateUnexpectedToken(e.firstRestricted,e.message),this.context.strict&&e.stricted&&this.tolerateUnexpectedToken(e.stricted,e.message),this.context.strict=t,this.context.allowStrictDirective=n,i},e.prototype.parsePropertyMethodFunction=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!1;var n=this.parseFormalParameters(),i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!1))},e.prototype.parsePropertyMethodAsyncFunction=function(){var e=this.createNode(),t=this.context.allowYield,n=this.context.await;this.context.allowYield=!1,this.context.await=!0;var i=this.parseFormalParameters(),r=this.parsePropertyMethod(i);return this.context.allowYield=t,this.context.await=n,this.finalize(e,new a.AsyncFunctionExpression(null,i.params,r))},e.prototype.parseObjectPropertyKey=function(){var e,t=this.createNode(),n=this.nextToken();switch(n.type){case 8:case 6:this.context.strict&&n.octal&&this.tolerateUnexpectedToken(n,s.Messages.StrictOctalLiteral);var i=this.getTokenRaw(n);e=this.finalize(t,new a.Literal(n.value,i));break;case 3:case 1:case 5:case 4:e=this.finalize(t,new a.Identifier(n.value));break;case 7:"["===n.value?(e=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect("]")):e=this.throwUnexpectedToken(n);break;default:e=this.throwUnexpectedToken(n)}return e},e.prototype.isPropertyKey=function(e,t){return e.type===u.Syntax.Identifier&&e.name===t||e.type===u.Syntax.Literal&&e.value===t},e.prototype.parseObjectProperty=function(e){var t,n=this.createNode(),i=this.lookahead,r=null,o=null,u=!1,c=!1,h=!1,l=!1;if(3===i.type){var p=i.value;this.nextToken(),u=this.match("["),r=(l=!(this.hasLineTerminator||"async"!==p||this.match(":")||this.match("(")||this.match("*")))?this.parseObjectPropertyKey():this.finalize(n,new a.Identifier(p))}else this.match("*")?this.nextToken():(u=this.match("["),r=this.parseObjectPropertyKey());var f=this.qualifiedPropertyName(this.lookahead);if(3===i.type&&!l&&"get"===i.value&&f)t="get",u=this.match("["),r=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod();else if(3===i.type&&!l&&"set"===i.value&&f)t="set",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseSetterMethod();else if(7===i.type&&"*"===i.value&&f)t="init",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),c=!0;else if(r||this.throwUnexpectedToken(this.lookahead),t="init",this.match(":")&&!l)!u&&this.isPropertyKey(r,"__proto__")&&(e.value&&this.tolerateError(s.Messages.DuplicateProtoProperty),e.value=!0),this.nextToken(),o=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match("("))o=l?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),c=!0;else if(3===i.type){p=this.finalize(n,new a.Identifier(i.value));if(this.match("=")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),h=!0;var d=this.isolateCoverGrammar(this.parseAssignmentExpression);o=this.finalize(n,new a.AssignmentPattern(p,d))}else h=!0,o=p}else this.throwUnexpectedToken(this.nextToken());return this.finalize(n,new a.Property(t,r,u,o,c,h))},e.prototype.parseObjectInitializer=function(){var e=this.createNode();this.expect("{");for(var t=[],n={value:!1};!this.match("}");)t.push(this.parseObjectProperty(n)),this.match("}")||this.expectCommaSeparator();return this.expect("}"),this.finalize(e,new a.ObjectExpression(t))},e.prototype.parseTemplateHead=function(){i.assert(this.lookahead.head,"Template literal must start with a template head");var e=this.createNode(),t=this.nextToken(),n=t.value,r=t.cooked;return this.finalize(e,new a.TemplateElement({raw:n,cooked:r},t.tail))},e.prototype.parseTemplateElement=function(){10!==this.lookahead.type&&this.throwUnexpectedToken();var e=this.createNode(),t=this.nextToken(),n=t.value,i=t.cooked;return this.finalize(e,new a.TemplateElement({raw:n,cooked:i},t.tail))},e.prototype.parseTemplateLiteral=function(){var e=this.createNode(),t=[],n=[],i=this.parseTemplateHead();for(n.push(i);!i.tail;)t.push(this.parseExpression()),i=this.parseTemplateElement(),n.push(i);return this.finalize(e,new a.TemplateLiteral(n,t))},e.prototype.reinterpretExpressionAsPattern=function(e){switch(e.type){case u.Syntax.Identifier:case u.Syntax.MemberExpression:case u.Syntax.RestElement:case u.Syntax.AssignmentPattern:break;case u.Syntax.SpreadElement:e.type=u.Syntax.RestElement,this.reinterpretExpressionAsPattern(e.argument);break;case u.Syntax.ArrayExpression:e.type=u.Syntax.ArrayPattern;for(var t=0;t<e.elements.length;t++)null!==e.elements[t]&&this.reinterpretExpressionAsPattern(e.elements[t]);break;case u.Syntax.ObjectExpression:e.type=u.Syntax.ObjectPattern;for(t=0;t<e.properties.length;t++)this.reinterpretExpressionAsPattern(e.properties[t].value);break;case u.Syntax.AssignmentExpression:e.type=u.Syntax.AssignmentPattern,delete e.operator,this.reinterpretExpressionAsPattern(e.left)}},e.prototype.parseGroupExpression=function(){var e;if(this.expect("("),this.match(")"))this.nextToken(),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[],async:!1};else{var t=this.lookahead,n=[];if(this.match("..."))e=this.parseRestElement(n),this.expect(")"),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[e],async:!1};else{var i=!1;if(this.context.isBindingElement=!0,e=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(",")){var r=[];for(this.context.isAssignmentTarget=!1,r.push(e);2!==this.lookahead.type&&this.match(",");){if(this.nextToken(),this.match(")")){this.nextToken();for(var s=0;s<r.length;s++)this.reinterpretExpressionAsPattern(r[s]);i=!0,e={type:"ArrowParameterPlaceHolder",params:r,async:!1}}else if(this.match("...")){this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),r.push(this.parseRestElement(n)),this.expect(")"),this.match("=>")||this.expect("=>"),this.context.isBindingElement=!1;for(s=0;s<r.length;s++)this.reinterpretExpressionAsPattern(r[s]);i=!0,e={type:"ArrowParameterPlaceHolder",params:r,async:!1}}else r.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(i)break}i||(e=this.finalize(this.startNode(t),new a.SequenceExpression(r)))}if(!i){if(this.expect(")"),this.match("=>")&&(e.type===u.Syntax.Identifier&&"yield"===e.name&&(i=!0,e={type:"ArrowParameterPlaceHolder",params:[e],async:!1}),!i)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),e.type===u.Syntax.SequenceExpression)for(s=0;s<e.expressions.length;s++)this.reinterpretExpressionAsPattern(e.expressions[s]);else this.reinterpretExpressionAsPattern(e);e={type:"ArrowParameterPlaceHolder",params:e.type===u.Syntax.SequenceExpression?e.expressions:[e],async:!1}}this.context.isBindingElement=!1}}}return e},e.prototype.parseArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.isIdentifierName=function(e){return 3===e.type||4===e.type||1===e.type||5===e.type},e.prototype.parseIdentifierName=function(){var e=this.createNode(),t=this.nextToken();return this.isIdentifierName(t)||this.throwUnexpectedToken(t),this.finalize(e,new a.Identifier(t.value))},e.prototype.parseNewExpression=function(){var e,t=this.createNode(),n=this.parseIdentifierName();if(i.assert("new"===n.name,"New expression must start with `new`"),this.match("."))if(this.nextToken(),3===this.lookahead.type&&this.context.inFunctionBody&&"target"===this.lookahead.value){var r=this.parseIdentifierName();e=new a.MetaProperty(n,r)}else this.throwUnexpectedToken(this.lookahead);else{var s=this.isolateCoverGrammar(this.parseLeftHandSideExpression),o=this.match("(")?this.parseArguments():[];e=new a.NewExpression(s,o),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return this.finalize(t,e)},e.prototype.parseAsyncArgument=function(){var e=this.parseAssignmentExpression();return this.context.firstCoverInitializedNameError=null,e},e.prototype.parseAsyncArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAsyncArgument);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.parseLeftHandSideExpressionAllowCall=function(){var e,t=this.lookahead,n=this.matchContextualKeyword("async"),i=this.context.allowIn;for(this.context.allowIn=!0,this.matchKeyword("super")&&this.context.inFunctionBody?(e=this.createNode(),this.nextToken(),e=this.finalize(e,new a.Super),this.match("(")||this.match(".")||this.match("[")||this.throwUnexpectedToken(this.lookahead)):e=this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var r=this.parseIdentifierName();e=this.finalize(this.startNode(t),new a.StaticMemberExpression(e,r))}else if(this.match("(")){var s=n&&t.lineNumber===this.lookahead.lineNumber;this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var o=s?this.parseAsyncArguments():this.parseArguments();if(e=this.finalize(this.startNode(t),new a.CallExpression(e,o)),s&&this.match("=>")){for(var u=0;u<o.length;++u)this.reinterpretExpressionAsPattern(o[u]);e={type:"ArrowParameterPlaceHolder",params:o,async:!0}}}else if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");r=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),e=this.finalize(this.startNode(t),new a.ComputedMemberExpression(e,r))}else{if(10!==this.lookahead.type||!this.lookahead.head)break;var c=this.parseTemplateLiteral();e=this.finalize(this.startNode(t),new a.TaggedTemplateExpression(e,c))}return this.context.allowIn=i,e},e.prototype.parseSuper=function(){var e=this.createNode();return this.expectKeyword("super"),this.match("[")||this.match(".")||this.throwUnexpectedToken(this.lookahead),this.finalize(e,new a.Super)},e.prototype.parseLeftHandSideExpression=function(){i.assert(this.context.allowIn,"callee of new expression always allow in keyword.");for(var e=this.startNode(this.lookahead),t=this.matchKeyword("super")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var n=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),t=this.finalize(e,new a.ComputedMemberExpression(t,n))}else if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");n=this.parseIdentifierName();t=this.finalize(e,new a.StaticMemberExpression(t,n))}else{if(10!==this.lookahead.type||!this.lookahead.head)break;var r=this.parseTemplateLiteral();t=this.finalize(e,new a.TaggedTemplateExpression(t,r))}return t},e.prototype.parseUpdateExpression=function(){var e,t=this.lookahead;if(this.match("++")||this.match("--")){var n=this.startNode(t),i=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(s.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment);var r=!0;e=this.finalize(n,new a.UpdateExpression(i.value,e,r)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else if(e=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&7===this.lookahead.type&&(this.match("++")||this.match("--"))){this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(s.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var o=this.nextToken().value;r=!1;e=this.finalize(this.startNode(t),new a.UpdateExpression(o,e,r))}return e},e.prototype.parseAwaitExpression=function(){var e=this.createNode();this.nextToken();var t=this.parseUnaryExpression();return this.finalize(e,new a.AwaitExpression(t))},e.prototype.parseUnaryExpression=function(){var e;if(this.match("+")||this.match("-")||this.match("~")||this.match("!")||this.matchKeyword("delete")||this.matchKeyword("void")||this.matchKeyword("typeof")){var t=this.startNode(this.lookahead),n=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),e=this.finalize(t,new a.UnaryExpression(n.value,e)),this.context.strict&&"delete"===e.operator&&e.argument.type===u.Syntax.Identifier&&this.tolerateError(s.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else e=this.context.await&&this.matchContextualKeyword("await")?this.parseAwaitExpression():this.parseUpdateExpression();return e},e.prototype.parseExponentiationExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseUnaryExpression);if(t.type!==u.Syntax.UnaryExpression&&this.match("**")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var n=t,i=this.isolateCoverGrammar(this.parseExponentiationExpression);t=this.finalize(this.startNode(e),new a.BinaryExpression("**",n,i))}return t},e.prototype.binaryPrecedence=function(e){var t=e.value;return 7===e.type?this.operatorPrecedence[t]||0:4===e.type&&("instanceof"===t||this.context.allowIn&&"in"===t)?7:0},e.prototype.parseBinaryExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseExponentiationExpression),n=this.lookahead,i=this.binaryPrecedence(n);if(i>0){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var r=[e,this.lookahead],s=t,o=this.isolateCoverGrammar(this.parseExponentiationExpression),u=[s,n.value,o],c=[i];!((i=this.binaryPrecedence(this.lookahead))<=0);){for(;u.length>2&&i<=c[c.length-1];){o=u.pop();var h=u.pop();c.pop(),s=u.pop(),r.pop();var l=this.startNode(r[r.length-1]);u.push(this.finalize(l,new a.BinaryExpression(h,s,o)))}u.push(this.nextToken().value),c.push(i),r.push(this.lookahead),u.push(this.isolateCoverGrammar(this.parseExponentiationExpression))}var p=u.length-1;for(t=u[p],r.pop();p>1;){l=this.startNode(r.pop()),h=u[p-1];t=this.finalize(l,new a.BinaryExpression(h,u[p-2],t)),p-=2}}return t},e.prototype.parseConditionalExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match("?")){this.nextToken();var n=this.context.allowIn;this.context.allowIn=!0;var i=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=n,this.expect(":");var r=this.isolateCoverGrammar(this.parseAssignmentExpression);t=this.finalize(this.startNode(e),new a.ConditionalExpression(t,i,r)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return t},e.prototype.checkPatternParam=function(e,t){switch(t.type){case u.Syntax.Identifier:this.validateParam(e,t,t.name);break;case u.Syntax.RestElement:this.checkPatternParam(e,t.argument);break;case u.Syntax.AssignmentPattern:this.checkPatternParam(e,t.left);break;case u.Syntax.ArrayPattern:for(var n=0;n<t.elements.length;n++)null!==t.elements[n]&&this.checkPatternParam(e,t.elements[n]);break;case u.Syntax.ObjectPattern:for(n=0;n<t.properties.length;n++)this.checkPatternParam(e,t.properties[n].value)}e.simple=e.simple&&t instanceof a.Identifier},e.prototype.reinterpretAsCoverFormalsList=function(e){var t,n=[e],i=!1;switch(e.type){case u.Syntax.Identifier:break;case"ArrowParameterPlaceHolder":n=e.params,i=e.async;break;default:return null}t={simple:!0,paramSet:{}};for(var r=0;r<n.length;++r){(a=n[r]).type===u.Syntax.AssignmentPattern?a.right.type===u.Syntax.YieldExpression&&(a.right.argument&&this.throwUnexpectedToken(this.lookahead),a.right.type=u.Syntax.Identifier,a.right.name="yield",delete a.right.argument,delete a.right.delegate):i&&a.type===u.Syntax.Identifier&&"await"===a.name&&this.throwUnexpectedToken(this.lookahead),this.checkPatternParam(t,a),n[r]=a}if(this.context.strict||!this.context.allowYield)for(r=0;r<n.length;++r){var a;(a=n[r]).type===u.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead)}if(t.message===s.Messages.StrictParamDupe){var o=this.context.strict?t.stricted:t.firstRestricted;this.throwUnexpectedToken(o,t.message)}return{simple:t.simple,params:n,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.parseAssignmentExpression=function(){var e;if(!this.context.allowYield&&this.matchKeyword("yield"))e=this.parseYieldExpression();else{var t=this.lookahead,n=t;if(e=this.parseConditionalExpression(),3===n.type&&n.lineNumber===this.lookahead.lineNumber&&"async"===n.value&&(3===this.lookahead.type||this.matchKeyword("yield"))){var i=this.parsePrimaryExpression();this.reinterpretExpressionAsPattern(i),e={type:"ArrowParameterPlaceHolder",params:[i],async:!0}}if("ArrowParameterPlaceHolder"===e.type||this.match("=>")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var r=e.async,o=this.reinterpretAsCoverFormalsList(e);if(o){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var c=this.context.strict,h=this.context.allowStrictDirective;this.context.allowStrictDirective=o.simple;var l=this.context.allowYield,p=this.context.await;this.context.allowYield=!0,this.context.await=r;var f=this.startNode(t);this.expect("=>");var d=void 0;if(this.match("{")){var m=this.context.allowIn;this.context.allowIn=!0,d=this.parseFunctionSourceElements(),this.context.allowIn=m}else d=this.isolateCoverGrammar(this.parseAssignmentExpression);var x=d.type!==u.Syntax.BlockStatement;this.context.strict&&o.firstRestricted&&this.throwUnexpectedToken(o.firstRestricted,o.message),this.context.strict&&o.stricted&&this.tolerateUnexpectedToken(o.stricted,o.message),e=r?this.finalize(f,new a.AsyncArrowFunctionExpression(o.params,d,x)):this.finalize(f,new a.ArrowFunctionExpression(o.params,d,x)),this.context.strict=c,this.context.allowStrictDirective=h,this.context.allowYield=l,this.context.await=p}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment),this.context.strict&&e.type===u.Syntax.Identifier){var g=e;this.scanner.isRestrictedWord(g.name)&&this.tolerateUnexpectedToken(n,s.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(g.name)&&this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord)}this.match("=")?this.reinterpretExpressionAsPattern(e):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1);var y=(n=this.nextToken()).value,D=this.isolateCoverGrammar(this.parseAssignmentExpression);e=this.finalize(this.startNode(t),new a.AssignmentExpression(y,e,D)),this.context.firstCoverInitializedNameError=null}}return e},e.prototype.parseExpression=function(){var e=this.lookahead,t=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(",")){var n=[];for(n.push(t);2!==this.lookahead.type&&this.match(",");)this.nextToken(),n.push(this.isolateCoverGrammar(this.parseAssignmentExpression));t=this.finalize(this.startNode(e),new a.SequenceExpression(n))}return t},e.prototype.parseStatementListItem=function(){var e;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,4===this.lookahead.type)switch(this.lookahead.value){case"export":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,s.Messages.IllegalExportDeclaration),e=this.parseExportDeclaration();break;case"import":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,s.Messages.IllegalImportDeclaration),e=this.parseImportDeclaration();break;case"const":e=this.parseLexicalDeclaration({inFor:!1});break;case"function":e=this.parseFunctionDeclaration();break;case"class":e=this.parseClassDeclaration();break;case"let":e=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:e=this.parseStatement()}else e=this.parseStatement();return e},e.prototype.parseBlock=function(){var e=this.createNode();this.expect("{");for(var t=[];!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.finalize(e,new a.BlockStatement(t))},e.prototype.parseLexicalBinding=function(e,t){var n=this.createNode(),i=this.parsePattern([],e);this.context.strict&&i.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(i.name)&&this.tolerateError(s.Messages.StrictVarName);var r=null;return"const"===e?this.matchKeyword("in")||this.matchContextualKeyword("of")||(this.match("=")?(this.nextToken(),r=this.isolateCoverGrammar(this.parseAssignmentExpression)):this.throwError(s.Messages.DeclarationMissingInitializer,"const")):(!t.inFor&&i.type!==u.Syntax.Identifier||this.match("="))&&(this.expect("="),r=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(n,new a.VariableDeclarator(i,r))},e.prototype.parseBindingList=function(e,t){for(var n=[this.parseLexicalBinding(e,t)];this.match(",");)this.nextToken(),n.push(this.parseLexicalBinding(e,t));return n},e.prototype.isLexicalDeclaration=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.scanner.lex();return this.scanner.restoreState(e),3===t.type||7===t.type&&"["===t.value||7===t.type&&"{"===t.value||4===t.type&&"let"===t.value||4===t.type&&"yield"===t.value},e.prototype.parseLexicalDeclaration=function(e){var t=this.createNode(),n=this.nextToken().value;i.assert("let"===n||"const"===n,"Lexical declaration must be either let or const");var r=this.parseBindingList(n,e);return this.consumeSemicolon(),this.finalize(t,new a.VariableDeclaration(r,n))},e.prototype.parseBindingRestElement=function(e,t){var n=this.createNode();this.expect("...");var i=this.parsePattern(e,t);return this.finalize(n,new a.RestElement(i))},e.prototype.parseArrayPattern=function(e,t){var n=this.createNode();this.expect("[");for(var i=[];!this.match("]");)if(this.match(","))this.nextToken(),i.push(null);else{if(this.match("...")){i.push(this.parseBindingRestElement(e,t));break}i.push(this.parsePatternWithDefault(e,t)),this.match("]")||this.expect(",")}return this.expect("]"),this.finalize(n,new a.ArrayPattern(i))},e.prototype.parsePropertyPattern=function(e,t){var n,i,r=this.createNode(),s=!1,o=!1;if(3===this.lookahead.type){var u=this.lookahead;n=this.parseVariableIdentifier();var c=this.finalize(r,new a.Identifier(u.value));if(this.match("=")){e.push(u),o=!0,this.nextToken();var h=this.parseAssignmentExpression();i=this.finalize(this.startNode(u),new a.AssignmentPattern(c,h))}else this.match(":")?(this.expect(":"),i=this.parsePatternWithDefault(e,t)):(e.push(u),o=!0,i=c)}else s=this.match("["),n=this.parseObjectPropertyKey(),this.expect(":"),i=this.parsePatternWithDefault(e,t);return this.finalize(r,new a.Property("init",n,s,i,!1,o))},e.prototype.parseObjectPattern=function(e,t){var n=this.createNode(),i=[];for(this.expect("{");!this.match("}");)i.push(this.parsePropertyPattern(e,t)),this.match("}")||this.expect(",");return this.expect("}"),this.finalize(n,new a.ObjectPattern(i))},e.prototype.parsePattern=function(e,t){var n;return this.match("[")?n=this.parseArrayPattern(e,t):this.match("{")?n=this.parseObjectPattern(e,t):(!this.matchKeyword("let")||"const"!==t&&"let"!==t||this.tolerateUnexpectedToken(this.lookahead,s.Messages.LetInLexicalBinding),e.push(this.lookahead),n=this.parseVariableIdentifier(t)),n},e.prototype.parsePatternWithDefault=function(e,t){var n=this.lookahead,i=this.parsePattern(e,t);if(this.match("=")){this.nextToken();var r=this.context.allowYield;this.context.allowYield=!0;var s=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=r,i=this.finalize(this.startNode(n),new a.AssignmentPattern(i,s))}return i},e.prototype.parseVariableIdentifier=function(e){var t=this.createNode(),n=this.nextToken();return 4===n.type&&"yield"===n.value?this.context.strict?this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord):this.context.allowYield||this.throwUnexpectedToken(n):3!==n.type?this.context.strict&&4===n.type&&this.scanner.isStrictModeReservedWord(n.value)?this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord):(this.context.strict||"let"!==n.value||"var"!==e)&&this.throwUnexpectedToken(n):(this.context.isModule||this.context.await)&&3===n.type&&"await"===n.value&&this.tolerateUnexpectedToken(n),this.finalize(t,new a.Identifier(n.value))},e.prototype.parseVariableDeclaration=function(e){var t=this.createNode(),n=this.parsePattern([],"var");this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(s.Messages.StrictVarName);var i=null;return this.match("=")?(this.nextToken(),i=this.isolateCoverGrammar(this.parseAssignmentExpression)):n.type===u.Syntax.Identifier||e.inFor||this.expect("="),this.finalize(t,new a.VariableDeclarator(n,i))},e.prototype.parseVariableDeclarationList=function(e){var t={inFor:e.inFor},n=[];for(n.push(this.parseVariableDeclaration(t));this.match(",");)this.nextToken(),n.push(this.parseVariableDeclaration(t));return n},e.prototype.parseVariableStatement=function(){var e=this.createNode();this.expectKeyword("var");var t=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(e,new a.VariableDeclaration(t,"var"))},e.prototype.parseEmptyStatement=function(){var e=this.createNode();return this.expect(";"),this.finalize(e,new a.EmptyStatement)},e.prototype.parseExpressionStatement=function(){var e=this.createNode(),t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ExpressionStatement(t))},e.prototype.parseIfClause=function(){return this.context.strict&&this.matchKeyword("function")&&this.tolerateError(s.Messages.StrictFunction),this.parseStatement()},e.prototype.parseIfStatement=function(){var e,t=this.createNode(),n=null;this.expectKeyword("if"),this.expect("(");var i=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(")"),e=this.parseIfClause(),this.matchKeyword("else")&&(this.nextToken(),n=this.parseIfClause())),this.finalize(t,new a.IfStatement(i,e,n))},e.prototype.parseDoWhileStatement=function(){var e=this.createNode();this.expectKeyword("do");var t=this.context.inIteration;this.context.inIteration=!0;var n=this.parseStatement();this.context.inIteration=t,this.expectKeyword("while"),this.expect("(");var i=this.parseExpression();return!this.match(")")&&this.config.tolerant?this.tolerateUnexpectedToken(this.nextToken()):(this.expect(")"),this.match(";")&&this.nextToken()),this.finalize(e,new a.DoWhileStatement(n,i))},e.prototype.parseWhileStatement=function(){var e,t=this.createNode();this.expectKeyword("while"),this.expect("(");var n=this.parseExpression();if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement);else{this.expect(")");var i=this.context.inIteration;this.context.inIteration=!0,e=this.parseStatement(),this.context.inIteration=i}return this.finalize(t,new a.WhileStatement(n,e))},e.prototype.parseForStatement=function(){var e,t,n,i=null,r=null,o=null,c=!0,h=this.createNode();if(this.expectKeyword("for"),this.expect("("),this.match(";"))this.nextToken();else if(this.matchKeyword("var")){i=this.createNode(),this.nextToken();var l=this.context.allowIn;this.context.allowIn=!1;var p=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=l,1===p.length&&this.matchKeyword("in")){var f=p[0];f.init&&(f.id.type===u.Syntax.ArrayPattern||f.id.type===u.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(s.Messages.ForInOfLoopInitializer,"for-in"),i=this.finalize(i,new a.VariableDeclaration(p,"var")),this.nextToken(),e=i,t=this.parseExpression(),i=null}else 1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(i=this.finalize(i,new a.VariableDeclaration(p,"var")),this.nextToken(),e=i,t=this.parseAssignmentExpression(),i=null,c=!1):(i=this.finalize(i,new a.VariableDeclaration(p,"var")),this.expect(";"))}else if(this.matchKeyword("const")||this.matchKeyword("let")){i=this.createNode();var d=this.nextToken().value;if(this.context.strict||"in"!==this.lookahead.value){l=this.context.allowIn;this.context.allowIn=!1;p=this.parseBindingList(d,{inFor:!0});this.context.allowIn=l,1===p.length&&null===p[0].init&&this.matchKeyword("in")?(i=this.finalize(i,new a.VariableDeclaration(p,d)),this.nextToken(),e=i,t=this.parseExpression(),i=null):1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(i=this.finalize(i,new a.VariableDeclaration(p,d)),this.nextToken(),e=i,t=this.parseAssignmentExpression(),i=null,c=!1):(this.consumeSemicolon(),i=this.finalize(i,new a.VariableDeclaration(p,d)))}else i=this.finalize(i,new a.Identifier(d)),this.nextToken(),e=i,t=this.parseExpression(),i=null}else{var m=this.lookahead;l=this.context.allowIn;if(this.context.allowIn=!1,i=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=l,this.matchKeyword("in"))this.context.isAssignmentTarget&&i.type!==u.Syntax.AssignmentExpression||this.tolerateError(s.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(i),e=i,t=this.parseExpression(),i=null;else if(this.matchContextualKeyword("of"))this.context.isAssignmentTarget&&i.type!==u.Syntax.AssignmentExpression||this.tolerateError(s.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(i),e=i,t=this.parseAssignmentExpression(),i=null,c=!1;else{if(this.match(",")){for(var x=[i];this.match(",");)this.nextToken(),x.push(this.isolateCoverGrammar(this.parseAssignmentExpression));i=this.finalize(this.startNode(m),new a.SequenceExpression(x))}this.expect(";")}}if(void 0===e&&(this.match(";")||(r=this.parseExpression()),this.expect(";"),this.match(")")||(o=this.parseExpression())),!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),n=this.finalize(this.createNode(),new a.EmptyStatement);else{this.expect(")");var g=this.context.inIteration;this.context.inIteration=!0,n=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=g}return void 0===e?this.finalize(h,new a.ForStatement(i,r,o,n)):c?this.finalize(h,new a.ForInStatement(e,t,n)):this.finalize(h,new a.ForOfStatement(e,t,n))},e.prototype.parseContinueStatement=function(){var e=this.createNode();this.expectKeyword("continue");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier();t=n;var i="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)||this.throwError(s.Messages.UnknownLabel,n.name)}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.throwError(s.Messages.IllegalContinue),this.finalize(e,new a.ContinueStatement(t))},e.prototype.parseBreakStatement=function(){var e=this.createNode();this.expectKeyword("break");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier(),i="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)||this.throwError(s.Messages.UnknownLabel,n.name),t=n}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.context.inSwitch||this.throwError(s.Messages.IllegalBreak),this.finalize(e,new a.BreakStatement(t))},e.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(s.Messages.IllegalReturn);var e=this.createNode();this.expectKeyword("return");var t=!this.match(";")&&!this.match("}")&&!this.hasLineTerminator&&2!==this.lookahead.type?this.parseExpression():null;return this.consumeSemicolon(),this.finalize(e,new a.ReturnStatement(t))},e.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(s.Messages.StrictModeWith);var e,t=this.createNode();this.expectKeyword("with"),this.expect("(");var n=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(")"),e=this.parseStatement()),this.finalize(t,new a.WithStatement(n,e))},e.prototype.parseSwitchCase=function(){var e,t=this.createNode();this.matchKeyword("default")?(this.nextToken(),e=null):(this.expectKeyword("case"),e=this.parseExpression()),this.expect(":");for(var n=[];!(this.match("}")||this.matchKeyword("default")||this.matchKeyword("case"));)n.push(this.parseStatementListItem());return this.finalize(t,new a.SwitchCase(e,n))},e.prototype.parseSwitchStatement=function(){var e=this.createNode();this.expectKeyword("switch"),this.expect("(");var t=this.parseExpression();this.expect(")");var n=this.context.inSwitch;this.context.inSwitch=!0;var i=[],r=!1;for(this.expect("{");!this.match("}");){var o=this.parseSwitchCase();null===o.test&&(r&&this.throwError(s.Messages.MultipleDefaultsInSwitch),r=!0),i.push(o)}return this.expect("}"),this.context.inSwitch=n,this.finalize(e,new a.SwitchStatement(t,i))},e.prototype.parseLabelledStatement=function(){var e,t=this.createNode(),n=this.parseExpression();if(n.type===u.Syntax.Identifier&&this.match(":")){this.nextToken();var i=n,r="$"+i.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)&&this.throwError(s.Messages.Redeclaration,"Label",i.name),this.context.labelSet[r]=!0;var o=void 0;if(this.matchKeyword("class"))this.tolerateUnexpectedToken(this.lookahead),o=this.parseClassDeclaration();else if(this.matchKeyword("function")){var c=this.lookahead,h=this.parseFunctionDeclaration();this.context.strict?this.tolerateUnexpectedToken(c,s.Messages.StrictFunction):h.generator&&this.tolerateUnexpectedToken(c,s.Messages.GeneratorInLegacyContext),o=h}else o=this.parseStatement();delete this.context.labelSet[r],e=new a.LabeledStatement(i,o)}else this.consumeSemicolon(),e=new a.ExpressionStatement(n);return this.finalize(t,e)},e.prototype.parseThrowStatement=function(){var e=this.createNode();this.expectKeyword("throw"),this.hasLineTerminator&&this.throwError(s.Messages.NewlineAfterThrow);var t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ThrowStatement(t))},e.prototype.parseCatchClause=function(){var e=this.createNode();this.expectKeyword("catch"),this.expect("("),this.match(")")&&this.throwUnexpectedToken(this.lookahead);for(var t=[],n=this.parsePattern(t),i={},r=0;r<t.length;r++){var o="$"+t[r].value;Object.prototype.hasOwnProperty.call(i,o)&&this.tolerateError(s.Messages.DuplicateBinding,t[r].value),i[o]=!0}this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(s.Messages.StrictCatchVariable),this.expect(")");var c=this.parseBlock();return this.finalize(e,new a.CatchClause(n,c))},e.prototype.parseFinallyClause=function(){return this.expectKeyword("finally"),this.parseBlock()},e.prototype.parseTryStatement=function(){var e=this.createNode();this.expectKeyword("try");var t=this.parseBlock(),n=this.matchKeyword("catch")?this.parseCatchClause():null,i=this.matchKeyword("finally")?this.parseFinallyClause():null;return n||i||this.throwError(s.Messages.NoCatchOrFinally),this.finalize(e,new a.TryStatement(t,n,i))},e.prototype.parseDebuggerStatement=function(){var e=this.createNode();return this.expectKeyword("debugger"),this.consumeSemicolon(),this.finalize(e,new a.DebuggerStatement)},e.prototype.parseStatement=function(){var e;switch(this.lookahead.type){case 1:case 5:case 6:case 8:case 10:case 9:e=this.parseExpressionStatement();break;case 7:var t=this.lookahead.value;e="{"===t?this.parseBlock():"("===t?this.parseExpressionStatement():";"===t?this.parseEmptyStatement():this.parseExpressionStatement();break;case 3:e=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();break;case 4:switch(this.lookahead.value){case"break":e=this.parseBreakStatement();break;case"continue":e=this.parseContinueStatement();break;case"debugger":e=this.parseDebuggerStatement();break;case"do":e=this.parseDoWhileStatement();break;case"for":e=this.parseForStatement();break;case"function":e=this.parseFunctionDeclaration();break;case"if":e=this.parseIfStatement();break;case"return":e=this.parseReturnStatement();break;case"switch":e=this.parseSwitchStatement();break;case"throw":e=this.parseThrowStatement();break;case"try":e=this.parseTryStatement();break;case"var":e=this.parseVariableStatement();break;case"while":e=this.parseWhileStatement();break;case"with":e=this.parseWithStatement();break;default:e=this.parseExpressionStatement()}break;default:e=this.throwUnexpectedToken(this.lookahead)}return e},e.prototype.parseFunctionSourceElements=function(){var e=this.createNode();this.expect("{");var t=this.parseDirectivePrologues(),n=this.context.labelSet,i=this.context.inIteration,r=this.context.inSwitch,s=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;2!==this.lookahead.type&&!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.context.labelSet=n,this.context.inIteration=i,this.context.inSwitch=r,this.context.inFunctionBody=s,this.finalize(e,new a.BlockStatement(t))},e.prototype.validateParam=function(e,t,n){var i="$"+n;this.context.strict?(this.scanner.isRestrictedWord(n)&&(e.stricted=t,e.message=s.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(e.paramSet,i)&&(e.stricted=t,e.message=s.Messages.StrictParamDupe)):e.firstRestricted||(this.scanner.isRestrictedWord(n)?(e.firstRestricted=t,e.message=s.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(n)?(e.firstRestricted=t,e.message=s.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(e.paramSet,i)&&(e.stricted=t,e.message=s.Messages.StrictParamDupe)),"function"==typeof Object.defineProperty?Object.defineProperty(e.paramSet,i,{value:!0,enumerable:!0,writable:!0,configurable:!0}):e.paramSet[i]=!0},e.prototype.parseRestElement=function(e){var t=this.createNode();this.expect("...");var n=this.parsePattern(e);return this.match("=")&&this.throwError(s.Messages.DefaultRestParameter),this.match(")")||this.throwError(s.Messages.ParameterAfterRestParameter),this.finalize(t,new a.RestElement(n))},e.prototype.parseFormalParameter=function(e){for(var t=[],n=this.match("...")?this.parseRestElement(t):this.parsePatternWithDefault(t),i=0;i<t.length;i++)this.validateParam(e,t[i],t[i].value);e.simple=e.simple&&n instanceof a.Identifier,e.params.push(n)},e.prototype.parseFormalParameters=function(e){var t;if(t={simple:!0,params:[],firstRestricted:e},this.expect("("),!this.match(")"))for(t.paramSet={};2!==this.lookahead.type&&(this.parseFormalParameter(t),!this.match(")"))&&(this.expect(","),!this.match(")")););return this.expect(")"),{simple:t.simple,params:t.params,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.matchAsyncFunction=function(){var e=this.matchContextualKeyword("async");if(e){var t=this.scanner.saveState();this.scanner.scanComments();var n=this.scanner.lex();this.scanner.restoreState(t),e=t.lineNumber===n.lineNumber&&4===n.type&&"function"===n.value}return e},e.prototype.parseFunctionDeclaration=function(e){var t=this.createNode(),n=this.matchContextualKeyword("async");n&&this.nextToken(),this.expectKeyword("function");var i,r=!n&&this.match("*");r&&this.nextToken();var o=null,u=null;if(!e||!this.match("(")){var c=this.lookahead;o=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(c.value)&&this.tolerateUnexpectedToken(c,s.Messages.StrictFunctionName):this.scanner.isRestrictedWord(c.value)?(u=c,i=s.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(c.value)&&(u=c,i=s.Messages.StrictReservedWord)}var h=this.context.await,l=this.context.allowYield;this.context.await=n,this.context.allowYield=!r;var p=this.parseFormalParameters(u),f=p.params,d=p.stricted;u=p.firstRestricted,p.message&&(i=p.message);var m=this.context.strict,x=this.context.allowStrictDirective;this.context.allowStrictDirective=p.simple;var g=this.parseFunctionSourceElements();return this.context.strict&&u&&this.throwUnexpectedToken(u,i),this.context.strict&&d&&this.tolerateUnexpectedToken(d,i),this.context.strict=m,this.context.allowStrictDirective=x,this.context.await=h,this.context.allowYield=l,n?this.finalize(t,new a.AsyncFunctionDeclaration(o,f,g)):this.finalize(t,new a.FunctionDeclaration(o,f,g,r))},e.prototype.parseFunctionExpression=function(){var e=this.createNode(),t=this.matchContextualKeyword("async");t&&this.nextToken(),this.expectKeyword("function");var n,i=!t&&this.match("*");i&&this.nextToken();var r,o=null,u=this.context.await,c=this.context.allowYield;if(this.context.await=t,this.context.allowYield=!i,!this.match("(")){var h=this.lookahead;o=this.context.strict||i||!this.matchKeyword("yield")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(h.value)&&this.tolerateUnexpectedToken(h,s.Messages.StrictFunctionName):this.scanner.isRestrictedWord(h.value)?(r=h,n=s.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(h.value)&&(r=h,n=s.Messages.StrictReservedWord)}var l=this.parseFormalParameters(r),p=l.params,f=l.stricted;r=l.firstRestricted,l.message&&(n=l.message);var d=this.context.strict,m=this.context.allowStrictDirective;this.context.allowStrictDirective=l.simple;var x=this.parseFunctionSourceElements();return this.context.strict&&r&&this.throwUnexpectedToken(r,n),this.context.strict&&f&&this.tolerateUnexpectedToken(f,n),this.context.strict=d,this.context.allowStrictDirective=m,this.context.await=u,this.context.allowYield=c,t?this.finalize(e,new a.AsyncFunctionExpression(o,p,x)):this.finalize(e,new a.FunctionExpression(o,p,x,i))},e.prototype.parseDirective=function(){var e=this.lookahead,t=this.createNode(),n=this.parseExpression(),i=n.type===u.Syntax.Literal?this.getTokenRaw(e).slice(1,-1):null;return this.consumeSemicolon(),this.finalize(t,i?new a.Directive(n,i):new a.ExpressionStatement(n))},e.prototype.parseDirectivePrologues=function(){for(var e=null,t=[];;){var n=this.lookahead;if(8!==n.type)break;var i=this.parseDirective();t.push(i);var r=i.directive;if("string"!=typeof r)break;"use strict"===r?(this.context.strict=!0,e&&this.tolerateUnexpectedToken(e,s.Messages.StrictOctalLiteral),this.context.allowStrictDirective||this.tolerateUnexpectedToken(n,s.Messages.IllegalLanguageModeDirective)):!e&&n.octal&&(e=n)}return t},e.prototype.qualifiedPropertyName=function(e){switch(e.type){case 3:case 8:case 1:case 5:case 6:case 4:return!0;case 7:return"["===e.value}return!1},e.prototype.parseGetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!1;var n=this.parseFormalParameters();n.params.length>0&&this.tolerateError(s.Messages.BadGetterArity);var i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!1))},e.prototype.parseSetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!1;var n=this.parseFormalParameters();1!==n.params.length?this.tolerateError(s.Messages.BadSetterArity):n.params[0]instanceof a.RestElement&&this.tolerateError(s.Messages.BadSetterRestParameter);var i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!1))},e.prototype.parseGeneratorMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();this.context.allowYield=!1;var i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!0))},e.prototype.isStartOfExpression=function(){var e=!0,t=this.lookahead.value;switch(this.lookahead.type){case 7:e="["===t||"("===t||"{"===t||"+"===t||"-"===t||"!"===t||"~"===t||"++"===t||"--"===t||"/"===t||"/="===t;break;case 4:e="class"===t||"delete"===t||"function"===t||"let"===t||"new"===t||"super"===t||"this"===t||"typeof"===t||"void"===t||"yield"===t}return e},e.prototype.parseYieldExpression=function(){var e=this.createNode();this.expectKeyword("yield");var t=null,n=!1;if(!this.hasLineTerminator){var i=this.context.allowYield;this.context.allowYield=!1,(n=this.match("*"))?(this.nextToken(),t=this.parseAssignmentExpression()):this.isStartOfExpression()&&(t=this.parseAssignmentExpression()),this.context.allowYield=i}return this.finalize(e,new a.YieldExpression(t,n))},e.prototype.parseClassElement=function(e){var t=this.lookahead,n=this.createNode(),i="",r=null,o=null,u=!1,c=!1,h=!1,l=!1;if(this.match("*"))this.nextToken();else if(u=this.match("["),"static"===(r=this.parseObjectPropertyKey()).name&&(this.qualifiedPropertyName(this.lookahead)||this.match("*"))&&(t=this.lookahead,h=!0,u=this.match("["),this.match("*")?this.nextToken():r=this.parseObjectPropertyKey()),3===t.type&&!this.hasLineTerminator&&"async"===t.value){var p=this.lookahead.value;":"!==p&&"("!==p&&"*"!==p&&(l=!0,t=this.lookahead,r=this.parseObjectPropertyKey(),3===t.type&&("get"===t.value||"set"===t.value?this.tolerateUnexpectedToken(t):"constructor"===t.value&&this.tolerateUnexpectedToken(t,s.Messages.ConstructorIsAsync)))}var f=this.qualifiedPropertyName(this.lookahead);return 3===t.type?"get"===t.value&&f?(i="get",u=this.match("["),r=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod()):"set"===t.value&&f&&(i="set",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseSetterMethod()):7===t.type&&"*"===t.value&&f&&(i="init",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),c=!0),!i&&r&&this.match("(")&&(i="init",o=l?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),c=!0),i||this.throwUnexpectedToken(this.lookahead),"init"===i&&(i="method"),u||(h&&this.isPropertyKey(r,"prototype")&&this.throwUnexpectedToken(t,s.Messages.StaticPrototype),!h&&this.isPropertyKey(r,"constructor")&&(("method"!==i||!c||o&&o.generator)&&this.throwUnexpectedToken(t,s.Messages.ConstructorSpecialMethod),e.value?this.throwUnexpectedToken(t,s.Messages.DuplicateConstructor):e.value=!0,i="constructor")),this.finalize(n,new a.MethodDefinition(r,u,o,i,h))},e.prototype.parseClassElementList=function(){var e=[],t={value:!1};for(this.expect("{");!this.match("}");)this.match(";")?this.nextToken():e.push(this.parseClassElement(t));return this.expect("}"),e},e.prototype.parseClassBody=function(){var e=this.createNode(),t=this.parseClassElementList();return this.finalize(e,new a.ClassBody(t))},e.prototype.parseClassDeclaration=function(e){var t=this.createNode(),n=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var i=e&&3!==this.lookahead.type?null:this.parseVariableIdentifier(),r=null;this.matchKeyword("extends")&&(this.nextToken(),r=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var s=this.parseClassBody();return this.context.strict=n,this.finalize(t,new a.ClassDeclaration(i,r,s))},e.prototype.parseClassExpression=function(){var e=this.createNode(),t=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var n=3===this.lookahead.type?this.parseVariableIdentifier():null,i=null;this.matchKeyword("extends")&&(this.nextToken(),i=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var r=this.parseClassBody();return this.context.strict=t,this.finalize(e,new a.ClassExpression(n,i,r))},e.prototype.parseModule=function(){this.context.strict=!0,this.context.isModule=!0;for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Module(t))},e.prototype.parseScript=function(){for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Script(t))},e.prototype.parseModuleSpecifier=function(){var e=this.createNode();8!==this.lookahead.type&&this.throwError(s.Messages.InvalidModuleSpecifier);var t=this.nextToken(),n=this.getTokenRaw(t);return this.finalize(e,new a.Literal(t.value,n))},e.prototype.parseImportSpecifier=function(){var e,t,n=this.createNode();return 3===this.lookahead.type?(t=e=this.parseVariableIdentifier(),this.matchContextualKeyword("as")&&(this.nextToken(),t=this.parseVariableIdentifier())):(t=e=this.parseIdentifierName(),this.matchContextualKeyword("as")?(this.nextToken(),t=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(n,new a.ImportSpecifier(t,e))},e.prototype.parseNamedImports=function(){this.expect("{");for(var e=[];!this.match("}");)e.push(this.parseImportSpecifier()),this.match("}")||this.expect(",");return this.expect("}"),e},e.prototype.parseImportDefaultSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName();return this.finalize(e,new a.ImportDefaultSpecifier(t))},e.prototype.parseImportNamespaceSpecifier=function(){var e=this.createNode();this.expect("*"),this.matchContextualKeyword("as")||this.throwError(s.Messages.NoAsAfterImportNamespace),this.nextToken();var t=this.parseIdentifierName();return this.finalize(e,new a.ImportNamespaceSpecifier(t))},e.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(s.Messages.IllegalImportDeclaration);var e,t=this.createNode();this.expectKeyword("import");var n=[];if(8===this.lookahead.type)e=this.parseModuleSpecifier();else{if(this.match("{")?n=n.concat(this.parseNamedImports()):this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword("default")?(n.push(this.parseImportDefaultSpecifier()),this.match(",")&&(this.nextToken(),this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.match("{")?n=n.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword("from")){var i=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(i,this.lookahead.value)}this.nextToken(),e=this.parseModuleSpecifier()}return this.consumeSemicolon(),this.finalize(t,new a.ImportDeclaration(n,e))},e.prototype.parseExportSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName(),n=t;return this.matchContextualKeyword("as")&&(this.nextToken(),n=this.parseIdentifierName()),this.finalize(e,new a.ExportSpecifier(t,n))},e.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(s.Messages.IllegalExportDeclaration);var e,t=this.createNode();if(this.expectKeyword("export"),this.matchKeyword("default"))if(this.nextToken(),this.matchKeyword("function")){var n=this.parseFunctionDeclaration(!0);e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else if(this.matchKeyword("class")){n=this.parseClassDeclaration(!0);e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else if(this.matchContextualKeyword("async")){n=this.matchAsyncFunction()?this.parseFunctionDeclaration(!0):this.parseAssignmentExpression();e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else{this.matchContextualKeyword("from")&&this.throwError(s.Messages.UnexpectedToken,this.lookahead.value);n=this.match("{")?this.parseObjectInitializer():this.match("[")?this.parseArrayInitializer():this.parseAssignmentExpression();this.consumeSemicolon(),e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else if(this.match("*")){if(this.nextToken(),!this.matchContextualKeyword("from")){var i=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(i,this.lookahead.value)}this.nextToken();var r=this.parseModuleSpecifier();this.consumeSemicolon(),e=this.finalize(t,new a.ExportAllDeclaration(r))}else if(4===this.lookahead.type){n=void 0;switch(this.lookahead.value){case"let":case"const":n=this.parseLexicalDeclaration({inFor:!1});break;case"var":case"class":case"function":n=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead)}e=this.finalize(t,new a.ExportNamedDeclaration(n,[],null))}else if(this.matchAsyncFunction()){n=this.parseFunctionDeclaration();e=this.finalize(t,new a.ExportNamedDeclaration(n,[],null))}else{var o=[],u=null,c=!1;for(this.expect("{");!this.match("}");)c=c||this.matchKeyword("default"),o.push(this.parseExportSpecifier()),this.match("}")||this.expect(",");if(this.expect("}"),this.matchContextualKeyword("from"))this.nextToken(),u=this.parseModuleSpecifier(),this.consumeSemicolon();else if(c){i=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(i,this.lookahead.value)}else this.consumeSemicolon();e=this.finalize(t,new a.ExportNamedDeclaration(null,o,u))}return e},e}();t.Parser=h},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assert=function(e,t){if(!e)throw new Error("ASSERT: "+t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.errors=[],this.tolerant=!1}return e.prototype.recordError=function(e){this.errors.push(e)},e.prototype.tolerate=function(e){if(!this.tolerant)throw e;this.recordError(e)},e.prototype.constructError=function(e,t){var n=new Error(e);try{throw n}catch(e){Object.create&&Object.defineProperty&&(n=Object.create(e),Object.defineProperty(n,"column",{value:t}))}return n},e.prototype.createError=function(e,t,n,i){var r="Line "+t+": "+i,s=this.constructError(r,n);return s.index=e,s.lineNumber=t,s.description=i,s},e.prototype.throwError=function(e,t,n,i){throw this.createError(e,t,n,i)},e.prototype.tolerateError=function(e,t,n,i){var r=this.createError(e,t,n,i);if(!this.tolerant)throw r;this.recordError(r)},e}();t.ErrorHandler=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Messages={BadGetterArity:"Getter must not have any formal parameters",BadSetterArity:"Setter must have exactly one formal parameter",BadSetterRestParameter:"Setter function argument must not be a rest parameter",ConstructorIsAsync:"Class constructor may not be an async method",ConstructorSpecialMethod:"Class constructor may not be an accessor",DeclarationMissingInitializer:"Missing initializer in %0 declaration",DefaultRestParameter:"Unexpected token =",DuplicateBinding:"Duplicate binding %0",DuplicateConstructor:"A class may only have one constructor",DuplicateProtoProperty:"Duplicate __proto__ fields are not allowed in object literals",ForInOfLoopInitializer:"%0 loop variable declaration may not have an initializer",GeneratorInLegacyContext:"Generator declarations are not allowed in legacy contexts",IllegalBreak:"Illegal break statement",IllegalContinue:"Illegal continue statement",IllegalExportDeclaration:"Unexpected token",IllegalImportDeclaration:"Unexpected token",IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list",IllegalReturn:"Illegal return statement",InvalidEscapedReservedWord:"Keyword must not contain escaped characters",InvalidHexEscapeSequence:"Invalid hexadecimal escape sequence",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",InvalidLHSInForLoop:"Invalid left-hand side in for-loop",InvalidModuleSpecifier:"Unexpected token",InvalidRegExp:"Invalid regular expression",LetInLexicalBinding:"let is disallowed as a lexically bound name",MissingFromClause:"Unexpected token",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NewlineAfterThrow:"Illegal newline after throw",NoAsAfterImportNamespace:"Unexpected token",NoCatchOrFinally:"Missing catch or finally after try",ParameterAfterRestParameter:"Rest parameter must be last formal parameter",Redeclaration:"%0 '%1' has already been declared",StaticPrototype:"Classes may not have static property named prototype",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictModeWith:"Strict mode code may not include a with statement",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",TemplateOctalLiteral:"Octal literals are not allowed in template strings.",UnexpectedEOS:"Unexpected end of input",UnexpectedIdentifier:"Unexpected identifier",UnexpectedNumber:"Unexpected number",UnexpectedReserved:"Unexpected reserved word",UnexpectedString:"Unexpected string",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedToken:"Unexpected token %0",UnexpectedTokenIllegal:"Unexpected token ILLEGAL",UnknownLabel:"Undefined label '%0'",UnterminatedRegExp:"Invalid regular expression: missing /"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(9),r=n(4),s=n(11);function a(e){return"0123456789abcdef".indexOf(e.toLowerCase())}function o(e){return"01234567".indexOf(e)}var u=function(){function e(e,t){this.source=e,this.errorHandler=t,this.trackComment=!1,this.length=e.length,this.index=0,this.lineNumber=e.length>0?1:0,this.lineStart=0,this.curlyStack=[]}return e.prototype.saveState=function(){return{index:this.index,lineNumber:this.lineNumber,lineStart:this.lineStart}},e.prototype.restoreState=function(e){this.index=e.index,this.lineNumber=e.lineNumber,this.lineStart=e.lineStart},e.prototype.eof=function(){return this.index>=this.length},e.prototype.throwUnexpectedToken=function(e){return void 0===e&&(e=s.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.tolerateUnexpectedToken=function(e){void 0===e&&(e=s.Messages.UnexpectedTokenIllegal),this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.skipSingleLineComment=function(e){var t,n,i=[];for(this.trackComment&&(i=[],t=this.index-e,n={start:{line:this.lineNumber,column:this.index-this.lineStart-e},end:{}});!this.eof();){var s=this.source.charCodeAt(this.index);if(++this.index,r.Character.isLineTerminator(s)){if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart-1};var a={multiLine:!1,slice:[t+e,this.index-1],range:[t,this.index-1],loc:n};i.push(a)}return 13===s&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,i}}if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart};a={multiLine:!1,slice:[t+e,this.index],range:[t,this.index],loc:n};i.push(a)}return i},e.prototype.skipMultiLineComment=function(){var e,t,n=[];for(this.trackComment&&(n=[],e=this.index-2,t={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var i=this.source.charCodeAt(this.index);if(r.Character.isLineTerminator(i))13===i&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===i){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};var s={multiLine:!0,slice:[e+2,this.index-2],range:[e,this.index],loc:t};n.push(s)}return n}++this.index}else++this.index}if(this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};s={multiLine:!0,slice:[e+2,this.index],range:[e,this.index],loc:t};n.push(s)}return this.tolerateUnexpectedToken(),n},e.prototype.scanComments=function(){var e;this.trackComment&&(e=[]);for(var t=0===this.index;!this.eof();){var n=this.source.charCodeAt(this.index);if(r.Character.isWhiteSpace(n))++this.index;else if(r.Character.isLineTerminator(n))++this.index,13===n&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,t=!0;else if(47===n)if(47===(n=this.source.charCodeAt(this.index+1))){this.index+=2;var i=this.skipSingleLineComment(2);this.trackComment&&(e=e.concat(i)),t=!0}else{if(42!==n)break;this.index+=2;i=this.skipMultiLineComment();this.trackComment&&(e=e.concat(i))}else if(t&&45===n){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3;i=this.skipSingleLineComment(3);this.trackComment&&(e=e.concat(i))}else{if(60!==n)break;if("!--"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4;i=this.skipSingleLineComment(4);this.trackComment&&(e=e.concat(i))}}return e},e.prototype.isFutureReservedWord=function(e){switch(e){case"enum":case"export":case"import":case"super":return!0;default:return!1}},e.prototype.isStrictModeReservedWord=function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}},e.prototype.isRestrictedWord=function(e){return"eval"===e||"arguments"===e},e.prototype.isKeyword=function(e){switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}},e.prototype.codePointAt=function(e){var t=this.source.charCodeAt(e);if(t>=55296&&t<=56319){var n=this.source.charCodeAt(e+1);if(n>=56320&&n<=57343)t=1024*(t-55296)+n-56320+65536}return t},e.prototype.scanHexEscape=function(e){for(var t="u"===e?4:2,n=0,i=0;i<t;++i){if(this.eof()||!r.Character.isHexDigit(this.source.charCodeAt(this.index)))return null;n=16*n+a(this.source[this.index++])}return String.fromCharCode(n)},e.prototype.scanUnicodeCodePointEscape=function(){var e=this.source[this.index],t=0;for("}"===e&&this.throwUnexpectedToken();!this.eof()&&(e=this.source[this.index++],r.Character.isHexDigit(e.charCodeAt(0)));)t=16*t+a(e);return(t>1114111||"}"!==e)&&this.throwUnexpectedToken(),r.Character.fromCodePoint(t)},e.prototype.getIdentifier=function(){for(var e=this.index++;!this.eof();){var t=this.source.charCodeAt(this.index);if(92===t)return this.index=e,this.getComplexIdentifier();if(t>=55296&&t<57343)return this.index=e,this.getComplexIdentifier();if(!r.Character.isIdentifierPart(t))break;++this.index}return this.source.slice(e,this.index)},e.prototype.getComplexIdentifier=function(){var e,t=this.codePointAt(this.index),n=r.Character.fromCodePoint(t);for(this.index+=n.length,92===t&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&r.Character.isIdentifierStart(e.charCodeAt(0))||this.throwUnexpectedToken(),n=e);!this.eof()&&(t=this.codePointAt(this.index),r.Character.isIdentifierPart(t));)n+=e=r.Character.fromCodePoint(t),this.index+=e.length,92===t&&(n=n.substr(0,n.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&r.Character.isIdentifierPart(e.charCodeAt(0))||this.throwUnexpectedToken(),n+=e);return n},e.prototype.octalToDecimal=function(e){var t="0"!==e,n=o(e);return!this.eof()&&r.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(t=!0,n=8*n+o(this.source[this.index++]),"0123".indexOf(e)>=0&&!this.eof()&&r.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(n=8*n+o(this.source[this.index++]))),{code:n,octal:t}},e.prototype.scanIdentifier=function(){var e,t=this.index,n=92===this.source.charCodeAt(t)?this.getComplexIdentifier():this.getIdentifier();if(3!==(e=1===n.length?3:this.isKeyword(n)?4:"null"===n?5:"true"===n||"false"===n?1:3)&&t+n.length!==this.index){var i=this.index;this.index=t,this.tolerateUnexpectedToken(s.Messages.InvalidEscapedReservedWord),this.index=i}return{type:e,value:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.scanPunctuator=function(){var e=this.index,t=this.source[this.index];switch(t){case"(":case"{":"{"===t&&this.curlyStack.push("{"),++this.index;break;case".":++this.index,"."===this.source[this.index]&&"."===this.source[this.index+1]&&(this.index+=2,t="...");break;case"}":++this.index,this.curlyStack.pop();break;case")":case";":case",":case"[":case"]":case":":case"?":case"~":++this.index;break;default:">>>="===(t=this.source.substr(this.index,4))?this.index+=4:"==="===(t=t.substr(0,3))||"!=="===t||">>>"===t||"<<="===t||">>="===t||"**="===t?this.index+=3:"&&"===(t=t.substr(0,2))||"||"===t||"=="===t||"!="===t||"+="===t||"-="===t||"*="===t||"/="===t||"++"===t||"--"===t||"<<"===t||">>"===t||"&="===t||"|="===t||"^="===t||"%="===t||"<="===t||">="===t||"=>"===t||"**"===t?this.index+=2:(t=this.source[this.index],"<>=!+-*%&|^/".indexOf(t)>=0&&++this.index)}return this.index===e&&this.throwUnexpectedToken(),{type:7,value:t,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanHexLiteral=function(e){for(var t="";!this.eof()&&r.Character.isHexDigit(this.source.charCodeAt(this.index));)t+=this.source[this.index++];return 0===t.length&&this.throwUnexpectedToken(),r.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseInt("0x"+t,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanBinaryLiteral=function(e){for(var t,n="";!this.eof()&&("0"===(t=this.source[this.index])||"1"===t);)n+=this.source[this.index++];return 0===n.length&&this.throwUnexpectedToken(),this.eof()||(t=this.source.charCodeAt(this.index),(r.Character.isIdentifierStart(t)||r.Character.isDecimalDigit(t))&&this.throwUnexpectedToken()),{type:6,value:parseInt(n,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanOctalLiteral=function(e,t){var n="",i=!1;for(r.Character.isOctalDigit(e.charCodeAt(0))?(i=!0,n="0"+this.source[this.index++]):++this.index;!this.eof()&&r.Character.isOctalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];return i||0!==n.length||this.throwUnexpectedToken(),(r.Character.isIdentifierStart(this.source.charCodeAt(this.index))||r.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:6,value:parseInt(n,8),octal:i,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.isImplicitOctalLiteral=function(){for(var e=this.index+1;e<this.length;++e){var t=this.source[e];if("8"===t||"9"===t)return!1;if(!r.Character.isOctalDigit(t.charCodeAt(0)))return!0}return!0},e.prototype.scanNumericLiteral=function(){var e=this.index,t=this.source[e];i.assert(r.Character.isDecimalDigit(t.charCodeAt(0))||"."===t,"Numeric literal must start with a decimal digit or a decimal point");var n="";if("."!==t){if(n=this.source[this.index++],t=this.source[this.index],"0"===n){if("x"===t||"X"===t)return++this.index,this.scanHexLiteral(e);if("b"===t||"B"===t)return++this.index,this.scanBinaryLiteral(e);if("o"===t||"O"===t)return this.scanOctalLiteral(t,e);if(t&&r.Character.isOctalDigit(t.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(t,e)}for(;r.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("."===t){for(n+=this.source[this.index++];r.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("e"===t||"E"===t)if(n+=this.source[this.index++],"+"!==(t=this.source[this.index])&&"-"!==t||(n+=this.source[this.index++]),r.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;r.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];else this.throwUnexpectedToken();return r.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseFloat(n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanStringLiteral=function(){var e=this.index,t=this.source[e];i.assert("'"===t||'"'===t,"String literal must starts with a quote"),++this.index;for(var n=!1,a="";!this.eof();){var o=this.source[this.index++];if(o===t){t="";break}if("\\"===o)if((o=this.source[this.index++])&&r.Character.isLineTerminator(o.charCodeAt(0)))++this.lineNumber,"\r"===o&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(o){case"u":if("{"===this.source[this.index])++this.index,a+=this.scanUnicodeCodePointEscape();else{var u=this.scanHexEscape(o);null===u&&this.throwUnexpectedToken(),a+=u}break;case"x":var c=this.scanHexEscape(o);null===c&&this.throwUnexpectedToken(s.Messages.InvalidHexEscapeSequence),a+=c;break;case"n":a+="\n";break;case"r":a+="\r";break;case"t":a+="\t";break;case"b":a+="\b";break;case"f":a+="\f";break;case"v":a+="\v";break;case"8":case"9":a+=o,this.tolerateUnexpectedToken();break;default:if(o&&r.Character.isOctalDigit(o.charCodeAt(0))){var h=this.octalToDecimal(o);n=h.octal||n,a+=String.fromCharCode(h.code)}else a+=o}else{if(r.Character.isLineTerminator(o.charCodeAt(0)))break;a+=o}}return""!==t&&(this.index=e,this.throwUnexpectedToken()),{type:8,value:a,octal:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanTemplate=function(){var e="",t=!1,n=this.index,i="`"===this.source[n],a=!1,o=2;for(++this.index;!this.eof();){var u=this.source[this.index++];if("`"===u){o=1,a=!0,t=!0;break}if("$"===u){if("{"===this.source[this.index]){this.curlyStack.push("${"),++this.index,t=!0;break}e+=u}else if("\\"===u)if(u=this.source[this.index++],r.Character.isLineTerminator(u.charCodeAt(0)))++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(u){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"u":if("{"===this.source[this.index])++this.index,e+=this.scanUnicodeCodePointEscape();else{var c=this.index,h=this.scanHexEscape(u);null!==h?e+=h:(this.index=c,e+=u)}break;case"x":var l=this.scanHexEscape(u);null===l&&this.throwUnexpectedToken(s.Messages.InvalidHexEscapeSequence),e+=l;break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:"0"===u?(r.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(s.Messages.TemplateOctalLiteral),e+="\0"):r.Character.isOctalDigit(u.charCodeAt(0))?this.throwUnexpectedToken(s.Messages.TemplateOctalLiteral):e+=u}else r.Character.isLineTerminator(u.charCodeAt(0))?(++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index,e+="\n"):e+=u}return t||this.throwUnexpectedToken(),i||this.curlyStack.pop(),{type:10,value:this.source.slice(n+1,this.index-o),cooked:e,head:i,tail:a,lineNumber:this.lineNumber,lineStart:this.lineStart,start:n,end:this.index}},e.prototype.testRegExp=function(e,t){var n=e,i=this;t.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,function(e,t,n){var r=parseInt(t||n,16);return r>1114111&&i.throwUnexpectedToken(s.Messages.InvalidRegExp),r<=65535?String.fromCharCode(r):"￿"}).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"￿"));try{RegExp(n)}catch(e){this.throwUnexpectedToken(s.Messages.InvalidRegExp)}try{return new RegExp(e,t)}catch(e){return null}},e.prototype.scanRegExpBody=function(){var e=this.source[this.index];i.assert("/"===e,"Regular expression literal must start with a slash");for(var t=this.source[this.index++],n=!1,a=!1;!this.eof();)if(t+=e=this.source[this.index++],"\\"===e)e=this.source[this.index++],r.Character.isLineTerminator(e.charCodeAt(0))&&this.throwUnexpectedToken(s.Messages.UnterminatedRegExp),t+=e;else if(r.Character.isLineTerminator(e.charCodeAt(0)))this.throwUnexpectedToken(s.Messages.UnterminatedRegExp);else if(n)"]"===e&&(n=!1);else{if("/"===e){a=!0;break}"["===e&&(n=!0)}return a||this.throwUnexpectedToken(s.Messages.UnterminatedRegExp),t.substr(1,t.length-2)},e.prototype.scanRegExpFlags=function(){for(var e="";!this.eof();){var t=this.source[this.index];if(!r.Character.isIdentifierPart(t.charCodeAt(0)))break;if(++this.index,"\\"!==t||this.eof())e+=t,t;else if("u"===(t=this.source[this.index])){++this.index;var n=this.index,i=this.scanHexEscape("u");if(null!==i)for(e+=i,"\\u";n<this.index;++n)this.source[n];else this.index=n,e+="u","\\u";this.tolerateUnexpectedToken()}else"\\",this.tolerateUnexpectedToken()}return e},e.prototype.scanRegExp=function(){var e=this.index,t=this.scanRegExpBody(),n=this.scanRegExpFlags();return{type:9,value:"",pattern:t,flags:n,regex:this.testRegExp(t,n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.lex=function(){if(this.eof())return{type:2,value:"",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var e=this.source.charCodeAt(this.index);return r.Character.isIdentifierStart(e)?this.scanIdentifier():40===e||41===e||59===e?this.scanPunctuator():39===e||34===e?this.scanStringLiteral():46===e?r.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():r.Character.isDecimalDigit(e)?this.scanNumericLiteral():96===e||125===e&&"${"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():e>=55296&&e<57343&&r.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},e}();t.Scanner=u},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenName={},t.TokenName[1]="Boolean",t.TokenName[2]="<end>",t.TokenName[3]="Identifier",t.TokenName[4]="Keyword",t.TokenName[5]="Null",t.TokenName[6]="Numeric",t.TokenName[7]="Punctuator",t.TokenName[8]="String",t.TokenName[9]="RegularExpression",t.TokenName[10]="Template"},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHTMLEntities={quot:'"',amp:"&",apos:"'",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",lang:"⟨",rang:"⟩"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(10),r=n(12),s=n(13),a=function(){function e(){this.values=[],this.curly=this.paren=-1}return e.prototype.beforeFunctionExpression=function(e){return["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","**","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="].indexOf(e)>=0},e.prototype.isRegexStart=function(){var e=this.values[this.values.length-1],t=null!==e;switch(e){case"this":case"]":t=!1;break;case")":var n=this.values[this.paren-1];t="if"===n||"while"===n||"for"===n||"with"===n;break;case"}":if(t=!1,"function"===this.values[this.curly-3])t=!!(i=this.values[this.curly-4])&&!this.beforeFunctionExpression(i);else if("function"===this.values[this.curly-4]){var i;t=!(i=this.values[this.curly-5])||!this.beforeFunctionExpression(i)}}return t},e.prototype.push=function(e){7===e.type||4===e.type?("{"===e.value?this.curly=this.values.length:"("===e.value&&(this.paren=this.values.length),this.values.push(e.value)):this.values.push(null)},e}(),o=function(){function e(e,t){this.errorHandler=new i.ErrorHandler,this.errorHandler.tolerant=!!t&&("boolean"==typeof t.tolerant&&t.tolerant),this.scanner=new r.Scanner(e,this.errorHandler),this.scanner.trackComment=!!t&&("boolean"==typeof t.comment&&t.comment),this.trackRange=!!t&&("boolean"==typeof t.range&&t.range),this.trackLoc=!!t&&("boolean"==typeof t.loc&&t.loc),this.buffer=[],this.reader=new a}return e.prototype.errors=function(){return this.errorHandler.errors},e.prototype.getNextToken=function(){if(0===this.buffer.length){var e=this.scanner.scanComments();if(this.scanner.trackComment)for(var t=0;t<e.length;++t){var n=e[t],i=this.scanner.source.slice(n.slice[0],n.slice[1]),r={type:n.multiLine?"BlockComment":"LineComment",value:i};this.trackRange&&(r.range=n.range),this.trackLoc&&(r.loc=n.loc),this.buffer.push(r)}if(!this.scanner.eof()){var a=void 0;this.trackLoc&&(a={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var o="/"===this.scanner.source[this.scanner.index]&&this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.lex();this.reader.push(o);var u={type:s.TokenName[o.type],value:this.scanner.source.slice(o.start,o.end)};if(this.trackRange&&(u.range=[o.start,o.end]),this.trackLoc&&(a.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},u.loc=a),9===o.type){var c=o.pattern,h=o.flags;u.regex={pattern:c,flags:h}}this.buffer.push(u)}}return this.buffer.shift()},e}();t.Tokenizer=o}])},e.exports=i()},function(e,t,n){"use strict";var i;try{i=n(20)}catch(e){"undefined"!=typeof window&&(i=window.esprima)}var r=n(0);e.exports=new r("tag:yaml.org,2002:js/function",{kind:"scalar",resolve:function(e){if(null===e)return!1;try{var t="("+e+")",n=i.parse(t,{range:!0});return"Program"===n.type&&1===n.body.length&&"ExpressionStatement"===n.body[0].type&&"FunctionExpression"===n.body[0].expression.type}catch(e){return!1}},construct:function(e){var t,n="("+e+")",r=i.parse(n,{range:!0}),s=[];if("Program"!==r.type||1!==r.body.length||"ExpressionStatement"!==r.body[0].type||"FunctionExpression"!==r.body[0].expression.type)throw new Error("Failed to resolve function");return r.body[0].expression.params.forEach(function(e){s.push(e.name)}),t=r.body[0].expression.body.range,new Function(s,n.slice(t[0]+1,t[1]-1))},predicate:function(e){return"[object Function]"===Object.prototype.toString.call(e)},represent:function(e){return e.toString()}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:js/regexp",{kind:"scalar",resolve:function(e){if(null===e)return!1;if(0===e.length)return!1;var t=e,n=/\/([gim]*)$/.exec(e),i="";if("/"===t[0]){if(n&&(i=n[1]),i.length>3)return!1;if("/"!==t[t.length-i.length-1])return!1}return!0},construct:function(e){var t=e,n=/\/([gim]*)$/.exec(e),i="";return"/"===t[0]&&(n&&(i=n[1]),t=t.slice(1,t.length-i.length-1)),new RegExp(t,i)},predicate:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},represent:function(e){var t="/"+e.source+"/";return e.global&&(t+="g"),e.multiline&&(t+="m"),e.ignoreCase&&(t+="i"),t}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:js/undefined",{kind:"scalar",resolve:function(){return!0},construct:function(){},predicate:function(e){return void 0===e},represent:function(){return""}})},function(e,t,n){"use strict";var i=n(0),r=Object.prototype.hasOwnProperty;e.exports=new i("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return!0;var t,n=e;for(t in n)if(r.call(n,t)&&null!==n[t])return!1;return!0},construct:function(e){return null!==e?e:{}}})},function(e,t,n){"use strict";var i=n(0),r=Object.prototype.toString;e.exports=new i("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,n,i,s,a,o=e;for(a=new Array(o.length),t=0,n=o.length;t<n;t+=1){if(i=o[t],"[object Object]"!==r.call(i))return!1;if(1!==(s=Object.keys(i)).length)return!1;a[t]=[s[0],i[s[0]]]}return!0},construct:function(e){if(null===e)return[];var t,n,i,r,s,a=e;for(s=new Array(a.length),t=0,n=a.length;t<n;t+=1)i=a[t],r=Object.keys(i),s[t]=[r[0],i[r[0]]];return s}})},function(e,t,n){"use strict";var i=n(0),r=Object.prototype.hasOwnProperty,s=Object.prototype.toString;e.exports=new i("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,n,i,a,o,u=[],c=e;for(t=0,n=c.length;t<n;t+=1){if(i=c[t],o=!1,"[object Object]"!==s.call(i))return!1;for(a in i)if(r.call(i,a)){if(o)return!1;o=!0}if(!o)return!1;if(-1!==u.indexOf(a))return!1;u.push(a)}return!0},construct:function(e){return null!==e?e:[]}})},function(e,t){e.exports=require("buffer")},function(e,t,n){"use strict";var i;try{i=n(27).Buffer}catch(e){}var r=n(0),s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";e.exports=new r("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,n,i=0,r=e.length,a=s;for(n=0;n<r;n++)if(!((t=a.indexOf(e.charAt(n)))>64)){if(t<0)return!1;i+=6}return i%8==0},construct:function(e){var t,n,r=e.replace(/[\r\n=]/g,""),a=r.length,o=s,u=0,c=[];for(t=0;t<a;t++)t%4==0&&t&&(c.push(u>>16&255),c.push(u>>8&255),c.push(255&u)),u=u<<6|o.indexOf(r.charAt(t));return 0==(n=a%4*6)?(c.push(u>>16&255),c.push(u>>8&255),c.push(255&u)):18===n?(c.push(u>>10&255),c.push(u>>2&255)):12===n&&c.push(u>>4&255),i?i.from?i.from(c):new i(c):c},predicate:function(e){return i&&i.isBuffer(e)},represent:function(e){var t,n,i="",r=0,a=e.length,o=s;for(t=0;t<a;t++)t%3==0&&t&&(i+=o[r>>18&63],i+=o[r>>12&63],i+=o[r>>6&63],i+=o[63&r]),r=(r<<8)+e[t];return 0==(n=a%3)?(i+=o[r>>18&63],i+=o[r>>12&63],i+=o[r>>6&63],i+=o[63&r]):2===n?(i+=o[r>>10&63],i+=o[r>>4&63],i+=o[r<<2&63],i+=o[64]):1===n&&(i+=o[r>>2&63],i+=o[r<<4&63],i+=o[64],i+=o[64]),i}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return"<<"===e||null===e}})},function(e,t,n){"use strict";var i=n(0),r=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),s=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");e.exports=new i("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==r.exec(e)||null!==s.exec(e))},construct:function(e){var t,n,i,a,o,u,c,h,l=0,p=null;if(null===(t=r.exec(e))&&(t=s.exec(e)),null===t)throw new Error("Date resolve error");if(n=+t[1],i=+t[2]-1,a=+t[3],!t[4])return new Date(Date.UTC(n,i,a));if(o=+t[4],u=+t[5],c=+t[6],t[7]){for(l=t[7].slice(0,3);l.length<3;)l+="0";l=+l}return t[9]&&(p=6e4*(60*+t[10]+ +(t[11]||0)),"-"===t[9]&&(p=-p)),h=new Date(Date.UTC(n,i,a,o,u,c,l)),p&&h.setTime(h.getTime()-p),h},instanceOf:Date,represent:function(e){return e.toISOString()}})},function(e,t,n){"use strict";var i=n(3),r=n(0),s=new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");var a=/^[-+]?[0-9]+e/;e.exports=new r("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!s.test(e)||"_"===e[e.length-1])},construct:function(e){var t,n,i,r;return n="-"===(t=e.replace(/_/g,"").toLowerCase())[0]?-1:1,r=[],"+-".indexOf(t[0])>=0&&(t=t.slice(1)),".inf"===t?1===n?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===t?NaN:t.indexOf(":")>=0?(t.split(":").forEach(function(e){r.unshift(parseFloat(e,10))}),t=0,i=1,r.forEach(function(e){t+=e*i,i*=60}),n*t):n*parseFloat(t,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!=0||i.isNegativeZero(e))},represent:function(e,t){var n;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(i.isNegativeZero(e))return"-0.0";return n=e.toString(10),a.test(n)?n.replace("e",".e"):n},defaultStyle:"lowercase"})},function(e,t,n){"use strict";var i=n(3),r=n(0);function s(e){return 48<=e&&e<=55}function a(e){return 48<=e&&e<=57}e.exports=new r("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,n,i=e.length,r=0,o=!1;if(!i)return!1;if("-"!==(t=e[r])&&"+"!==t||(t=e[++r]),"0"===t){if(r+1===i)return!0;if("b"===(t=e[++r])){for(r++;r<i;r++)if("_"!==(t=e[r])){if("0"!==t&&"1"!==t)return!1;o=!0}return o&&"_"!==t}if("x"===t){for(r++;r<i;r++)if("_"!==(t=e[r])){if(!(48<=(n=e.charCodeAt(r))&&n<=57||65<=n&&n<=70||97<=n&&n<=102))return!1;o=!0}return o&&"_"!==t}for(;r<i;r++)if("_"!==(t=e[r])){if(!s(e.charCodeAt(r)))return!1;o=!0}return o&&"_"!==t}if("_"===t)return!1;for(;r<i;r++)if("_"!==(t=e[r])){if(":"===t)break;if(!a(e.charCodeAt(r)))return!1;o=!0}return!(!o||"_"===t)&&(":"!==t||/^(:[0-5]?[0-9])+$/.test(e.slice(r)))},construct:function(e){var t,n,i=e,r=1,s=[];return-1!==i.indexOf("_")&&(i=i.replace(/_/g,"")),"-"!==(t=i[0])&&"+"!==t||("-"===t&&(r=-1),t=(i=i.slice(1))[0]),"0"===i?0:"0"===t?"b"===i[1]?r*parseInt(i.slice(2),2):"x"===i[1]?r*parseInt(i,16):r*parseInt(i,8):-1!==i.indexOf(":")?(i.split(":").forEach(function(e){s.unshift(parseInt(e,10))}),i=0,n=1,s.forEach(function(e){i+=e*n,n*=60}),r*i):r*parseInt(i,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1==0&&!i.isNegativeZero(e)},represent:{binary:function(e){return"0b"+e.toString(2)},octal:function(e){return"0"+e.toString(8)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return"0x"+e.toString(16).toUpperCase()}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t=e.length;return 4===t&&("true"===e||"True"===e||"TRUE"===e)||5===t&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return"true"===e||"True"===e||"TRUE"===e},predicate:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return!0;var t=e.length;return 1===t&&"~"===e||4===t&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"}},defaultStyle:"lowercase"})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}})},function(e,t,n){"use strict";var i=n(3);function r(e,t,n,i,r){this.name=e,this.buffer=t,this.position=n,this.line=i,this.column=r}r.prototype.getSnippet=function(e,t){var n,r,s,a,o;if(!this.buffer)return null;for(e=e||4,t=t||75,n="",r=this.position;r>0&&-1==="\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(r-1));)if(r-=1,this.position-r>t/2-1){n=" ... ",r+=5;break}for(s="",a=this.position;a<this.buffer.length&&-1==="\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(a));)if((a+=1)-this.position>t/2-1){s=" ... ",a-=5;break}return o=this.buffer.slice(r,a),i.repeat(" ",e)+n+o+s+"\n"+i.repeat(" ",e+this.position-r+n.length)+"^"},r.prototype.toString=function(e){var t,n="";return this.name&&(n+='in "'+this.name+'" '),n+="at line "+(this.line+1)+", column "+(this.column+1),e||(t=this.getSnippet())&&(n+=":\n"+t),n},e.exports=r},function(e,t,n){"use strict";var i=n(3),r=n(5),s=n(38),a=n(4),o=n(8),u=Object.prototype.hasOwnProperty,c=1,h=2,l=3,p=4,f=1,d=2,m=3,x=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,g=/[\x85\u2028\u2029]/,y=/[,\[\]\{\}]/,D=/^(?:!|!!|![a-z\-]+!)$/i,v=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function E(e){return 10===e||13===e}function C(e){return 9===e||32===e}function A(e){return 9===e||32===e||10===e||13===e}function S(e){return 44===e||91===e||93===e||123===e||125===e}function w(e){var t;return 48<=e&&e<=57?e-48:97<=(t=32|e)&&t<=102?t-97+10:-1}function F(e){return 48===e?"\0":97===e?"":98===e?"\b":116===e?"\t":9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"":95===e?" ":76===e?"\u2028":80===e?"\u2029":""}function b(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var k=new Array(256),B=new Array(256),T=0;T<256;T++)k[T]=F(T)?1:0,B[T]=F(T);function N(e,t){return new r(t,new s(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function I(e,t){throw N(e,t)}function M(e,t){e.onWarning&&e.onWarning.call(null,N(e,t))}var O={YAML:function(e,t,n){var i,r,s;null!==e.version&&I(e,"duplication of %YAML directive"),1!==n.length&&I(e,"YAML directive accepts exactly one argument"),null===(i=/^([0-9]+)\.([0-9]+)$/.exec(n[0]))&&I(e,"ill-formed argument of the YAML directive"),r=parseInt(i[1],10),s=parseInt(i[2],10),1!==r&&I(e,"unacceptable YAML version of the document"),e.version=n[0],e.checkLineBreaks=s<2,1!==s&&2!==s&&M(e,"unsupported YAML version of the document")},TAG:function(e,t,n){var i,r;2!==n.length&&I(e,"TAG directive accepts exactly two arguments"),i=n[0],r=n[1],D.test(i)||I(e,"ill-formed tag handle (first argument) of the TAG directive"),u.call(e.tagMap,i)&&I(e,'there is a previously declared suffix for "'+i+'" tag handle'),v.test(r)||I(e,"ill-formed tag prefix (second argument) of the TAG directive"),e.tagMap[i]=r}};function P(e,t,n,i){var r,s,a,o;if(t<n){if(o=e.input.slice(t,n),i)for(r=0,s=o.length;r<s;r+=1)9===(a=o.charCodeAt(r))||32<=a&&a<=1114111||I(e,"expected valid JSON character");else x.test(o)&&I(e,"the stream contains non-printable characters");e.result+=o}}function L(e,t,n,r){var s,a,o,c;for(i.isObject(n)||I(e,"cannot merge mappings; the provided source object is unacceptable"),o=0,c=(s=Object.keys(n)).length;o<c;o+=1)a=s[o],u.call(t,a)||(t[a]=n[a],r[a]=!0)}function j(e,t,n,i,r,s,a,o){var c,h;if(r=String(r),null===t&&(t={}),"tag:yaml.org,2002:merge"===i)if(Array.isArray(s))for(c=0,h=s.length;c<h;c+=1)L(e,t,s[c],n);else L(e,t,s,n);else e.json||u.call(n,r)||!u.call(t,r)||(e.line=a||e.line,e.position=o||e.position,I(e,"duplicated mapping key")),t[r]=s,delete n[r];return t}function J(e){var t;10===(t=e.input.charCodeAt(e.position))?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):I(e,"a line break is expected"),e.line+=1,e.lineStart=e.position}function U(e,t,n){for(var i=0,r=e.input.charCodeAt(e.position);0!==r;){for(;C(r);)r=e.input.charCodeAt(++e.position);if(t&&35===r)do{r=e.input.charCodeAt(++e.position)}while(10!==r&&13!==r&&0!==r);if(!E(r))break;for(J(e),r=e.input.charCodeAt(e.position),i++,e.lineIndent=0;32===r;)e.lineIndent++,r=e.input.charCodeAt(++e.position)}return-1!==n&&0!==i&&e.lineIndent<n&&M(e,"deficient indentation"),i}function z(e){var t,n=e.position;return!(45!==(t=e.input.charCodeAt(n))&&46!==t||t!==e.input.charCodeAt(n+1)||t!==e.input.charCodeAt(n+2)||(n+=3,0!==(t=e.input.charCodeAt(n))&&!A(t)))}function X(e,t){1===t?e.result+=" ":t>1&&(e.result+=i.repeat("\n",t-1))}function R(e,t){var n,i,r=e.tag,s=e.anchor,a=[],o=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=a),i=e.input.charCodeAt(e.position);0!==i&&45===i&&A(e.input.charCodeAt(e.position+1));)if(o=!0,e.position++,U(e,!0,-1)&&e.lineIndent<=t)a.push(null),i=e.input.charCodeAt(e.position);else if(n=e.line,H(e,t,l,!1,!0),a.push(e.result),U(e,!0,-1),i=e.input.charCodeAt(e.position),(e.line===n||e.lineIndent>t)&&0!==i)I(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break;return!!o&&(e.tag=r,e.anchor=s,e.kind="sequence",e.result=a,!0)}function K(e){var t,n,i,r,s=!1,a=!1;if(33!==(r=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&I(e,"duplication of a tag property"),60===(r=e.input.charCodeAt(++e.position))?(s=!0,r=e.input.charCodeAt(++e.position)):33===r?(a=!0,n="!!",r=e.input.charCodeAt(++e.position)):n="!",t=e.position,s){do{r=e.input.charCodeAt(++e.position)}while(0!==r&&62!==r);e.position<e.length?(i=e.input.slice(t,e.position),r=e.input.charCodeAt(++e.position)):I(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==r&&!A(r);)33===r&&(a?I(e,"tag suffix cannot contain exclamation marks"):(n=e.input.slice(t-1,e.position+1),D.test(n)||I(e,"named tag handle cannot contain such characters"),a=!0,t=e.position+1)),r=e.input.charCodeAt(++e.position);i=e.input.slice(t,e.position),y.test(i)&&I(e,"tag suffix cannot contain flow indicator characters")}return i&&!v.test(i)&&I(e,"tag name cannot contain such characters: "+i),s?e.tag=i:u.call(e.tagMap,n)?e.tag=e.tagMap[n]+i:"!"===n?e.tag="!"+i:"!!"===n?e.tag="tag:yaml.org,2002:"+i:I(e,'undeclared tag handle "'+n+'"'),!0}function _(e){var t,n;if(38!==(n=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&I(e,"duplication of an anchor property"),n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!A(n)&&!S(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&I(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function H(e,t,n,r,s){var a,o,x,g,y,D,v,F,T=1,N=!1,M=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,a=o=x=p===n||l===n,r&&U(e,!0,-1)&&(N=!0,e.lineIndent>t?T=1:e.lineIndent===t?T=0:e.lineIndent<t&&(T=-1)),1===T)for(;K(e)||_(e);)U(e,!0,-1)?(N=!0,x=a,e.lineIndent>t?T=1:e.lineIndent===t?T=0:e.lineIndent<t&&(T=-1)):x=!1;if(x&&(x=N||s),1!==T&&p!==n||(v=c===n||h===n?t:t+1,F=e.position-e.lineStart,1===T?x&&(R(e,F)||function(e,t,n){var i,r,s,a,o,u=e.tag,c=e.anchor,l={},f={},d=null,m=null,x=null,g=!1,y=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=l),o=e.input.charCodeAt(e.position);0!==o;){if(i=e.input.charCodeAt(e.position+1),s=e.line,a=e.position,63!==o&&58!==o||!A(i)){if(!H(e,n,h,!1,!0))break;if(e.line===s){for(o=e.input.charCodeAt(e.position);C(o);)o=e.input.charCodeAt(++e.position);if(58===o)A(o=e.input.charCodeAt(++e.position))||I(e,"a whitespace character is expected after the key-value separator within a block mapping"),g&&(j(e,l,f,d,m,null),d=m=x=null),y=!0,g=!1,r=!1,d=e.tag,m=e.result;else{if(!y)return e.tag=u,e.anchor=c,!0;I(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!y)return e.tag=u,e.anchor=c,!0;I(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===o?(g&&(j(e,l,f,d,m,null),d=m=x=null),y=!0,g=!0,r=!0):g?(g=!1,r=!0):I(e,"incomplete explicit mapping pair; a key node is missed"),e.position+=1,o=i;if((e.line===s||e.lineIndent>t)&&(H(e,t,p,!0,r)&&(g?m=e.result:x=e.result),g||(j(e,l,f,d,m,x,s,a),d=m=x=null),U(e,!0,-1),o=e.input.charCodeAt(e.position)),e.lineIndent>t&&0!==o)I(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return g&&j(e,l,f,d,m,null),y&&(e.tag=u,e.anchor=c,e.kind="mapping",e.result=l),y}(e,F,v))||function(e,t){var n,i,r,s,a,o,u,h,l,p,f=!0,d=e.tag,m=e.anchor,x={};if(91===(p=e.input.charCodeAt(e.position)))r=93,o=!1,i=[];else{if(123!==p)return!1;r=125,o=!0,i={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=i),p=e.input.charCodeAt(++e.position);0!==p;){if(U(e,!0,t),(p=e.input.charCodeAt(e.position))===r)return e.position++,e.tag=d,e.anchor=m,e.kind=o?"mapping":"sequence",e.result=i,!0;f||I(e,"missed comma between flow collection entries"),h=u=l=null,s=a=!1,63===p&&A(e.input.charCodeAt(e.position+1))&&(s=a=!0,e.position++,U(e,!0,t)),n=e.line,H(e,t,c,!1,!0),h=e.tag,u=e.result,U(e,!0,t),p=e.input.charCodeAt(e.position),!a&&e.line!==n||58!==p||(s=!0,p=e.input.charCodeAt(++e.position),U(e,!0,t),H(e,t,c,!1,!0),l=e.result),o?j(e,i,x,h,u,l):s?i.push(j(e,null,x,h,u,l)):i.push(u),U(e,!0,t),44===(p=e.input.charCodeAt(e.position))?(f=!0,p=e.input.charCodeAt(++e.position)):f=!1}I(e,"unexpected end of the stream within a flow collection")}(e,v)?M=!0:(o&&function(e,t){var n,r,s,a,o,u=f,c=!1,h=!1,l=t,p=0,x=!1;if(124===(a=e.input.charCodeAt(e.position)))r=!1;else{if(62!==a)return!1;r=!0}for(e.kind="scalar",e.result="";0!==a;)if(43===(a=e.input.charCodeAt(++e.position))||45===a)f===u?u=43===a?m:d:I(e,"repeat of a chomping mode identifier");else{if(!((s=48<=(o=a)&&o<=57?o-48:-1)>=0))break;0===s?I(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):h?I(e,"repeat of an indentation width identifier"):(l=t+s-1,h=!0)}if(C(a)){do{a=e.input.charCodeAt(++e.position)}while(C(a));if(35===a)do{a=e.input.charCodeAt(++e.position)}while(!E(a)&&0!==a)}for(;0!==a;){for(J(e),e.lineIndent=0,a=e.input.charCodeAt(e.position);(!h||e.lineIndent<l)&&32===a;)e.lineIndent++,a=e.input.charCodeAt(++e.position);if(!h&&e.lineIndent>l&&(l=e.lineIndent),E(a))p++;else{if(e.lineIndent<l){u===m?e.result+=i.repeat("\n",c?1+p:p):u===f&&c&&(e.result+="\n");break}for(r?C(a)?(x=!0,e.result+=i.repeat("\n",c?1+p:p)):x?(x=!1,e.result+=i.repeat("\n",p+1)):0===p?c&&(e.result+=" "):e.result+=i.repeat("\n",p):e.result+=i.repeat("\n",c?1+p:p),c=!0,h=!0,p=0,n=e.position;!E(a)&&0!==a;)a=e.input.charCodeAt(++e.position);P(e,n,e.position,!1)}}return!0}(e,v)||function(e,t){var n,i,r;if(39!==(n=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,i=r=e.position;0!==(n=e.input.charCodeAt(e.position));)if(39===n){if(P(e,i,e.position,!0),39!==(n=e.input.charCodeAt(++e.position)))return!0;i=e.position,e.position++,r=e.position}else E(n)?(P(e,i,r,!0),X(e,U(e,!1,t)),i=r=e.position):e.position===e.lineStart&&z(e)?I(e,"unexpected end of the document within a single quoted scalar"):(e.position++,r=e.position);I(e,"unexpected end of the stream within a single quoted scalar")}(e,v)||function(e,t){var n,i,r,s,a,o,u;if(34!==(o=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,n=i=e.position;0!==(o=e.input.charCodeAt(e.position));){if(34===o)return P(e,n,e.position,!0),e.position++,!0;if(92===o){if(P(e,n,e.position,!0),E(o=e.input.charCodeAt(++e.position)))U(e,!1,t);else if(o<256&&k[o])e.result+=B[o],e.position++;else if((a=120===(u=o)?2:117===u?4:85===u?8:0)>0){for(r=a,s=0;r>0;r--)(a=w(o=e.input.charCodeAt(++e.position)))>=0?s=(s<<4)+a:I(e,"expected hexadecimal character");e.result+=b(s),e.position++}else I(e,"unknown escape sequence");n=i=e.position}else E(o)?(P(e,n,i,!0),X(e,U(e,!1,t)),n=i=e.position):e.position===e.lineStart&&z(e)?I(e,"unexpected end of the document within a double quoted scalar"):(e.position++,i=e.position)}I(e,"unexpected end of the stream within a double quoted scalar")}(e,v)?M=!0:!function(e){var t,n,i;if(42!==(i=e.input.charCodeAt(e.position)))return!1;for(i=e.input.charCodeAt(++e.position),t=e.position;0!==i&&!A(i)&&!S(i);)i=e.input.charCodeAt(++e.position);return e.position===t&&I(e,"name of an alias node must contain at least one character"),n=e.input.slice(t,e.position),e.anchorMap.hasOwnProperty(n)||I(e,'unidentified alias "'+n+'"'),e.result=e.anchorMap[n],U(e,!0,-1),!0}(e)?function(e,t,n){var i,r,s,a,o,u,c,h,l=e.kind,p=e.result;if(A(h=e.input.charCodeAt(e.position))||S(h)||35===h||38===h||42===h||33===h||124===h||62===h||39===h||34===h||37===h||64===h||96===h)return!1;if((63===h||45===h)&&(A(i=e.input.charCodeAt(e.position+1))||n&&S(i)))return!1;for(e.kind="scalar",e.result="",r=s=e.position,a=!1;0!==h;){if(58===h){if(A(i=e.input.charCodeAt(e.position+1))||n&&S(i))break}else if(35===h){if(A(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&z(e)||n&&S(h))break;if(E(h)){if(o=e.line,u=e.lineStart,c=e.lineIndent,U(e,!1,-1),e.lineIndent>=t){a=!0,h=e.input.charCodeAt(e.position);continue}e.position=s,e.line=o,e.lineStart=u,e.lineIndent=c;break}}a&&(P(e,r,s,!1),X(e,e.line-o),r=s=e.position,a=!1),C(h)||(s=e.position+1),h=e.input.charCodeAt(++e.position)}return P(e,r,s,!1),!!e.result||(e.kind=l,e.result=p,!1)}(e,v,c===n)&&(M=!0,null===e.tag&&(e.tag="?")):(M=!0,null===e.tag&&null===e.anchor||I(e,"alias node should not have any properties")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===T&&(M=x&&R(e,F))),null!==e.tag&&"!"!==e.tag)if("?"===e.tag){for(g=0,y=e.implicitTypes.length;g<y;g+=1)if((D=e.implicitTypes[g]).resolve(e.result)){e.result=D.construct(e.result),e.tag=D.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else u.call(e.typeMap[e.kind||"fallback"],e.tag)?(D=e.typeMap[e.kind||"fallback"][e.tag],null!==e.result&&D.kind!==e.kind&&I(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+D.kind+'", not "'+e.kind+'"'),D.resolve(e.result)?(e.result=D.construct(e.result),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):I(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")):I(e,"unknown tag !<"+e.tag+">");return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||M}function W(e){var t,n,i,r,s=e.position,a=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};0!==(r=e.input.charCodeAt(e.position))&&(U(e,!0,-1),r=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==r));){for(a=!0,r=e.input.charCodeAt(++e.position),t=e.position;0!==r&&!A(r);)r=e.input.charCodeAt(++e.position);for(i=[],(n=e.input.slice(t,e.position)).length<1&&I(e,"directive name must not be less than one character in length");0!==r;){for(;C(r);)r=e.input.charCodeAt(++e.position);if(35===r){do{r=e.input.charCodeAt(++e.position)}while(0!==r&&!E(r));break}if(E(r))break;for(t=e.position;0!==r&&!A(r);)r=e.input.charCodeAt(++e.position);i.push(e.input.slice(t,e.position))}0!==r&&J(e),u.call(O,n)?O[n](e,n,i):M(e,'unknown document directive "'+n+'"')}U(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,U(e,!0,-1)):a&&I(e,"directives end mark is expected"),H(e,e.lineIndent-1,p,!1,!0),U(e,!0,-1),e.checkLineBreaks&&g.test(e.input.slice(s,e.position))&&M(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&z(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,U(e,!0,-1)):e.position<e.length-1&&I(e,"end of the stream or a document separator is expected")}function V(e,t){e=String(e),t=t||{},0!==e.length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var n=new function(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||o,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[]}(e,t);for(n.input+="\0";32===n.input.charCodeAt(n.position);)n.lineIndent+=1,n.position+=1;for(;n.position<n.length-1;)W(n);return n.documents}function q(e,t,n){var i,r,s=V(e,n);if("function"!=typeof t)return s;for(i=0,r=s.length;i<r;i+=1)t(s[i])}function G(e,t){var n=V(e,t);if(0!==n.length){if(1===n.length)return n[0];throw new r("expected a single document in the stream, but found more")}}e.exports.loadAll=q,e.exports.load=G,e.exports.safeLoadAll=function(e,t,n){if("function"!=typeof t)return q(e,i.extend({schema:a},n));q(e,t,i.extend({schema:a},n))},e.exports.safeLoad=function(e,t){return G(e,i.extend({schema:a},t))}},function(e,t,n){"use strict";var i=n(39),r=n(19);function s(e){return function(){throw new Error("Function "+e+" is deprecated and cannot be used.")}}e.exports.Type=n(0),e.exports.Schema=n(2),e.exports.FAILSAFE_SCHEMA=n(9),e.exports.JSON_SCHEMA=n(13),e.exports.CORE_SCHEMA=n(14),e.exports.DEFAULT_SAFE_SCHEMA=n(4),e.exports.DEFAULT_FULL_SCHEMA=n(8),e.exports.load=i.load,e.exports.loadAll=i.loadAll,e.exports.safeLoad=i.safeLoad,e.exports.safeLoadAll=i.safeLoadAll,e.exports.dump=r.dump,e.exports.safeDump=r.safeDump,e.exports.YAMLException=n(5),e.exports.MINIMAL_SCHEMA=n(9),e.exports.SAFE_SCHEMA=n(4),e.exports.DEFAULT_SCHEMA=n(8),e.exports.scan=s("scan"),e.exports.parse=s("parse"),e.exports.compose=s("compose"),e.exports.addConstructor=s("addConstructor")},function(e,t,n){"use strict";var i=n(40);e.exports=i},function(e,t,n){"use strict";function i(){return""}function r(e,t,n){return e.slice(t,n).replace(/\S/g," ")}e.exports=function(e,t){for(var n,s,a=!1,o=!1,u=0,c="",h=!1===(t=t||{}).whitespace?i:r,l=0;l<e.length;l++){if(n=e[l],s=e[l+1],!o&&'"'===n)"\\"===e[l-1]&&"\\"!==e[l-2]||(a=!a);if(!a)if(o||n+s!=="//"){if(1===o&&n+s==="\r\n"){o=!1,c+=h(e,u,++l),u=l;continue}if(1===o&&"\n"===n)o=!1,c+=h(e,u,l),u=l;else{if(!o&&n+s==="/*"){c+=e.slice(u,l),u=l,o=2,l++;continue}if(2===o&&n+s==="*/"){o=!1,c+=h(e,u,++l+1),u=l+1;continue}}}else c+=e.slice(u,l),u=l,o=1,l++}return c+(o?h(e.substr(u)):e.substr(u))}},function(e,t,n){"use strict";var i=n(1);function r(e){return e[e.length-1]===i.sep?e.slice(0,-1):e}e.exports=function(e,t){return e=r(e),t=r(t),"win32"===process.platform&&(e=e.toLowerCase(),t=t.toLowerCase()),0===e.lastIndexOf(t,0)&&(e[t.length]===i.sep||void 0===e[t.length])}},function(e,t,n){"use strict";(function(t){const i=n(6),r=n(1),s=n(10),a=n(43),o=n(42),u=[".wistrc.yaml",".wistrc.yml",".wistrc.json"];function c(e){return i.readFileSync(e,"utf8").replace(/^\ufeff/,"")}function h(e){const t=e.filePath;let i;switch(r.extname(t)){case".yaml":case".yml":i=function(e){const t=n(41);try{return t.safeLoad(c(e))||{}}catch(t){throw t.message=`Cannot read config file: ${e}\nError: ${t.message}`,t}}(t);break;default:i=function(e){try{return JSON.parse(o(c(e)))}catch(t){throw t.message=`Cannot read config file: ${e}\nError: ${t.message}`,t}}(t)}return s.merge(s.createEmptyConfig(),i)}function l(e){const n=r.resolve(t,"../../../");return e&&a(e,n)?r.join(r.resolve(e)):r.join(n)}function p(e){const t=l(e);return r.join(t,"node_modules")}function f(e,t){const n=r.resolve(t||"",e);return{filePath:n,configFullName:n}}e.exports={getBaseDir:l,getLookupPath:p,load:function(e,t,n){const i=f(e,n),s=t.configCache.getConfig(i.configFullName);if(s)return s;const a=function(e,t){return p(r.dirname(e.filePath)),h(e)}(i);return a&&(a.filePath=i.filePath,a.baseDirectory=r.dirname(i.filePath),t.configCache.setConfig(i.configFullName,a)),a},resolve:f,CONFIG_FILES:u,getFilenameForDirectory(e){for(let t=0,n=u.length;t<n;t++){const n=r.join(e,u[t]);if(i.existsSync(n)&&i.statSync(n).isFile())return n}return null}}}).call(this,"/")},function(e,t){e.exports=require("os")},function(e,t,n){"use strict";const i=n(1),r=n(45),s=n(10),a=n(44),o=n(18),u=n(17),c=r.homedir();e.exports=class{constructor(e,t){e=e||{},this.linterContext=t,this.options=e,this.ignore=e.ignore,this.ignorePath=e.ignorePath,this.configCache=new o,this.baseConfig=e.baseConfig?s.merge({},a.loadObject(e.baseConfig,this)):{rules:{}},this.baseConfig.filePath="",this.baseConfig.baseDirectory=this.options.cwd,this.configCache.setConfig(this.baseConfig.filePath,this.baseConfig),this.configCache.setMergedVectorConfig(this.baseConfig.filePath,this.baseConfig),this.loadSpecificConfig(e.configFile);const n={rules:this.options.rules};this.cliConfig={},Object.keys(n).forEach(e=>{const t=n[e];t&&(this.cliConfig[e]=t)})}loadSpecificConfig(e){e&&(e=i.resolve(this.options.cwd,e),this.specificConfig=a.load(e,this))}getPersonalConfig(){if(void 0===this.personalConfig){let e;const t=a.getFilenameForDirectory(c);t&&(e=a.load(t,this)),this.personalConfig=e||null}return this.personalConfig}getConfigHierarchy(e){let t=[this.baseConfig];return t=t.concat(this.getLocalConfigHierarchy(e)),this.specificConfig&&t.push(this.specificConfig),t}getLocalConfigHierarchy(e){const t=this.findLocalConfigFiles(e),n=a.getFilenameForDirectory(this.options.cwd),r=[],s=[];for(const e of t){const t=i.dirname(e),o=this.configCache.getHierarchyLocalConfigs(t);if(o){const e=o.concat(s.reverse());return this.configCache.setHierarchyLocalConfigs(r,e),e}if(t===c&&e!==n)continue;const u=a.load(e,this);if(u&&(s.push(u),r.push(t),u.root))break}if(!s.length&&!this.specificConfig){const n=this.getPersonalConfig();if(n)s.push(n);else if(!((o=this.options).rules&&Object.keys(o.rules).length>0||this.options.baseConfig)){const n=new Error("No Wist configuration found.");throw n.messageTemplate="no-config-found",n.messageData={directory:e,filesExamined:t},n}}var o;return this.configCache.setHierarchyLocalConfigs(r,s.reverse()),s}getConfigVector(e){const t=e?i.dirname(e):this.options.cwd;return this.getConfigHierarchy(t).map(n=>{const r={filePath:n.filePath,matchingOverrides:[]};if(n.overrides){const a=i.relative(n.baseDirectory,e||t);n.overrides.forEach((e,t)=>{s.pathMatchesGlobs(a,e.files,e.excludedFiles)&&r.matchingOverrides.push(t)})}return r})}findLocalConfigFiles(e){return this.localConfigFinder||(this.localConfigFinder=new u(a.CONFIG_FILES,this.options.cwd)),this.localConfigFinder.findAllInDirectoryAndParents(e)}getConfig(e){const t=this.getConfigVector(e);let n=this.configCache.getMergedConfig(t);return n||(n=s.getConfigFromVector(t,this.configCache),n=s.merge(n,this.cliConfig),this.configCache.setMergedConfig(t,n),n)}}},function(e,t,n){"use strict";function i(e,t,n){e instanceof RegExp&&(e=r(e,n)),t instanceof RegExp&&(t=r(t,n));var i=s(e,t,n);return i&&{start:i[0],end:i[1],pre:n.slice(0,i[0]),body:n.slice(i[0]+e.length,i[1]),post:n.slice(i[1]+t.length)}}function r(e,t){var n=t.match(e);return n?n[0]:null}function s(e,t,n){var i,r,s,a,o,u=n.indexOf(e),c=n.indexOf(t,u+1),h=u;if(u>=0&&c>0){for(i=[],s=n.length;h>=0&&!o;)h==u?(i.push(h),u=n.indexOf(e,h+1)):1==i.length?o=[i.pop(),c]:((r=i.pop())<s&&(s=r,a=c),c=n.indexOf(t,h+1)),h=u<c&&u>=0?u:c;i.length&&(o=[s,a])}return o}e.exports=i,i.range=s},function(e,t){e.exports=function(e,t){for(var i=[],r=0;r<e.length;r++){var s=t(e[r],r);n(s)?i.push.apply(i,s):i.push(s)}return i};var n=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){var i=n(48),r=n(47);e.exports=function(e){if(!e)return[];"{}"===e.substr(0,2)&&(e="\\{\\}"+e.substr(2));return function e(t,n){var s=[];var a=r("{","}",t);if(!a||/\$$/.test(a.pre))return[t];var u=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(a.body);var c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(a.body);var l=u||c;var x=a.body.indexOf(",")>=0;if(!l&&!x)return a.post.match(/,.*\}/)?(t=a.pre+"{"+a.body+o+a.post,e(t)):[t];var g;if(l)g=a.body.split(/\.\./);else if(1===(g=function e(t){if(!t)return[""];var n=[];var i=r("{","}",t);if(!i)return t.split(",");var s=i.pre;var a=i.body;var o=i.post;var u=s.split(",");u[u.length-1]+="{"+a+"}";var c=e(o);o.length&&(u[u.length-1]+=c.shift(),u.push.apply(u,c));n.push.apply(n,u);return n}(a.body)).length&&1===(g=e(g[0],!1).map(p)).length){var y=a.post.length?e(a.post,!1):[""];return y.map(function(e){return a.pre+g[0]+e})}var D=a.pre;var y=a.post.length?e(a.post,!1):[""];var v;if(l){var E=h(g[0]),C=h(g[1]),A=Math.max(g[0].length,g[1].length),S=3==g.length?Math.abs(h(g[2])):1,w=d,F=C<E;F&&(S*=-1,w=m);var b=g.some(f);v=[];for(var k=E;w(k,C);k+=S){var B;if(c)"\\"===(B=String.fromCharCode(k))&&(B="");else if(B=String(k),b){var T=A-B.length;if(T>0){var N=new Array(T+1).join("0");B=k<0?"-"+N+B.slice(1):N+B}}v.push(B)}}else v=i(g,function(t){return e(t,!1)});for(var I=0;I<v.length;I++)for(var M=0;M<y.length;M++){var O=D+v[I]+y[M];(!n||l||O)&&s.push(O)}return s}(function(e){return e.split("\\\\").join(s).split("\\{").join(a).split("\\}").join(o).split("\\,").join(u).split("\\.").join(c)}(e),!0).map(l)};var s="\0SLASH"+Math.random()+"\0",a="\0OPEN"+Math.random()+"\0",o="\0CLOSE"+Math.random()+"\0",u="\0COMMA"+Math.random()+"\0",c="\0PERIOD"+Math.random()+"\0";function h(e){return parseInt(e,10)==e?parseInt(e,10):e.charCodeAt(0)}function l(e){return e.split(s).join("\\").split(a).join("{").split(o).join("}").split(u).join(",").split(c).join(".")}function p(e){return"{"+e+"}"}function f(e){return/^-?0\d/.test(e)}function d(e,t){return e<=t}function m(e,t){return e>=t}},function(e,t,n){e.exports=d,d.Minimatch=m;var i={sep:"/"};try{i=n(1)}catch(e){}var r=d.GLOBSTAR=m.GLOBSTAR={},s=n(49),a={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},o="[^/]",u=o+"*?",c="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",h="(?:(?!(?:\\/|^)\\.).)*?",l="().*{}+?[]^$\\!".split("").reduce(function(e,t){return e[t]=!0,e},{});var p=/\/+/;function f(e,t){e=e||{},t=t||{};var n={};return Object.keys(t).forEach(function(e){n[e]=t[e]}),Object.keys(e).forEach(function(t){n[t]=e[t]}),n}function d(e,t,n){if("string"!=typeof t)throw new TypeError("glob pattern string required");return n||(n={}),!(!n.nocomment&&"#"===t.charAt(0))&&(""===t.trim()?""===e:new m(t,n).match(e))}function m(e,t){if(!(this instanceof m))return new m(e,t);if("string"!=typeof e)throw new TypeError("glob pattern string required");t||(t={}),e=e.trim(),"/"!==i.sep&&(e=e.split(i.sep).join("/")),this.options=t,this.set=[],this.pattern=e,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function x(e,t){if(t||(t=this instanceof m?this.options:{}),void 0===(e=void 0===e?this.pattern:e))throw new TypeError("undefined pattern");return t.nobrace||!e.match(/\{.*\}/)?[e]:s(e)}d.filter=function(e,t){return t=t||{},function(n,i,r){return d(n,e,t)}},d.defaults=function(e){if(!e||!Object.keys(e).length)return d;var t=d,n=function(n,i,r){return t.minimatch(n,i,f(e,r))};return n.Minimatch=function(n,i){return new t.Minimatch(n,f(e,i))},n},m.defaults=function(e){return e&&Object.keys(e).length?d.defaults(e).Minimatch:m},m.prototype.debug=function(){},m.prototype.make=function(){if(this._made)return;var e=this.pattern,t=this.options;if(!t.nocomment&&"#"===e.charAt(0))return void(this.comment=!0);if(!e)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();t.debug&&(this.debug=console.error);this.debug(this.pattern,n),n=this.globParts=n.map(function(e){return e.split(p)}),this.debug(this.pattern,n),n=n.map(function(e,t,n){return e.map(this.parse,this)},this),this.debug(this.pattern,n),n=n.filter(function(e){return-1===e.indexOf(!1)}),this.debug(this.pattern,n),this.set=n},m.prototype.parseNegate=function(){var e=this.pattern,t=!1,n=0;if(this.options.nonegate)return;for(var i=0,r=e.length;i<r&&"!"===e.charAt(i);i++)t=!t,n++;n&&(this.pattern=e.substr(n));this.negate=t},d.braceExpand=function(e,t){return x(e,t)},m.prototype.braceExpand=x,m.prototype.parse=function(e,t){if(e.length>65536)throw new TypeError("pattern is too long");var n=this.options;if(!n.noglobstar&&"**"===e)return r;if(""===e)return"";var i,s="",c=!!n.nocase,h=!1,p=[],f=[],d=!1,m=-1,x=-1,y="."===e.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",D=this;function v(){if(i){switch(i){case"*":s+=u,c=!0;break;case"?":s+=o,c=!0;break;default:s+="\\"+i}D.debug("clearStateChar %j %j",i,s),i=!1}}for(var E,C=0,A=e.length;C<A&&(E=e.charAt(C));C++)if(this.debug("%s\t%s %s %j",e,C,s,E),h&&l[E])s+="\\"+E,h=!1;else switch(E){case"/":return!1;case"\\":v(),h=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",e,C,s,E),d){this.debug("  in class"),"!"===E&&C===x+1&&(E="^"),s+=E;continue}D.debug("call clearStateChar %j",i),v(),i=E,n.noext&&v();continue;case"(":if(d){s+="(";continue}if(!i){s+="\\(";continue}p.push({type:i,start:C-1,reStart:s.length,open:a[i].open,close:a[i].close}),s+="!"===i?"(?:(?!(?:":"(?:",this.debug("plType %j %j",i,s),i=!1;continue;case")":if(d||!p.length){s+="\\)";continue}v(),c=!0;var S=p.pop();s+=S.close,"!"===S.type&&f.push(S),S.reEnd=s.length;continue;case"|":if(d||!p.length||h){s+="\\|",h=!1;continue}v(),s+="|";continue;case"[":if(v(),d){s+="\\"+E;continue}d=!0,x=C,m=s.length,s+=E;continue;case"]":if(C===x+1||!d){s+="\\"+E,h=!1;continue}if(d){var w=e.substring(x+1,C);try{RegExp("["+w+"]")}catch(e){var F=this.parse(w,g);s=s.substr(0,m)+"\\["+F[0]+"\\]",c=c||F[1],d=!1;continue}}c=!0,d=!1,s+=E;continue;default:v(),h?h=!1:!l[E]||"^"===E&&d||(s+="\\"),s+=E}d&&(w=e.substr(x+1),F=this.parse(w,g),s=s.substr(0,m)+"\\["+F[0],c=c||F[1]);for(S=p.pop();S;S=p.pop()){var b=s.slice(S.reStart+S.open.length);this.debug("setting tail",s,S),b=b.replace(/((?:\\{2}){0,64})(\\?)\|/g,function(e,t,n){return n||(n="\\"),t+t+n+"|"}),this.debug("tail=%j\n   %s",b,b,S,s);var k="*"===S.type?u:"?"===S.type?o:"\\"+S.type;c=!0,s=s.slice(0,S.reStart)+k+"\\("+b}v(),h&&(s+="\\\\");var B=!1;switch(s.charAt(0)){case".":case"[":case"(":B=!0}for(var T=f.length-1;T>-1;T--){var N=f[T],I=s.slice(0,N.reStart),M=s.slice(N.reStart,N.reEnd-8),O=s.slice(N.reEnd-8,N.reEnd),P=s.slice(N.reEnd);O+=P;var L=I.split("(").length-1,j=P;for(C=0;C<L;C++)j=j.replace(/\)[+*?]?/,"");var J="";""===(P=j)&&t!==g&&(J="$");var U=I+M+P+J+O;s=U}""!==s&&c&&(s="(?=.)"+s);B&&(s=y+s);if(t===g)return[s,c];if(!c)return e.replace(/\\(.)/g,"$1");var z=n.nocase?"i":"";try{var X=new RegExp("^"+s+"$",z)}catch(e){return new RegExp("$.")}return X._glob=e,X._src=s,X};var g={};d.makeRe=function(e,t){return new m(e,t||{}).makeRe()},m.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var e=this.set;if(!e.length)return this.regexp=!1,this.regexp;var t=this.options,n=t.noglobstar?u:t.dot?c:h,i=t.nocase?"i":"",s=e.map(function(e){return e.map(function(e){return e===r?n:"string"==typeof e?e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):e._src}).join("\\/")}).join("|");s="^(?:"+s+")$",this.negate&&(s="^(?!"+s+").*$");try{this.regexp=new RegExp(s,i)}catch(e){this.regexp=!1}return this.regexp},d.match=function(e,t,n){var i=new m(t,n=n||{});return e=e.filter(function(e){return i.match(e)}),i.options.nonull&&!e.length&&e.push(t),e},m.prototype.match=function(e,t){if(this.debug("match",e,this.pattern),this.comment)return!1;if(this.empty)return""===e;if("/"===e&&t)return!0;var n=this.options;"/"!==i.sep&&(e=e.split(i.sep).join("/"));e=e.split(p),this.debug(this.pattern,"split",e);var r,s,a=this.set;for(this.debug(this.pattern,"set",a),s=e.length-1;s>=0&&!(r=e[s]);s--);for(s=0;s<a.length;s++){var o=a[s],u=e;n.matchBase&&1===o.length&&(u=[r]);var c=this.matchOne(u,o,t);if(c)return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},m.prototype.matchOne=function(e,t,n){var i=this.options;this.debug("matchOne",{this:this,file:e,pattern:t}),this.debug("matchOne",e.length,t.length);for(var s=0,a=0,o=e.length,u=t.length;s<o&&a<u;s++,a++){this.debug("matchOne loop");var c,h=t[a],l=e[s];if(this.debug(t,h,l),!1===h)return!1;if(h===r){this.debug("GLOBSTAR",[t,h,l]);var p=s,f=a+1;if(f===u){for(this.debug("** at the end");s<o;s++)if("."===e[s]||".."===e[s]||!i.dot&&"."===e[s].charAt(0))return!1;return!0}for(;p<o;){var d=e[p];if(this.debug("\nglobstar while",e,p,t,f,d),this.matchOne(e.slice(p),t.slice(f),n))return this.debug("globstar found match!",p,o,d),!0;if("."===d||".."===d||!i.dot&&"."===d.charAt(0)){this.debug("dot detected!",e,p,t,f);break}this.debug("globstar swallow a segment, and continue"),p++}return!(!n||(this.debug("\n>>> no match, partial?",e,p,t,f),p!==o))}if("string"==typeof h?(c=i.nocase?l.toLowerCase()===h.toLowerCase():l===h,this.debug("string match",h,l,c)):(c=l.match(h),this.debug("pattern match",h,l,c)),!c)return!1}if(s===o&&a===u)return!0;if(s===o)return n;if(a===u)return s===o-1&&""===e[s];throw new Error("wtf?")}},function(e,t,n){"use strict";(function(t){const i=n(6),r=n(1);e.exports=function(e,n){e?r.resolve(n,e):e=r.join(t,"rules");const s=Object.create(null);return i.readdirSync(e).forEach(t=>{".js"===r.extname(t)&&(s[t.slice(0,-3)]=r.join(e,t))}),s}}).call(this,"/")},function(e,t,n){"use strict";const i=n(51);e.exports=class{constructor(){this._rules=Object.create(null),this.load()}define(e,t){this._rules[e]=t}load(e,t){const n=i(e,t);Object.keys(n).forEach(e=>{this.define(e,n[e])})}get(e){return"string"==typeof this._rules[e]?n(11)(this._rules[e]):this._rules[e]}getAllLoadedRules(){const e=new Map;return Object.keys(this._rules).forEach(t=>{const n=this.get(t);e.set(t,n)}),e}}},function(e,t){e.exports=require("events")},function(e,t,n){"use strict";const i=n(53).EventEmitter,r=n(52),s=n(10);function a(e){return Array.isArray(e)?e[0]:e}e.exports=class extends i{constructor(){super(),this.messages=[],this.rules=new r}reset(){this.removeAllListeners(),this.messages=[]}verify(e,t,n){let i,r;return n=Object.assign({},n),null==e||0===e.trim().length?this.messages:(i=(r=function(e,t,n){let i,r=[];try{(i=n.parseText(e)).errors.length>0&&i.errors.forEach(e=>{r.push({ruleId:null,fatal:!0,severity:2,source:null,message:`Parsing error: ${e.message}`,line:e.line,column:e.column})})}catch(e){r.push({ruleId:null,fatal:!0,severity:2,source:null,message:`Parsing error: ${e.message}`,line:e.lineNumber,column:e.column})}return{messages:r,ast:i&&i.ast?i.ast:null}}(e,this.currentFilename,null)).ast,this.messages.push(...r.messages),i?(s.normalize(n),Object.keys(n.rules).filter(e=>a(n.rules[e])>0).forEach(e=>{const t=this.rules.get(e);if(!t)return;const i=a(n.rules[e]),r=Object.freeze(Object.assign(Object.create(null),{id:e,report:t=>{const n=function(e,t,n){const i={ruleId:t,severity:n,message:e.message,line:e.loc.start.line,column:e.loc.start.column,nodeType:e.node&&e.node.type||null};return e.loc.end&&(i.endLine=e.loc.end.line,i.endColumn=e.loc.end.column+1),i}(t,e,i);this.messages.push(n)}}));try{const n=t.create(r);Object.keys(n).forEach(e=>{this.on(e,n[e])})}catch(t){throw t.message=`Error while loading rule '${e}': ${t.message}`,t}}),null.traverse(i),this.messages.sort((e,t)=>{const n=e.line-t.line;return 0===n?e.column-t.column:n}),this.messages):this.messages)}}},function(e,t,n){"use strict";const i=n(6),r=n(1),s=n(54),a=n(46);function o(e){return e.reduce((e,t)=>(e.errorCount+=t.errorCount,e.warningCount+=t.warningCount,e),{errorCount:0,warningCount:0})}function u(e,t,n,i){let s,a,o;n.reset(),t&&(s=r.resolve(t),a=r.extname(t));const u=i.getConfig(s),c=function(e){return e.reduce((e,t)=>(t.fatal||2===t.severity?e.errorCount++:e.warningCount++,e),{errorCount:0,warningCount:0})}(o=n.verify(e,t,u));return{filePath:t,messages:o,errorCount:c.errorCount,warningCount:c.warningCount}}class c{constructor(e){e=Object.assign(Object.create(null),{cwd:process.cwd()},e),this.options=e,this.linter=new s,this.config=new a(this.options,this.linter)}executeOnFiles(e){const t=[],n=this.config;function s(e,s){const a=function(e,t,n){return u(i.readFileSync(r.resolve(e),"utf8"),e,t,n)}(e,s,n);t.push(a)}e.forEach(e=>{s(e,this.linter)});const a=o(t);return{results:t,errorCount:a.errorCount,warningCount:a.warningCount}}executeOnText(e,t){const n=[],i=this.options,s=this.config;t&&!r.isAbsolute(t)&&(t=r.resolve(i.cwd,t)),n.push(u(e,t,this.linter,s));const a=o(n);return{results:n,errorCount:a.errorCount,warningCount:a.warningCount}}getFormatter(e){if("string"!=typeof(e=e||"stylish"))return null;const t=`./formatters/${e}`;try{return n(11)(t)}catch(e){throw e.message=`There was a problem loading formatter: ${t}\nError: ${e.message}`,e}}}c.getFormatter=c.prototype.getFormatter,e.exports=c},function(e,t,n){(function(){var t,i,r={}.toString;function s(e,t,n){var i,s;return"Array"!==r.call(e).slice(8,-1)?{type:"Nothing"}:(i=t.of,{type:"Just",value:function(){var t,r,a,o=[];for(t=0,a=(r=e).length;t<a;++t)s=r[t],o.push(u(s,i,n));return o}()})}function a(e,t,n){var i,s,a;return"Object"!==r.call(e).slice(8,-1)?{type:"Nothing"}:(i=t.of,{type:"Just",value:function(){var t,r={};for(s in t=e)a=t[s],r[u(s,[{type:"String"}],n)]=u(a,i[s]||[{type:"*"}],n);return r}()})}function o(e,t,n){var o,c,h,l;if(o=t.type,c=t.structure,o){if(!(h=(null!=(l=n.customTypes[o])?l.cast:void 0)||i[o]))throw new Error("Type not defined: "+o+".");return h(e,n,u)}switch(c){case"array":return s(e,t,n);case"tuple":return function(e,t,n){var i,s,a,o,c,h,l;if("Array"!==r.call(e).slice(8,-1))return{type:"Nothing"};for(i=[],s=0,a=0,c=(o=t.of).length;a<c;++a)h=o[a],l=u(e[s],h,n),"Undefined"!==r.call(l).slice(8,-1)&&i.push(l),s++;return e.length<=s?{type:"Just",value:i}:{type:"Nothing"}}(e,t,n);case"fields":return a(e,t,n)}}function u(e,n,i){var r,s,a,u,c,h;for(r=0,s=n.length;r<s;++r)if(c=(u=o(e,a=n[r],i)).type,h=u.value,"Nothing"!==c&&t([a],h,{customTypes:i.customTypes}))return h;throw new Error("Value "+JSON.stringify(e)+" does not type check against "+JSON.stringify(n)+".")}t=n(12).parsedTypeCheck,i={"*":function(e,t){switch(r.call(e).slice(8,-1)){case"Array":return o(e,{type:"Array"},t);case"Object":return o(e,{type:"Object"},t);default:return{type:"Just",value:u(e,[{type:"Undefined"},{type:"Null"},{type:"NaN"},{type:"Boolean"},{type:"Number"},{type:"Date"},{type:"RegExp"},{type:"Array"},{type:"Object"},{type:"String"}],(t.explicit=!0,t))}}},Undefined:function(e){return"undefined"===e||void 0===e?{type:"Just",value:void 0}:{type:"Nothing"}},Null:function(e){return"null"===e?{type:"Just",value:null}:{type:"Nothing"}},NaN:function(e){return"NaN"===e?{type:"Just",value:NaN}:{type:"Nothing"}},Boolean:function(e){return"true"===e?{type:"Just",value:!0}:"false"===e?{type:"Just",value:!1}:{type:"Nothing"}},Number:function(e){return{type:"Just",value:+e}},Int:function(e){return{type:"Just",value:+e}},Float:function(e){return{type:"Just",value:+e}},Date:function(e,t){var n;return(n=/^\#([\s\S]*)\#$/.exec(e))?{type:"Just",value:new Date(+n[1]||n[1])}:t.explicit?{type:"Nothing"}:{type:"Just",value:new Date(+e||e)}},RegExp:function(e,t){var n;return(n=/^\/([\s\S]*)\/([gimy]*)$/.exec(e))?{type:"Just",value:new RegExp(n[1],n[2])}:t.explicit?{type:"Nothing"}:{type:"Just",value:new RegExp(e)}},Array:function(e,t){return s(e,{of:[{type:"*"}]},t)},Object:function(e,t){return a(e,{of:{}},t)},String:function(e){var t;return"String"!==r.call(e).slice(8,-1)?{type:"Nothing"}:(t=e.match(/^'([\s\S]*)'$/))?{type:"Just",value:t[1].replace(/\\'/g,"'")}:(t=e.match(/^"([\s\S]*)"$/))?{type:"Just",value:t[1].replace(/\\"/g,'"')}:{type:"Just",value:e}}},e.exports=u}).call(this)},function(e,t,n){(function(){var t,i,r;function s(e,t){if(e[0]===t)return e.shift();throw new Error("Expected '"+t+"', but got '"+e[0]+"' instead in "+JSON.stringify(e)+".")}function a(e,t){if(e[0]===t)return e.shift()}function o(e,t,n){var i,r,o,u;for(i=t[0],r=t[1],n&&s(e,i),o=[],u=","+(n?r:"");e.length&&n&&e[0]!==r;)o.push(p(e,u)),a(e,",");return n&&s(e,r),o}function u(e,t){return o(e,["[","]"],t)}function c(e,t){return o(e,["(",")"],t)}function h(e,t){var n,i,r;for(t&&s(e,"{"),n={},i=","+(t?"}":"");e.length&&(!t||"}"!==e[0]);)r=l(e,":"),s(e,":"),n[r]=p(e,i),a(e,",");return t&&s(e,"}"),n}function l(e,t){var n;for(null==t&&(t=""),n="";e.length&&-1===t.indexOf(e[0]);)n+=e.shift();return n}function p(e,t){switch(e[0]){case"[":return u(e,!0);case"(":return c(e,!0);case"{":return h(e,!0);default:return l(e,t)}}function f(e){return!e}t=n(7).reject,i=/\[\]\(\)}{:,/.source,r=RegExp("(\"(?:\\\\\"|[^\"])*\")|('(?:\\\\'|[^'])*')|(/(?:\\\\/|[^/])*/[a-zA-Z]*)|(#.*#)|(["+i+"])|([^\\s"+i+"](?:\\s*[^\\s"+i+"]+)*)|\\s*"),e.exports=function(e,n,i){var s;if(null==i&&(i={}),!i.explicit&&1===e.length&&"String"===e[0].type)return"'"+n.replace(/\\'/g,"\\\\'")+"'";if(!(s=function(e,t,n){var i,r,s,a,o,l,f,d;return r=(i=t[0]).type,s=i.structure,a=e.concat(),n.explicit||1!==t.length||(r||!s)&&"Array"!==r&&"Object"!==r?l=p(e):(o="array"===s||"Array"===r?u(e,"["===e[0]):"tuple"===s?c(e,"("===e[0]):h(e,"{"===e[0]),l=e.length?p("array"===s||"Array"===r?((f=a).unshift("["),f.push("]"),f):((d=a).unshift("("),d.push(")"),d)):o),l}(t(f,n.split(r)),e,i)))throw new Error("Error parsing '"+n+"'.");return s}}).call(this)},function(e,t,n){(function(){var t,i,r,s,a;t=n(57),i=n(56),r=n(12).parseType,s=function(e,n,r){return null==r&&(r={}),null==r.explicit&&(r.explicit=!1),null==r.customTypes&&(r.customTypes={}),i(t(e,n,r),e,r)},a=function(e,t,n){return s(r(e),t,n)},e.exports={VERSION:"0.3.0",parse:a,parsedTypeParse:s}}).call(this)},function(e,t,n){(function(){var t,i,r,s,a,o,u,c={}.toString;function h(e,t){if(!(e instanceof Object))return!1;switch(t.structure){case"fields":return function(e,t){var n,i,r,s,a,o,u;for(r in n={},i=0,e)n[r]=!0,i++;for(a in s=0,o=t.of){if(u=o[a],!p(e[a],u))return!1;n[a]&&s++}return t.subset||i===s}(e,t);case"array":return function(e,t){return r(function(e){return p(e,t.of)},e)}(e,t);case"tuple":return function(e,t){var n,i,r,s,a;for(n=0,i=0,s=(r=t.of).length;i<s;++i){if(a=r[i],!p(e[n],a))return!1;n++}return e.length<=n}(e,t)}}function l(e,t){var n,i,r,s;if(n=t.type,i=t.structure,n)return"*"===n||((r=u[n]||a[n])?r.typeOf===c.call(e).slice(8,-1)&&r.validate(e):n===c.call(e).slice(8,-1)&&(!i||h(e,t)));if(i)return(!(s=o[i])||s===c.call(e).slice(8,-1))&&h(e,t);throw new Error("No type defined. Input: "+e+".")}function p(e,t){if("Array"!==c.call(t).slice(8,-1))throw new Error("Types must be in an array. Input: "+e+".");return i(function(t){return l(e,t)},t)}t=n(7),i=t.any,r=t.all,s=t.isItNaN,a={Number:{typeOf:"Number",validate:function(e){return!s(e)}},NaN:{typeOf:"Number",validate:s},Int:{typeOf:"Number",validate:function(e){return!s(e)&&e%1==0}},Float:{typeOf:"Number",validate:function(e){return!s(e)}},Date:{typeOf:"Date",validate:function(e){return!s(e.getTime())}}},o={array:"Array",tuple:"Array"},e.exports=function(e,t,n){return null==n&&(n={}),u=n.customTypes||{},p(t,e)}}).call(this)},function(e,t){(function(){var t,n;function i(e){var t;if(null==(t=e[0]))throw new Error("Unexpected end of input.");return t}function r(e){var n;if(n=i(e),!t.test(n))throw new Error("Expected text, got '"+n+"' instead.");return e.shift()}function s(e,t){var n;if((n=i(e))!==t)throw new Error("Expected '"+t+"', got '"+n+"' instead.");return e.shift()}function a(e,t){return e[0]===t?e.shift():null}function o(e){var t;return t=r(e),s(e,":"),[t,h(e)]}function u(e){switch(e[0]){case"[":return function(e){var t;if(s(e,"["),"]"===i(e))throw new Error("Must specify type of Array - eg. [Type], got [] instead.");return t=h(e),s(e,"]"),{structure:"array",of:t}}(e);case"(":return function(e){var t;if(t=[],s(e,"("),")"===i(e))throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.");for(;t.push(h(e)),a(e,","),")"!==i(e););return s(e,")"),{structure:"tuple",of:t}}(e);case"{":return function(e){var t,n,r,u,c;for(t={},s(e,"{"),n=!1;;){if(a(e,"...")){n=!0;break}if(u=(r=o(e))[0],c=r[1],t[u]=c,a(e,","),"}"===i(e))break}return s(e,"}"),{structure:"fields",of:t,subset:n}}(e)}}function c(e){var n,a,o,c;if((a="*"===(n=i(e)))||t.test(n))return o=a?s(e,"*"):r(e),(c=u(e))?(c.type=o,c):{type:o};if(!(c=u(e)))throw new Error("Unexpected character: "+n);return c}function h(e){var t,n,r,s,o;if("::"===i(e))throw new Error("No comment before comment separator '::' found.");for(null!=(t=e[1])&&"::"===t&&(e.shift(),e.shift()),n=[],r={},"Maybe"===i(e)&&(e.shift(),n=[{type:"Undefined"},{type:"Null"}],r={Undefined:!0,Null:!0});r[o=(s=c(e)).type]||n.push(s),r[o]=!0,a(e,"|"););return n}t=/[\$\w]+/,n=RegExp("\\.\\.\\.|::|->|"+t.source+"|\\S","g"),e.exports=function(e){var t;if(!e.length)throw new Error("No type specified.");if(function(e,t){var n=-1,i=t.length>>>0;for(;++n<i;)if(e===t[n])return!0;return!1}("->",t=e.match(n)||[]))throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.");try{return h(t)}catch(n){throw new Error(n.message+" - Remaining tokens: "+JSON.stringify(t)+" - Initial input: '"+e+"'")}}}).call(this)},function(e,t){var n=e.exports=function(e,t,n){"object"==typeof e&&(e=(n=e).start,t=n.stop),"object"==typeof t&&(n=t,e=e||n.start,t=void 0),t||(t=e,e=0),n||(n={});var i=n.mode||"soft",r="hard"===i?/\b/:/(\S+\s+)/;return function(n){return n.toString().split(r).reduce(function(n,r){if("hard"===i)for(var s=0;s<r.length;s+=t-e)n.push(r.slice(s,s+t-e));else n.push(r);return n},[]).reduce(function(n,i){if(""===i)return n;var r=i.replace(/\t/g,"    "),s=n.length-1;if(n[s].length+r.length>t)n[s]=n[s].replace(/\s+$/,""),r.split(/\n/).forEach(function(t){n.push(new Array(e+1).join(" ")+t.replace(/^\s+/,""))});else if(r.match(/\n/)){var a=r.split(/\n/);n[s]+=a.shift(),a.forEach(function(t){n.push(new Array(e+1).join(" ")+t.replace(/^\s+/,""))})}else n[s]+=r;return n},[new Array(e+1).join(" ")]).join("\n")}};n.soft=n,n.hard=function(e,t){return n(e,t,{mode:"hard"})}},function(e,t,n){(function(){var t,i,r,s,a,o,u,c,h,l,p,f,d,m,x;function g(e,t){var n;return e+""+D(" ",(n=t-e.length)>0?n:0)}function y(e,t){return e.replace(/{{([a-zA-Z$_][a-zA-Z$_0-9]*)}}/g,function(e,n){var i;return null!=(i=t[n])?i:"{{"+n+"}}"})}function D(e,t){for(var n="";t>0;(t>>=1)&&(e+=e))1&t&&(n+=e);return n}t=n(7),i=t.id,t.find,r=t.sort,s=t.min,a=t.max,o=t.map,u=t.unlines,t=n(15),c=t.nameToRaw,h=t.dasherize,l=t.naturalJoin,p=n(61),f=function(e,t,n){var i,r,s,a,u,h,l,f,d,m,x,g,y;return i=e.option,r=null!=(s=e.shortNames)?s:[],a=null!=(s=e.longNames)?s:[],u=e.type,e.description,h=t.aliasSeparator,l=t.typeSeparator,f=t.initialIndent,e.negateName&&(i="no-"+i,a&&(a=o(function(e){return"no-"+e},a))),d=1===i.length?[i].concat(r,a):r.concat([i],a),x=(m=o(c,d).join(h)).length,y=(g="NUM"===i?"::":l).length,null!=n&&!e.boolean&&f+x+y+u.length>n?m+""+g+p(f+x+y,n)(u).replace(/^\s+/,""):m+""+(e.boolean?"":g+""+u)},d=function(e){null==e.aliasSeparator&&(e.aliasSeparator=", "),null==e.typeSeparator&&(e.typeSeparator=" "),null==e.descriptionSeparator&&(e.descriptionSeparator="  "),null==e.initialIndent&&(e.initialIndent=2),null==e.secondaryIndent&&(e.secondaryIndent=4),null==e.maxPadFactor&&(e.maxPadFactor=1.5)},m=function(e,t){var n,r,s;return n=t.stdout,r=null!=(s=t.helpStyle)?s:{},d(r),function(t){var s,a,o,c,l,d,m,x,g,y,v,E,C,A,S,w;a=(s=null!=n&&n.isTTY?n.columns-1:null)?p(s):i;try{o=e(h(t))}catch(e){return e.message}return c=f(o,r),l=o.default&&!o.negateName?"\ndefault: "+o.default:"",d=o.restPositional?"Everything after this option is considered a positional argument, even if it looks like an option.":"","description:",y=(x=(m=o.longDescription||o.description&&(C=o.description,A=C.charAt(0).toUpperCase(),S=C.slice(1),w=/[\.!\?]$/.test(C)?"":".",A+""+S+w))&&d?m+" "+d:(g=m||d)?g:"")?s&&x.length-1-"description:".length>s?"\ndescription:\n"+a(x):"\ndescription: "+x:"",v=(g=o.example)?(E=[].concat(g)).length>1?"\nexamples:\n"+u(E):"\nexample: "+E[0]:"",c+""+(l||y||v?"\n"+D("=",c.length):"")+l+y+v}},x=function(e){var t,n,i,o,c,h,m,x,v,E;return t=e.options,n=e.prepend,i=e.append,o=null!=(c=e.helpStyle)?c:{},h=e.stdout,d(o),o.aliasSeparator,o.typeSeparator,m=o.descriptionSeparator,x=o.maxPadFactor,v=o.initialIndent,E=o.secondaryIndent,function(e){var c,d,C,A,S,w,F,b,k,B,T,N,I,M,O,P,L,j,J,U,z,X,R,K,_,H,W,V,q,G;for(d=(c=null!=e?e:{}).showHidden,C=c.interpolate,A=null!=h&&h.isTTY?h.columns-1:null,S=[],w=function(e){return S.push(null!=e?e:"")},n&&(w(C?y(n,C):n),w()),F=[],b=0,k=0,B=[],T=0,N=(c=t).length;T<N;++T)I=c[T],!d&&I.hidden||((M=I.heading)?F.push({type:"heading",value:M}):(O=f(I,o,A),P=[],null!=(M=I.description)&&P.push(M),(M=I.enum)&&P.push("either: "+l(M)),I.default&&!I.negateName&&P.push("default: "+I.default),L=P.join(" - "),F.push({type:"option",pre:O,desc:L,descLen:L.length}),b++,k+=j=O.length,B.push(j)));for(U=(J=r(B))[J.length-1],z=b>2?s((v+k/b)*x,U):U,T=J.length-1;T>=0;--T)if((j=J[T])<=z){X=j;break}if(R=m.length,null!=A)for(K=0,_=0,T=0,N=F.length;T<N;++T)"option"===(I=F[T]).type&&(O=I.pre,L=I.desc,0===(H=I.descLen)?I.wrap="none":(j=a(X,O.length)+v+R)+H>A?H/2.5>A-j?(K++,I.wrap="full"):(_++,I.wrap="partial"):I.wrap="none");for(W=D(" ",v),V=b>1&&K+.5*_>.5*b,T=0,N=F.length;T<N;++T)if(q=T,"heading"===(I=F[T]).type)0!==q&&w(),w(I.value+":");else{if(O=I.pre,L=I.desc,H=I.descLen,G=I.wrap,null!=A){if(V||"full"===G){w(W+""+O+"\n"+(G=p(v+E,A))(L));continue}if("partial"===G){G=p(v+R+a(X,O.length),A),w(W+""+g(O,X)+m+G(L).replace(/^\s+/,""));continue}}w(0===H?W+""+O:W+""+g(O,X)+m+L)}return i&&(w(),w(C?y(i,C):i)),u(S)}},e.exports={generateHelp:x,generateHelpForOption:m}}).call(this)},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e){var i;!function(){"use strict";var r;try{r="undefined"!=typeof Intl&&void 0!==Intl.Collator?Intl.Collator("generic",{sensitivity:"base"}):null}catch(e){console.log("Collator could not be initialized and wouldn't be used")}var s=[],a=[],o={get:function(e,t,n){var i,o,u,c,h,l,p=n&&r&&n.useCollator,f=e.length,d=t.length;if(0===f)return d;if(0===d)return f;for(u=0;u<d;++u)s[u]=u,a[u]=t.charCodeAt(u);if(s[d]=d,p)for(u=0;u<f;++u){for(o=u+1,c=0;c<d;++c)i=o,l=0===r.compare(e.charAt(u),String.fromCharCode(a[c])),(o=s[c]+(l?0:1))>(h=i+1)&&(o=h),o>(h=s[c+1]+1)&&(o=h),s[c]=i;s[c]=o}else for(u=0;u<f;++u){for(o=u+1,c=0;c<d;++c)i=o,l=e.charCodeAt(u)===a[c],(o=s[c]+(l?0:1))>(h=i+1)&&(o=h),o>(h=s[c+1]+1)&&(o=h),s[c]=i;s[c]=o}return o}};null!==n(64)&&n(63)?void 0===(i=function(){return o}.call(t,n,t,e))||(e.exports=i):void 0!==e&&null!==e&&void 0!==t&&e.exports===t?e.exports=o:"undefined"!=typeof self&&"function"==typeof self.postMessage&&"function"==typeof self.importScripts?self.Levenshtein=o:"undefined"!=typeof window&&null!==window&&(window.Levenshtein=o)}()}).call(this,n(65)(e))},function(e,t){var n=Array.prototype.slice,i="function"==typeof Object.keys?Object.keys:function(e){var t=[];for(var n in e)t.push(n);return t},r=e.exports=function(e,t){return 0===e&&0===t?1/e==1/t:e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():o(e)?o(t):"object"!=typeof e&&"object"!=typeof t?e==t:function(e,t){if(s(e)||s(t))return!1;if(e.prototype!==t.prototype)return!1;if(a(e))return!!a(t)&&(e=n.call(e),t=n.call(t),r(e,t));try{var o,u,c=i(e),h=i(t)}catch(e){return!1}if(c.length!=h.length)return!1;for(c.sort(),h.sort(),u=c.length-1;u>=0;u--)if(c[u]!=h[u])return!1;for(u=c.length-1;u>=0;u--)if(o=c[u],!r(e[o],t[o]))return!1;return!0}(e,t))};function s(e){return null===e||void 0===e}function a(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function o(e){return"number"==typeof e&&e!=e}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d,m,x,g,y,D,v,E,C,A,S,w,F,b,k,B,T,N,I,M;function O(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=O(function(e,t){return e>t?e:t}),i=O(function(e,t){return e<t?e:t}),r=function(e){return-e},s=Math.abs,a=function(e){return e<0?-1:e>0?1:0},o=O(function(e,t){return~~(e/t)}),u=O(function(e,t){return e%t}),c=O(function(e,t){return Math.floor(e/t)}),h=O(function(e,t){var n;return(e%(n=t)+n)%n}),l=function(e){return 1/e},f=2*(p=Math.PI),d=Math.exp,m=Math.sqrt,x=Math.log,g=O(function(e,t){return Math.pow(e,t)}),y=Math.sin,D=Math.tan,v=Math.cos,E=Math.asin,C=Math.acos,A=Math.atan,S=O(function(e,t){return Math.atan2(e,t)}),w=function(e){return~~e},F=Math.round,b=Math.ceil,k=Math.floor,B=function(e){return e!=e},T=function(e){return e%2==0},N=function(e){return e%2!=0},I=O(function(e,t){var n;for(e=Math.abs(e),t=Math.abs(t);0!==t;)n=e%t,e=t,t=n;return e}),M=O(function(e,t){return Math.abs(Math.floor(e/I(e,t)*t))}),e.exports={max:n,min:i,negate:r,abs:s,signum:a,quot:o,rem:u,div:c,mod:h,recip:l,pi:p,tau:f,exp:d,sqrt:m,ln:x,pow:g,sin:y,tan:D,cos:v,acos:C,asin:E,atan:A,atan2:S,truncate:w,round:F,ceiling:b,floor:k,isItNaN:B,even:T,odd:N,gcd:I,lcm:M}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d;function m(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=m(function(e,t){return t.split(e)}),i=m(function(e,t){return t.join(e)}),r=function(e){return e.length?e.split("\n"):[]},s=function(e){return e.join("\n")},a=function(e){return e.length?e.split(/[ ]+/):[]},o=function(e){return e.join(" ")},u=function(e){return e.split("")},c=function(e){return e.join("")},h=function(e){return e.split("").reverse().join("")},l=m(function(e,t){var n,i;for(n="",i=0;i<e;++i)n+=t;return n}),p=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},f=function(e){return e.replace(/[-_]+(.)?/g,function(e,t){return(null!=t?t:"").toUpperCase()})},d=function(e){return e.replace(/([^-A-Z])([A-Z]+)/g,function(e,t,n){return t+"-"+(n.length>1?n:n.toLowerCase())}).replace(/^([A-Z]+)/,function(e,t){return t.length>1?t+"-":t.toLowerCase()})},e.exports={split:n,join:i,lines:r,unlines:s,words:a,unwords:o,chars:u,unchars:c,reverse:h,repeat:l,capitalize:p,camelize:f,dasherize:d}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d,m;function x(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=function(e){var t,n,i=[];for(t in e)n=e[t],i.push(n);return i},i=function(e){var t,n=[];for(t in e)n.push(t);return n},r=function(e){var t,n,i,r={};for(t=0,n=e.length;t<n;++t)r[(i=e[t])[0]]=i[1];return r},s=function(e){var t,n,i=[];for(t in e)n=e[t],i.push([t,n]);return i},a=x(function(e,t){var n,i,r,s={};for(n=0,i=e.length;n<i;++n)r=n,s[e[n]]=t[r];return s}),o=function(e){var t,n,i,r;for(i in t=[],n=[],e)r=e[i],t.push(i),n.push(r);return[t,n]},u=function(e){var t;for(t in e)return!1;return!0},c=x(function(e,t){var n;for(n in t)e(t[n]);return t}),h=x(function(e,t){var n,i,r={};for(n in t)i=t[n],r[n]=e(i);return r}),l=function(e){var t,n,i={};for(t in e)(n=e[t])&&(i[t]=n);return i},p=x(function(e,t){var n,i,r={};for(n in t)e(i=t[n])&&(r[n]=i);return r}),f=x(function(e,t){var n,i,r={};for(n in t)e(i=t[n])||(r[n]=i);return r}),d=x(function(e,t){var n,i,r,s;for(r in n={},i={},t)(e(s=t[r])?n:i)[r]=s;return[n,i]}),m=x(function(e,t){var n,i;for(n in t)if(e(i=t[n]))return i}),e.exports={values:n,keys:i,pairsToObj:r,objToPairs:s,listsToObj:a,objToLists:o,empty:u,each:c,map:h,filter:p,compact:l,reject:f,partition:d,find:m}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d,m,x,g,y,D,v,E,C,A,S,w,F,b,k,B,T,N,I,M,O,P,L,j,J,U,z,X,R,K,_,H,W,V,q,G,Y,$,Z,Q,ee,te,ne,ie,re,se,ae,oe,ue,ce,he,le,pe,fe,de,me,xe,ge={}.toString,ye=[].slice;function De(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}function ve(e,t){for(var n=-1,i=t.length>>>0;++n<i;)if(e===t[n])return!0;return!1}function Ee(e){return!e}n=De(function(e,t){var n,i;for(n=0,i=t.length;n<i;++n)e(t[n]);return t}),i=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)r=t[n],s.push(e(r));return s}),r=function(e){var t,n,i,r=[];for(t=0,n=e.length;t<n;++t)(i=e[t])&&r.push(i);return r},s=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)e(r=t[n])&&s.push(r);return s}),a=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)e(r=t[n])||s.push(r);return s}),o=De(function(e,t){var n,i,r,s,a;for(n=[],i=[],r=0,s=t.length;r<s;++r)(e(a=t[r])?n:i).push(a);return[n,i]}),u=De(function(e,t){var n,i,r;for(n=0,i=t.length;n<i;++n)if(e(r=t[n]))return r}),c=h=function(e){return e[0]},l=function(e){if(e.length)return e.slice(1)},p=function(e){return e[e.length-1]},f=function(e){if(e.length)return e.slice(0,-1)},d=function(e){return!e.length},m=function(e){return e.concat().reverse()},x=function(e){var t,n,i,r;for(t=[],n=0,i=e.length;n<i;++n)ve(r=e[n],t)||t.push(r);return t},g=De(function(e,t){var n,i,r,s,a,o=[];for(n=[],i=0,r=t.length;i<r;++i)ve(a=e(s=t[i]),n)||(n.push(a),o.push(s));return o}),y=D=De(function(e,t,n){var i,r;for(i=0,r=n.length;i<r;++i)t=e(t,n[i]);return t}),v=E=De(function(e,t){return y(e,t[0],t.slice(1))}),C=De(function(e,t,n){var i;for(i=n.length-1;i>=0;--i)t=e(n[i],t);return t}),A=De(function(e,t){return C(e,t[t.length-1],t.slice(0,-1))}),S=De(function(e,t){var n,i,r;for(n=[],i=t;null!=(r=e(i));)n.push(r[0]),i=r[1];return n}),w=function(e){return[].concat.apply([],e)},F=De(function(e,t){var n;return[].concat.apply([],function(){var i,r,s,a=[];for(i=0,s=(r=t).length;i<s;++i)n=r[i],a.push(e(n));return a}())}),b=function(e){var t;return[].concat.apply([],function(){var n,i,r,s=[];for(n=0,r=(i=e).length;n<r;++n)t=i[n],"Array"===ge.call(t).slice(8,-1)?s.push(b(t)):s.push(t);return s}())},k=function(e){var t,n,i,r,s,a,o;t=ye.call(arguments,1),n=[];e:for(i=0,r=e.length;i<r;++i){for(s=e[i],a=0,o=t.length;a<o;++a)if(ve(s,t[a]))continue e;n.push(s)}return n},B=function(e){var t,n,i,r,s,a,o;t=ye.call(arguments,1),n=[];e:for(i=0,r=e.length;i<r;++i){for(s=e[i],a=0,o=t.length;a<o;++a)if(!ve(s,t[a]))continue e;n.push(s)}return n},T=function(){var e,t,n,i,r,s,a,o;for(t=[],n=0,i=(e=ye.call(arguments)).length;n<i;++n)for(s=0,a=(r=e[n]).length;s<a;++s)ve(o=r[s],t)||t.push(o);return t},N=De(function(e,t){var n,i,r,s;for(n={},i=0,r=t.length;i<r;++i)(s=e(t[i]))in n?n[s]+=1:n[s]=1;return n}),I=De(function(e,t){var n,i,r,s,a;for(n={},i=0,r=t.length;i<r;++i)(a=e(s=t[i]))in n?n[a].push(s):n[a]=[s];return n}),M=function(e){var t,n;for(t=0,n=e.length;t<n;++t)if(!e[t])return!1;return!0},O=function(e){var t,n;for(t=0,n=e.length;t<n;++t)if(e[t])return!0;return!1},P=De(function(e,t){var n,i;for(n=0,i=t.length;n<i;++n)if(e(t[n]))return!0;return!1}),L=De(function(e,t){var n,i;for(n=0,i=t.length;n<i;++n)if(!e(t[n]))return!1;return!0}),j=function(e){return e.concat().sort(function(e,t){return e>t?1:e<t?-1:0})},J=De(function(e,t){return t.concat().sort(e)}),U=De(function(e,t){return t.concat().sort(function(t,n){return e(t)>e(n)?1:e(t)<e(n)?-1:0})}),z=function(e){var t,n,i;for(t=0,n=0,i=e.length;n<i;++n)t+=e[n];return t},X=function(e){var t,n,i;for(t=1,n=0,i=e.length;n<i;++n)t*=e[n];return t},R=K=function(e){var t,n,i;for(t=0,n=0,i=e.length;n<i;++n)t+=e[n];return t/e.length},_=function(e){var t,n,i,r,s;for(t=e[0],n=0,r=(i=e.slice(1)).length;n<r;++n)(s=i[n])>t&&(t=s);return t},H=function(e){var t,n,i,r,s;for(t=e[0],n=0,r=(i=e.slice(1)).length;n<r;++n)(s=i[n])<t&&(t=s);return t},W=De(function(e,t){var n,i,r,s,a;for(n=t[0],i=0,s=(r=t.slice(1)).length;i<s;++i)e(a=r[i])>e(n)&&(n=a);return n}),V=De(function(e,t){var n,i,r,s,a;for(n=t[0],i=0,s=(r=t.slice(1)).length;i<s;++i)e(a=r[i])<e(n)&&(n=a);return n}),q=G=De(function(e,t,n){var i,r;return i=t,[t].concat(function(){var t,s,a,o=[];for(t=0,a=(s=n).length;t<a;++t)r=s[t],o.push(i=e(i,r));return o}())}),Y=$=De(function(e,t){if(t.length)return q(e,t[0],t.slice(1))}),Z=De(function(e,t,n){return n=n.concat().reverse(),q(e,t,n).reverse()}),Q=De(function(e,t){if(t.length)return t=t.concat().reverse(),q(e,t[0],t.slice(1)).reverse()}),ee=De(function(e,t,n){return n.slice(e,t)}),te=De(function(e,t){return e<=0?t.slice(0,0):t.slice(0,e)}),ne=De(function(e,t){return e<=0?t:t.slice(e)}),ie=De(function(e,t){return[te(e,t),ne(e,t)]}),re=De(function(e,t){var n,i;if(!(n=t.length))return t;for(i=0;i<n&&e(t[i]);)i+=1;return t.slice(0,i)}),se=De(function(e,t){var n,i;if(!(n=t.length))return t;for(i=0;i<n&&e(t[i]);)i+=1;return t.slice(i)}),ae=De(function(e,t){return[re(e,t),se(e,t)]}),oe=De(function(e,t){return ae(function(){var e=arguments;return function(){var t,n;for(n=e[0].apply(this,arguments),t=1;t<e.length;++t)n=e[t](n);return n}}(e,Ee),t)}),ue=De(function(e,t){var n,i,r,s,a,o;for(n=[],i=t.length,r=0,s=e.length;r<s&&(a=r,o=e[r],a!==i);++r)n.push([o,t[a]]);return n}),ce=De(function(e,t,n){var i,r,s,a,o,u;for(i=[],r=n.length,s=0,a=t.length;s<a&&(o=s,u=t[s],o!==r);++s)i.push(e(u,n[o]));return i}),he=function(){var e,t,n,i,r,s,a,o,u,c=[];for(t=void 0,n=0,i=(e=ye.call(arguments)).length;n<i;++n)t<=(s=(r=e[n]).length)||(t=s);for(n=0;n<t;++n){for(a=n,o=[],u=0,i=e.length;u<i;++u)r=e[u],o.push(r[a]);c.push(o)}return c},le=function(e){var t,n,i,r,s,a,o,u=[];for(n=void 0,i=0,r=(t=ye.call(arguments,1)).length;i<r;++i)n<=(a=(s=t[i]).length)||(n=a);for(i=0;i<n;++i)o=i,u.push(e.apply(null,c()));return u;function c(){var e,n,i,r=[];for(e=0,i=(n=t).length;e<i;++e)s=n[e],r.push(s[o]);return r}},pe=De(function(e,t){return e<0?t[t.length+e]:t[e]}),fe=De(function(e,t){var n,i,r;for(n=0,i=t.length;n<i;++n)if(r=n,t[n]===e)return r}),de=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)r=n,t[n]===e&&s.push(r);return s}),me=De(function(e,t){var n,i,r;for(n=0,i=t.length;n<i;++n)if(r=n,e(t[n]))return r}),xe=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)r=n,e(t[n])&&s.push(r);return s}),e.exports={each:n,map:i,filter:s,compact:r,reject:a,partition:o,find:u,head:c,first:h,tail:l,last:p,initial:f,empty:d,reverse:m,difference:k,intersection:B,union:T,countBy:N,groupBy:I,fold:y,fold1:v,foldl:D,foldl1:E,foldr:C,foldr1:A,unfoldr:S,andList:M,orList:O,any:P,all:L,unique:x,uniqueBy:g,sort:j,sortWith:J,sortBy:U,sum:z,product:X,mean:R,average:K,concat:w,concatMap:F,flatten:b,maximum:_,minimum:H,maximumBy:W,minimumBy:V,scan:q,scan1:Y,scanl:G,scanl1:$,scanr:Z,scanr1:Q,slice:ee,take:te,drop:ne,splitAt:ie,takeWhile:re,dropWhile:se,span:ae,breakList:oe,zip:ue,zipWith:ce,zipAll:he,zipAllWith:le,at:pe,elemIndex:fe,elemIndices:de,findIndex:me,findIndices:xe}},function(e,t){var n,i,r,s,a,o,u=[].slice,c={}.toString;function h(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=h(function(e,t){return e.apply(null,t)}),i=function(e){return h(e)},r=h(function(e,t,n){return e(n,t)}),s=function(e){return t=function(t){return function(){return e(t(t)).apply(null,arguments)}},function(){return e(t(t)).apply(null,arguments)};var t},a=h(function(e,t,n,i){return e(t(n),t(i))}),o=function(e){var t;return t={},function(){var n,i,r;return n=u.call(arguments),i=function(){var e,t,i,s=[];for(e=0,i=(t=n).length;e<i;++e)r=t[e],s.push(r+c.call(r).slice(8,-1));return s}().join(""),t[i]=i in t?t[i]:e.apply(null,n)}},e.exports={curry:i,flip:r,fix:s,apply:n,over:a,memoize:o}},function(e,t,n){(function(){var t,i,r,s,a,o,u,c,h,l,p,f,d,m,x,g,y,D,v,E,C={}.toString,A=[].slice;(t=n(7)).id,i=t.map,t.compact,r=t.any,t.groupBy,s=t.partition,a=t.chars,t.isItNaN,o=t.keys,t.Obj,u=t.camelize,c=n(67),t=n(15),h=t.closestString,l=t.nameToRaw,p=t.dasherize,f=t.naturalJoin,t=n(62),d=t.generateHelp,m=t.generateHelpForOption,t=n(12),x=t.parsedTypeCheck,g=t.parseType,y=n(58).parsedTypeParse,D=function(e){var t,n,i={};for(t in e)n=e[t],i[u(t)]=n;return i},v=function(e){var t,n,r;return t="--?[a-zA-Z][-a-z-A-Z0-9]*=",n=RegExp("(?:"+t+")?(?:'(?:\\\\'|[^'])+'|\"(?:\\\\\"|[^\"])+\")|[^'\"\\s]+","g"),r=RegExp("^("+t+")?['\"]([\\s\\S]*)['\"]$"),i(function(e){return e.replace(r,"$1$2")},e.match(n)||[])},(E=function(e){var t,n,i,u,E;return t={},n={},i=[],"Undefined"===C.call(e.stdout).slice(8,-1)&&(e.stdout=process.stdout),null==e.positionalAnywhere&&(e.positionalAnywhere=!0),null==e.typeAliases&&(e.typeAliases={}),null==e.defaults&&(e.defaults={}),null!=e.concatRepeatedArrays&&(e.defaults.concatRepeatedArrays=e.concatRepeatedArrays),null!=e.mergeRepeatedObjects&&(e.defaults.mergeRepeatedObjects=e.mergeRepeatedObjects),function(r){var a,o,u,c,h,l,p,f,d,m,x,D,v,E,S,w,F,b,k,B,T,N;if("Array"!==C.call(r).slice(8,-1))throw new Error("No options defined.");for(a=0,o=r.length;a<o;++a)if(null==(u=r[a]).heading){if(c=u.option,null!=t[c])throw new Error("Option '"+c+"' already defined.");for(h in l=e.defaults)p=l[h],null==u[h]&&(u[h]=p);if("Boolean"===u.type&&null==u.boolean&&(u.boolean=!0),null==u.parsedType){if(!u.type)throw new Error("No type defined for option '"+c+"'.");try{f=null!=(d=e.typeAliases[u.type])?d:u.type,u.parsedType=g(f)}catch(e){throw m=e,new Error("Option '"+c+"': Error parsing type '"+u.type+"': "+m.message)}}if(u.default)try{n[c]=y(u.parsedType,u.default)}catch(e){throw m=e,new Error("Option '"+c+"': Error parsing default value '"+u.default+"' for type '"+u.type+"': "+m.message)}if(u.enum&&!u.parsedPossiblities){for(x=[],D=u.parsedType,v=0,E=(l=u.enum).length;v<E;++v){S=l[v];try{x.push(y(D,S))}catch(e){throw m=e,new Error("Option '"+c+"': Error parsing enum value '"+S+"' for type '"+u.type+"': "+m.message)}}u.parsedPossibilities=x}if(d=u.dependsOn)if(d.length)if(w=(l=[].concat(u.dependsOn))[0],F=A.call(l,1),b=w.toLowerCase(),F.length){if("and"!==b&&"or"!==b)throw new Error("Option '"+c+"': If you have more than one dependency, you must specify either 'and' or 'or'");u.dependsOn=[b].concat(A.call(F))}else"and"===(l=b.toLowerCase())||"or"===l?u.dependsOn=null:u.dependsOn=["and",w];else u.dependsOn=null;if(u.required&&i.push(c),t[c]=u,null!=u.concatRepeatedArrays)if(k=u.concatRepeatedArrays,"Boolean"===C.call(k).slice(8,-1))u.concatRepeatedArrays=[k,{}];else if(1===k.length)u.concatRepeatedArrays=[k[0],{}];else if(2!==k.length)throw new Error("Invalid setting for concatRepeatedArrays");if(u.alias||u.aliases){if("NUM"===c)throw new Error("-NUM option can't have aliases.");for(u.alias&&null==u.aliases&&(u.aliases=[].concat(u.alias)),v=0,E=(l=u.aliases).length;v<E;++v){if(B=l[v],null!=t[B])throw new Error("Option '"+B+"' already defined.");t[B]=u}T=(l=s(I,u.aliases))[0],N=l[1],null==u.shortNames&&(u.shortNames=T),null==u.longNames&&(u.longNames=N)}u.aliases&&0!==u.shortNames.length||"Boolean"!==u.type||"true"!==u.default||(u.negateName=!0)}function I(e){return 1===e.length}}(e.options),u=function(e){var n,i;if(null==(n=t[e]))throw i=h(o(t),e),new Error("Invalid option '"+l(e)+"'"+(i?" - perhaps you meant '"+l(i)+"'?":"."));return n},{parse:E=function(s,o){var h,d,m,g,E,S,w,F,b,k,B,T,N,I,M,O,P,L,j,J,U,z,X,R,K,_,H,W,V,q,G,Y,$,Z,Q,ee,te,ne,ie;switch(h=(null!=o?o:{}).slice,d={},m=[],g=!1,E=!1,S=null,w=function(e,t){var n,i,s,a;if((n=u(e)).boolean)i=t;else{try{s=n.concatRepeatedArrays,i=null!=s&&s[0]&&s[1].oneValuePerFlag&&1===n.parsedType.length&&"array"===n.parsedType[0].structure?[y(n.parsedType[0].of,t)]:y(n.parsedType,t)}catch(i){throw i,new Error("Invalid value for option '"+e+"' - expected type "+n.type+", received value: "+t+".")}if(n.enum&&!r(function(e){return c(e,i)},n.parsedPossibilities))throw new Error("Option "+e+": '"+i+"' not one of "+f(n.enum)+".")}a=C.call(d[e]).slice(8,-1),null!=d[e]?null!=n.concatRepeatedArrays&&n.concatRepeatedArrays[0]&&"Array"===a?d[e]=d[e].concat(i):n.mergeRepeatedObjects&&"Object"===a?function(e,t){var n={}.hasOwnProperty;for(var i in t)n.call(t,i)&&(e[i]=t[i])}(d[e],i):d[e]=i:d[e]=i,n.restPositional&&(g=!0),n.overrideRequired&&(E=!0)},F=function(){var e,t,i;for(e in t=n)i=t[e],null==d[e]&&(d[e]=i)},b=function(){var e,t,n,r;if(!E)for(e=0,n=(t=i).length;e<n;++e)if(r=t[e],!d[r])throw new Error("Option "+l(r)+" is required.")},k=function(e,t){throw new Error("The options "+l(e)+" and "+l(t)+" are mutually exclusive - you cannot use them at the same time.")},B=function(){var t,n,i,r,s,a,o,u,c,h,l;if(t=e.mutuallyExclusive)for(n=0,i=t.length;n<i;++n)for(s=null,a=0,o=(r=t[n]).length;a<o;++a)if(u=r[a],"Array"===C.call(u).slice(8,-1)){for(c=0,h=u.length;c<h;++c)if((l=u[c])in d){if(null==s){s=l;break}k(s,l)}}else u in d&&(null!=s?k(s,u):s=u)},T=function(e){var t,n,i,r,s,a,o;if(!(t=e.dependsOn)||e.dependenciesMet)return!0;for(n=t[0],r=0,s=(i=A.call(t,1)).length;r<s;++r)if(a=i[r],(o=d[a])&&T(o)){if("or"===n)return!0}else if("and"===n)throw new Error("The option '"+e.option+"' did not have its dependencies met.");if("and"===n)return!0;throw new Error("The option '"+e.option+"' did not meet any of its dependencies.")},N=function(){var e;for(e in d)T(t[e])},I=function(){if(S)throw new Error("Value for '"+S+"' of type '"+u(S).type+"' required.")},C.call(s).slice(8,-1)){case"String":M=v(s.slice(null!=h?h:0));break;case"Array":M=s.slice(null!=h?h:2);break;case"Object":for(O in d={},s)if(P=s[O],"_"!==O){if(L=u(p(O)),!x(L.parsedType,P))throw new Error("Option '"+L.option+"': Invalid type for '"+P+"' - expected type '"+L.type+"'.");d[L.option]=P}return B(),N(),F(),b(),(j=D(d))._=s._||[],j;default:throw new Error("Invalid argument to 'parse': "+s+".")}for(J=0,U=M.length;J<U;++J)if("--"===(z=M[J]))g=!0;else if(g)m.push(z);else if(X=z.match(/^(--?)([a-zA-Z][-a-zA-Z0-9]*)(=)?(.*)?$/)){if(R=X,I(),K=1===R[1].length,_=R[2],H=null!=R[3],W=R[4],H&&null==W)throw new Error("No value for '"+_+"' specified.");if(K)for(q=(V=a(_)).length,G=0,Y=V.length;G<Y;++G)if($=G,Z=V[G],ee=(Q=u(Z)).option,g)m.push(Z);else if($===q-1)H?w(ee,te=Q.boolean?y([{type:"Boolean"}],W):W):Q.boolean?w(ee,!0):S=ee;else{if(!Q.boolean)throw new Error("Can't set argument '"+Z+"' when not last flag in a group of short flags.");w(ee,!0)}else if(ne=!1,(X=_.match(/^no-(.+)$/))?(ne=!0,ie=X[1],Q=u(ie)):Q=u(_),ee=Q.option,Q.boolean)te=!H||y([{type:"Boolean"}],W),w(ee,ne?!te:te);else{if(ne)throw new Error("Only use 'no-' prefix for Boolean options, not with '"+ie+"'.");H?w(ee,W):S=ee}}else if(X=z.match(/^-([0-9]+(?:\.[0-9]+)?)$/)){if(!(Q=t.NUM))throw new Error("No -NUM option defined.");w(Q.option,X[1])}else S?(w(S,z),S=null):(m.push(z),e.positionalAnywhere||(g=!0));return I(),B(),N(),F(),b(),(j=D(d))._=m,j},parseArgv:function(e){return E(e,{slice:2})},generateHelp:d(e),generateHelpForOption:m(u,e)}}).VERSION="0.8.2",e.exports=E}).call(this)},function(e,t,n){"use strict";const i=n(73);e.exports=i({prepend:"wist [options] file.brs [file.brs] [dir]",defaults:{concatRepeatedArrays:!0,mergeRepeatedObjects:!0},options:[{heading:"Basic configuration"},{option:"init",alias:"i",type:"Boolean",description:"Initialize Wist"},{option:"config",alias:"c",type:"String",description:"Use specified configuration file"},{option:"format",alias:"f",type:"String",enum:["compact","json","stylish","unix","visualstudio"],default:"stylish",description:"Output format"},{option:"verbose",alias:"v",type:"Boolean",default:!1,description:"Verbose logging"},{option:"help",alias:"h",type:"Boolean",description:"Show help"}]})},function(e,t,n){"use strict";const i=n(74),r=n(55),s=n(16),a=n(6),o=n(1);const u={execute(e){let t;try{t=i.parse(e)}catch(e){return console.error(e.message),1}const n=t._;if(t.init)return function(e){let t=0;t=e.config?c(e.config):c("../config/wist-recommended.json");return t}(t);if(t.config)return c(t.config);if(!t.help&&n.length){var a=process.hrtime();const e=new r(t),i=e.executeOnFiles(n);if(function(e,t,n){let i;try{i=e.getFormatter(n)}catch(e){return s.error(e.message),!1}const r=i(t);return r&&s.info(r),!0}(e,i.results,t.format)){var o=process.hrtime(a);return s.info(`Finished in ${(o[0]+o[1]/1e9).toFixed(2)}s\n`),i.errorCount?1:0}return 1}return s.info(i.generateHelp()),0}};function c(e){return a.existsSync(e)?function(e){try{let t=n(11)(e);a.writeFileSync(".wistrc.json",JSON.stringify(t,null,2))}catch(e){return console.error(e.message),1}return 0}(e=o.resolve(e)):(console.error("Invalid path to configuration file."),1)}e.exports=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,