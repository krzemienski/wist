!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n.w={},n(n.s=75)}([function(e,t,n){"use strict";var i=n(5),r=["kind","resolve","construct","instanceOf","predicate","represent","defaultStyle","styleAliases"],s=["scalar","sequence","mapping"];e.exports=function(e,t){var n,a;if(t=t||{},Object.keys(t).forEach(function(t){if(-1===r.indexOf(t))throw new i('Unknown option "'+t+'" is met in definition of "'+e+'" YAML type.')}),this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.defaultStyle=t.defaultStyle||null,this.styleAliases=(n=t.styleAliases||null,a={},null!==n&&Object.keys(n).forEach(function(e){n[e].forEach(function(t){a[String(t)]=e})}),a),-1===s.indexOf(this.kind))throw new i('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}},function(e,t){e.exports=require("path")},function(e,t,n){"use strict";var i=n(3),r=n(5),s=n(0);function a(e,t,n){var i=[];return e.include.forEach(function(e){n=a(e,t,n)}),e[t].forEach(function(e){n.forEach(function(t,n){t.tag===e.tag&&t.kind===e.kind&&i.push(n)}),n.push(e)}),n.filter(function(e,t){return-1===i.indexOf(t)})}function o(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach(function(e){if(e.loadKind&&"scalar"!==e.loadKind)throw new r("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")}),this.compiledImplicit=a(this,"implicit",[]),this.compiledExplicit=a(this,"explicit",[]),this.compiledTypeMap=function(){var e,t,n={scalar:{},sequence:{},mapping:{},fallback:{}};function i(e){n[e.kind][e.tag]=n.fallback[e.tag]=e}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(i);return n}(this.compiledImplicit,this.compiledExplicit)}o.DEFAULT=null,o.create=function(){var e,t;switch(arguments.length){case 1:e=o.DEFAULT,t=arguments[0];break;case 2:e=arguments[0],t=arguments[1];break;default:throw new r("Wrong number of arguments for Schema.create function")}if(e=i.toArray(e),t=i.toArray(t),!e.every(function(e){return e instanceof o}))throw new r("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!t.every(function(e){return e instanceof s}))throw new r("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new o({include:e,explicit:t})},e.exports=o},function(e,t,n){"use strict";function i(e){return void 0===e||null===e}e.exports.isNothing=i,e.exports.isObject=function(e){return"object"==typeof e&&null!==e},e.exports.toArray=function(e){return Array.isArray(e)?e:i(e)?[]:[e]},e.exports.repeat=function(e,t){var n,i="";for(n=0;n<t;n+=1)i+=e;return i},e.exports.isNegativeZero=function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},e.exports.extend=function(e,t){var n,i,r,s;if(t)for(n=0,i=(s=Object.keys(t)).length;n<i;n+=1)e[r=s[n]]=t[r];return e}},function(e,t,n){"use strict";var i=n(2);e.exports=new i({include:[n(14)],implicit:[n(30),n(29)],explicit:[n(28),n(26),n(25),n(24)]})},function(e,t,n){"use strict";function i(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=(this.reason||"(unknown reason)")+(this.mark?" "+this.mark.toString():""),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||""}i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i.prototype.toString=function(e){var t=this.name+": ";return t+=this.reason||"(unknown reason)",!e&&this.mark&&(t+=" "+this.mark.toString()),t},e.exports=i},function(e,t){e.exports=require("fs")},function(e,t,n){var i,r,s,a,o,u,c,h,l,p={}.toString;function f(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}i=n(72),r=n(71),s=n(70),a=n(69),o=n(68),u=function(e){return e},c=f(function(e,t){return p.call(t).slice(8,-1)===e}),h=f(function(e,t){var n,i=[];for(n=0;n<e;++n)i.push(t);return i}),a.empty=r.empty,a.slice=r.slice,a.take=r.take,a.drop=r.drop,a.splitAt=r.splitAt,a.takeWhile=r.takeWhile,a.dropWhile=r.dropWhile,a.span=r.span,a.breakStr=r.breakList,(l={Func:i,List:r,Obj:s,Str:a,Num:o,id:u,isType:c,replicate:h}).each=r.each,l.map=r.map,l.filter=r.filter,l.compact=r.compact,l.reject=r.reject,l.partition=r.partition,l.find=r.find,l.head=r.head,l.first=r.first,l.tail=r.tail,l.last=r.last,l.initial=r.initial,l.empty=r.empty,l.reverse=r.reverse,l.difference=r.difference,l.intersection=r.intersection,l.union=r.union,l.countBy=r.countBy,l.groupBy=r.groupBy,l.fold=r.fold,l.foldl=r.foldl,l.fold1=r.fold1,l.foldl1=r.foldl1,l.foldr=r.foldr,l.foldr1=r.foldr1,l.unfoldr=r.unfoldr,l.andList=r.andList,l.orList=r.orList,l.any=r.any,l.all=r.all,l.unique=r.unique,l.uniqueBy=r.uniqueBy,l.sort=r.sort,l.sortWith=r.sortWith,l.sortBy=r.sortBy,l.sum=r.sum,l.product=r.product,l.mean=r.mean,l.average=r.average,l.concat=r.concat,l.concatMap=r.concatMap,l.flatten=r.flatten,l.maximum=r.maximum,l.minimum=r.minimum,l.maximumBy=r.maximumBy,l.minimumBy=r.minimumBy,l.scan=r.scan,l.scanl=r.scanl,l.scan1=r.scan1,l.scanl1=r.scanl1,l.scanr=r.scanr,l.scanr1=r.scanr1,l.slice=r.slice,l.take=r.take,l.drop=r.drop,l.splitAt=r.splitAt,l.takeWhile=r.takeWhile,l.dropWhile=r.dropWhile,l.span=r.span,l.breakList=r.breakList,l.zip=r.zip,l.zipWith=r.zipWith,l.zipAll=r.zipAll,l.zipAllWith=r.zipAllWith,l.at=r.at,l.elemIndex=r.elemIndex,l.elemIndices=r.elemIndices,l.findIndex=r.findIndex,l.findIndices=r.findIndices,l.apply=i.apply,l.curry=i.curry,l.flip=i.flip,l.fix=i.fix,l.over=i.over,l.split=a.split,l.join=a.join,l.lines=a.lines,l.unlines=a.unlines,l.words=a.words,l.unwords=a.unwords,l.chars=a.chars,l.unchars=a.unchars,l.repeat=a.repeat,l.capitalize=a.capitalize,l.camelize=a.camelize,l.dasherize=a.dasherize,l.values=s.values,l.keys=s.keys,l.pairsToObj=s.pairsToObj,l.objToPairs=s.objToPairs,l.listsToObj=s.listsToObj,l.objToLists=s.objToLists,l.max=o.max,l.min=o.min,l.negate=o.negate,l.abs=o.abs,l.signum=o.signum,l.quot=o.quot,l.rem=o.rem,l.div=o.div,l.mod=o.mod,l.recip=o.recip,l.pi=o.pi,l.tau=o.tau,l.exp=o.exp,l.sqrt=o.sqrt,l.ln=o.ln,l.pow=o.pow,l.sin=o.sin,l.tan=o.tan,l.cos=o.cos,l.acos=o.acos,l.asin=o.asin,l.atan=o.atan,l.atan2=o.atan2,l.truncate=o.truncate,l.round=o.round,l.ceiling=o.ceiling,l.floor=o.floor,l.isItNaN=o.isItNaN,l.even=o.even,l.odd=o.odd,l.gcd=o.gcd,l.lcm=o.lcm,l.VERSION="1.1.2",e.exports=l},function(e,t,n){"use strict";var i=n(2);e.exports=i.DEFAULT=new i({include:[n(4)],explicit:[n(23),n(22),n(21)]})},function(e,t,n){"use strict";var i=n(2);e.exports=new i({explicit:[n(37),n(36),n(35)]})},function(e,t,n){"use strict";const i=n(50),r=n(1),s=["off","warn","error"],a=s.reduce((e,t,n)=>(e[t]=n,e),{}),o=[0,1,2,"off","warn","error"];e.exports={createEmptyConfig:()=>({globals:{},env:{},rules:{},parserOptions:{}}),createEnvironmentConfig(e,t){const n=this.createEmptyConfig();return e&&(n.env=e,Object.keys(e).filter(t=>e[t]).forEach(e=>{const i=t.get(e);i&&(i.globals&&Object.assign(n.globals,i.globals),i.parserOptions&&Object.assign(n.parserOptions,i.parserOptions))})),n},applyEnvironments(e,t){return e.env&&"object"==typeof e.env?this.merge(this.createEnvironmentConfig(e.env,t),e):e},merge:function e(t,n,i,r){const s=Array.isArray(n)||Array.isArray(t);let a=s&&[]||{};return i=!!i,r=!!r,s?(t=t||[],a=r&&Array.isArray(n)&&n.length>1?a.concat(n):a.concat(t),"object"==typeof n||Array.isArray(n)||(n=[n]),Object.keys(n).forEach((s,o)=>{s=n[o],void 0===a[o]?a[o]=s:"object"==typeof s?a[o]=r?s:e(t[o],s,i,r):i?-1===a.indexOf(s)&&a.push(s):a[o]=s})):(t&&"object"==typeof t&&Object.keys(t).forEach(e=>{a[e]=t[e]}),Object.keys(n).forEach(s=>{"overrides"===s?a[s]=(t[s]||[]).concat(n[s]||[]):Array.isArray(n[s])||Array.isArray(t[s])?a[s]=e(t[s],n[s],"plugins"===s||"extends"===s,r):"object"==typeof n[s]&&n[s]&&"exported"!==s&&"astGlobals"!==s?a[s]=e(t[s]||{},n[s],i,"rules"===s):a[s]=n[s]})),a},normalize(e){e.rules&&Object.keys(e.rules).forEach(t=>{const n=e.rules[t];"string"==typeof n?e.rules[t]=a[n.toLowerCase()]||0:Array.isArray(n)&&"string"==typeof n[0]&&(n[0]=a[n[0].toLowerCase()]||0)})},normalizeToStrings(e){e.rules&&Object.keys(e.rules).forEach(t=>{const n=e.rules[t];"number"==typeof n?e.rules[t]=s[n]||s[0]:Array.isArray(n)&&"number"==typeof n[0]&&(n[0]=s[n[0]]||s[0])})},isErrorSeverity(e){let t=Array.isArray(e)?e[0]:e;return"string"==typeof t&&(t=a[t.toLowerCase()]||0),"number"==typeof t&&2===t},isValidSeverity(e){let t=Array.isArray(e)?e[0]:e;return"string"==typeof t&&(t=t.toLowerCase()),-1!==o.indexOf(t)},isEverySeverityValid(e){return Object.keys(e).every(t=>this.isValidSeverity(e[t]))},getConfigFromVector(e,t){const n=t.getMergedVectorConfig(e);if(n)return n;const i=Array.from(e);let r,s=i.length-1;for(;s>=0&&!(r=t.getMergedVectorConfig(i));)i.pop(),s--;r||(r={});let a=r;for(let n=s+1;n<e.length;n++)a=this.mergeVectorEntry(a,e[n],t),t.setMergedVectorConfig(e.slice(0,n+1),a);return a},mergeVectorEntry(e,t,n){const i=Object.assign({},n.getConfig(t.filePath));let r,s=Object.assign({},e);return r=i.overrides?i.overrides.filter((e,n)=>-1!==t.matchingOverrides.indexOf(n)):[],delete(s=this.merge(s,i)).overrides,(s=r.reduce((e,t)=>this.merge(e,t),s)).filePath?(delete s.filePath,delete s.baseDirectory):s.files&&delete s.files,s},pathMatchesGlobs(e,t,n){const s=[].concat(t),a=[].concat(n||[]);s.concat(a).forEach(e=>{if(r.isAbsolute(e)||e.includes(".."))throw new Error(`Invalid override pattern (expected relative path not containing '..'): ${e}`)});const o={matchBase:!0};return s.some(t=>i(e,t,o))&&!a.some(t=>i(e,t,o))}}},function(e,t){function n(e){var t=new Error('Cannot find module "'+e+'".');throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=11},function(e,t,n){(function(){var t,i,r;t=n(60),i=n(59),r=function(e,n,r){return i(t(e),n,r)},e.exports={VERSION:"0.3.2",typeCheck:r,parsedTypeCheck:i,parseType:t}}).call(this)},function(e,t,n){"use strict";var i=n(2);e.exports=new i({include:[n(9)],implicit:[n(34),n(33),n(32),n(31)]})},function(e,t,n){"use strict";var i=n(2);e.exports=new i({include:[n(13)]})},function(e,t,n){(function(){var t,i,r,s,a,o,u,c;t=n(7),i=t.map,r=t.sortBy,s=n(66),a=function(e,t){var n,a,o;if(e.length)return n=i(function(e){var n,i,r;return i=(n=t.length>e.length?[t,e]:[e,t])[0],r=n[1],{string:e,distance:s.get(i,r)}})(e),o=(a=r(function(e){return e.distance},n)[0]).string,a.distance,o},o=function(e){return 1===e.length||"NUM"===e?"-"+e:"--"+e},u=function(e){return/^[A-Z]/.test(e)?e:t.dasherize(e)},c=function(e){return e.length<3?e.join(" or "):e.slice(0,-1).join(", ")+", or "+e[e.length-1]},e.exports={closestString:a,nameToRaw:o,dasherize:u,naturalJoin:c}}).call(this)},function(e,t,n){"use strict";e.exports={info(){console.log.apply(console,Array.from(arguments))},error(){console.error.apply(console,Array.from(arguments))}}},function(e,t,n){"use strict";const i=n(6),r=n(1);function s(e){try{return i.readdirSync(e)}catch(e){return[]}}function a(e,t,n){const s={};return e.forEach(e=>{if(n.indexOf(e)>=0){const n=r.resolve(t,e);i.statSync(n).isFile()&&(s[e]=n)}}),s}e.exports=class{constructor(e,t){this.fileNames=Array.isArray(e)?e:[e],this.cwd=t||process.cwd(),this.cache={}}*findAllInDirectoryAndParents(e){const t=this.cache;if(e=e?r.resolve(this.cwd,e):this.cwd,t.hasOwnProperty(e))return void(yield*t[e]);const n=[],i=this.fileNames;let o=0;do{n[o++]=e,t[e]=[];const u=a(s(e),e,i);if(Object.keys(u).length)for(let e=0;e<i.length;e++)if(u[i[e]]){const r=u[i[e]];for(let e=0;e<o;e++)t[n[e]].push(r);yield r;break}const c=e;if((e=r.dirname(e))===c)return}while(!t.hasOwnProperty(e));for(let i=0;i<o;i++)n.push.apply(t[n[i]],t[e]);yield*t[n[0]]}}},function(e,t,n){"use strict";function i(e){return JSON.stringify(e)}e.exports=class{constructor(){this.configFullNameCache=new Map,this.localHierarchyCache=new Map,this.mergedVectorCache=new Map,this.mergedCache=new Map}getConfig(e){return this.configFullNameCache.get(e)}setConfig(e,t){this.configFullNameCache.set(e,t)}getHierarchyLocalConfigs(e){return this.localHierarchyCache.get(e)}setHierarchyLocalConfigs(e,t){e.forEach((e,n)=>{const i=t.slice(0,t.length-n);this.localHierarchyCache.set(e,i)})}getMergedVectorConfig(e){return this.mergedVectorCache.get(i(e))}setMergedVectorConfig(e,t){this.mergedVectorCache.set(i(e),t)}getMergedConfig(e){return this.mergedCache.get(i(e))}setMergedConfig(e,t){this.mergedCache.set(i(e),t)}}},function(e,t,n){"use strict";var i=n(3),r=n(5),s=n(8),a=n(4),o=Object.prototype.toString,u=Object.prototype.hasOwnProperty,c=9,h=10,l=32,p=33,f=34,d=35,m=37,x=38,g=39,y=42,D=44,v=45,E=58,C=62,A=63,S=64,w=91,F=93,b=96,k=123,B=124,T=125,N={0:"\\0",7:"\\a",8:"\\b",9:"\\t",10:"\\n",11:"\\v",12:"\\f",13:"\\r",27:"\\e",34:'\\"',92:"\\\\",133:"\\N",160:"\\_",8232:"\\L",8233:"\\P"},I=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"];function M(e){var t,n,s;if(t=e.toString(16).toUpperCase(),e<=255)n="x",s=2;else if(e<=65535)n="u",s=4;else{if(!(e<=4294967295))throw new r("code point within a string may not be greater than 0xFFFFFFFF");n="U",s=8}return"\\"+n+i.repeat("0",s-t.length)+t}function O(e){this.schema=e.schema||s,this.indent=Math.max(1,e.indent||2),this.skipInvalid=e.skipInvalid||!1,this.flowLevel=i.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,t){var n,i,r,s,a,o,c;if(null===t)return{};for(n={},r=0,s=(i=Object.keys(t)).length;r<s;r+=1)a=i[r],o=String(t[a]),"!!"===a.slice(0,2)&&(a="tag:yaml.org,2002:"+a.slice(2)),(c=e.compiledTypeMap.fallback[a])&&u.call(c.styleAliases,o)&&(o=c.styleAliases[o]),n[a]=o;return n}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function P(e,t){for(var n,r=i.repeat(" ",t),s=0,a=-1,o="",u=e.length;s<u;)-1===(a=e.indexOf("\n",s))?(n=e.slice(s),s=u):(n=e.slice(s,a+1),s=a+1),n.length&&"\n"!==n&&(o+=r),o+=n;return o}function L(e,t){return"\n"+i.repeat(" ",e.indent*t)}function j(e){return e===l||e===c}function J(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&65279!==e||65536<=e&&e<=1114111}function U(e){return J(e)&&65279!==e&&e!==D&&e!==w&&e!==F&&e!==k&&e!==T&&e!==E&&e!==d}var z=1,X=2,R=3,K=4,_=5;function H(e,t,n,i,r){var s,a,o,u=!1,c=!1,l=-1!==i,N=-1,I=J(o=e.charCodeAt(0))&&65279!==o&&!j(o)&&o!==v&&o!==A&&o!==E&&o!==D&&o!==w&&o!==F&&o!==k&&o!==T&&o!==d&&o!==x&&o!==y&&o!==p&&o!==B&&o!==C&&o!==g&&o!==f&&o!==m&&o!==S&&o!==b&&!j(e.charCodeAt(e.length-1));if(t)for(s=0;s<e.length;s++){if(!J(a=e.charCodeAt(s)))return _;I=I&&U(a)}else{for(s=0;s<e.length;s++){if((a=e.charCodeAt(s))===h)u=!0,l&&(c=c||s-N-1>i&&" "!==e[N+1],N=s);else if(!J(a))return _;I=I&&U(a)}c=c||l&&s-N-1>i&&" "!==e[N+1]}return u||c?" "===e[0]&&n>9?_:c?K:R:I&&!r(e)?z:X}function W(e,t,n,i){e.dump=function(){if(0===t.length)return"''";if(!e.noCompatMode&&-1!==I.indexOf(t))return"'"+t+"'";var s=e.indent*Math.max(1,n),a=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-s),o=i||e.flowLevel>-1&&n>=e.flowLevel;switch(H(t,o,e.indent,a,function(t){return function(e,t){var n,i;for(n=0,i=e.implicitTypes.length;n<i;n+=1)if(e.implicitTypes[n].resolve(t))return!0;return!1}(e,t)})){case z:return t;case X:return"'"+t.replace(/'/g,"''")+"'";case R:return"|"+V(t,e.indent)+q(P(t,s));case K:return">"+V(t,e.indent)+q(P(function(e,t){var n,i,r=/(\n+)([^\n]*)/g,s=(o=e.indexOf("\n"),o=-1!==o?o:e.length,r.lastIndex=o,G(e.slice(0,o),t)),a="\n"===e[0]||" "===e[0];var o;for(;i=r.exec(e);){var u=i[1],c=i[2];n=" "===c[0],s+=u+(a||n||""===c?"":"\n")+G(c,t),a=n}return s}(t,a),s));case _:return'"'+function(e){for(var t,n,i="",r=0;r<e.length;r++)t=e.charCodeAt(r),n=N[t],i+=!n&&J(t)?e[r]:n||M(t);return i}(t)+'"';default:throw new r("impossible error: invalid scalar style")}}()}function V(e,t){var n=" "===e[0]?String(t):"",i="\n"===e[e.length-1];return n+(i&&("\n"===e[e.length-2]||"\n"===e)?"+":i?"":"-")+"\n"}function q(e){return"\n"===e[e.length-1]?e.slice(0,-1):e}function G(e,t){if(""===e||" "===e[0])return e;for(var n,i,r=/ [^ ]/g,s=0,a=0,o=0,u="";n=r.exec(e);)(o=n.index)-s>t&&(i=a>s?a:o,u+="\n"+e.slice(s,i),s=i+1),a=o;return u+="\n",e.length-s>t&&a>s?u+=e.slice(s,a)+"\n"+e.slice(a+1):u+=e.slice(s),u.slice(1)}function Y(e,t,n){var i,s,a,c,h,l;for(a=0,c=(s=n?e.explicitTypes:e.implicitTypes).length;a<c;a+=1)if(((h=s[a]).instanceOf||h.predicate)&&(!h.instanceOf||"object"==typeof t&&t instanceof h.instanceOf)&&(!h.predicate||h.predicate(t))){if(e.tag=n?h.tag:"?",h.represent){if(l=e.styleMap[h.tag]||h.defaultStyle,"[object Function]"===o.call(h.represent))i=h.represent(t,l);else{if(!u.call(h.represent,l))throw new r("!<"+h.tag+'> tag resolver accepts not "'+l+'" style');i=h.represent[l](t,l)}e.dump=i}return!0}return!1}function $(e,t,n,i,s,a){e.tag=null,e.dump=n,Y(e,n,!1)||Y(e,n,!0);var u=o.call(e.dump);i&&(i=e.flowLevel<0||e.flowLevel>t);var c,l,p="[object Object]"===u||"[object Array]"===u;if(p&&(l=-1!==(c=e.duplicates.indexOf(n))),(null!==e.tag&&"?"!==e.tag||l||2!==e.indent&&t>0)&&(s=!1),l&&e.usedDuplicates[c])e.dump="*ref_"+c;else{if(p&&l&&!e.usedDuplicates[c]&&(e.usedDuplicates[c]=!0),"[object Object]"===u)i&&0!==Object.keys(e.dump).length?(!function(e,t,n,i){var s,a,o,u,c,l,p="",f=e.tag,d=Object.keys(n);if(!0===e.sortKeys)d.sort();else if("function"==typeof e.sortKeys)d.sort(e.sortKeys);else if(e.sortKeys)throw new r("sortKeys must be a boolean or a function");for(s=0,a=d.length;s<a;s+=1)l="",i&&0===s||(l+=L(e,t)),u=n[o=d[s]],$(e,t+1,o,!0,!0,!0)&&((c=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&h===e.dump.charCodeAt(0)?l+="?":l+="? "),l+=e.dump,c&&(l+=L(e,t)),$(e,t+1,u,!0,c)&&(e.dump&&h===e.dump.charCodeAt(0)?l+=":":l+=": ",p+=l+=e.dump));e.tag=f,e.dump=p||"{}"}(e,t,e.dump,s),l&&(e.dump="&ref_"+c+e.dump)):(!function(e,t,n){var i,r,s,a,o,u="",c=e.tag,h=Object.keys(n);for(i=0,r=h.length;i<r;i+=1)o="",0!==i&&(o+=", "),a=n[s=h[i]],$(e,t,s,!1,!1)&&(e.dump.length>1024&&(o+="? "),o+=e.dump+":"+(e.condenseFlow?"":" "),$(e,t,a,!1,!1)&&(u+=o+=e.dump));e.tag=c,e.dump="{"+u+"}"}(e,t,e.dump),l&&(e.dump="&ref_"+c+" "+e.dump));else if("[object Array]"===u)i&&0!==e.dump.length?(!function(e,t,n,i){var r,s,a="",o=e.tag;for(r=0,s=n.length;r<s;r+=1)$(e,t+1,n[r],!0,!0)&&(i&&0===r||(a+=L(e,t)),e.dump&&h===e.dump.charCodeAt(0)?a+="-":a+="- ",a+=e.dump);e.tag=o,e.dump=a||"[]"}(e,t,e.dump,s),l&&(e.dump="&ref_"+c+e.dump)):(!function(e,t,n){var i,r,s="",a=e.tag;for(i=0,r=n.length;i<r;i+=1)$(e,t,n[i],!1,!1)&&(0!==i&&(s+=","+(e.condenseFlow?"":" ")),s+=e.dump);e.tag=a,e.dump="["+s+"]"}(e,t,e.dump),l&&(e.dump="&ref_"+c+" "+e.dump));else{if("[object String]"!==u){if(e.skipInvalid)return!1;throw new r("unacceptable kind of an object to dump "+u)}"?"!==e.tag&&W(e,e.dump,t,a)}null!==e.tag&&"?"!==e.tag&&(e.dump="!<"+e.tag+"> "+e.dump)}return!0}function Z(e,t){var n,i,r=[],s=[];for(function e(t,n,i){var r,s,a;if(null!==t&&"object"==typeof t)if(-1!==(s=n.indexOf(t)))-1===i.indexOf(s)&&i.push(s);else if(n.push(t),Array.isArray(t))for(s=0,a=t.length;s<a;s+=1)e(t[s],n,i);else for(r=Object.keys(t),s=0,a=r.length;s<a;s+=1)e(t[r[s]],n,i)}(e,r,s),n=0,i=s.length;n<i;n+=1)t.duplicates.push(r[s[n]]);t.usedDuplicates=new Array(i)}function Q(e,t){var n=new O(t=t||{});return n.noRefs||Z(e,n),$(n,0,e,!0,!0)?n.dump+"\n":""}e.exports.dump=Q,e.exports.safeDump=function(e,t){return Q(e,i.extend({schema:a},t))}},function(e,t,n){var i;i=function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(3),s=n(8),a=n(15);function o(e,t,n){var a=null,o=function(e,t){n&&n(e,t),a&&a.visit(e,t)},u="function"==typeof n?o:null,c=!1;if(t){c="boolean"==typeof t.comment&&t.comment;var h="boolean"==typeof t.attachComment&&t.attachComment;(c||h)&&((a=new i.CommentHandler).attach=h,t.comment=!0,u=o)}var l,p=!1;t&&"string"==typeof t.sourceType&&(p="module"===t.sourceType),l=t&&"boolean"==typeof t.jsx&&t.jsx?new r.JSXParser(e,t,u):new s.Parser(e,t,u);var f=p?l.parseModule():l.parseScript();return c&&a&&(f.comments=a.comments),l.config.tokens&&(f.tokens=l.tokens),l.config.tolerant&&(f.errors=l.errorHandler.errors),f}t.parse=o,t.parseModule=function(e,t,n){var i=t||{};return i.sourceType="module",o(e,i,n)},t.parseScript=function(e,t,n){var i=t||{};return i.sourceType="script",o(e,i,n)},t.tokenize=function(e,t,n){var i,r=new a.Tokenizer(e,t);i=[];try{for(;;){var s=r.getNextToken();if(!s)break;n&&(s=n(s)),i.push(s)}}catch(e){r.errorHandler.tolerate(e)}return r.errorHandler.tolerant&&(i.errors=r.errors()),i};var u=n(2);t.Syntax=u.Syntax,t.version="4.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=function(){function e(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[]}return e.prototype.insertInnerComments=function(e,t){if(e.type===i.Syntax.BlockStatement&&0===e.body.length){for(var n=[],r=this.leading.length-1;r>=0;--r){var s=this.leading[r];t.end.offset>=s.start&&(n.unshift(s.comment),this.leading.splice(r,1),this.trailing.splice(r,1))}n.length&&(e.innerComments=n)}},e.prototype.findTrailingComments=function(e){var t=[];if(this.trailing.length>0){for(var n=this.trailing.length-1;n>=0;--n){var i=this.trailing[n];i.start>=e.end.offset&&t.unshift(i.comment)}return this.trailing.length=0,t}var r=this.stack[this.stack.length-1];if(r&&r.node.trailingComments){var s=r.node.trailingComments[0];s&&s.range[0]>=e.end.offset&&(t=r.node.trailingComments,delete r.node.trailingComments)}return t},e.prototype.findLeadingComments=function(e){for(var t,n=[];this.stack.length>0;){if(!((s=this.stack[this.stack.length-1])&&s.start>=e.start.offset))break;t=s.node,this.stack.pop()}if(t){for(var i=(t.leadingComments?t.leadingComments.length:0)-1;i>=0;--i){var r=t.leadingComments[i];r.range[1]<=e.start.offset&&(n.unshift(r),t.leadingComments.splice(i,1))}return t.leadingComments&&0===t.leadingComments.length&&delete t.leadingComments,n}for(i=this.leading.length-1;i>=0;--i){var s;(s=this.leading[i]).start<=e.start.offset&&(n.unshift(s.comment),this.leading.splice(i,1))}return n},e.prototype.visitNode=function(e,t){if(!(e.type===i.Syntax.Program&&e.body.length>0)){this.insertInnerComments(e,t);var n=this.findTrailingComments(t),r=this.findLeadingComments(t);r.length>0&&(e.leadingComments=r),n.length>0&&(e.trailingComments=n),this.stack.push({node:e,start:t.start.offset})}},e.prototype.visitComment=function(e,t){var n="L"===e.type[0]?"Line":"Block",i={type:n,value:e.value};if(e.range&&(i.range=e.range),e.loc&&(i.loc=e.loc),this.comments.push(i),this.attach){var r={comment:{type:n,value:e.value,range:[t.start.offset,t.end.offset]},start:t.start.offset};e.loc&&(r.comment.loc=e.loc),e.type=n,this.leading.push(r),this.trailing.push(r)}},e.prototype.visit=function(e,t){"LineComment"===e.type?this.visitComment(e,t):"BlockComment"===e.type?this.visitComment(e,t):this.attach&&this.visitNode(e,t)},e}();t.CommentHandler=r},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForOfStatement:"ForOfStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"}},function(e,t,n){"use strict";var i,r=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var s=n(4),a=n(5),o=n(6),u=n(7),c=n(8),h=n(13),l=n(14);function p(e){var t;switch(e.type){case o.JSXSyntax.JSXIdentifier:t=e.name;break;case o.JSXSyntax.JSXNamespacedName:var n=e;t=p(n.namespace)+":"+p(n.name);break;case o.JSXSyntax.JSXMemberExpression:var i=e;t=p(i.object)+"."+p(i.property)}return t}h.TokenName[100]="JSXIdentifier",h.TokenName[101]="JSXText";var f=function(e){function t(t,n,i){return e.call(this,t,n,i)||this}return r(t,e),t.prototype.parsePrimaryExpression=function(){return this.match("<")?this.parseJSXRoot():e.prototype.parsePrimaryExpression.call(this)},t.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.line,this.scanner.lineStart=this.startMarker.index-this.startMarker.column},t.prototype.finishJSX=function(){this.nextToken()},t.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX("}"),this.config.tokens&&this.tokens.pop()},t.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.createJSXChildNode=function(){return{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.scanXHTMLEntity=function(e){for(var t="&",n=!0,i=!1,r=!1,a=!1;!this.scanner.eof()&&n&&!i;){var o=this.scanner.source[this.scanner.index];if(o===e)break;if(i=";"===o,t+=o,++this.scanner.index,!i)switch(t.length){case 2:r="#"===o;break;case 3:r&&(n=(a="x"===o)||s.Character.isDecimalDigit(o.charCodeAt(0)),r=r&&!a);break;default:n=(n=n&&!(r&&!s.Character.isDecimalDigit(o.charCodeAt(0))))&&!(a&&!s.Character.isHexDigit(o.charCodeAt(0)))}}if(n&&i&&t.length>2){var u=t.substr(1,t.length-2);r&&u.length>1?t=String.fromCharCode(parseInt(u.substr(1),10)):a&&u.length>2?t=String.fromCharCode(parseInt("0"+u.substr(1),16)):r||a||!l.XHTMLEntities[u]||(t=l.XHTMLEntities[u])}return t},t.prototype.lexJSX=function(){var e=this.scanner.source.charCodeAt(this.scanner.index);if(60===e||62===e||47===e||58===e||61===e||123===e||125===e)return{type:7,value:o=this.scanner.source[this.scanner.index++],lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index};if(34===e||39===e){for(var t=this.scanner.index,n=this.scanner.source[this.scanner.index++],i="";!this.scanner.eof();){if((u=this.scanner.source[this.scanner.index++])===n)break;i+="&"===u?this.scanXHTMLEntity(n):u}return{type:8,value:i,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(46===e){var r=this.scanner.source.charCodeAt(this.scanner.index+1),a=this.scanner.source.charCodeAt(this.scanner.index+2),o=46===r&&46===a?"...":".";t=this.scanner.index;return this.scanner.index+=o.length,{type:7,value:o,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(96===e)return{type:10,value:"",lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(s.Character.isIdentifierStart(e)&&92!==e){t=this.scanner.index;for(++this.scanner.index;!this.scanner.eof();){var u=this.scanner.source.charCodeAt(this.scanner.index);if(s.Character.isIdentifierPart(u)&&92!==u)++this.scanner.index;else{if(45!==u)break;++this.scanner.index}}return{type:100,value:this.scanner.source.slice(t,this.scanner.index),lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}return this.scanner.lex()},t.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;var e=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(e)),e},t.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;for(var e=this.scanner.index,t="";!this.scanner.eof();){var n=this.scanner.source[this.scanner.index];if("{"===n||"<"===n)break;++this.scanner.index,t+=n,s.Character.isLineTerminator(n.charCodeAt(0))&&(++this.scanner.lineNumber,"\r"===n&&"\n"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index)}this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart;var i={type:101,value:t,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:e,end:this.scanner.index};return t.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(i)),i},t.prototype.peekJSXToken=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.lexJSX();return this.scanner.restoreState(e),t},t.prototype.expectJSX=function(e){var t=this.nextJSXToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},t.prototype.matchJSX=function(e){var t=this.peekJSXToken();return 7===t.type&&t.value===e},t.prototype.parseJSXIdentifier=function(){var e=this.createJSXNode(),t=this.nextJSXToken();return 100!==t.type&&this.throwUnexpectedToken(t),this.finalize(e,new a.JSXIdentifier(t.value))},t.prototype.parseJSXElementName=function(){var e=this.createJSXNode(),t=this.parseJSXIdentifier();if(this.matchJSX(":")){var n=t;this.expectJSX(":");var i=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXNamespacedName(n,i))}else if(this.matchJSX("."))for(;this.matchJSX(".");){var r=t;this.expectJSX(".");var s=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXMemberExpression(r,s))}return t},t.prototype.parseJSXAttributeName=function(){var e,t=this.createJSXNode(),n=this.parseJSXIdentifier();if(this.matchJSX(":")){var i=n;this.expectJSX(":");var r=this.parseJSXIdentifier();e=this.finalize(t,new a.JSXNamespacedName(i,r))}else e=n;return e},t.prototype.parseJSXStringLiteralAttribute=function(){var e=this.createJSXNode(),t=this.nextJSXToken();8!==t.type&&this.throwUnexpectedToken(t);var n=this.getTokenRaw(t);return this.finalize(e,new u.Literal(t.value,n))},t.prototype.parseJSXExpressionAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.finishJSX(),this.match("}")&&this.tolerateError("JSX attributes must only be assigned a non-empty expression");var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXExpressionContainer(t))},t.prototype.parseJSXAttributeValue=function(){return this.matchJSX("{")?this.parseJSXExpressionAttribute():this.matchJSX("<")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},t.prototype.parseJSXNameValueAttribute=function(){var e=this.createJSXNode(),t=this.parseJSXAttributeName(),n=null;return this.matchJSX("=")&&(this.expectJSX("="),n=this.parseJSXAttributeValue()),this.finalize(e,new a.JSXAttribute(t,n))},t.prototype.parseJSXSpreadAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.expectJSX("..."),this.finishJSX();var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXSpreadAttribute(t))},t.prototype.parseJSXAttributes=function(){for(var e=[];!this.matchJSX("/")&&!this.matchJSX(">");){var t=this.matchJSX("{")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();e.push(t)}return e},t.prototype.parseJSXOpeningElement=function(){var e=this.createJSXNode();this.expectJSX("<");var t=this.parseJSXElementName(),n=this.parseJSXAttributes(),i=this.matchJSX("/");return i&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new a.JSXOpeningElement(t,i,n))},t.prototype.parseJSXBoundaryElement=function(){var e=this.createJSXNode();if(this.expectJSX("<"),this.matchJSX("/")){this.expectJSX("/");var t=this.parseJSXElementName();return this.expectJSX(">"),this.finalize(e,new a.JSXClosingElement(t))}var n=this.parseJSXElementName(),i=this.parseJSXAttributes(),r=this.matchJSX("/");return r&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new a.JSXOpeningElement(n,r,i))},t.prototype.parseJSXEmptyExpression=function(){var e=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.finalize(e,new a.JSXEmptyExpression)},t.prototype.parseJSXExpressionContainer=function(){var e,t=this.createJSXNode();return this.expectJSX("{"),this.matchJSX("}")?(e=this.parseJSXEmptyExpression(),this.expectJSX("}")):(this.finishJSX(),e=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(t,new a.JSXExpressionContainer(e))},t.prototype.parseJSXChildren=function(){for(var e=[];!this.scanner.eof();){var t=this.createJSXChildNode(),n=this.nextJSXText();if(n.start<n.end){var i=this.getTokenRaw(n),r=this.finalize(t,new a.JSXText(n.value,i));e.push(r)}if("{"!==this.scanner.source[this.scanner.index])break;var s=this.parseJSXExpressionContainer();e.push(s)}return e},t.prototype.parseComplexJSXElement=function(e){for(var t=[];!this.scanner.eof();){e.children=e.children.concat(this.parseJSXChildren());var n=this.createJSXChildNode(),i=this.parseJSXBoundaryElement();if(i.type===o.JSXSyntax.JSXOpeningElement){var r=i;if(r.selfClosing){var s=this.finalize(n,new a.JSXElement(r,[],null));e.children.push(s)}else t.push(e),e={node:n,opening:r,closing:null,children:[]}}if(i.type===o.JSXSyntax.JSXClosingElement){e.closing=i;var u=p(e.opening.name);if(u!==p(e.closing.name)&&this.tolerateError("Expected corresponding JSX closing tag for %0",u),!(t.length>0))break;s=this.finalize(e.node,new a.JSXElement(e.opening,e.children,e.closing));(e=t[t.length-1]).children.push(s),t.pop()}}return e},t.prototype.parseJSXElement=function(){var e=this.createJSXNode(),t=this.parseJSXOpeningElement(),n=[],i=null;if(!t.selfClosing){var r=this.parseComplexJSXElement({node:e,opening:t,closing:i,children:n});n=r.children,i=r.closing}return this.finalize(e,new a.JSXElement(t,n,i))},t.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var e=this.parseJSXElement();return this.finishJSX(),e},t.prototype.isStartOfExpression=function(){return e.prototype.isStartOfExpression.call(this)||this.match("<")},t}(c.Parser);t.JSXParser=f},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};t.Character={fromCodePoint:function(e){return e<65536?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10))+String.fromCharCode(56320+(e-65536&1023))},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&n.NonAsciiIdentifierStart.test(t.Character.fromCodePoint(e))},isIdentifierPart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&n.NonAsciiIdentifierPart.test(t.Character.fromCodePoint(e))},isDecimalDigit:function(e){return e>=48&&e<=57},isHexDigit:function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},isOctalDigit:function(e){return e>=48&&e<=55}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(6),r=function(){return function(e){this.type=i.JSXSyntax.JSXClosingElement,this.name=e}}();t.JSXClosingElement=r;var s=function(){return function(e,t,n){this.type=i.JSXSyntax.JSXElement,this.openingElement=e,this.children=t,this.closingElement=n}}();t.JSXElement=s;var a=function(){return function(){this.type=i.JSXSyntax.JSXEmptyExpression}}();t.JSXEmptyExpression=a;var o=function(){return function(e){this.type=i.JSXSyntax.JSXExpressionContainer,this.expression=e}}();t.JSXExpressionContainer=o;var u=function(){return function(e){this.type=i.JSXSyntax.JSXIdentifier,this.name=e}}();t.JSXIdentifier=u;var c=function(){return function(e,t){this.type=i.JSXSyntax.JSXMemberExpression,this.object=e,this.property=t}}();t.JSXMemberExpression=c;var h=function(){return function(e,t){this.type=i.JSXSyntax.JSXAttribute,this.name=e,this.value=t}}();t.JSXAttribute=h;var l=function(){return function(e,t){this.type=i.JSXSyntax.JSXNamespacedName,this.namespace=e,this.name=t}}();t.JSXNamespacedName=l;var p=function(){return function(e,t,n){this.type=i.JSXSyntax.JSXOpeningElement,this.name=e,this.selfClosing=t,this.attributes=n}}();t.JSXOpeningElement=p;var f=function(){return function(e){this.type=i.JSXSyntax.JSXSpreadAttribute,this.argument=e}}();t.JSXSpreadAttribute=f;var d=function(){return function(e,t){this.type=i.JSXSyntax.JSXText,this.value=e,this.raw=t}}();t.JSXText=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSXSyntax={JSXAttribute:"JSXAttribute",JSXClosingElement:"JSXClosingElement",JSXElement:"JSXElement",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXIdentifier:"JSXIdentifier",JSXMemberExpression:"JSXMemberExpression",JSXNamespacedName:"JSXNamespacedName",JSXOpeningElement:"JSXOpeningElement",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=function(){return function(e){this.type=i.Syntax.ArrayExpression,this.elements=e}}();t.ArrayExpression=r;var s=function(){return function(e){this.type=i.Syntax.ArrayPattern,this.elements=e}}();t.ArrayPattern=s;var a=function(){return function(e,t,n){this.type=i.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!1}}();t.ArrowFunctionExpression=a;var o=function(){return function(e,t,n){this.type=i.Syntax.AssignmentExpression,this.operator=e,this.left=t,this.right=n}}();t.AssignmentExpression=o;var u=function(){return function(e,t){this.type=i.Syntax.AssignmentPattern,this.left=e,this.right=t}}();t.AssignmentPattern=u;var c=function(){return function(e,t,n){this.type=i.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!0}}();t.AsyncArrowFunctionExpression=c;var h=function(){return function(e,t,n){this.type=i.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0}}();t.AsyncFunctionDeclaration=h;var l=function(){return function(e,t,n){this.type=i.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0}}();t.AsyncFunctionExpression=l;var p=function(){return function(e){this.type=i.Syntax.AwaitExpression,this.argument=e}}();t.AwaitExpression=p;var f=function(){return function(e,t,n){var r="||"===e||"&&"===e;this.type=r?i.Syntax.LogicalExpression:i.Syntax.BinaryExpression,this.operator=e,this.left=t,this.right=n}}();t.BinaryExpression=f;var d=function(){return function(e){this.type=i.Syntax.BlockStatement,this.body=e}}();t.BlockStatement=d;var m=function(){return function(e){this.type=i.Syntax.BreakStatement,this.label=e}}();t.BreakStatement=m;var x=function(){return function(e,t){this.type=i.Syntax.CallExpression,this.callee=e,this.arguments=t}}();t.CallExpression=x;var g=function(){return function(e,t){this.type=i.Syntax.CatchClause,this.param=e,this.body=t}}();t.CatchClause=g;var y=function(){return function(e){this.type=i.Syntax.ClassBody,this.body=e}}();t.ClassBody=y;var D=function(){return function(e,t,n){this.type=i.Syntax.ClassDeclaration,this.id=e,this.superClass=t,this.body=n}}();t.ClassDeclaration=D;var v=function(){return function(e,t,n){this.type=i.Syntax.ClassExpression,this.id=e,this.superClass=t,this.body=n}}();t.ClassExpression=v;var E=function(){return function(e,t){this.type=i.Syntax.MemberExpression,this.computed=!0,this.object=e,this.property=t}}();t.ComputedMemberExpression=E;var C=function(){return function(e,t,n){this.type=i.Syntax.ConditionalExpression,this.test=e,this.consequent=t,this.alternate=n}}();t.ConditionalExpression=C;var A=function(){return function(e){this.type=i.Syntax.ContinueStatement,this.label=e}}();t.ContinueStatement=A;var S=function(){return function(){this.type=i.Syntax.DebuggerStatement}}();t.DebuggerStatement=S;var w=function(){return function(e,t){this.type=i.Syntax.ExpressionStatement,this.expression=e,this.directive=t}}();t.Directive=w;var F=function(){return function(e,t){this.type=i.Syntax.DoWhileStatement,this.body=e,this.test=t}}();t.DoWhileStatement=F;var b=function(){return function(){this.type=i.Syntax.EmptyStatement}}();t.EmptyStatement=b;var k=function(){return function(e){this.type=i.Syntax.ExportAllDeclaration,this.source=e}}();t.ExportAllDeclaration=k;var B=function(){return function(e){this.type=i.Syntax.ExportDefaultDeclaration,this.declaration=e}}();t.ExportDefaultDeclaration=B;var T=function(){return function(e,t,n){this.type=i.Syntax.ExportNamedDeclaration,this.declaration=e,this.specifiers=t,this.source=n}}();t.ExportNamedDeclaration=T;var N=function(){return function(e,t){this.type=i.Syntax.ExportSpecifier,this.exported=t,this.local=e}}();t.ExportSpecifier=N;var I=function(){return function(e){this.type=i.Syntax.ExpressionStatement,this.expression=e}}();t.ExpressionStatement=I;var M=function(){return function(e,t,n){this.type=i.Syntax.ForInStatement,this.left=e,this.right=t,this.body=n,this.each=!1}}();t.ForInStatement=M;var O=function(){return function(e,t,n){this.type=i.Syntax.ForOfStatement,this.left=e,this.right=t,this.body=n}}();t.ForOfStatement=O;var P=function(){return function(e,t,n,r){this.type=i.Syntax.ForStatement,this.init=e,this.test=t,this.update=n,this.body=r}}();t.ForStatement=P;var L=function(){return function(e,t,n,r){this.type=i.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=r,this.expression=!1,this.async=!1}}();t.FunctionDeclaration=L;var j=function(){return function(e,t,n,r){this.type=i.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=r,this.expression=!1,this.async=!1}}();t.FunctionExpression=j;var J=function(){return function(e){this.type=i.Syntax.Identifier,this.name=e}}();t.Identifier=J;var U=function(){return function(e,t,n){this.type=i.Syntax.IfStatement,this.test=e,this.consequent=t,this.alternate=n}}();t.IfStatement=U;var z=function(){return function(e,t){this.type=i.Syntax.ImportDeclaration,this.specifiers=e,this.source=t}}();t.ImportDeclaration=z;var X=function(){return function(e){this.type=i.Syntax.ImportDefaultSpecifier,this.local=e}}();t.ImportDefaultSpecifier=X;var R=function(){return function(e){this.type=i.Syntax.ImportNamespaceSpecifier,this.local=e}}();t.ImportNamespaceSpecifier=R;var K=function(){return function(e,t){this.type=i.Syntax.ImportSpecifier,this.local=e,this.imported=t}}();t.ImportSpecifier=K;var _=function(){return function(e,t){this.type=i.Syntax.LabeledStatement,this.label=e,this.body=t}}();t.LabeledStatement=_;var H=function(){return function(e,t){this.type=i.Syntax.Literal,this.value=e,this.raw=t}}();t.Literal=H;var W=function(){return function(e,t){this.type=i.Syntax.MetaProperty,this.meta=e,this.property=t}}();t.MetaProperty=W;var V=function(){return function(e,t,n,r,s){this.type=i.Syntax.MethodDefinition,this.key=e,this.computed=t,this.value=n,this.kind=r,this.static=s}}();t.MethodDefinition=V;var q=function(){return function(e){this.type=i.Syntax.Program,this.body=e,this.sourceType="module"}}();t.Module=q;var G=function(){return function(e,t){this.type=i.Syntax.NewExpression,this.callee=e,this.arguments=t}}();t.NewExpression=G;var Y=function(){return function(e){this.type=i.Syntax.ObjectExpression,this.properties=e}}();t.ObjectExpression=Y;var $=function(){return function(e){this.type=i.Syntax.ObjectPattern,this.properties=e}}();t.ObjectPattern=$;var Z=function(){return function(e,t,n,r,s,a){this.type=i.Syntax.Property,this.key=t,this.computed=n,this.value=r,this.kind=e,this.method=s,this.shorthand=a}}();t.Property=Z;var Q=function(){return function(e,t,n,r){this.type=i.Syntax.Literal,this.value=e,this.raw=t,this.regex={pattern:n,flags:r}}}();t.RegexLiteral=Q;var ee=function(){return function(e){this.type=i.Syntax.RestElement,this.argument=e}}();t.RestElement=ee;var te=function(){return function(e){this.type=i.Syntax.ReturnStatement,this.argument=e}}();t.ReturnStatement=te;var ne=function(){return function(e){this.type=i.Syntax.Program,this.body=e,this.sourceType="script"}}();t.Script=ne;var ie=function(){return function(e){this.type=i.Syntax.SequenceExpression,this.expressions=e}}();t.SequenceExpression=ie;var re=function(){return function(e){this.type=i.Syntax.SpreadElement,this.argument=e}}();t.SpreadElement=re;var se=function(){return function(e,t){this.type=i.Syntax.MemberExpression,this.computed=!1,this.object=e,this.property=t}}();t.StaticMemberExpression=se;var ae=function(){return function(){this.type=i.Syntax.Super}}();t.Super=ae;var oe=function(){return function(e,t){this.type=i.Syntax.SwitchCase,this.test=e,this.consequent=t}}();t.SwitchCase=oe;var ue=function(){return function(e,t){this.type=i.Syntax.SwitchStatement,this.discriminant=e,this.cases=t}}();t.SwitchStatement=ue;var ce=function(){return function(e,t){this.type=i.Syntax.TaggedTemplateExpression,this.tag=e,this.quasi=t}}();t.TaggedTemplateExpression=ce;var he=function(){return function(e,t){this.type=i.Syntax.TemplateElement,this.value=e,this.tail=t}}();t.TemplateElement=he;var le=function(){return function(e,t){this.type=i.Syntax.TemplateLiteral,this.quasis=e,this.expressions=t}}();t.TemplateLiteral=le;var pe=function(){return function(){this.type=i.Syntax.ThisExpression}}();t.ThisExpression=pe;var fe=function(){return function(e){this.type=i.Syntax.ThrowStatement,this.argument=e}}();t.ThrowStatement=fe;var de=function(){return function(e,t,n){this.type=i.Syntax.TryStatement,this.block=e,this.handler=t,this.finalizer=n}}();t.TryStatement=de;var me=function(){return function(e,t){this.type=i.Syntax.UnaryExpression,this.operator=e,this.argument=t,this.prefix=!0}}();t.UnaryExpression=me;var xe=function(){return function(e,t,n){this.type=i.Syntax.UpdateExpression,this.operator=e,this.argument=t,this.prefix=n}}();t.UpdateExpression=xe;var ge=function(){return function(e,t){this.type=i.Syntax.VariableDeclaration,this.declarations=e,this.kind=t}}();t.VariableDeclaration=ge;var ye=function(){return function(e,t){this.type=i.Syntax.VariableDeclarator,this.id=e,this.init=t}}();t.VariableDeclarator=ye;var De=function(){return function(e,t){this.type=i.Syntax.WhileStatement,this.test=e,this.body=t}}();t.WhileStatement=De;var ve=function(){return function(e,t){this.type=i.Syntax.WithStatement,this.object=e,this.body=t}}();t.WithStatement=ve;var Ee=function(){return function(e,t){this.type=i.Syntax.YieldExpression,this.argument=e,this.delegate=t}}();t.YieldExpression=Ee},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(9),r=n(10),s=n(11),a=n(7),o=n(12),u=n(2),c=n(13),h=function(){function e(e,t,n){void 0===t&&(t={}),this.config={range:"boolean"==typeof t.range&&t.range,loc:"boolean"==typeof t.loc&&t.loc,source:null,tokens:"boolean"==typeof t.tokens&&t.tokens,comment:"boolean"==typeof t.comment&&t.comment,tolerant:"boolean"==typeof t.tolerant&&t.tolerant},this.config.loc&&t.source&&null!==t.source&&(this.config.source=String(t.source)),this.delegate=n,this.errorHandler=new r.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new o.Scanner(e,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={")":0,";":0,",":0,"=":0,"]":0,"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":11,"/":11,"%":11},this.lookahead={type:2,value:"",lineNumber:this.scanner.lineNumber,lineStart:0,start:0,end:0},this.hasLineTerminator=!1,this.context={isModule:!1,await:!1,allowIn:!0,allowStrictDirective:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:!1},this.tokens=[],this.startMarker={index:0,line:this.scanner.lineNumber,column:0},this.lastMarker={index:0,line:this.scanner.lineNumber,column:0},this.nextToken(),this.lastMarker={index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}return e.prototype.throwError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Array.prototype.slice.call(arguments,1),s=e.replace(/%(\d)/g,function(e,t){return i.assert(t<r.length,"Message reference must be in range"),r[t]}),a=this.lastMarker.index,o=this.lastMarker.line,u=this.lastMarker.column+1;throw this.errorHandler.createError(a,o,u,s)},e.prototype.tolerateError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Array.prototype.slice.call(arguments,1),s=e.replace(/%(\d)/g,function(e,t){return i.assert(t<r.length,"Message reference must be in range"),r[t]}),a=this.lastMarker.index,o=this.scanner.lineNumber,u=this.lastMarker.column+1;this.errorHandler.tolerateError(a,o,u,s)},e.prototype.unexpectedTokenError=function(e,t){var n,i=t||s.Messages.UnexpectedToken;if(e?(t||(i=2===e.type?s.Messages.UnexpectedEOS:3===e.type?s.Messages.UnexpectedIdentifier:6===e.type?s.Messages.UnexpectedNumber:8===e.type?s.Messages.UnexpectedString:10===e.type?s.Messages.UnexpectedTemplate:s.Messages.UnexpectedToken,4===e.type&&(this.scanner.isFutureReservedWord(e.value)?i=s.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(e.value)&&(i=s.Messages.StrictReservedWord))),n=e.value):n="ILLEGAL",i=i.replace("%0",n),e&&"number"==typeof e.lineNumber){var r=e.start,a=e.lineNumber,o=this.lastMarker.index-this.lastMarker.column,u=e.start-o+1;return this.errorHandler.createError(r,a,u,i)}r=this.lastMarker.index,a=this.lastMarker.line,u=this.lastMarker.column+1;return this.errorHandler.createError(r,a,u,i)},e.prototype.throwUnexpectedToken=function(e,t){throw this.unexpectedTokenError(e,t)},e.prototype.tolerateUnexpectedToken=function(e,t){this.errorHandler.tolerate(this.unexpectedTokenError(e,t))},e.prototype.collectComments=function(){if(this.config.comment){var e=this.scanner.scanComments();if(e.length>0&&this.delegate)for(var t=0;t<e.length;++t){var n=e[t],i=void 0;i={type:n.multiLine?"BlockComment":"LineComment",value:this.scanner.source.slice(n.slice[0],n.slice[1])},this.config.range&&(i.range=n.range),this.config.loc&&(i.loc=n.loc);var r={start:{line:n.loc.start.line,column:n.loc.start.column,offset:n.range[0]},end:{line:n.loc.end.line,column:n.loc.end.column,offset:n.range[1]}};this.delegate(i,r)}}else this.scanner.scanComments()},e.prototype.getTokenRaw=function(e){return this.scanner.source.slice(e.start,e.end)},e.prototype.convertToken=function(e){var t={type:c.TokenName[e.type],value:this.getTokenRaw(e)};if(this.config.range&&(t.range=[e.start,e.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.line,column:this.startMarker.column},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),9===e.type){var n=e.pattern,i=e.flags;t.regex={pattern:n,flags:i}}return t},e.prototype.nextToken=function(){var e=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.collectComments(),this.scanner.index!==this.startMarker.index&&(this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart);var t=this.scanner.lex();return this.hasLineTerminator=e.lineNumber!==t.lineNumber,t&&this.context.strict&&3===t.type&&this.scanner.isStrictModeReservedWord(t.value)&&(t.type=4),this.lookahead=t,this.config.tokens&&2!==t.type&&this.tokens.push(this.convertToken(t)),e},e.prototype.nextRegexToken=function(){this.collectComments();var e=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(e))),this.lookahead=e,this.nextToken(),e},e.prototype.createNode=function(){return{index:this.startMarker.index,line:this.startMarker.line,column:this.startMarker.column}},e.prototype.startNode=function(e){return{index:e.start,line:e.lineNumber,column:e.start-e.lineStart}},e.prototype.finalize=function(e,t){if(this.config.range&&(t.range=[e.index,this.lastMarker.index]),this.config.loc&&(t.loc={start:{line:e.line,column:e.column},end:{line:this.lastMarker.line,column:this.lastMarker.column}},this.config.source&&(t.loc.source=this.config.source)),this.delegate){var n={start:{line:e.line,column:e.column,offset:e.index},end:{line:this.lastMarker.line,column:this.lastMarker.column,offset:this.lastMarker.index}};this.delegate(t,n)}return t},e.prototype.expect=function(e){var t=this.nextToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var e=this.lookahead;7===e.type&&","===e.value?this.nextToken():7===e.type&&";"===e.value?(this.nextToken(),this.tolerateUnexpectedToken(e)):this.tolerateUnexpectedToken(e,s.Messages.UnexpectedToken)}else this.expect(",")},e.prototype.expectKeyword=function(e){var t=this.nextToken();4===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.match=function(e){return 7===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchKeyword=function(e){return 4===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchContextualKeyword=function(e){return 3===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchAssign=function(){if(7!==this.lookahead.type)return!1;var e=this.lookahead.value;return"="===e||"*="===e||"**="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e},e.prototype.isolateCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,i=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var r=e.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=t,this.context.isAssignmentTarget=n,this.context.firstCoverInitializedNameError=i,r},e.prototype.inheritCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,i=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var r=e.call(this);return this.context.isBindingElement=this.context.isBindingElement&&t,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&n,this.context.firstCoverInitializedNameError=i||this.context.firstCoverInitializedNameError,r},e.prototype.consumeSemicolon=function(){this.match(";")?this.nextToken():this.hasLineTerminator||(2===this.lookahead.type||this.match("}")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.line=this.startMarker.line,this.lastMarker.column=this.startMarker.column)},e.prototype.parsePrimaryExpression=function(){var e,t,n,i=this.createNode();switch(this.lookahead.type){case 3:(this.context.isModule||this.context.await)&&"await"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),e=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(i,new a.Identifier(this.nextToken().value));break;case 6:case 8:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,s.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.Literal(t.value,n));break;case 1:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.Literal("true"===t.value,n));break;case 5:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.Literal(null,n));break;case 10:e=this.parseTemplateLiteral();break;case 7:switch(this.lookahead.value){case"(":this.context.isBindingElement=!1,e=this.inheritCoverGrammar(this.parseGroupExpression);break;case"[":e=this.inheritCoverGrammar(this.parseArrayInitializer);break;case"{":e=this.inheritCoverGrammar(this.parseObjectInitializer);break;case"/":case"/=":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,t=this.nextRegexToken(),n=this.getTokenRaw(t),e=this.finalize(i,new a.RegexLiteral(t.regex,n,t.pattern,t.flags));break;default:e=this.throwUnexpectedToken(this.nextToken())}break;case 4:!this.context.strict&&this.context.allowYield&&this.matchKeyword("yield")?e=this.parseIdentifierName():!this.context.strict&&this.matchKeyword("let")?e=this.finalize(i,new a.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword("function")?e=this.parseFunctionExpression():this.matchKeyword("this")?(this.nextToken(),e=this.finalize(i,new a.ThisExpression)):e=this.matchKeyword("class")?this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:e=this.throwUnexpectedToken(this.nextToken())}return e},e.prototype.parseSpreadElement=function(){var e=this.createNode();this.expect("...");var t=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(e,new a.SpreadElement(t))},e.prototype.parseArrayInitializer=function(){var e=this.createNode(),t=[];for(this.expect("[");!this.match("]");)if(this.match(","))this.nextToken(),t.push(null);else if(this.match("...")){var n=this.parseSpreadElement();this.match("]")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(",")),t.push(n)}else t.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match("]")||this.expect(",");return this.expect("]"),this.finalize(e,new a.ArrayExpression(t))},e.prototype.parsePropertyMethod=function(e){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var t=this.context.strict,n=this.context.allowStrictDirective;this.context.allowStrictDirective=e.simple;var i=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&e.firstRestricted&&this.tolerateUnexpectedToken(e.firstRestricted,e.message),this.context.strict&&e.stricted&&this.tolerateUnexpectedToken(e.stricted,e.message),this.context.strict=t,this.context.allowStrictDirective=n,i},e.prototype.parsePropertyMethodFunction=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!1;var n=this.parseFormalParameters(),i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!1))},e.prototype.parsePropertyMethodAsyncFunction=function(){var e=this.createNode(),t=this.context.allowYield,n=this.context.await;this.context.allowYield=!1,this.context.await=!0;var i=this.parseFormalParameters(),r=this.parsePropertyMethod(i);return this.context.allowYield=t,this.context.await=n,this.finalize(e,new a.AsyncFunctionExpression(null,i.params,r))},e.prototype.parseObjectPropertyKey=function(){var e,t=this.createNode(),n=this.nextToken();switch(n.type){case 8:case 6:this.context.strict&&n.octal&&this.tolerateUnexpectedToken(n,s.Messages.StrictOctalLiteral);var i=this.getTokenRaw(n);e=this.finalize(t,new a.Literal(n.value,i));break;case 3:case 1:case 5:case 4:e=this.finalize(t,new a.Identifier(n.value));break;case 7:"["===n.value?(e=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect("]")):e=this.throwUnexpectedToken(n);break;default:e=this.throwUnexpectedToken(n)}return e},e.prototype.isPropertyKey=function(e,t){return e.type===u.Syntax.Identifier&&e.name===t||e.type===u.Syntax.Literal&&e.value===t},e.prototype.parseObjectProperty=function(e){var t,n=this.createNode(),i=this.lookahead,r=null,o=null,u=!1,c=!1,h=!1,l=!1;if(3===i.type){var p=i.value;this.nextToken(),u=this.match("["),r=(l=!(this.hasLineTerminator||"async"!==p||this.match(":")||this.match("(")||this.match("*")))?this.parseObjectPropertyKey():this.finalize(n,new a.Identifier(p))}else this.match("*")?this.nextToken():(u=this.match("["),r=this.parseObjectPropertyKey());var f=this.qualifiedPropertyName(this.lookahead);if(3===i.type&&!l&&"get"===i.value&&f)t="get",u=this.match("["),r=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod();else if(3===i.type&&!l&&"set"===i.value&&f)t="set",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseSetterMethod();else if(7===i.type&&"*"===i.value&&f)t="init",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),c=!0;else if(r||this.throwUnexpectedToken(this.lookahead),t="init",this.match(":")&&!l)!u&&this.isPropertyKey(r,"__proto__")&&(e.value&&this.tolerateError(s.Messages.DuplicateProtoProperty),e.value=!0),this.nextToken(),o=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match("("))o=l?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),c=!0;else if(3===i.type){p=this.finalize(n,new a.Identifier(i.value));if(this.match("=")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),h=!0;var d=this.isolateCoverGrammar(this.parseAssignmentExpression);o=this.finalize(n,new a.AssignmentPattern(p,d))}else h=!0,o=p}else this.throwUnexpectedToken(this.nextToken());return this.finalize(n,new a.Property(t,r,u,o,c,h))},e.prototype.parseObjectInitializer=function(){var e=this.createNode();this.expect("{");for(var t=[],n={value:!1};!this.match("}");)t.push(this.parseObjectProperty(n)),this.match("}")||this.expectCommaSeparator();return this.expect("}"),this.finalize(e,new a.ObjectExpression(t))},e.prototype.parseTemplateHead=function(){i.assert(this.lookahead.head,"Template literal must start with a template head");var e=this.createNode(),t=this.nextToken(),n=t.value,r=t.cooked;return this.finalize(e,new a.TemplateElement({raw:n,cooked:r},t.tail))},e.prototype.parseTemplateElement=function(){10!==this.lookahead.type&&this.throwUnexpectedToken();var e=this.createNode(),t=this.nextToken(),n=t.value,i=t.cooked;return this.finalize(e,new a.TemplateElement({raw:n,cooked:i},t.tail))},e.prototype.parseTemplateLiteral=function(){var e=this.createNode(),t=[],n=[],i=this.parseTemplateHead();for(n.push(i);!i.tail;)t.push(this.parseExpression()),i=this.parseTemplateElement(),n.push(i);return this.finalize(e,new a.TemplateLiteral(n,t))},e.prototype.reinterpretExpressionAsPattern=function(e){switch(e.type){case u.Syntax.Identifier:case u.Syntax.MemberExpression:case u.Syntax.RestElement:case u.Syntax.AssignmentPattern:break;case u.Syntax.SpreadElement:e.type=u.Syntax.RestElement,this.reinterpretExpressionAsPattern(e.argument);break;case u.Syntax.ArrayExpression:e.type=u.Syntax.ArrayPattern;for(var t=0;t<e.elements.length;t++)null!==e.elements[t]&&this.reinterpretExpressionAsPattern(e.elements[t]);break;case u.Syntax.ObjectExpression:e.type=u.Syntax.ObjectPattern;for(t=0;t<e.properties.length;t++)this.reinterpretExpressionAsPattern(e.properties[t].value);break;case u.Syntax.AssignmentExpression:e.type=u.Syntax.AssignmentPattern,delete e.operator,this.reinterpretExpressionAsPattern(e.left)}},e.prototype.parseGroupExpression=function(){var e;if(this.expect("("),this.match(")"))this.nextToken(),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[],async:!1};else{var t=this.lookahead,n=[];if(this.match("..."))e=this.parseRestElement(n),this.expect(")"),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[e],async:!1};else{var i=!1;if(this.context.isBindingElement=!0,e=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(",")){var r=[];for(this.context.isAssignmentTarget=!1,r.push(e);2!==this.lookahead.type&&this.match(",");){if(this.nextToken(),this.match(")")){this.nextToken();for(var s=0;s<r.length;s++)this.reinterpretExpressionAsPattern(r[s]);i=!0,e={type:"ArrowParameterPlaceHolder",params:r,async:!1}}else if(this.match("...")){this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),r.push(this.parseRestElement(n)),this.expect(")"),this.match("=>")||this.expect("=>"),this.context.isBindingElement=!1;for(s=0;s<r.length;s++)this.reinterpretExpressionAsPattern(r[s]);i=!0,e={type:"ArrowParameterPlaceHolder",params:r,async:!1}}else r.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(i)break}i||(e=this.finalize(this.startNode(t),new a.SequenceExpression(r)))}if(!i){if(this.expect(")"),this.match("=>")&&(e.type===u.Syntax.Identifier&&"yield"===e.name&&(i=!0,e={type:"ArrowParameterPlaceHolder",params:[e],async:!1}),!i)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),e.type===u.Syntax.SequenceExpression)for(s=0;s<e.expressions.length;s++)this.reinterpretExpressionAsPattern(e.expressions[s]);else this.reinterpretExpressionAsPattern(e);e={type:"ArrowParameterPlaceHolder",params:e.type===u.Syntax.SequenceExpression?e.expressions:[e],async:!1}}this.context.isBindingElement=!1}}}return e},e.prototype.parseArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.isIdentifierName=function(e){return 3===e.type||4===e.type||1===e.type||5===e.type},e.prototype.parseIdentifierName=function(){var e=this.createNode(),t=this.nextToken();return this.isIdentifierName(t)||this.throwUnexpectedToken(t),this.finalize(e,new a.Identifier(t.value))},e.prototype.parseNewExpression=function(){var e,t=this.createNode(),n=this.parseIdentifierName();if(i.assert("new"===n.name,"New expression must start with `new`"),this.match("."))if(this.nextToken(),3===this.lookahead.type&&this.context.inFunctionBody&&"target"===this.lookahead.value){var r=this.parseIdentifierName();e=new a.MetaProperty(n,r)}else this.throwUnexpectedToken(this.lookahead);else{var s=this.isolateCoverGrammar(this.parseLeftHandSideExpression),o=this.match("(")?this.parseArguments():[];e=new a.NewExpression(s,o),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return this.finalize(t,e)},e.prototype.parseAsyncArgument=function(){var e=this.parseAssignmentExpression();return this.context.firstCoverInitializedNameError=null,e},e.prototype.parseAsyncArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAsyncArgument);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.parseLeftHandSideExpressionAllowCall=function(){var e,t=this.lookahead,n=this.matchContextualKeyword("async"),i=this.context.allowIn;for(this.context.allowIn=!0,this.matchKeyword("super")&&this.context.inFunctionBody?(e=this.createNode(),this.nextToken(),e=this.finalize(e,new a.Super),this.match("(")||this.match(".")||this.match("[")||this.throwUnexpectedToken(this.lookahead)):e=this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var r=this.parseIdentifierName();e=this.finalize(this.startNode(t),new a.StaticMemberExpression(e,r))}else if(this.match("(")){var s=n&&t.lineNumber===this.lookahead.lineNumber;this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var o=s?this.parseAsyncArguments():this.parseArguments();if(e=this.finalize(this.startNode(t),new a.CallExpression(e,o)),s&&this.match("=>")){for(var u=0;u<o.length;++u)this.reinterpretExpressionAsPattern(o[u]);e={type:"ArrowParameterPlaceHolder",params:o,async:!0}}}else if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");r=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),e=this.finalize(this.startNode(t),new a.ComputedMemberExpression(e,r))}else{if(10!==this.lookahead.type||!this.lookahead.head)break;var c=this.parseTemplateLiteral();e=this.finalize(this.startNode(t),new a.TaggedTemplateExpression(e,c))}return this.context.allowIn=i,e},e.prototype.parseSuper=function(){var e=this.createNode();return this.expectKeyword("super"),this.match("[")||this.match(".")||this.throwUnexpectedToken(this.lookahead),this.finalize(e,new a.Super)},e.prototype.parseLeftHandSideExpression=function(){i.assert(this.context.allowIn,"callee of new expression always allow in keyword.");for(var e=this.startNode(this.lookahead),t=this.matchKeyword("super")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var n=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),t=this.finalize(e,new a.ComputedMemberExpression(t,n))}else if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");n=this.parseIdentifierName();t=this.finalize(e,new a.StaticMemberExpression(t,n))}else{if(10!==this.lookahead.type||!this.lookahead.head)break;var r=this.parseTemplateLiteral();t=this.finalize(e,new a.TaggedTemplateExpression(t,r))}return t},e.prototype.parseUpdateExpression=function(){var e,t=this.lookahead;if(this.match("++")||this.match("--")){var n=this.startNode(t),i=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(s.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment);var r=!0;e=this.finalize(n,new a.UpdateExpression(i.value,e,r)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else if(e=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&7===this.lookahead.type&&(this.match("++")||this.match("--"))){this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(s.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var o=this.nextToken().value;r=!1;e=this.finalize(this.startNode(t),new a.UpdateExpression(o,e,r))}return e},e.prototype.parseAwaitExpression=function(){var e=this.createNode();this.nextToken();var t=this.parseUnaryExpression();return this.finalize(e,new a.AwaitExpression(t))},e.prototype.parseUnaryExpression=function(){var e;if(this.match("+")||this.match("-")||this.match("~")||this.match("!")||this.matchKeyword("delete")||this.matchKeyword("void")||this.matchKeyword("typeof")){var t=this.startNode(this.lookahead),n=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),e=this.finalize(t,new a.UnaryExpression(n.value,e)),this.context.strict&&"delete"===e.operator&&e.argument.type===u.Syntax.Identifier&&this.tolerateError(s.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else e=this.context.await&&this.matchContextualKeyword("await")?this.parseAwaitExpression():this.parseUpdateExpression();return e},e.prototype.parseExponentiationExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseUnaryExpression);if(t.type!==u.Syntax.UnaryExpression&&this.match("**")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var n=t,i=this.isolateCoverGrammar(this.parseExponentiationExpression);t=this.finalize(this.startNode(e),new a.BinaryExpression("**",n,i))}return t},e.prototype.binaryPrecedence=function(e){var t=e.value;return 7===e.type?this.operatorPrecedence[t]||0:4===e.type&&("instanceof"===t||this.context.allowIn&&"in"===t)?7:0},e.prototype.parseBinaryExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseExponentiationExpression),n=this.lookahead,i=this.binaryPrecedence(n);if(i>0){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var r=[e,this.lookahead],s=t,o=this.isolateCoverGrammar(this.parseExponentiationExpression),u=[s,n.value,o],c=[i];!((i=this.binaryPrecedence(this.lookahead))<=0);){for(;u.length>2&&i<=c[c.length-1];){o=u.pop();var h=u.pop();c.pop(),s=u.pop(),r.pop();var l=this.startNode(r[r.length-1]);u.push(this.finalize(l,new a.BinaryExpression(h,s,o)))}u.push(this.nextToken().value),c.push(i),r.push(this.lookahead),u.push(this.isolateCoverGrammar(this.parseExponentiationExpression))}var p=u.length-1;for(t=u[p],r.pop();p>1;){l=this.startNode(r.pop()),h=u[p-1];t=this.finalize(l,new a.BinaryExpression(h,u[p-2],t)),p-=2}}return t},e.prototype.parseConditionalExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match("?")){this.nextToken();var n=this.context.allowIn;this.context.allowIn=!0;var i=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=n,this.expect(":");var r=this.isolateCoverGrammar(this.parseAssignmentExpression);t=this.finalize(this.startNode(e),new a.ConditionalExpression(t,i,r)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return t},e.prototype.checkPatternParam=function(e,t){switch(t.type){case u.Syntax.Identifier:this.validateParam(e,t,t.name);break;case u.Syntax.RestElement:this.checkPatternParam(e,t.argument);break;case u.Syntax.AssignmentPattern:this.checkPatternParam(e,t.left);break;case u.Syntax.ArrayPattern:for(var n=0;n<t.elements.length;n++)null!==t.elements[n]&&this.checkPatternParam(e,t.elements[n]);break;case u.Syntax.ObjectPattern:for(n=0;n<t.properties.length;n++)this.checkPatternParam(e,t.properties[n].value)}e.simple=e.simple&&t instanceof a.Identifier},e.prototype.reinterpretAsCoverFormalsList=function(e){var t,n=[e],i=!1;switch(e.type){case u.Syntax.Identifier:break;case"ArrowParameterPlaceHolder":n=e.params,i=e.async;break;default:return null}t={simple:!0,paramSet:{}};for(var r=0;r<n.length;++r){(a=n[r]).type===u.Syntax.AssignmentPattern?a.right.type===u.Syntax.YieldExpression&&(a.right.argument&&this.throwUnexpectedToken(this.lookahead),a.right.type=u.Syntax.Identifier,a.right.name="yield",delete a.right.argument,delete a.right.delegate):i&&a.type===u.Syntax.Identifier&&"await"===a.name&&this.throwUnexpectedToken(this.lookahead),this.checkPatternParam(t,a),n[r]=a}if(this.context.strict||!this.context.allowYield)for(r=0;r<n.length;++r){var a;(a=n[r]).type===u.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead)}if(t.message===s.Messages.StrictParamDupe){var o=this.context.strict?t.stricted:t.firstRestricted;this.throwUnexpectedToken(o,t.message)}return{simple:t.simple,params:n,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.parseAssignmentExpression=function(){var e;if(!this.context.allowYield&&this.matchKeyword("yield"))e=this.parseYieldExpression();else{var t=this.lookahead,n=t;if(e=this.parseConditionalExpression(),3===n.type&&n.lineNumber===this.lookahead.lineNumber&&"async"===n.value&&(3===this.lookahead.type||this.matchKeyword("yield"))){var i=this.parsePrimaryExpression();this.reinterpretExpressionAsPattern(i),e={type:"ArrowParameterPlaceHolder",params:[i],async:!0}}if("ArrowParameterPlaceHolder"===e.type||this.match("=>")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var r=e.async,o=this.reinterpretAsCoverFormalsList(e);if(o){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var c=this.context.strict,h=this.context.allowStrictDirective;this.context.allowStrictDirective=o.simple;var l=this.context.allowYield,p=this.context.await;this.context.allowYield=!0,this.context.await=r;var f=this.startNode(t);this.expect("=>");var d=void 0;if(this.match("{")){var m=this.context.allowIn;this.context.allowIn=!0,d=this.parseFunctionSourceElements(),this.context.allowIn=m}else d=this.isolateCoverGrammar(this.parseAssignmentExpression);var x=d.type!==u.Syntax.BlockStatement;this.context.strict&&o.firstRestricted&&this.throwUnexpectedToken(o.firstRestricted,o.message),this.context.strict&&o.stricted&&this.tolerateUnexpectedToken(o.stricted,o.message),e=r?this.finalize(f,new a.AsyncArrowFunctionExpression(o.params,d,x)):this.finalize(f,new a.ArrowFunctionExpression(o.params,d,x)),this.context.strict=c,this.context.allowStrictDirective=h,this.context.allowYield=l,this.context.await=p}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment),this.context.strict&&e.type===u.Syntax.Identifier){var g=e;this.scanner.isRestrictedWord(g.name)&&this.tolerateUnexpectedToken(n,s.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(g.name)&&this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord)}this.match("=")?this.reinterpretExpressionAsPattern(e):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1);var y=(n=this.nextToken()).value,D=this.isolateCoverGrammar(this.parseAssignmentExpression);e=this.finalize(this.startNode(t),new a.AssignmentExpression(y,e,D)),this.context.firstCoverInitializedNameError=null}}return e},e.prototype.parseExpression=function(){var e=this.lookahead,t=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(",")){var n=[];for(n.push(t);2!==this.lookahead.type&&this.match(",");)this.nextToken(),n.push(this.isolateCoverGrammar(this.parseAssignmentExpression));t=this.finalize(this.startNode(e),new a.SequenceExpression(n))}return t},e.prototype.parseStatementListItem=function(){var e;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,4===this.lookahead.type)switch(this.lookahead.value){case"export":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,s.Messages.IllegalExportDeclaration),e=this.parseExportDeclaration();break;case"import":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,s.Messages.IllegalImportDeclaration),e=this.parseImportDeclaration();break;case"const":e=this.parseLexicalDeclaration({inFor:!1});break;case"function":e=this.parseFunctionDeclaration();break;case"class":e=this.parseClassDeclaration();break;case"let":e=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:e=this.parseStatement()}else e=this.parseStatement();return e},e.prototype.parseBlock=function(){var e=this.createNode();this.expect("{");for(var t=[];!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.finalize(e,new a.BlockStatement(t))},e.prototype.parseLexicalBinding=function(e,t){var n=this.createNode(),i=this.parsePattern([],e);this.context.strict&&i.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(i.name)&&this.tolerateError(s.Messages.StrictVarName);var r=null;return"const"===e?this.matchKeyword("in")||this.matchContextualKeyword("of")||(this.match("=")?(this.nextToken(),r=this.isolateCoverGrammar(this.parseAssignmentExpression)):this.throwError(s.Messages.DeclarationMissingInitializer,"const")):(!t.inFor&&i.type!==u.Syntax.Identifier||this.match("="))&&(this.expect("="),r=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(n,new a.VariableDeclarator(i,r))},e.prototype.parseBindingList=function(e,t){for(var n=[this.parseLexicalBinding(e,t)];this.match(",");)this.nextToken(),n.push(this.parseLexicalBinding(e,t));return n},e.prototype.isLexicalDeclaration=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.scanner.lex();return this.scanner.restoreState(e),3===t.type||7===t.type&&"["===t.value||7===t.type&&"{"===t.value||4===t.type&&"let"===t.value||4===t.type&&"yield"===t.value},e.prototype.parseLexicalDeclaration=function(e){var t=this.createNode(),n=this.nextToken().value;i.assert("let"===n||"const"===n,"Lexical declaration must be either let or const");var r=this.parseBindingList(n,e);return this.consumeSemicolon(),this.finalize(t,new a.VariableDeclaration(r,n))},e.prototype.parseBindingRestElement=function(e,t){var n=this.createNode();this.expect("...");var i=this.parsePattern(e,t);return this.finalize(n,new a.RestElement(i))},e.prototype.parseArrayPattern=function(e,t){var n=this.createNode();this.expect("[");for(var i=[];!this.match("]");)if(this.match(","))this.nextToken(),i.push(null);else{if(this.match("...")){i.push(this.parseBindingRestElement(e,t));break}i.push(this.parsePatternWithDefault(e,t)),this.match("]")||this.expect(",")}return this.expect("]"),this.finalize(n,new a.ArrayPattern(i))},e.prototype.parsePropertyPattern=function(e,t){var n,i,r=this.createNode(),s=!1,o=!1;if(3===this.lookahead.type){var u=this.lookahead;n=this.parseVariableIdentifier();var c=this.finalize(r,new a.Identifier(u.value));if(this.match("=")){e.push(u),o=!0,this.nextToken();var h=this.parseAssignmentExpression();i=this.finalize(this.startNode(u),new a.AssignmentPattern(c,h))}else this.match(":")?(this.expect(":"),i=this.parsePatternWithDefault(e,t)):(e.push(u),o=!0,i=c)}else s=this.match("["),n=this.parseObjectPropertyKey(),this.expect(":"),i=this.parsePatternWithDefault(e,t);return this.finalize(r,new a.Property("init",n,s,i,!1,o))},e.prototype.parseObjectPattern=function(e,t){var n=this.createNode(),i=[];for(this.expect("{");!this.match("}");)i.push(this.parsePropertyPattern(e,t)),this.match("}")||this.expect(",");return this.expect("}"),this.finalize(n,new a.ObjectPattern(i))},e.prototype.parsePattern=function(e,t){var n;return this.match("[")?n=this.parseArrayPattern(e,t):this.match("{")?n=this.parseObjectPattern(e,t):(!this.matchKeyword("let")||"const"!==t&&"let"!==t||this.tolerateUnexpectedToken(this.lookahead,s.Messages.LetInLexicalBinding),e.push(this.lookahead),n=this.parseVariableIdentifier(t)),n},e.prototype.parsePatternWithDefault=function(e,t){var n=this.lookahead,i=this.parsePattern(e,t);if(this.match("=")){this.nextToken();var r=this.context.allowYield;this.context.allowYield=!0;var s=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=r,i=this.finalize(this.startNode(n),new a.AssignmentPattern(i,s))}return i},e.prototype.parseVariableIdentifier=function(e){var t=this.createNode(),n=this.nextToken();return 4===n.type&&"yield"===n.value?this.context.strict?this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord):this.context.allowYield||this.throwUnexpectedToken(n):3!==n.type?this.context.strict&&4===n.type&&this.scanner.isStrictModeReservedWord(n.value)?this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord):(this.context.strict||"let"!==n.value||"var"!==e)&&this.throwUnexpectedToken(n):(this.context.isModule||this.context.await)&&3===n.type&&"await"===n.value&&this.tolerateUnexpectedToken(n),this.finalize(t,new a.Identifier(n.value))},e.prototype.parseVariableDeclaration=function(e){var t=this.createNode(),n=this.parsePattern([],"var");this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(s.Messages.StrictVarName);var i=null;return this.match("=")?(this.nextToken(),i=this.isolateCoverGrammar(this.parseAssignmentExpression)):n.type===u.Syntax.Identifier||e.inFor||this.expect("="),this.finalize(t,new a.VariableDeclarator(n,i))},e.prototype.parseVariableDeclarationList=function(e){var t={inFor:e.inFor},n=[];for(n.push(this.parseVariableDeclaration(t));this.match(",");)this.nextToken(),n.push(this.parseVariableDeclaration(t));return n},e.prototype.parseVariableStatement=function(){var e=this.createNode();this.expectKeyword("var");var t=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(e,new a.VariableDeclaration(t,"var"))},e.prototype.parseEmptyStatement=function(){var e=this.createNode();return this.expect(";"),this.finalize(e,new a.EmptyStatement)},e.prototype.parseExpressionStatement=function(){var e=this.createNode(),t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ExpressionStatement(t))},e.prototype.parseIfClause=function(){return this.context.strict&&this.matchKeyword("function")&&this.tolerateError(s.Messages.StrictFunction),this.parseStatement()},e.prototype.parseIfStatement=function(){var e,t=this.createNode(),n=null;this.expectKeyword("if"),this.expect("(");var i=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(")"),e=this.parseIfClause(),this.matchKeyword("else")&&(this.nextToken(),n=this.parseIfClause())),this.finalize(t,new a.IfStatement(i,e,n))},e.prototype.parseDoWhileStatement=function(){var e=this.createNode();this.expectKeyword("do");var t=this.context.inIteration;this.context.inIteration=!0;var n=this.parseStatement();this.context.inIteration=t,this.expectKeyword("while"),this.expect("(");var i=this.parseExpression();return!this.match(")")&&this.config.tolerant?this.tolerateUnexpectedToken(this.nextToken()):(this.expect(")"),this.match(";")&&this.nextToken()),this.finalize(e,new a.DoWhileStatement(n,i))},e.prototype.parseWhileStatement=function(){var e,t=this.createNode();this.expectKeyword("while"),this.expect("(");var n=this.parseExpression();if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement);else{this.expect(")");var i=this.context.inIteration;this.context.inIteration=!0,e=this.parseStatement(),this.context.inIteration=i}return this.finalize(t,new a.WhileStatement(n,e))},e.prototype.parseForStatement=function(){var e,t,n,i=null,r=null,o=null,c=!0,h=this.createNode();if(this.expectKeyword("for"),this.expect("("),this.match(";"))this.nextToken();else if(this.matchKeyword("var")){i=this.createNode(),this.nextToken();var l=this.context.allowIn;this.context.allowIn=!1;var p=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=l,1===p.length&&this.matchKeyword("in")){var f=p[0];f.init&&(f.id.type===u.Syntax.ArrayPattern||f.id.type===u.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(s.Messages.ForInOfLoopInitializer,"for-in"),i=this.finalize(i,new a.VariableDeclaration(p,"var")),this.nextToken(),e=i,t=this.parseExpression(),i=null}else 1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(i=this.finalize(i,new a.VariableDeclaration(p,"var")),this.nextToken(),e=i,t=this.parseAssignmentExpression(),i=null,c=!1):(i=this.finalize(i,new a.VariableDeclaration(p,"var")),this.expect(";"))}else if(this.matchKeyword("const")||this.matchKeyword("let")){i=this.createNode();var d=this.nextToken().value;if(this.context.strict||"in"!==this.lookahead.value){l=this.context.allowIn;this.context.allowIn=!1;p=this.parseBindingList(d,{inFor:!0});this.context.allowIn=l,1===p.length&&null===p[0].init&&this.matchKeyword("in")?(i=this.finalize(i,new a.VariableDeclaration(p,d)),this.nextToken(),e=i,t=this.parseExpression(),i=null):1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(i=this.finalize(i,new a.VariableDeclaration(p,d)),this.nextToken(),e=i,t=this.parseAssignmentExpression(),i=null,c=!1):(this.consumeSemicolon(),i=this.finalize(i,new a.VariableDeclaration(p,d)))}else i=this.finalize(i,new a.Identifier(d)),this.nextToken(),e=i,t=this.parseExpression(),i=null}else{var m=this.lookahead;l=this.context.allowIn;if(this.context.allowIn=!1,i=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=l,this.matchKeyword("in"))this.context.isAssignmentTarget&&i.type!==u.Syntax.AssignmentExpression||this.tolerateError(s.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(i),e=i,t=this.parseExpression(),i=null;else if(this.matchContextualKeyword("of"))this.context.isAssignmentTarget&&i.type!==u.Syntax.AssignmentExpression||this.tolerateError(s.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(i),e=i,t=this.parseAssignmentExpression(),i=null,c=!1;else{if(this.match(",")){for(var x=[i];this.match(",");)this.nextToken(),x.push(this.isolateCoverGrammar(this.parseAssignmentExpression));i=this.finalize(this.startNode(m),new a.SequenceExpression(x))}this.expect(";")}}if(void 0===e&&(this.match(";")||(r=this.parseExpression()),this.expect(";"),this.match(")")||(o=this.parseExpression())),!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),n=this.finalize(this.createNode(),new a.EmptyStatement);else{this.expect(")");var g=this.context.inIteration;this.context.inIteration=!0,n=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=g}return void 0===e?this.finalize(h,new a.ForStatement(i,r,o,n)):c?this.finalize(h,new a.ForInStatement(e,t,n)):this.finalize(h,new a.ForOfStatement(e,t,n))},e.prototype.parseContinueStatement=function(){var e=this.createNode();this.expectKeyword("continue");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier();t=n;var i="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)||this.throwError(s.Messages.UnknownLabel,n.name)}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.throwError(s.Messages.IllegalContinue),this.finalize(e,new a.ContinueStatement(t))},e.prototype.parseBreakStatement=function(){var e=this.createNode();this.expectKeyword("break");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier(),i="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)||this.throwError(s.Messages.UnknownLabel,n.name),t=n}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.context.inSwitch||this.throwError(s.Messages.IllegalBreak),this.finalize(e,new a.BreakStatement(t))},e.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(s.Messages.IllegalReturn);var e=this.createNode();this.expectKeyword("return");var t=!this.match(";")&&!this.match("}")&&!this.hasLineTerminator&&2!==this.lookahead.type?this.parseExpression():null;return this.consumeSemicolon(),this.finalize(e,new a.ReturnStatement(t))},e.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(s.Messages.StrictModeWith);var e,t=this.createNode();this.expectKeyword("with"),this.expect("(");var n=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(")"),e=this.parseStatement()),this.finalize(t,new a.WithStatement(n,e))},e.prototype.parseSwitchCase=function(){var e,t=this.createNode();this.matchKeyword("default")?(this.nextToken(),e=null):(this.expectKeyword("case"),e=this.parseExpression()),this.expect(":");for(var n=[];!(this.match("}")||this.matchKeyword("default")||this.matchKeyword("case"));)n.push(this.parseStatementListItem());return this.finalize(t,new a.SwitchCase(e,n))},e.prototype.parseSwitchStatement=function(){var e=this.createNode();this.expectKeyword("switch"),this.expect("(");var t=this.parseExpression();this.expect(")");var n=this.context.inSwitch;this.context.inSwitch=!0;var i=[],r=!1;for(this.expect("{");!this.match("}");){var o=this.parseSwitchCase();null===o.test&&(r&&this.throwError(s.Messages.MultipleDefaultsInSwitch),r=!0),i.push(o)}return this.expect("}"),this.context.inSwitch=n,this.finalize(e,new a.SwitchStatement(t,i))},e.prototype.parseLabelledStatement=function(){var e,t=this.createNode(),n=this.parseExpression();if(n.type===u.Syntax.Identifier&&this.match(":")){this.nextToken();var i=n,r="$"+i.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)&&this.throwError(s.Messages.Redeclaration,"Label",i.name),this.context.labelSet[r]=!0;var o=void 0;if(this.matchKeyword("class"))this.tolerateUnexpectedToken(this.lookahead),o=this.parseClassDeclaration();else if(this.matchKeyword("function")){var c=this.lookahead,h=this.parseFunctionDeclaration();this.context.strict?this.tolerateUnexpectedToken(c,s.Messages.StrictFunction):h.generator&&this.tolerateUnexpectedToken(c,s.Messages.GeneratorInLegacyContext),o=h}else o=this.parseStatement();delete this.context.labelSet[r],e=new a.LabeledStatement(i,o)}else this.consumeSemicolon(),e=new a.ExpressionStatement(n);return this.finalize(t,e)},e.prototype.parseThrowStatement=function(){var e=this.createNode();this.expectKeyword("throw"),this.hasLineTerminator&&this.throwError(s.Messages.NewlineAfterThrow);var t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ThrowStatement(t))},e.prototype.parseCatchClause=function(){var e=this.createNode();this.expectKeyword("catch"),this.expect("("),this.match(")")&&this.throwUnexpectedToken(this.lookahead);for(var t=[],n=this.parsePattern(t),i={},r=0;r<t.length;r++){var o="$"+t[r].value;Object.prototype.hasOwnProperty.call(i,o)&&this.tolerateError(s.Messages.DuplicateBinding,t[r].value),i[o]=!0}this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(s.Messages.StrictCatchVariable),this.expect(")");var c=this.parseBlock();return this.finalize(e,new a.CatchClause(n,c))},e.prototype.parseFinallyClause=function(){return this.expectKeyword("finally"),this.parseBlock()},e.prototype.parseTryStatement=function(){var e=this.createNode();this.expectKeyword("try");var t=this.parseBlock(),n=this.matchKeyword("catch")?this.parseCatchClause():null,i=this.matchKeyword("finally")?this.parseFinallyClause():null;return n||i||this.throwError(s.Messages.NoCatchOrFinally),this.finalize(e,new a.TryStatement(t,n,i))},e.prototype.parseDebuggerStatement=function(){var e=this.createNode();return this.expectKeyword("debugger"),this.consumeSemicolon(),this.finalize(e,new a.DebuggerStatement)},e.prototype.parseStatement=function(){var e;switch(this.lookahead.type){case 1:case 5:case 6:case 8:case 10:case 9:e=this.parseExpressionStatement();break;case 7:var t=this.lookahead.value;e="{"===t?this.parseBlock():"("===t?this.parseExpressionStatement():";"===t?this.parseEmptyStatement():this.parseExpressionStatement();break;case 3:e=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();break;case 4:switch(this.lookahead.value){case"break":e=this.parseBreakStatement();break;case"continue":e=this.parseContinueStatement();break;case"debugger":e=this.parseDebuggerStatement();break;case"do":e=this.parseDoWhileStatement();break;case"for":e=this.parseForStatement();break;case"function":e=this.parseFunctionDeclaration();break;case"if":e=this.parseIfStatement();break;case"return":e=this.parseReturnStatement();break;case"switch":e=this.parseSwitchStatement();break;case"throw":e=this.parseThrowStatement();break;case"try":e=this.parseTryStatement();break;case"var":e=this.parseVariableStatement();break;case"while":e=this.parseWhileStatement();break;case"with":e=this.parseWithStatement();break;default:e=this.parseExpressionStatement()}break;default:e=this.throwUnexpectedToken(this.lookahead)}return e},e.prototype.parseFunctionSourceElements=function(){var e=this.createNode();this.expect("{");var t=this.parseDirectivePrologues(),n=this.context.labelSet,i=this.context.inIteration,r=this.context.inSwitch,s=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;2!==this.lookahead.type&&!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.context.labelSet=n,this.context.inIteration=i,this.context.inSwitch=r,this.context.inFunctionBody=s,this.finalize(e,new a.BlockStatement(t))},e.prototype.validateParam=function(e,t,n){var i="$"+n;this.context.strict?(this.scanner.isRestrictedWord(n)&&(e.stricted=t,e.message=s.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(e.paramSet,i)&&(e.stricted=t,e.message=s.Messages.StrictParamDupe)):e.firstRestricted||(this.scanner.isRestrictedWord(n)?(e.firstRestricted=t,e.message=s.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(n)?(e.firstRestricted=t,e.message=s.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(e.paramSet,i)&&(e.stricted=t,e.message=s.Messages.StrictParamDupe)),"function"==typeof Object.defineProperty?Object.defineProperty(e.paramSet,i,{value:!0,enumerable:!0,writable:!0,configurable:!0}):e.paramSet[i]=!0},e.prototype.parseRestElement=function(e){var t=this.createNode();this.expect("...");var n=this.parsePattern(e);return this.match("=")&&this.throwError(s.Messages.DefaultRestParameter),this.match(")")||this.throwError(s.Messages.ParameterAfterRestParameter),this.finalize(t,new a.RestElement(n))},e.prototype.parseFormalParameter=function(e){for(var t=[],n=this.match("...")?this.parseRestElement(t):this.parsePatternWithDefault(t),i=0;i<t.length;i++)this.validateParam(e,t[i],t[i].value);e.simple=e.simple&&n instanceof a.Identifier,e.params.push(n)},e.prototype.parseFormalParameters=function(e){var t;if(t={simple:!0,params:[],firstRestricted:e},this.expect("("),!this.match(")"))for(t.paramSet={};2!==this.lookahead.type&&(this.parseFormalParameter(t),!this.match(")"))&&(this.expect(","),!this.match(")")););return this.expect(")"),{simple:t.simple,params:t.params,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.matchAsyncFunction=function(){var e=this.matchContextualKeyword("async");if(e){var t=this.scanner.saveState();this.scanner.scanComments();var n=this.scanner.lex();this.scanner.restoreState(t),e=t.lineNumber===n.lineNumber&&4===n.type&&"function"===n.value}return e},e.prototype.parseFunctionDeclaration=function(e){var t=this.createNode(),n=this.matchContextualKeyword("async");n&&this.nextToken(),this.expectKeyword("function");var i,r=!n&&this.match("*");r&&this.nextToken();var o=null,u=null;if(!e||!this.match("(")){var c=this.lookahead;o=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(c.value)&&this.tolerateUnexpectedToken(c,s.Messages.StrictFunctionName):this.scanner.isRestrictedWord(c.value)?(u=c,i=s.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(c.value)&&(u=c,i=s.Messages.StrictReservedWord)}var h=this.context.await,l=this.context.allowYield;this.context.await=n,this.context.allowYield=!r;var p=this.parseFormalParameters(u),f=p.params,d=p.stricted;u=p.firstRestricted,p.message&&(i=p.message);var m=this.context.strict,x=this.context.allowStrictDirective;this.context.allowStrictDirective=p.simple;var g=this.parseFunctionSourceElements();return this.context.strict&&u&&this.throwUnexpectedToken(u,i),this.context.strict&&d&&this.tolerateUnexpectedToken(d,i),this.context.strict=m,this.context.allowStrictDirective=x,this.context.await=h,this.context.allowYield=l,n?this.finalize(t,new a.AsyncFunctionDeclaration(o,f,g)):this.finalize(t,new a.FunctionDeclaration(o,f,g,r))},e.prototype.parseFunctionExpression=function(){var e=this.createNode(),t=this.matchContextualKeyword("async");t&&this.nextToken(),this.expectKeyword("function");var n,i=!t&&this.match("*");i&&this.nextToken();var r,o=null,u=this.context.await,c=this.context.allowYield;if(this.context.await=t,this.context.allowYield=!i,!this.match("(")){var h=this.lookahead;o=this.context.strict||i||!this.matchKeyword("yield")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(h.value)&&this.tolerateUnexpectedToken(h,s.Messages.StrictFunctionName):this.scanner.isRestrictedWord(h.value)?(r=h,n=s.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(h.value)&&(r=h,n=s.Messages.StrictReservedWord)}var l=this.parseFormalParameters(r),p=l.params,f=l.stricted;r=l.firstRestricted,l.message&&(n=l.message);var d=this.context.strict,m=this.context.allowStrictDirective;this.context.allowStrictDirective=l.simple;var x=this.parseFunctionSourceElements();return this.context.strict&&r&&this.throwUnexpectedToken(r,n),this.context.strict&&f&&this.tolerateUnexpectedToken(f,n),this.context.strict=d,this.context.allowStrictDirective=m,this.context.await=u,this.context.allowYield=c,t?this.finalize(e,new a.AsyncFunctionExpression(o,p,x)):this.finalize(e,new a.FunctionExpression(o,p,x,i))},e.prototype.parseDirective=function(){var e=this.lookahead,t=this.createNode(),n=this.parseExpression(),i=n.type===u.Syntax.Literal?this.getTokenRaw(e).slice(1,-1):null;return this.consumeSemicolon(),this.finalize(t,i?new a.Directive(n,i):new a.ExpressionStatement(n))},e.prototype.parseDirectivePrologues=function(){for(var e=null,t=[];;){var n=this.lookahead;if(8!==n.type)break;var i=this.parseDirective();t.push(i);var r=i.directive;if("string"!=typeof r)break;"use strict"===r?(this.context.strict=!0,e&&this.tolerateUnexpectedToken(e,s.Messages.StrictOctalLiteral),this.context.allowStrictDirective||this.tolerateUnexpectedToken(n,s.Messages.IllegalLanguageModeDirective)):!e&&n.octal&&(e=n)}return t},e.prototype.qualifiedPropertyName=function(e){switch(e.type){case 3:case 8:case 1:case 5:case 6:case 4:return!0;case 7:return"["===e.value}return!1},e.prototype.parseGetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!1;var n=this.parseFormalParameters();n.params.length>0&&this.tolerateError(s.Messages.BadGetterArity);var i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!1))},e.prototype.parseSetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!1;var n=this.parseFormalParameters();1!==n.params.length?this.tolerateError(s.Messages.BadSetterArity):n.params[0]instanceof a.RestElement&&this.tolerateError(s.Messages.BadSetterRestParameter);var i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!1))},e.prototype.parseGeneratorMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();this.context.allowYield=!1;var i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,n.params,i,!0))},e.prototype.isStartOfExpression=function(){var e=!0,t=this.lookahead.value;switch(this.lookahead.type){case 7:e="["===t||"("===t||"{"===t||"+"===t||"-"===t||"!"===t||"~"===t||"++"===t||"--"===t||"/"===t||"/="===t;break;case 4:e="class"===t||"delete"===t||"function"===t||"let"===t||"new"===t||"super"===t||"this"===t||"typeof"===t||"void"===t||"yield"===t}return e},e.prototype.parseYieldExpression=function(){var e=this.createNode();this.expectKeyword("yield");var t=null,n=!1;if(!this.hasLineTerminator){var i=this.context.allowYield;this.context.allowYield=!1,(n=this.match("*"))?(this.nextToken(),t=this.parseAssignmentExpression()):this.isStartOfExpression()&&(t=this.parseAssignmentExpression()),this.context.allowYield=i}return this.finalize(e,new a.YieldExpression(t,n))},e.prototype.parseClassElement=function(e){var t=this.lookahead,n=this.createNode(),i="",r=null,o=null,u=!1,c=!1,h=!1,l=!1;if(this.match("*"))this.nextToken();else if(u=this.match("["),"static"===(r=this.parseObjectPropertyKey()).name&&(this.qualifiedPropertyName(this.lookahead)||this.match("*"))&&(t=this.lookahead,h=!0,u=this.match("["),this.match("*")?this.nextToken():r=this.parseObjectPropertyKey()),3===t.type&&!this.hasLineTerminator&&"async"===t.value){var p=this.lookahead.value;":"!==p&&"("!==p&&"*"!==p&&(l=!0,t=this.lookahead,r=this.parseObjectPropertyKey(),3===t.type&&("get"===t.value||"set"===t.value?this.tolerateUnexpectedToken(t):"constructor"===t.value&&this.tolerateUnexpectedToken(t,s.Messages.ConstructorIsAsync)))}var f=this.qualifiedPropertyName(this.lookahead);return 3===t.type?"get"===t.value&&f?(i="get",u=this.match("["),r=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod()):"set"===t.value&&f&&(i="set",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseSetterMethod()):7===t.type&&"*"===t.value&&f&&(i="init",u=this.match("["),r=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),c=!0),!i&&r&&this.match("(")&&(i="init",o=l?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),c=!0),i||this.throwUnexpectedToken(this.lookahead),"init"===i&&(i="method"),u||(h&&this.isPropertyKey(r,"prototype")&&this.throwUnexpectedToken(t,s.Messages.StaticPrototype),!h&&this.isPropertyKey(r,"constructor")&&(("method"!==i||!c||o&&o.generator)&&this.throwUnexpectedToken(t,s.Messages.ConstructorSpecialMethod),e.value?this.throwUnexpectedToken(t,s.Messages.DuplicateConstructor):e.value=!0,i="constructor")),this.finalize(n,new a.MethodDefinition(r,u,o,i,h))},e.prototype.parseClassElementList=function(){var e=[],t={value:!1};for(this.expect("{");!this.match("}");)this.match(";")?this.nextToken():e.push(this.parseClassElement(t));return this.expect("}"),e},e.prototype.parseClassBody=function(){var e=this.createNode(),t=this.parseClassElementList();return this.finalize(e,new a.ClassBody(t))},e.prototype.parseClassDeclaration=function(e){var t=this.createNode(),n=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var i=e&&3!==this.lookahead.type?null:this.parseVariableIdentifier(),r=null;this.matchKeyword("extends")&&(this.nextToken(),r=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var s=this.parseClassBody();return this.context.strict=n,this.finalize(t,new a.ClassDeclaration(i,r,s))},e.prototype.parseClassExpression=function(){var e=this.createNode(),t=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var n=3===this.lookahead.type?this.parseVariableIdentifier():null,i=null;this.matchKeyword("extends")&&(this.nextToken(),i=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var r=this.parseClassBody();return this.context.strict=t,this.finalize(e,new a.ClassExpression(n,i,r))},e.prototype.parseModule=function(){this.context.strict=!0,this.context.isModule=!0;for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Module(t))},e.prototype.parseScript=function(){for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Script(t))},e.prototype.parseModuleSpecifier=function(){var e=this.createNode();8!==this.lookahead.type&&this.throwError(s.Messages.InvalidModuleSpecifier);var t=this.nextToken(),n=this.getTokenRaw(t);return this.finalize(e,new a.Literal(t.value,n))},e.prototype.parseImportSpecifier=function(){var e,t,n=this.createNode();return 3===this.lookahead.type?(t=e=this.parseVariableIdentifier(),this.matchContextualKeyword("as")&&(this.nextToken(),t=this.parseVariableIdentifier())):(t=e=this.parseIdentifierName(),this.matchContextualKeyword("as")?(this.nextToken(),t=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(n,new a.ImportSpecifier(t,e))},e.prototype.parseNamedImports=function(){this.expect("{");for(var e=[];!this.match("}");)e.push(this.parseImportSpecifier()),this.match("}")||this.expect(",");return this.expect("}"),e},e.prototype.parseImportDefaultSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName();return this.finalize(e,new a.ImportDefaultSpecifier(t))},e.prototype.parseImportNamespaceSpecifier=function(){var e=this.createNode();this.expect("*"),this.matchContextualKeyword("as")||this.throwError(s.Messages.NoAsAfterImportNamespace),this.nextToken();var t=this.parseIdentifierName();return this.finalize(e,new a.ImportNamespaceSpecifier(t))},e.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(s.Messages.IllegalImportDeclaration);var e,t=this.createNode();this.expectKeyword("import");var n=[];if(8===this.lookahead.type)e=this.parseModuleSpecifier();else{if(this.match("{")?n=n.concat(this.parseNamedImports()):this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword("default")?(n.push(this.parseImportDefaultSpecifier()),this.match(",")&&(this.nextToken(),this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.match("{")?n=n.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword("from")){var i=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(i,this.lookahead.value)}this.nextToken(),e=this.parseModuleSpecifier()}return this.consumeSemicolon(),this.finalize(t,new a.ImportDeclaration(n,e))},e.prototype.parseExportSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName(),n=t;return this.matchContextualKeyword("as")&&(this.nextToken(),n=this.parseIdentifierName()),this.finalize(e,new a.ExportSpecifier(t,n))},e.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(s.Messages.IllegalExportDeclaration);var e,t=this.createNode();if(this.expectKeyword("export"),this.matchKeyword("default"))if(this.nextToken(),this.matchKeyword("function")){var n=this.parseFunctionDeclaration(!0);e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else if(this.matchKeyword("class")){n=this.parseClassDeclaration(!0);e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else if(this.matchContextualKeyword("async")){n=this.matchAsyncFunction()?this.parseFunctionDeclaration(!0):this.parseAssignmentExpression();e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else{this.matchContextualKeyword("from")&&this.throwError(s.Messages.UnexpectedToken,this.lookahead.value);n=this.match("{")?this.parseObjectInitializer():this.match("[")?this.parseArrayInitializer():this.parseAssignmentExpression();this.consumeSemicolon(),e=this.finalize(t,new a.ExportDefaultDeclaration(n))}else if(this.match("*")){if(this.nextToken(),!this.matchContextualKeyword("from")){var i=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(i,this.lookahead.value)}this.nextToken();var r=this.parseModuleSpecifier();this.consumeSemicolon(),e=this.finalize(t,new a.ExportAllDeclaration(r))}else if(4===this.lookahead.type){n=void 0;switch(this.lookahead.value){case"let":case"const":n=this.parseLexicalDeclaration({inFor:!1});break;case"var":case"class":case"function":n=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead)}e=this.finalize(t,new a.ExportNamedDeclaration(n,[],null))}else if(this.matchAsyncFunction()){n=this.parseFunctionDeclaration();e=this.finalize(t,new a.ExportNamedDeclaration(n,[],null))}else{var o=[],u=null,c=!1;for(this.expect("{");!this.match("}");)c=c||this.matchKeyword("default"),o.push(this.parseExportSpecifier()),this.match("}")||this.expect(",");if(this.expect("}"),this.matchContextualKeyword("from"))this.nextToken(),u=this.parseModuleSpecifier(),this.consumeSemicolon();else if(c){i=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(i,this.lookahead.value)}else this.consumeSemicolon();e=this.finalize(t,new a.ExportNamedDeclaration(null,o,u))}return e},e}();t.Parser=h},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assert=function(e,t){if(!e)throw new Error("ASSERT: "+t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.errors=[],this.tolerant=!1}return e.prototype.recordError=function(e){this.errors.push(e)},e.prototype.tolerate=function(e){if(!this.tolerant)throw e;this.recordError(e)},e.prototype.constructError=function(e,t){var n=new Error(e);try{throw n}catch(e){Object.create&&Object.defineProperty&&(n=Object.create(e),Object.defineProperty(n,"column",{value:t}))}return n},e.prototype.createError=function(e,t,n,i){var r="Line "+t+": "+i,s=this.constructError(r,n);return s.index=e,s.lineNumber=t,s.description=i,s},e.prototype.throwError=function(e,t,n,i){throw this.createError(e,t,n,i)},e.prototype.tolerateError=function(e,t,n,i){var r=this.createError(e,t,n,i);if(!this.tolerant)throw r;this.recordError(r)},e}();t.ErrorHandler=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Messages={BadGetterArity:"Getter must not have any formal parameters",BadSetterArity:"Setter must have exactly one formal parameter",BadSetterRestParameter:"Setter function argument must not be a rest parameter",ConstructorIsAsync:"Class constructor may not be an async method",ConstructorSpecialMethod:"Class constructor may not be an accessor",DeclarationMissingInitializer:"Missing initializer in %0 declaration",DefaultRestParameter:"Unexpected token =",DuplicateBinding:"Duplicate binding %0",DuplicateConstructor:"A class may only have one constructor",DuplicateProtoProperty:"Duplicate __proto__ fields are not allowed in object literals",ForInOfLoopInitializer:"%0 loop variable declaration may not have an initializer",GeneratorInLegacyContext:"Generator declarations are not allowed in legacy contexts",IllegalBreak:"Illegal break statement",IllegalContinue:"Illegal continue statement",IllegalExportDeclaration:"Unexpected token",IllegalImportDeclaration:"Unexpected token",IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list",IllegalReturn:"Illegal return statement",InvalidEscapedReservedWord:"Keyword must not contain escaped characters",InvalidHexEscapeSequence:"Invalid hexadecimal escape sequence",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",InvalidLHSInForLoop:"Invalid left-hand side in for-loop",InvalidModuleSpecifier:"Unexpected token",InvalidRegExp:"Invalid regular expression",LetInLexicalBinding:"let is disallowed as a lexically bound name",MissingFromClause:"Unexpected token",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NewlineAfterThrow:"Illegal newline after throw",NoAsAfterImportNamespace:"Unexpected token",NoCatchOrFinally:"Missing catch or finally after try",ParameterAfterRestParameter:"Rest parameter must be last formal parameter",Redeclaration:"%0 '%1' has already been declared",StaticPrototype:"Classes may not have static property named prototype",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictModeWith:"Strict mode code may not include a with statement",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",TemplateOctalLiteral:"Octal literals are not allowed in template strings.",UnexpectedEOS:"Unexpected end of input",UnexpectedIdentifier:"Unexpected identifier",UnexpectedNumber:"Unexpected number",UnexpectedReserved:"Unexpected reserved word",UnexpectedString:"Unexpected string",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedToken:"Unexpected token %0",UnexpectedTokenIllegal:"Unexpected token ILLEGAL",UnknownLabel:"Undefined label '%0'",UnterminatedRegExp:"Invalid regular expression: missing /"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(9),r=n(4),s=n(11);function a(e){return"0123456789abcdef".indexOf(e.toLowerCase())}function o(e){return"01234567".indexOf(e)}var u=function(){function e(e,t){this.source=e,this.errorHandler=t,this.trackComment=!1,this.length=e.length,this.index=0,this.lineNumber=e.length>0?1:0,this.lineStart=0,this.curlyStack=[]}return e.prototype.saveState=function(){return{index:this.index,lineNumber:this.lineNumber,lineStart:this.lineStart}},e.prototype.restoreState=function(e){this.index=e.index,this.lineNumber=e.lineNumber,this.lineStart=e.lineStart},e.prototype.eof=function(){return this.index>=this.length},e.prototype.throwUnexpectedToken=function(e){return void 0===e&&(e=s.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.tolerateUnexpectedToken=function(e){void 0===e&&(e=s.Messages.UnexpectedTokenIllegal),this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.skipSingleLineComment=function(e){var t,n,i=[];for(this.trackComment&&(i=[],t=this.index-e,n={start:{line:this.lineNumber,column:this.index-this.lineStart-e},end:{}});!this.eof();){var s=this.source.charCodeAt(this.index);if(++this.index,r.Character.isLineTerminator(s)){if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart-1};var a={multiLine:!1,slice:[t+e,this.index-1],range:[t,this.index-1],loc:n};i.push(a)}return 13===s&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,i}}if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart};a={multiLine:!1,slice:[t+e,this.index],range:[t,this.index],loc:n};i.push(a)}return i},e.prototype.skipMultiLineComment=function(){var e,t,n=[];for(this.trackComment&&(n=[],e=this.index-2,t={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var i=this.source.charCodeAt(this.index);if(r.Character.isLineTerminator(i))13===i&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===i){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};var s={multiLine:!0,slice:[e+2,this.index-2],range:[e,this.index],loc:t};n.push(s)}return n}++this.index}else++this.index}if(this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};s={multiLine:!0,slice:[e+2,this.index],range:[e,this.index],loc:t};n.push(s)}return this.tolerateUnexpectedToken(),n},e.prototype.scanComments=function(){var e;this.trackComment&&(e=[]);for(var t=0===this.index;!this.eof();){var n=this.source.charCodeAt(this.index);if(r.Character.isWhiteSpace(n))++this.index;else if(r.Character.isLineTerminator(n))++this.index,13===n&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,t=!0;else if(47===n)if(47===(n=this.source.charCodeAt(this.index+1))){this.index+=2;var i=this.skipSingleLineComment(2);this.trackComment&&(e=e.concat(i)),t=!0}else{if(42!==n)break;this.index+=2;i=this.skipMultiLineComment();this.trackComment&&(e=e.concat(i))}else if(t&&45===n){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3;i=this.skipSingleLineComment(3);this.trackComment&&(e=e.concat(i))}else{if(60!==n)break;if("!--"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4;i=this.skipSingleLineComment(4);this.trackComment&&(e=e.concat(i))}}return e},e.prototype.isFutureReservedWord=function(e){switch(e){case"enum":case"export":case"import":case"super":return!0;default:return!1}},e.prototype.isStrictModeReservedWord=function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}},e.prototype.isRestrictedWord=function(e){return"eval"===e||"arguments"===e},e.prototype.isKeyword=function(e){switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}},e.prototype.codePointAt=function(e){var t=this.source.charCodeAt(e);if(t>=55296&&t<=56319){var n=this.source.charCodeAt(e+1);if(n>=56320&&n<=57343)t=1024*(t-55296)+n-56320+65536}return t},e.prototype.scanHexEscape=function(e){for(var t="u"===e?4:2,n=0,i=0;i<t;++i){if(this.eof()||!r.Character.isHexDigit(this.source.charCodeAt(this.index)))return null;n=16*n+a(this.source[this.index++])}return String.fromCharCode(n)},e.prototype.scanUnicodeCodePointEscape=function(){var e=this.source[this.index],t=0;for("}"===e&&this.throwUnexpectedToken();!this.eof()&&(e=this.source[this.index++],r.Character.isHexDigit(e.charCodeAt(0)));)t=16*t+a(e);return(t>1114111||"}"!==e)&&this.throwUnexpectedToken(),r.Character.fromCodePoint(t)},e.prototype.getIdentifier=function(){for(var e=this.index++;!this.eof();){var t=this.source.charCodeAt(this.index);if(92===t)return this.index=e,this.getComplexIdentifier();if(t>=55296&&t<57343)return this.index=e,this.getComplexIdentifier();if(!r.Character.isIdentifierPart(t))break;++this.index}return this.source.slice(e,this.index)},e.prototype.getComplexIdentifier=function(){var e,t=this.codePointAt(this.index),n=r.Character.fromCodePoint(t);for(this.index+=n.length,92===t&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&r.Character.isIdentifierStart(e.charCodeAt(0))||this.throwUnexpectedToken(),n=e);!this.eof()&&(t=this.codePointAt(this.index),r.Character.isIdentifierPart(t));)n+=e=r.Character.fromCodePoint(t),this.index+=e.length,92===t&&(n=n.substr(0,n.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&r.Character.isIdentifierPart(e.charCodeAt(0))||this.throwUnexpectedToken(),n+=e);return n},e.prototype.octalToDecimal=function(e){var t="0"!==e,n=o(e);return!this.eof()&&r.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(t=!0,n=8*n+o(this.source[this.index++]),"0123".indexOf(e)>=0&&!this.eof()&&r.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(n=8*n+o(this.source[this.index++]))),{code:n,octal:t}},e.prototype.scanIdentifier=function(){var e,t=this.index,n=92===this.source.charCodeAt(t)?this.getComplexIdentifier():this.getIdentifier();if(3!==(e=1===n.length?3:this.isKeyword(n)?4:"null"===n?5:"true"===n||"false"===n?1:3)&&t+n.length!==this.index){var i=this.index;this.index=t,this.tolerateUnexpectedToken(s.Messages.InvalidEscapedReservedWord),this.index=i}return{type:e,value:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.scanPunctuator=function(){var e=this.index,t=this.source[this.index];switch(t){case"(":case"{":"{"===t&&this.curlyStack.push("{"),++this.index;break;case".":++this.index,"."===this.source[this.index]&&"."===this.source[this.index+1]&&(this.index+=2,t="...");break;case"}":++this.index,this.curlyStack.pop();break;case")":case";":case",":case"[":case"]":case":":case"?":case"~":++this.index;break;default:">>>="===(t=this.source.substr(this.index,4))?this.index+=4:"==="===(t=t.substr(0,3))||"!=="===t||">>>"===t||"<<="===t||">>="===t||"**="===t?this.index+=3:"&&"===(t=t.substr(0,2))||"||"===t||"=="===t||"!="===t||"+="===t||"-="===t||"*="===t||"/="===t||"++"===t||"--"===t||"<<"===t||">>"===t||"&="===t||"|="===t||"^="===t||"%="===t||"<="===t||">="===t||"=>"===t||"**"===t?this.index+=2:(t=this.source[this.index],"<>=!+-*%&|^/".indexOf(t)>=0&&++this.index)}return this.index===e&&this.throwUnexpectedToken(),{type:7,value:t,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanHexLiteral=function(e){for(var t="";!this.eof()&&r.Character.isHexDigit(this.source.charCodeAt(this.index));)t+=this.source[this.index++];return 0===t.length&&this.throwUnexpectedToken(),r.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseInt("0x"+t,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanBinaryLiteral=function(e){for(var t,n="";!this.eof()&&("0"===(t=this.source[this.index])||"1"===t);)n+=this.source[this.index++];return 0===n.length&&this.throwUnexpectedToken(),this.eof()||(t=this.source.charCodeAt(this.index),(r.Character.isIdentifierStart(t)||r.Character.isDecimalDigit(t))&&this.throwUnexpectedToken()),{type:6,value:parseInt(n,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanOctalLiteral=function(e,t){var n="",i=!1;for(r.Character.isOctalDigit(e.charCodeAt(0))?(i=!0,n="0"+this.source[this.index++]):++this.index;!this.eof()&&r.Character.isOctalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];return i||0!==n.length||this.throwUnexpectedToken(),(r.Character.isIdentifierStart(this.source.charCodeAt(this.index))||r.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:6,value:parseInt(n,8),octal:i,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.isImplicitOctalLiteral=function(){for(var e=this.index+1;e<this.length;++e){var t=this.source[e];if("8"===t||"9"===t)return!1;if(!r.Character.isOctalDigit(t.charCodeAt(0)))return!0}return!0},e.prototype.scanNumericLiteral=function(){var e=this.index,t=this.source[e];i.assert(r.Character.isDecimalDigit(t.charCodeAt(0))||"."===t,"Numeric literal must start with a decimal digit or a decimal point");var n="";if("."!==t){if(n=this.source[this.index++],t=this.source[this.index],"0"===n){if("x"===t||"X"===t)return++this.index,this.scanHexLiteral(e);if("b"===t||"B"===t)return++this.index,this.scanBinaryLiteral(e);if("o"===t||"O"===t)return this.scanOctalLiteral(t,e);if(t&&r.Character.isOctalDigit(t.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(t,e)}for(;r.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("."===t){for(n+=this.source[this.index++];r.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("e"===t||"E"===t)if(n+=this.source[this.index++],"+"!==(t=this.source[this.index])&&"-"!==t||(n+=this.source[this.index++]),r.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;r.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];else this.throwUnexpectedToken();return r.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseFloat(n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanStringLiteral=function(){var e=this.index,t=this.source[e];i.assert("'"===t||'"'===t,"String literal must starts with a quote"),++this.index;for(var n=!1,a="";!this.eof();){var o=this.source[this.index++];if(o===t){t="";break}if("\\"===o)if((o=this.source[this.index++])&&r.Character.isLineTerminator(o.charCodeAt(0)))++this.lineNumber,"\r"===o&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(o){case"u":if("{"===this.source[this.index])++this.index,a+=this.scanUnicodeCodePointEscape();else{var u=this.scanHexEscape(o);null===u&&this.throwUnexpectedToken(),a+=u}break;case"x":var c=this.scanHexEscape(o);null===c&&this.throwUnexpectedToken(s.Messages.InvalidHexEscapeSequence),a+=c;break;case"n":a+="\n";break;case"r":a+="\r";break;case"t":a+="\t";break;case"b":a+="\b";break;case"f":a+="\f";break;case"v":a+="\v";break;case"8":case"9":a+=o,this.tolerateUnexpectedToken();break;default:if(o&&r.Character.isOctalDigit(o.charCodeAt(0))){var h=this.octalToDecimal(o);n=h.octal||n,a+=String.fromCharCode(h.code)}else a+=o}else{if(r.Character.isLineTerminator(o.charCodeAt(0)))break;a+=o}}return""!==t&&(this.index=e,this.throwUnexpectedToken()),{type:8,value:a,octal:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanTemplate=function(){var e="",t=!1,n=this.index,i="`"===this.source[n],a=!1,o=2;for(++this.index;!this.eof();){var u=this.source[this.index++];if("`"===u){o=1,a=!0,t=!0;break}if("$"===u){if("{"===this.source[this.index]){this.curlyStack.push("${"),++this.index,t=!0;break}e+=u}else if("\\"===u)if(u=this.source[this.index++],r.Character.isLineTerminator(u.charCodeAt(0)))++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(u){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"u":if("{"===this.source[this.index])++this.index,e+=this.scanUnicodeCodePointEscape();else{var c=this.index,h=this.scanHexEscape(u);null!==h?e+=h:(this.index=c,e+=u)}break;case"x":var l=this.scanHexEscape(u);null===l&&this.throwUnexpectedToken(s.Messages.InvalidHexEscapeSequence),e+=l;break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:"0"===u?(r.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(s.Messages.TemplateOctalLiteral),e+="\0"):r.Character.isOctalDigit(u.charCodeAt(0))?this.throwUnexpectedToken(s.Messages.TemplateOctalLiteral):e+=u}else r.Character.isLineTerminator(u.charCodeAt(0))?(++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index,e+="\n"):e+=u}return t||this.throwUnexpectedToken(),i||this.curlyStack.pop(),{type:10,value:this.source.slice(n+1,this.index-o),cooked:e,head:i,tail:a,lineNumber:this.lineNumber,lineStart:this.lineStart,start:n,end:this.index}},e.prototype.testRegExp=function(e,t){var n=e,i=this;t.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,function(e,t,n){var r=parseInt(t||n,16);return r>1114111&&i.throwUnexpectedToken(s.Messages.InvalidRegExp),r<=65535?String.fromCharCode(r):"￿"}).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"￿"));try{RegExp(n)}catch(e){this.throwUnexpectedToken(s.Messages.InvalidRegExp)}try{return new RegExp(e,t)}catch(e){return null}},e.prototype.scanRegExpBody=function(){var e=this.source[this.index];i.assert("/"===e,"Regular expression literal must start with a slash");for(var t=this.source[this.index++],n=!1,a=!1;!this.eof();)if(t+=e=this.source[this.index++],"\\"===e)e=this.source[this.index++],r.Character.isLineTerminator(e.charCodeAt(0))&&this.throwUnexpectedToken(s.Messages.UnterminatedRegExp),t+=e;else if(r.Character.isLineTerminator(e.charCodeAt(0)))this.throwUnexpectedToken(s.Messages.UnterminatedRegExp);else if(n)"]"===e&&(n=!1);else{if("/"===e){a=!0;break}"["===e&&(n=!0)}return a||this.throwUnexpectedToken(s.Messages.UnterminatedRegExp),t.substr(1,t.length-2)},e.prototype.scanRegExpFlags=function(){for(var e="";!this.eof();){var t=this.source[this.index];if(!r.Character.isIdentifierPart(t.charCodeAt(0)))break;if(++this.index,"\\"!==t||this.eof())e+=t,t;else if("u"===(t=this.source[this.index])){++this.index;var n=this.index,i=this.scanHexEscape("u");if(null!==i)for(e+=i,"\\u";n<this.index;++n)this.source[n];else this.index=n,e+="u","\\u";this.tolerateUnexpectedToken()}else"\\",this.tolerateUnexpectedToken()}return e},e.prototype.scanRegExp=function(){var e=this.index,t=this.scanRegExpBody(),n=this.scanRegExpFlags();return{type:9,value:"",pattern:t,flags:n,regex:this.testRegExp(t,n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.lex=function(){if(this.eof())return{type:2,value:"",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var e=this.source.charCodeAt(this.index);return r.Character.isIdentifierStart(e)?this.scanIdentifier():40===e||41===e||59===e?this.scanPunctuator():39===e||34===e?this.scanStringLiteral():46===e?r.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():r.Character.isDecimalDigit(e)?this.scanNumericLiteral():96===e||125===e&&"${"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():e>=55296&&e<57343&&r.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},e}();t.Scanner=u},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenName={},t.TokenName[1]="Boolean",t.TokenName[2]="<end>",t.TokenName[3]="Identifier",t.TokenName[4]="Keyword",t.TokenName[5]="Null",t.TokenName[6]="Numeric",t.TokenName[7]="Punctuator",t.TokenName[8]="String",t.TokenName[9]="RegularExpression",t.TokenName[10]="Template"},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHTMLEntities={quot:'"',amp:"&",apos:"'",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",lang:"⟨",rang:"⟩"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(10),r=n(12),s=n(13),a=function(){function e(){this.values=[],this.curly=this.paren=-1}return e.prototype.beforeFunctionExpression=function(e){return["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","**","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="].indexOf(e)>=0},e.prototype.isRegexStart=function(){var e=this.values[this.values.length-1],t=null!==e;switch(e){case"this":case"]":t=!1;break;case")":var n=this.values[this.paren-1];t="if"===n||"while"===n||"for"===n||"with"===n;break;case"}":if(t=!1,"function"===this.values[this.curly-3])t=!!(i=this.values[this.curly-4])&&!this.beforeFunctionExpression(i);else if("function"===this.values[this.curly-4]){var i;t=!(i=this.values[this.curly-5])||!this.beforeFunctionExpression(i)}}return t},e.prototype.push=function(e){7===e.type||4===e.type?("{"===e.value?this.curly=this.values.length:"("===e.value&&(this.paren=this.values.length),this.values.push(e.value)):this.values.push(null)},e}(),o=function(){function e(e,t){this.errorHandler=new i.ErrorHandler,this.errorHandler.tolerant=!!t&&("boolean"==typeof t.tolerant&&t.tolerant),this.scanner=new r.Scanner(e,this.errorHandler),this.scanner.trackComment=!!t&&("boolean"==typeof t.comment&&t.comment),this.trackRange=!!t&&("boolean"==typeof t.range&&t.range),this.trackLoc=!!t&&("boolean"==typeof t.loc&&t.loc),this.buffer=[],this.reader=new a}return e.prototype.errors=function(){return this.errorHandler.errors},e.prototype.getNextToken=function(){if(0===this.buffer.length){var e=this.scanner.scanComments();if(this.scanner.trackComment)for(var t=0;t<e.length;++t){var n=e[t],i=this.scanner.source.slice(n.slice[0],n.slice[1]),r={type:n.multiLine?"BlockComment":"LineComment",value:i};this.trackRange&&(r.range=n.range),this.trackLoc&&(r.loc=n.loc),this.buffer.push(r)}if(!this.scanner.eof()){var a=void 0;this.trackLoc&&(a={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var o="/"===this.scanner.source[this.scanner.index]&&this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.lex();this.reader.push(o);var u={type:s.TokenName[o.type],value:this.scanner.source.slice(o.start,o.end)};if(this.trackRange&&(u.range=[o.start,o.end]),this.trackLoc&&(a.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},u.loc=a),9===o.type){var c=o.pattern,h=o.flags;u.regex={pattern:c,flags:h}}this.buffer.push(u)}}return this.buffer.shift()},e}();t.Tokenizer=o}])},e.exports=i()},function(e,t,n){"use strict";var i;try{i=n(20)}catch(e){"undefined"!=typeof window&&(i=window.esprima)}var r=n(0);e.exports=new r("tag:yaml.org,2002:js/function",{kind:"scalar",resolve:function(e){if(null===e)return!1;try{var t="("+e+")",n=i.parse(t,{range:!0});return"Program"===n.type&&1===n.body.length&&"ExpressionStatement"===n.body[0].type&&"FunctionExpression"===n.body[0].expression.type}catch(e){return!1}},construct:function(e){var t,n="("+e+")",r=i.parse(n,{range:!0}),s=[];if("Program"!==r.type||1!==r.body.length||"ExpressionStatement"!==r.body[0].type||"FunctionExpression"!==r.body[0].expression.type)throw new Error("Failed to resolve function");return r.body[0].expression.params.forEach(function(e){s.push(e.name)}),t=r.body[0].expression.body.range,new Function(s,n.slice(t[0]+1,t[1]-1))},predicate:function(e){return"[object Function]"===Object.prototype.toString.call(e)},represent:function(e){return e.toString()}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:js/regexp",{kind:"scalar",resolve:function(e){if(null===e)return!1;if(0===e.length)return!1;var t=e,n=/\/([gim]*)$/.exec(e),i="";if("/"===t[0]){if(n&&(i=n[1]),i.length>3)return!1;if("/"!==t[t.length-i.length-1])return!1}return!0},construct:function(e){var t=e,n=/\/([gim]*)$/.exec(e),i="";return"/"===t[0]&&(n&&(i=n[1]),t=t.slice(1,t.length-i.length-1)),new RegExp(t,i)},predicate:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},represent:function(e){var t="/"+e.source+"/";return e.global&&(t+="g"),e.multiline&&(t+="m"),e.ignoreCase&&(t+="i"),t}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:js/undefined",{kind:"scalar",resolve:function(){return!0},construct:function(){},predicate:function(e){return void 0===e},represent:function(){return""}})},function(e,t,n){"use strict";var i=n(0),r=Object.prototype.hasOwnProperty;e.exports=new i("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return!0;var t,n=e;for(t in n)if(r.call(n,t)&&null!==n[t])return!1;return!0},construct:function(e){return null!==e?e:{}}})},function(e,t,n){"use strict";var i=n(0),r=Object.prototype.toString;e.exports=new i("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,n,i,s,a,o=e;for(a=new Array(o.length),t=0,n=o.length;t<n;t+=1){if(i=o[t],"[object Object]"!==r.call(i))return!1;if(1!==(s=Object.keys(i)).length)return!1;a[t]=[s[0],i[s[0]]]}return!0},construct:function(e){if(null===e)return[];var t,n,i,r,s,a=e;for(s=new Array(a.length),t=0,n=a.length;t<n;t+=1)i=a[t],r=Object.keys(i),s[t]=[r[0],i[r[0]]];return s}})},function(e,t,n){"use strict";var i=n(0),r=Object.prototype.hasOwnProperty,s=Object.prototype.toString;e.exports=new i("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,n,i,a,o,u=[],c=e;for(t=0,n=c.length;t<n;t+=1){if(i=c[t],o=!1,"[object Object]"!==s.call(i))return!1;for(a in i)if(r.call(i,a)){if(o)return!1;o=!0}if(!o)return!1;if(-1!==u.indexOf(a))return!1;u.push(a)}return!0},construct:function(e){return null!==e?e:[]}})},function(e,t){e.exports=require("buffer")},function(e,t,n){"use strict";var i;try{i=n(27).Buffer}catch(e){}var r=n(0),s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";e.exports=new r("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,n,i=0,r=e.length,a=s;for(n=0;n<r;n++)if(!((t=a.indexOf(e.charAt(n)))>64)){if(t<0)return!1;i+=6}return i%8==0},construct:function(e){var t,n,r=e.replace(/[\r\n=]/g,""),a=r.length,o=s,u=0,c=[];for(t=0;t<a;t++)t%4==0&&t&&(c.push(u>>16&255),c.push(u>>8&255),c.push(255&u)),u=u<<6|o.indexOf(r.charAt(t));return 0==(n=a%4*6)?(c.push(u>>16&255),c.push(u>>8&255),c.push(255&u)):18===n?(c.push(u>>10&255),c.push(u>>2&255)):12===n&&c.push(u>>4&255),i?i.from?i.from(c):new i(c):c},predicate:function(e){return i&&i.isBuffer(e)},represent:function(e){var t,n,i="",r=0,a=e.length,o=s;for(t=0;t<a;t++)t%3==0&&t&&(i+=o[r>>18&63],i+=o[r>>12&63],i+=o[r>>6&63],i+=o[63&r]),r=(r<<8)+e[t];return 0==(n=a%3)?(i+=o[r>>18&63],i+=o[r>>12&63],i+=o[r>>6&63],i+=o[63&r]):2===n?(i+=o[r>>10&63],i+=o[r>>4&63],i+=o[r<<2&63],i+=o[64]):1===n&&(i+=o[r>>2&63],i+=o[r<<4&63],i+=o[64],i+=o[64]),i}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return"<<"===e||null===e}})},function(e,t,n){"use strict";var i=n(0),r=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),s=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");e.exports=new i("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==r.exec(e)||null!==s.exec(e))},construct:function(e){var t,n,i,a,o,u,c,h,l=0,p=null;if(null===(t=r.exec(e))&&(t=s.exec(e)),null===t)throw new Error("Date resolve error");if(n=+t[1],i=+t[2]-1,a=+t[3],!t[4])return new Date(Date.UTC(n,i,a));if(o=+t[4],u=+t[5],c=+t[6],t[7]){for(l=t[7].slice(0,3);l.length<3;)l+="0";l=+l}return t[9]&&(p=6e4*(60*+t[10]+ +(t[11]||0)),"-"===t[9]&&(p=-p)),h=new Date(Date.UTC(n,i,a,o,u,c,l)),p&&h.setTime(h.getTime()-p),h},instanceOf:Date,represent:function(e){return e.toISOString()}})},function(e,t,n){"use strict";var i=n(3),r=n(0),s=new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");var a=/^[-+]?[0-9]+e/;e.exports=new r("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!s.test(e)||"_"===e[e.length-1])},construct:function(e){var t,n,i,r;return n="-"===(t=e.replace(/_/g,"").toLowerCase())[0]?-1:1,r=[],"+-".indexOf(t[0])>=0&&(t=t.slice(1)),".inf"===t?1===n?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===t?NaN:t.indexOf(":")>=0?(t.split(":").forEach(function(e){r.unshift(parseFloat(e,10))}),t=0,i=1,r.forEach(function(e){t+=e*i,i*=60}),n*t):n*parseFloat(t,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!=0||i.isNegativeZero(e))},represent:function(e,t){var n;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(i.isNegativeZero(e))return"-0.0";return n=e.toString(10),a.test(n)?n.replace("e",".e"):n},defaultStyle:"lowercase"})},function(e,t,n){"use strict";var i=n(3),r=n(0);function s(e){return 48<=e&&e<=55}function a(e){return 48<=e&&e<=57}e.exports=new r("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,n,i=e.length,r=0,o=!1;if(!i)return!1;if("-"!==(t=e[r])&&"+"!==t||(t=e[++r]),"0"===t){if(r+1===i)return!0;if("b"===(t=e[++r])){for(r++;r<i;r++)if("_"!==(t=e[r])){if("0"!==t&&"1"!==t)return!1;o=!0}return o&&"_"!==t}if("x"===t){for(r++;r<i;r++)if("_"!==(t=e[r])){if(!(48<=(n=e.charCodeAt(r))&&n<=57||65<=n&&n<=70||97<=n&&n<=102))return!1;o=!0}return o&&"_"!==t}for(;r<i;r++)if("_"!==(t=e[r])){if(!s(e.charCodeAt(r)))return!1;o=!0}return o&&"_"!==t}if("_"===t)return!1;for(;r<i;r++)if("_"!==(t=e[r])){if(":"===t)break;if(!a(e.charCodeAt(r)))return!1;o=!0}return!(!o||"_"===t)&&(":"!==t||/^(:[0-5]?[0-9])+$/.test(e.slice(r)))},construct:function(e){var t,n,i=e,r=1,s=[];return-1!==i.indexOf("_")&&(i=i.replace(/_/g,"")),"-"!==(t=i[0])&&"+"!==t||("-"===t&&(r=-1),t=(i=i.slice(1))[0]),"0"===i?0:"0"===t?"b"===i[1]?r*parseInt(i.slice(2),2):"x"===i[1]?r*parseInt(i,16):r*parseInt(i,8):-1!==i.indexOf(":")?(i.split(":").forEach(function(e){s.unshift(parseInt(e,10))}),i=0,n=1,s.forEach(function(e){i+=e*n,n*=60}),r*i):r*parseInt(i,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1==0&&!i.isNegativeZero(e)},represent:{binary:function(e){return"0b"+e.toString(2)},octal:function(e){return"0"+e.toString(8)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return"0x"+e.toString(16).toUpperCase()}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t=e.length;return 4===t&&("true"===e||"True"===e||"TRUE"===e)||5===t&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return"true"===e||"True"===e||"TRUE"===e},predicate:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return!0;var t=e.length;return 1===t&&"~"===e||4===t&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"}},defaultStyle:"lowercase"})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}})},function(e,t,n){"use strict";var i=n(0);e.exports=new i("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}})},function(e,t,n){"use strict";var i=n(3);function r(e,t,n,i,r){this.name=e,this.buffer=t,this.position=n,this.line=i,this.column=r}r.prototype.getSnippet=function(e,t){var n,r,s,a,o;if(!this.buffer)return null;for(e=e||4,t=t||75,n="",r=this.position;r>0&&-1==="\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(r-1));)if(r-=1,this.position-r>t/2-1){n=" ... ",r+=5;break}for(s="",a=this.position;a<this.buffer.length&&-1==="\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(a));)if((a+=1)-this.position>t/2-1){s=" ... ",a-=5;break}return o=this.buffer.slice(r,a),i.repeat(" ",e)+n+o+s+"\n"+i.repeat(" ",e+this.position-r+n.length)+"^"},r.prototype.toString=function(e){var t,n="";return this.name&&(n+='in "'+this.name+'" '),n+="at line "+(this.line+1)+", column "+(this.column+1),e||(t=this.getSnippet())&&(n+=":\n"+t),n},e.exports=r},function(e,t,n){"use strict";var i=n(3),r=n(5),s=n(38),a=n(4),o=n(8),u=Object.prototype.hasOwnProperty,c=1,h=2,l=3,p=4,f=1,d=2,m=3,x=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,g=/[\x85\u2028\u2029]/,y=/[,\[\]\{\}]/,D=/^(?:!|!!|![a-z\-]+!)$/i,v=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function E(e){return 10===e||13===e}function C(e){return 9===e||32===e}function A(e){return 9===e||32===e||10===e||13===e}function S(e){return 44===e||91===e||93===e||123===e||125===e}function w(e){var t;return 48<=e&&e<=57?e-48:97<=(t=32|e)&&t<=102?t-97+10:-1}function F(e){return 48===e?"\0":97===e?"":98===e?"\b":116===e?"\t":9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"":95===e?" ":76===e?"\u2028":80===e?"\u2029":""}function b(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var k=new Array(256),B=new Array(256),T=0;T<256;T++)k[T]=F(T)?1:0,B[T]=F(T);function N(e,t){return new r(t,new s(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function I(e,t){throw N(e,t)}function M(e,t){e.onWarning&&e.onWarning.call(null,N(e,t))}var O={YAML:function(e,t,n){var i,r,s;null!==e.version&&I(e,"duplication of %YAML directive"),1!==n.length&&I(e,"YAML directive accepts exactly one argument"),null===(i=/^([0-9]+)\.([0-9]+)$/.exec(n[0]))&&I(e,"ill-formed argument of the YAML directive"),r=parseInt(i[1],10),s=parseInt(i[2],10),1!==r&&I(e,"unacceptable YAML version of the document"),e.version=n[0],e.checkLineBreaks=s<2,1!==s&&2!==s&&M(e,"unsupported YAML version of the document")},TAG:function(e,t,n){var i,r;2!==n.length&&I(e,"TAG directive accepts exactly two arguments"),i=n[0],r=n[1],D.test(i)||I(e,"ill-formed tag handle (first argument) of the TAG directive"),u.call(e.tagMap,i)&&I(e,'there is a previously declared suffix for "'+i+'" tag handle'),v.test(r)||I(e,"ill-formed tag prefix (second argument) of the TAG directive"),e.tagMap[i]=r}};function P(e,t,n,i){var r,s,a,o;if(t<n){if(o=e.input.slice(t,n),i)for(r=0,s=o.length;r<s;r+=1)9===(a=o.charCodeAt(r))||32<=a&&a<=1114111||I(e,"expected valid JSON character");else x.test(o)&&I(e,"the stream contains non-printable characters");e.result+=o}}function L(e,t,n,r){var s,a,o,c;for(i.isObject(n)||I(e,"cannot merge mappings; the provided source object is unacceptable"),o=0,c=(s=Object.keys(n)).length;o<c;o+=1)a=s[o],u.call(t,a)||(t[a]=n[a],r[a]=!0)}function j(e,t,n,i,r,s,a,o){var c,h;if(r=String(r),null===t&&(t={}),"tag:yaml.org,2002:merge"===i)if(Array.isArray(s))for(c=0,h=s.length;c<h;c+=1)L(e,t,s[c],n);else L(e,t,s,n);else e.json||u.call(n,r)||!u.call(t,r)||(e.line=a||e.line,e.position=o||e.position,I(e,"duplicated mapping key")),t[r]=s,delete n[r];return t}function J(e){var t;10===(t=e.input.charCodeAt(e.position))?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):I(e,"a line break is expected"),e.line+=1,e.lineStart=e.position}function U(e,t,n){for(var i=0,r=e.input.charCodeAt(e.position);0!==r;){for(;C(r);)r=e.input.charCodeAt(++e.position);if(t&&35===r)do{r=e.input.charCodeAt(++e.position)}while(10!==r&&13!==r&&0!==r);if(!E(r))break;for(J(e),r=e.input.charCodeAt(e.position),i++,e.lineIndent=0;32===r;)e.lineIndent++,r=e.input.charCodeAt(++e.position)}return-1!==n&&0!==i&&e.lineIndent<n&&M(e,"deficient indentation"),i}function z(e){var t,n=e.position;return!(45!==(t=e.input.charCodeAt(n))&&46!==t||t!==e.input.charCodeAt(n+1)||t!==e.input.charCodeAt(n+2)||(n+=3,0!==(t=e.input.charCodeAt(n))&&!A(t)))}function X(e,t){1===t?e.result+=" ":t>1&&(e.result+=i.repeat("\n",t-1))}function R(e,t){var n,i,r=e.tag,s=e.anchor,a=[],o=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=a),i=e.input.charCodeAt(e.position);0!==i&&45===i&&A(e.input.charCodeAt(e.position+1));)if(o=!0,e.position++,U(e,!0,-1)&&e.lineIndent<=t)a.push(null),i=e.input.charCodeAt(e.position);else if(n=e.line,H(e,t,l,!1,!0),a.push(e.result),U(e,!0,-1),i=e.input.charCodeAt(e.position),(e.line===n||e.lineIndent>t)&&0!==i)I(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break;return!!o&&(e.tag=r,e.anchor=s,e.kind="sequence",e.result=a,!0)}function K(e){var t,n,i,r,s=!1,a=!1;if(33!==(r=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&I(e,"duplication of a tag property"),60===(r=e.input.charCodeAt(++e.position))?(s=!0,r=e.input.charCodeAt(++e.position)):33===r?(a=!0,n="!!",r=e.input.charCodeAt(++e.position)):n="!",t=e.position,s){do{r=e.input.charCodeAt(++e.position)}while(0!==r&&62!==r);e.position<e.length?(i=e.input.slice(t,e.position),r=e.input.charCodeAt(++e.position)):I(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==r&&!A(r);)33===r&&(a?I(e,"tag suffix cannot contain exclamation marks"):(n=e.input.slice(t-1,e.position+1),D.test(n)||I(e,"named tag handle cannot contain such characters"),a=!0,t=e.position+1)),r=e.input.charCodeAt(++e.position);i=e.input.slice(t,e.position),y.test(i)&&I(e,"tag suffix cannot contain flow indicator characters")}return i&&!v.test(i)&&I(e,"tag name cannot contain such characters: "+i),s?e.tag=i:u.call(e.tagMap,n)?e.tag=e.tagMap[n]+i:"!"===n?e.tag="!"+i:"!!"===n?e.tag="tag:yaml.org,2002:"+i:I(e,'undeclared tag handle "'+n+'"'),!0}function _(e){var t,n;if(38!==(n=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&I(e,"duplication of an anchor property"),n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!A(n)&&!S(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&I(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function H(e,t,n,r,s){var a,o,x,g,y,D,v,F,T=1,N=!1,M=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,a=o=x=p===n||l===n,r&&U(e,!0,-1)&&(N=!0,e.lineIndent>t?T=1:e.lineIndent===t?T=0:e.lineIndent<t&&(T=-1)),1===T)for(;K(e)||_(e);)U(e,!0,-1)?(N=!0,x=a,e.lineIndent>t?T=1:e.lineIndent===t?T=0:e.lineIndent<t&&(T=-1)):x=!1;if(x&&(x=N||s),1!==T&&p!==n||(v=c===n||h===n?t:t+1,F=e.position-e.lineStart,1===T?x&&(R(e,F)||function(e,t,n){var i,r,s,a,o,u=e.tag,c=e.anchor,l={},f={},d=null,m=null,x=null,g=!1,y=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=l),o=e.input.charCodeAt(e.position);0!==o;){if(i=e.input.charCodeAt(e.position+1),s=e.line,a=e.position,63!==o&&58!==o||!A(i)){if(!H(e,n,h,!1,!0))break;if(e.line===s){for(o=e.input.charCodeAt(e.position);C(o);)o=e.input.charCodeAt(++e.position);if(58===o)A(o=e.input.charCodeAt(++e.position))||I(e,"a whitespace character is expected after the key-value separator within a block mapping"),g&&(j(e,l,f,d,m,null),d=m=x=null),y=!0,g=!1,r=!1,d=e.tag,m=e.result;else{if(!y)return e.tag=u,e.anchor=c,!0;I(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!y)return e.tag=u,e.anchor=c,!0;I(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===o?(g&&(j(e,l,f,d,m,null),d=m=x=null),y=!0,g=!0,r=!0):g?(g=!1,r=!0):I(e,"incomplete explicit mapping pair; a key node is missed"),e.position+=1,o=i;if((e.line===s||e.lineIndent>t)&&(H(e,t,p,!0,r)&&(g?m=e.result:x=e.result),g||(j(e,l,f,d,m,x,s,a),d=m=x=null),U(e,!0,-1),o=e.input.charCodeAt(e.position)),e.lineIndent>t&&0!==o)I(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return g&&j(e,l,f,d,m,null),y&&(e.tag=u,e.anchor=c,e.kind="mapping",e.result=l),y}(e,F,v))||function(e,t){var n,i,r,s,a,o,u,h,l,p,f=!0,d=e.tag,m=e.anchor,x={};if(91===(p=e.input.charCodeAt(e.position)))r=93,o=!1,i=[];else{if(123!==p)return!1;r=125,o=!0,i={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=i),p=e.input.charCodeAt(++e.position);0!==p;){if(U(e,!0,t),(p=e.input.charCodeAt(e.position))===r)return e.position++,e.tag=d,e.anchor=m,e.kind=o?"mapping":"sequence",e.result=i,!0;f||I(e,"missed comma between flow collection entries"),h=u=l=null,s=a=!1,63===p&&A(e.input.charCodeAt(e.position+1))&&(s=a=!0,e.position++,U(e,!0,t)),n=e.line,H(e,t,c,!1,!0),h=e.tag,u=e.result,U(e,!0,t),p=e.input.charCodeAt(e.position),!a&&e.line!==n||58!==p||(s=!0,p=e.input.charCodeAt(++e.position),U(e,!0,t),H(e,t,c,!1,!0),l=e.result),o?j(e,i,x,h,u,l):s?i.push(j(e,null,x,h,u,l)):i.push(u),U(e,!0,t),44===(p=e.input.charCodeAt(e.position))?(f=!0,p=e.input.charCodeAt(++e.position)):f=!1}I(e,"unexpected end of the stream within a flow collection")}(e,v)?M=!0:(o&&function(e,t){var n,r,s,a,o,u=f,c=!1,h=!1,l=t,p=0,x=!1;if(124===(a=e.input.charCodeAt(e.position)))r=!1;else{if(62!==a)return!1;r=!0}for(e.kind="scalar",e.result="";0!==a;)if(43===(a=e.input.charCodeAt(++e.position))||45===a)f===u?u=43===a?m:d:I(e,"repeat of a chomping mode identifier");else{if(!((s=48<=(o=a)&&o<=57?o-48:-1)>=0))break;0===s?I(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):h?I(e,"repeat of an indentation width identifier"):(l=t+s-1,h=!0)}if(C(a)){do{a=e.input.charCodeAt(++e.position)}while(C(a));if(35===a)do{a=e.input.charCodeAt(++e.position)}while(!E(a)&&0!==a)}for(;0!==a;){for(J(e),e.lineIndent=0,a=e.input.charCodeAt(e.position);(!h||e.lineIndent<l)&&32===a;)e.lineIndent++,a=e.input.charCodeAt(++e.position);if(!h&&e.lineIndent>l&&(l=e.lineIndent),E(a))p++;else{if(e.lineIndent<l){u===m?e.result+=i.repeat("\n",c?1+p:p):u===f&&c&&(e.result+="\n");break}for(r?C(a)?(x=!0,e.result+=i.repeat("\n",c?1+p:p)):x?(x=!1,e.result+=i.repeat("\n",p+1)):0===p?c&&(e.result+=" "):e.result+=i.repeat("\n",p):e.result+=i.repeat("\n",c?1+p:p),c=!0,h=!0,p=0,n=e.position;!E(a)&&0!==a;)a=e.input.charCodeAt(++e.position);P(e,n,e.position,!1)}}return!0}(e,v)||function(e,t){var n,i,r;if(39!==(n=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,i=r=e.position;0!==(n=e.input.charCodeAt(e.position));)if(39===n){if(P(e,i,e.position,!0),39!==(n=e.input.charCodeAt(++e.position)))return!0;i=e.position,e.position++,r=e.position}else E(n)?(P(e,i,r,!0),X(e,U(e,!1,t)),i=r=e.position):e.position===e.lineStart&&z(e)?I(e,"unexpected end of the document within a single quoted scalar"):(e.position++,r=e.position);I(e,"unexpected end of the stream within a single quoted scalar")}(e,v)||function(e,t){var n,i,r,s,a,o,u;if(34!==(o=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,n=i=e.position;0!==(o=e.input.charCodeAt(e.position));){if(34===o)return P(e,n,e.position,!0),e.position++,!0;if(92===o){if(P(e,n,e.position,!0),E(o=e.input.charCodeAt(++e.position)))U(e,!1,t);else if(o<256&&k[o])e.result+=B[o],e.position++;else if((a=120===(u=o)?2:117===u?4:85===u?8:0)>0){for(r=a,s=0;r>0;r--)(a=w(o=e.input.charCodeAt(++e.position)))>=0?s=(s<<4)+a:I(e,"expected hexadecimal character");e.result+=b(s),e.position++}else I(e,"unknown escape sequence");n=i=e.position}else E(o)?(P(e,n,i,!0),X(e,U(e,!1,t)),n=i=e.position):e.position===e.lineStart&&z(e)?I(e,"unexpected end of the document within a double quoted scalar"):(e.position++,i=e.position)}I(e,"unexpected end of the stream within a double quoted scalar")}(e,v)?M=!0:!function(e){var t,n,i;if(42!==(i=e.input.charCodeAt(e.position)))return!1;for(i=e.input.charCodeAt(++e.position),t=e.position;0!==i&&!A(i)&&!S(i);)i=e.input.charCodeAt(++e.position);return e.position===t&&I(e,"name of an alias node must contain at least one character"),n=e.input.slice(t,e.position),e.anchorMap.hasOwnProperty(n)||I(e,'unidentified alias "'+n+'"'),e.result=e.anchorMap[n],U(e,!0,-1),!0}(e)?function(e,t,n){var i,r,s,a,o,u,c,h,l=e.kind,p=e.result;if(A(h=e.input.charCodeAt(e.position))||S(h)||35===h||38===h||42===h||33===h||124===h||62===h||39===h||34===h||37===h||64===h||96===h)return!1;if((63===h||45===h)&&(A(i=e.input.charCodeAt(e.position+1))||n&&S(i)))return!1;for(e.kind="scalar",e.result="",r=s=e.position,a=!1;0!==h;){if(58===h){if(A(i=e.input.charCodeAt(e.position+1))||n&&S(i))break}else if(35===h){if(A(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&z(e)||n&&S(h))break;if(E(h)){if(o=e.line,u=e.lineStart,c=e.lineIndent,U(e,!1,-1),e.lineIndent>=t){a=!0,h=e.input.charCodeAt(e.position);continue}e.position=s,e.line=o,e.lineStart=u,e.lineIndent=c;break}}a&&(P(e,r,s,!1),X(e,e.line-o),r=s=e.position,a=!1),C(h)||(s=e.position+1),h=e.input.charCodeAt(++e.position)}return P(e,r,s,!1),!!e.result||(e.kind=l,e.result=p,!1)}(e,v,c===n)&&(M=!0,null===e.tag&&(e.tag="?")):(M=!0,null===e.tag&&null===e.anchor||I(e,"alias node should not have any properties")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===T&&(M=x&&R(e,F))),null!==e.tag&&"!"!==e.tag)if("?"===e.tag){for(g=0,y=e.implicitTypes.length;g<y;g+=1)if((D=e.implicitTypes[g]).resolve(e.result)){e.result=D.construct(e.result),e.tag=D.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else u.call(e.typeMap[e.kind||"fallback"],e.tag)?(D=e.typeMap[e.kind||"fallback"][e.tag],null!==e.result&&D.kind!==e.kind&&I(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+D.kind+'", not "'+e.kind+'"'),D.resolve(e.result)?(e.result=D.construct(e.result),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):I(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")):I(e,"unknown tag !<"+e.tag+">");return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||M}function W(e){var t,n,i,r,s=e.position,a=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};0!==(r=e.input.charCodeAt(e.position))&&(U(e,!0,-1),r=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==r));){for(a=!0,r=e.input.charCodeAt(++e.position),t=e.position;0!==r&&!A(r);)r=e.input.charCodeAt(++e.position);for(i=[],(n=e.input.slice(t,e.position)).length<1&&I(e,"directive name must not be less than one character in length");0!==r;){for(;C(r);)r=e.input.charCodeAt(++e.position);if(35===r){do{r=e.input.charCodeAt(++e.position)}while(0!==r&&!E(r));break}if(E(r))break;for(t=e.position;0!==r&&!A(r);)r=e.input.charCodeAt(++e.position);i.push(e.input.slice(t,e.position))}0!==r&&J(e),u.call(O,n)?O[n](e,n,i):M(e,'unknown document directive "'+n+'"')}U(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,U(e,!0,-1)):a&&I(e,"directives end mark is expected"),H(e,e.lineIndent-1,p,!1,!0),U(e,!0,-1),e.checkLineBreaks&&g.test(e.input.slice(s,e.position))&&M(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&z(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,U(e,!0,-1)):e.position<e.length-1&&I(e,"end of the stream or a document separator is expected")}function V(e,t){e=String(e),t=t||{},0!==e.length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var n=new function(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||o,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[]}(e,t);for(n.input+="\0";32===n.input.charCodeAt(n.position);)n.lineIndent+=1,n.position+=1;for(;n.position<n.length-1;)W(n);return n.documents}function q(e,t,n){var i,r,s=V(e,n);if("function"!=typeof t)return s;for(i=0,r=s.length;i<r;i+=1)t(s[i])}function G(e,t){var n=V(e,t);if(0!==n.length){if(1===n.length)return n[0];throw new r("expected a single document in the stream, but found more")}}e.exports.loadAll=q,e.exports.load=G,e.exports.safeLoadAll=function(e,t,n){if("function"!=typeof t)return q(e,i.extend({schema:a},n));q(e,t,i.extend({schema:a},n))},e.exports.safeLoad=function(e,t){return G(e,i.extend({schema:a},t))}},function(e,t,n){"use strict";var i=n(39),r=n(19);function s(e){return function(){throw new Error("Function "+e+" is deprecated and cannot be used.")}}e.exports.Type=n(0),e.exports.Schema=n(2),e.exports.FAILSAFE_SCHEMA=n(9),e.exports.JSON_SCHEMA=n(13),e.exports.CORE_SCHEMA=n(14),e.exports.DEFAULT_SAFE_SCHEMA=n(4),e.exports.DEFAULT_FULL_SCHEMA=n(8),e.exports.load=i.load,e.exports.loadAll=i.loadAll,e.exports.safeLoad=i.safeLoad,e.exports.safeLoadAll=i.safeLoadAll,e.exports.dump=r.dump,e.exports.safeDump=r.safeDump,e.exports.YAMLException=n(5),e.exports.MINIMAL_SCHEMA=n(9),e.exports.SAFE_SCHEMA=n(4),e.exports.DEFAULT_SCHEMA=n(8),e.exports.scan=s("scan"),e.exports.parse=s("parse"),e.exports.compose=s("compose"),e.exports.addConstructor=s("addConstructor")},function(e,t,n){"use strict";var i=n(40);e.exports=i},function(e,t,n){"use strict";function i(){return""}function r(e,t,n){return e.slice(t,n).replace(/\S/g," ")}e.exports=function(e,t){for(var n,s,a=!1,o=!1,u=0,c="",h=!1===(t=t||{}).whitespace?i:r,l=0;l<e.length;l++){if(n=e[l],s=e[l+1],!o&&'"'===n)"\\"===e[l-1]&&"\\"!==e[l-2]||(a=!a);if(!a)if(o||n+s!=="//"){if(1===o&&n+s==="\r\n"){o=!1,c+=h(e,u,++l),u=l;continue}if(1===o&&"\n"===n)o=!1,c+=h(e,u,l),u=l;else{if(!o&&n+s==="/*"){c+=e.slice(u,l),u=l,o=2,l++;continue}if(2===o&&n+s==="*/"){o=!1,c+=h(e,u,++l+1),u=l+1;continue}}}else c+=e.slice(u,l),u=l,o=1,l++}return c+(o?h(e.substr(u)):e.substr(u))}},function(e,t,n){"use strict";var i=n(1);function r(e){return e[e.length-1]===i.sep?e.slice(0,-1):e}e.exports=function(e,t){return e=r(e),t=r(t),"win32"===process.platform&&(e=e.toLowerCase(),t=t.toLowerCase()),0===e.lastIndexOf(t,0)&&(e[t.length]===i.sep||void 0===e[t.length])}},function(e,t,n){"use strict";(function(t){const i=n(6),r=n(1),s=n(10),a=n(43),o=n(42),u=[".wistrc.yaml",".wistrc.yml",".wistrc.json"];function c(e){return i.readFileSync(e,"utf8").replace(/^\ufeff/,"")}function h(e){const t=e.filePath;let i;switch(r.extname(t)){case".yaml":case".yml":i=function(e){const t=n(41);try{return t.safeLoad(c(e))||{}}catch(t){throw t.message=`Cannot read config file: ${e}\nError: ${t.message}`,t}}(t);break;default:i=function(e){try{return JSON.parse(o(c(e)))}catch(t){throw t.message=`Cannot read config file: ${e}\nError: ${t.message}`,t}}(t)}return s.merge(s.createEmptyConfig(),i)}function l(e){const n=r.resolve(t,"../../../");return e&&a(e,n)?r.join(r.resolve(e)):r.join(n)}function p(e){const t=l(e);return r.join(t,"node_modules")}function f(e,t){const n=r.resolve(t||"",e);return{filePath:n,configFullName:n}}e.exports={getBaseDir:l,getLookupPath:p,load:function(e,t,n){const i=f(e,n),s=t.configCache.getConfig(i.configFullName);if(s)return s;const a=function(e,t){return p(r.dirname(e.filePath)),h(e)}(i);return a&&(a.filePath=i.filePath,a.baseDirectory=r.dirname(i.filePath),t.configCache.setConfig(i.configFullName,a)),a},resolve:f,CONFIG_FILES:u,getFilenameForDirectory(e){for(let t=0,n=u.length;t<n;t++){const n=r.join(e,u[t]);if(i.existsSync(n)&&i.statSync(n).isFile())return n}return null}}}).call(this,"/")},function(e,t){e.exports=require("os")},function(e,t,n){"use strict";const i=n(1),r=n(45),s=n(10),a=n(44),o=n(18),u=n(17),c=r.homedir();e.exports=class{constructor(e,t){e=e||{},this.linterContext=t,this.options=e,this.ignore=e.ignore,this.ignorePath=e.ignorePath,this.configCache=new o,this.baseConfig=e.baseConfig?s.merge({},a.loadObject(e.baseConfig,this)):{rules:{}},this.baseConfig.filePath="",this.baseConfig.baseDirectory=this.options.cwd,this.configCache.setConfig(this.baseConfig.filePath,this.baseConfig),this.configCache.setMergedVectorConfig(this.baseConfig.filePath,this.baseConfig),this.loadSpecificConfig(e.configFile);const n={rules:this.options.rules};this.cliConfig={},Object.keys(n).forEach(e=>{const t=n[e];t&&(this.cliConfig[e]=t)})}loadSpecificConfig(e){e&&(e=i.resolve(this.options.cwd,e),this.specificConfig=a.load(e,this))}getPersonalConfig(){if(void 0===this.personalConfig){let e;const t=a.getFilenameForDirectory(c);t&&(e=a.load(t,this)),this.personalConfig=e||null}return this.personalConfig}getConfigHierarchy(e){let t=[this.baseConfig];return t=t.concat(this.getLocalConfigHierarchy(e)),this.specificConfig&&t.push(this.specificConfig),t}getLocalConfigHierarchy(e){const t=this.findLocalConfigFiles(e),n=a.getFilenameForDirectory(this.options.cwd),r=[],s=[];for(const e of t){const t=i.dirname(e),o=this.configCache.getHierarchyLocalConfigs(t);if(o){const e=o.concat(s.reverse());return this.configCache.setHierarchyLocalConfigs(r,e),e}if(t===c&&e!==n)continue;const u=a.load(e,this);if(u&&(s.push(u),r.push(t),u.root))break}if(!s.length&&!this.specificConfig){const n=this.getPersonalConfig();if(n)s.push(n);else if(!((o=this.options).rules&&Object.keys(o.rules).length>0||this.options.baseConfig)){const n=new Error("No Wist configuration found.");throw n.messageTemplate="no-config-found",n.messageData={directory:e,filesExamined:t},n}}var o;return this.configCache.setHierarchyLocalConfigs(r,s.reverse()),s}getConfigVector(e){const t=e?i.dirname(e):this.options.cwd;return this.getConfigHierarchy(t).map(n=>{const r={filePath:n.filePath,matchingOverrides:[]};if(n.overrides){const a=i.relative(n.baseDirectory,e||t);n.overrides.forEach((e,t)=>{s.pathMatchesGlobs(a,e.files,e.excludedFiles)&&r.matchingOverrides.push(t)})}return r})}findLocalConfigFiles(e){return this.localConfigFinder||(this.localConfigFinder=new u(a.CONFIG_FILES,this.options.cwd)),this.localConfigFinder.findAllInDirectoryAndParents(e)}getConfig(e){const t=this.getConfigVector(e);let n=this.configCache.getMergedConfig(t);return n||(n=s.getConfigFromVector(t,this.configCache),n=s.merge(n,this.cliConfig),this.configCache.setMergedConfig(t,n),n)}}},function(e,t,n){"use strict";function i(e,t,n){e instanceof RegExp&&(e=r(e,n)),t instanceof RegExp&&(t=r(t,n));var i=s(e,t,n);return i&&{start:i[0],end:i[1],pre:n.slice(0,i[0]),body:n.slice(i[0]+e.length,i[1]),post:n.slice(i[1]+t.length)}}function r(e,t){var n=t.match(e);return n?n[0]:null}function s(e,t,n){var i,r,s,a,o,u=n.indexOf(e),c=n.indexOf(t,u+1),h=u;if(u>=0&&c>0){for(i=[],s=n.length;h>=0&&!o;)h==u?(i.push(h),u=n.indexOf(e,h+1)):1==i.length?o=[i.pop(),c]:((r=i.pop())<s&&(s=r,a=c),c=n.indexOf(t,h+1)),h=u<c&&u>=0?u:c;i.length&&(o=[s,a])}return o}e.exports=i,i.range=s},function(e,t){e.exports=function(e,t){for(var i=[],r=0;r<e.length;r++){var s=t(e[r],r);n(s)?i.push.apply(i,s):i.push(s)}return i};var n=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){var i=n(48),r=n(47);e.exports=function(e){if(!e)return[];"{}"===e.substr(0,2)&&(e="\\{\\}"+e.substr(2));return function e(t,n){var s=[];var a=r("{","}",t);if(!a||/\$$/.test(a.pre))return[t];var u=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(a.body);var c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(a.body);var l=u||c;var x=a.body.indexOf(",")>=0;if(!l&&!x)return a.post.match(/,.*\}/)?(t=a.pre+"{"+a.body+o+a.post,e(t)):[t];var g;if(l)g=a.body.split(/\.\./);else if(1===(g=function e(t){if(!t)return[""];var n=[];var i=r("{","}",t);if(!i)return t.split(",");var s=i.pre;var a=i.body;var o=i.post;var u=s.split(",");u[u.length-1]+="{"+a+"}";var c=e(o);o.length&&(u[u.length-1]+=c.shift(),u.push.apply(u,c));n.push.apply(n,u);return n}(a.body)).length&&1===(g=e(g[0],!1).map(p)).length){var y=a.post.length?e(a.post,!1):[""];return y.map(function(e){return a.pre+g[0]+e})}var D=a.pre;var y=a.post.length?e(a.post,!1):[""];var v;if(l){var E=h(g[0]),C=h(g[1]),A=Math.max(g[0].length,g[1].length),S=3==g.length?Math.abs(h(g[2])):1,w=d,F=C<E;F&&(S*=-1,w=m);var b=g.some(f);v=[];for(var k=E;w(k,C);k+=S){var B;if(c)"\\"===(B=String.fromCharCode(k))&&(B="");else if(B=String(k),b){var T=A-B.length;if(T>0){var N=new Array(T+1).join("0");B=k<0?"-"+N+B.slice(1):N+B}}v.push(B)}}else v=i(g,function(t){return e(t,!1)});for(var I=0;I<v.length;I++)for(var M=0;M<y.length;M++){var O=D+v[I]+y[M];(!n||l||O)&&s.push(O)}return s}(function(e){return e.split("\\\\").join(s).split("\\{").join(a).split("\\}").join(o).split("\\,").join(u).split("\\.").join(c)}(e),!0).map(l)};var s="\0SLASH"+Math.random()+"\0",a="\0OPEN"+Math.random()+"\0",o="\0CLOSE"+Math.random()+"\0",u="\0COMMA"+Math.random()+"\0",c="\0PERIOD"+Math.random()+"\0";function h(e){return parseInt(e,10)==e?parseInt(e,10):e.charCodeAt(0)}function l(e){return e.split(s).join("\\").split(a).join("{").split(o).join("}").split(u).join(",").split(c).join(".")}function p(e){return"{"+e+"}"}function f(e){return/^-?0\d/.test(e)}function d(e,t){return e<=t}function m(e,t){return e>=t}},function(e,t,n){e.exports=d,d.Minimatch=m;var i={sep:"/"};try{i=n(1)}catch(e){}var r=d.GLOBSTAR=m.GLOBSTAR={},s=n(49),a={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},o="[^/]",u=o+"*?",c="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",h="(?:(?!(?:\\/|^)\\.).)*?",l="().*{}+?[]^$\\!".split("").reduce(function(e,t){return e[t]=!0,e},{});var p=/\/+/;function f(e,t){e=e||{},t=t||{};var n={};return Object.keys(t).forEach(function(e){n[e]=t[e]}),Object.keys(e).forEach(function(t){n[t]=e[t]}),n}function d(e,t,n){if("string"!=typeof t)throw new TypeError("glob pattern string required");return n||(n={}),!(!n.nocomment&&"#"===t.charAt(0))&&(""===t.trim()?""===e:new m(t,n).match(e))}function m(e,t){if(!(this instanceof m))return new m(e,t);if("string"!=typeof e)throw new TypeError("glob pattern string required");t||(t={}),e=e.trim(),"/"!==i.sep&&(e=e.split(i.sep).join("/")),this.options=t,this.set=[],this.pattern=e,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function x(e,t){if(t||(t=this instanceof m?this.options:{}),void 0===(e=void 0===e?this.pattern:e))throw new TypeError("undefined pattern");return t.nobrace||!e.match(/\{.*\}/)?[e]:s(e)}d.filter=function(e,t){return t=t||{},function(n,i,r){return d(n,e,t)}},d.defaults=function(e){if(!e||!Object.keys(e).length)return d;var t=d,n=function(n,i,r){return t.minimatch(n,i,f(e,r))};return n.Minimatch=function(n,i){return new t.Minimatch(n,f(e,i))},n},m.defaults=function(e){return e&&Object.keys(e).length?d.defaults(e).Minimatch:m},m.prototype.debug=function(){},m.prototype.make=function(){if(this._made)return;var e=this.pattern,t=this.options;if(!t.nocomment&&"#"===e.charAt(0))return void(this.comment=!0);if(!e)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();t.debug&&(this.debug=console.error);this.debug(this.pattern,n),n=this.globParts=n.map(function(e){return e.split(p)}),this.debug(this.pattern,n),n=n.map(function(e,t,n){return e.map(this.parse,this)},this),this.debug(this.pattern,n),n=n.filter(function(e){return-1===e.indexOf(!1)}),this.debug(this.pattern,n),this.set=n},m.prototype.parseNegate=function(){var e=this.pattern,t=!1,n=0;if(this.options.nonegate)return;for(var i=0,r=e.length;i<r&&"!"===e.charAt(i);i++)t=!t,n++;n&&(this.pattern=e.substr(n));this.negate=t},d.braceExpand=function(e,t){return x(e,t)},m.prototype.braceExpand=x,m.prototype.parse=function(e,t){if(e.length>65536)throw new TypeError("pattern is too long");var n=this.options;if(!n.noglobstar&&"**"===e)return r;if(""===e)return"";var i,s="",c=!!n.nocase,h=!1,p=[],f=[],d=!1,m=-1,x=-1,y="."===e.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",D=this;function v(){if(i){switch(i){case"*":s+=u,c=!0;break;case"?":s+=o,c=!0;break;default:s+="\\"+i}D.debug("clearStateChar %j %j",i,s),i=!1}}for(var E,C=0,A=e.length;C<A&&(E=e.charAt(C));C++)if(this.debug("%s\t%s %s %j",e,C,s,E),h&&l[E])s+="\\"+E,h=!1;else switch(E){case"/":return!1;case"\\":v(),h=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",e,C,s,E),d){this.debug("  in class"),"!"===E&&C===x+1&&(E="^"),s+=E;continue}D.debug("call clearStateChar %j",i),v(),i=E,n.noext&&v();continue;case"(":if(d){s+="(";continue}if(!i){s+="\\(";continue}p.push({type:i,start:C-1,reStart:s.length,open:a[i].open,close:a[i].close}),s+="!"===i?"(?:(?!(?:":"(?:",this.debug("plType %j %j",i,s),i=!1;continue;case")":if(d||!p.length){s+="\\)";continue}v(),c=!0;var S=p.pop();s+=S.close,"!"===S.type&&f.push(S),S.reEnd=s.length;continue;case"|":if(d||!p.length||h){s+="\\|",h=!1;continue}v(),s+="|";continue;case"[":if(v(),d){s+="\\"+E;continue}d=!0,x=C,m=s.length,s+=E;continue;case"]":if(C===x+1||!d){s+="\\"+E,h=!1;continue}if(d){var w=e.substring(x+1,C);try{RegExp("["+w+"]")}catch(e){var F=this.parse(w,g);s=s.substr(0,m)+"\\["+F[0]+"\\]",c=c||F[1],d=!1;continue}}c=!0,d=!1,s+=E;continue;default:v(),h?h=!1:!l[E]||"^"===E&&d||(s+="\\"),s+=E}d&&(w=e.substr(x+1),F=this.parse(w,g),s=s.substr(0,m)+"\\["+F[0],c=c||F[1]);for(S=p.pop();S;S=p.pop()){var b=s.slice(S.reStart+S.open.length);this.debug("setting tail",s,S),b=b.replace(/((?:\\{2}){0,64})(\\?)\|/g,function(e,t,n){return n||(n="\\"),t+t+n+"|"}),this.debug("tail=%j\n   %s",b,b,S,s);var k="*"===S.type?u:"?"===S.type?o:"\\"+S.type;c=!0,s=s.slice(0,S.reStart)+k+"\\("+b}v(),h&&(s+="\\\\");var B=!1;switch(s.charAt(0)){case".":case"[":case"(":B=!0}for(var T=f.length-1;T>-1;T--){var N=f[T],I=s.slice(0,N.reStart),M=s.slice(N.reStart,N.reEnd-8),O=s.slice(N.reEnd-8,N.reEnd),P=s.slice(N.reEnd);O+=P;var L=I.split("(").length-1,j=P;for(C=0;C<L;C++)j=j.replace(/\)[+*?]?/,"");var J="";""===(P=j)&&t!==g&&(J="$");var U=I+M+P+J+O;s=U}""!==s&&c&&(s="(?=.)"+s);B&&(s=y+s);if(t===g)return[s,c];if(!c)return e.replace(/\\(.)/g,"$1");var z=n.nocase?"i":"";try{var X=new RegExp("^"+s+"$",z)}catch(e){return new RegExp("$.")}return X._glob=e,X._src=s,X};var g={};d.makeRe=function(e,t){return new m(e,t||{}).makeRe()},m.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var e=this.set;if(!e.length)return this.regexp=!1,this.regexp;var t=this.options,n=t.noglobstar?u:t.dot?c:h,i=t.nocase?"i":"",s=e.map(function(e){return e.map(function(e){return e===r?n:"string"==typeof e?e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):e._src}).join("\\/")}).join("|");s="^(?:"+s+")$",this.negate&&(s="^(?!"+s+").*$");try{this.regexp=new RegExp(s,i)}catch(e){this.regexp=!1}return this.regexp},d.match=function(e,t,n){var i=new m(t,n=n||{});return e=e.filter(function(e){return i.match(e)}),i.options.nonull&&!e.length&&e.push(t),e},m.prototype.match=function(e,t){if(this.debug("match",e,this.pattern),this.comment)return!1;if(this.empty)return""===e;if("/"===e&&t)return!0;var n=this.options;"/"!==i.sep&&(e=e.split(i.sep).join("/"));e=e.split(p),this.debug(this.pattern,"split",e);var r,s,a=this.set;for(this.debug(this.pattern,"set",a),s=e.length-1;s>=0&&!(r=e[s]);s--);for(s=0;s<a.length;s++){var o=a[s],u=e;n.matchBase&&1===o.length&&(u=[r]);var c=this.matchOne(u,o,t);if(c)return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},m.prototype.matchOne=function(e,t,n){var i=this.options;this.debug("matchOne",{this:this,file:e,pattern:t}),this.debug("matchOne",e.length,t.length);for(var s=0,a=0,o=e.length,u=t.length;s<o&&a<u;s++,a++){this.debug("matchOne loop");var c,h=t[a],l=e[s];if(this.debug(t,h,l),!1===h)return!1;if(h===r){this.debug("GLOBSTAR",[t,h,l]);var p=s,f=a+1;if(f===u){for(this.debug("** at the end");s<o;s++)if("."===e[s]||".."===e[s]||!i.dot&&"."===e[s].charAt(0))return!1;return!0}for(;p<o;){var d=e[p];if(this.debug("\nglobstar while",e,p,t,f,d),this.matchOne(e.slice(p),t.slice(f),n))return this.debug("globstar found match!",p,o,d),!0;if("."===d||".."===d||!i.dot&&"."===d.charAt(0)){this.debug("dot detected!",e,p,t,f);break}this.debug("globstar swallow a segment, and continue"),p++}return!(!n||(this.debug("\n>>> no match, partial?",e,p,t,f),p!==o))}if("string"==typeof h?(c=i.nocase?l.toLowerCase()===h.toLowerCase():l===h,this.debug("string match",h,l,c)):(c=l.match(h),this.debug("pattern match",h,l,c)),!c)return!1}if(s===o&&a===u)return!0;if(s===o)return n;if(a===u)return s===o-1&&""===e[s];throw new Error("wtf?")}},function(e,t,n){"use strict";(function(t){const i=n(6),r=n(1);e.exports=function(e,n){e?r.resolve(n,e):e=r.join(t,"rules");const s=Object.create(null);return i.readdirSync(e).forEach(t=>{".js"===r.extname(t)&&(s[t.slice(0,-3)]=r.join(e,t))}),s}}).call(this,"/")},function(e,t,n){"use strict";const i=n(51);e.exports=class{constructor(){this._rules=Object.create(null),this.load()}define(e,t){this._rules[e]=t}load(e,t){const n=i(e,t);Object.keys(n).forEach(e=>{this.define(e,n[e])})}get(e){return"string"==typeof this._rules[e]?n(11)(this._rules[e]):this._rules[e]}getAllLoadedRules(){const e=new Map;return Object.keys(this._rules).forEach(t=>{const n=this.get(t);e.set(t,n)}),e}}},function(e,t){e.exports=require("events")},function(e,t,n){"use strict";const i=n(53).EventEmitter,r=n(52),s=n(10);function a(e){return Array.isArray(e)?e[0]:e}e.exports=class extends i{constructor(){super(),this.messages=[],this.rules=new r}reset(){this.removeAllListeners(),this.messages=[]}verify(e,t,n){let i,r;return n=Object.assign({},n),null==e||0===e.trim().length?this.messages:(i=(r=function(e,t,n){let i,r=[];try{(i=n.parseText(e)).errors.length>0&&i.errors.forEach(e=>{r.push({ruleId:null,fatal:!0,severity:2,source:null,message:`Parsing error: ${e.message}`,line:e.line,column:e.column})})}catch(e){r.push({ruleId:null,fatal:!0,severity:2,source:null,message:`Parsing error: ${e.message}`,line:e.lineNumber,column:e.column})}return{messages:r,ast:i&&i.ast?i.ast:null}}(e,this.currentFilename,null)).ast,this.messages.push(...r.messages),i?(s.normalize(n),Object.keys(n.rules).filter(e=>a(n.rules[e])>0).forEach(e=>{const t=this.rules.get(e);if(!t)return;const i=a(n.rules[e]),r=Object.freeze(Object.assign(Object.create(null),{id:e,report:t=>{const n=function(e,t,n){const i={ruleId:t,severity:n,message:e.message,line:e.loc.start.line,column:e.loc.start.column,nodeType:e.node&&e.node.type||null};return e.loc.end&&(i.endLine=e.loc.end.line,i.endColumn=e.loc.end.column+1),i}(t,e,i);this.messages.push(n)}}));try{const n=t.create(r);Object.keys(n).forEach(e=>{this.on(e,n[e])})}catch(t){throw t.message=`Error while loading rule '${e}': ${t.message}`,t}}),null.traverse(i),this.messages.sort((e,t)=>{const n=e.line-t.line;return 0===n?e.column-t.column:n}),this.messages):this.messages)}}},function(e,t,n){"use strict";const i=n(6),r=n(1),s=n(54),a=n(46);function o(e){return e.reduce((e,t)=>(e.errorCount+=t.errorCount,e.warningCount+=t.warningCount,e),{errorCount:0,warningCount:0})}function u(e,t,n,i){let s,a,o;n.reset(),t&&(s=r.resolve(t),a=r.extname(t));const u=i.getConfig(s),c=function(e){return e.reduce((e,t)=>(t.fatal||2===t.severity?e.errorCount++:e.warningCount++,e),{errorCount:0,warningCount:0})}(o=n.verify(e,t,u));return{filePath:t,messages:o,errorCount:c.errorCount,warningCount:c.warningCount}}class c{constructor(e){e=Object.assign(Object.create(null),{cwd:process.cwd()},e),this.options=e,this.linter=new s,this.config=new a(this.options,this.linter)}executeOnFiles(e){const t=[],n=this.config;function s(e,s){const a=function(e,t,n){return u(i.readFileSync(r.resolve(e),"utf8"),e,t,n)}(e,s,n);t.push(a)}e.forEach(e=>{s(e,this.linter)});const a=o(t);return{results:t,errorCount:a.errorCount,warningCount:a.warningCount}}executeOnText(e,t){const n=[],i=this.options,s=this.config;t&&!r.isAbsolute(t)&&(t=r.resolve(i.cwd,t)),n.push(u(e,t,this.linter,s));const a=o(n);return{results:n,errorCount:a.errorCount,warningCount:a.warningCount}}getFormatter(e){if("string"!=typeof(e=e||"stylish"))return null;const t=`./formatters/${e}`;try{return n(11)(t)}catch(e){throw e.message=`There was a problem loading formatter: ${t}\nError: ${e.message}`,e}}}c.getFormatter=c.prototype.getFormatter,e.exports=c},function(e,t,n){(function(){var t,i,r={}.toString;function s(e,t,n){var i,s;return"Array"!==r.call(e).slice(8,-1)?{type:"Nothing"}:(i=t.of,{type:"Just",value:function(){var t,r,a,o=[];for(t=0,a=(r=e).length;t<a;++t)s=r[t],o.push(u(s,i,n));return o}()})}function a(e,t,n){var i,s,a;return"Object"!==r.call(e).slice(8,-1)?{type:"Nothing"}:(i=t.of,{type:"Just",value:function(){var t,r={};for(s in t=e)a=t[s],r[u(s,[{type:"String"}],n)]=u(a,i[s]||[{type:"*"}],n);return r}()})}function o(e,t,n){var o,c,h,l;if(o=t.type,c=t.structure,o){if(!(h=(null!=(l=n.customTypes[o])?l.cast:void 0)||i[o]))throw new Error("Type not defined: "+o+".");return h(e,n,u)}switch(c){case"array":return s(e,t,n);case"tuple":return function(e,t,n){var i,s,a,o,c,h,l;if("Array"!==r.call(e).slice(8,-1))return{type:"Nothing"};for(i=[],s=0,a=0,c=(o=t.of).length;a<c;++a)h=o[a],l=u(e[s],h,n),"Undefined"!==r.call(l).slice(8,-1)&&i.push(l),s++;return e.length<=s?{type:"Just",value:i}:{type:"Nothing"}}(e,t,n);case"fields":return a(e,t,n)}}function u(e,n,i){var r,s,a,u,c,h;for(r=0,s=n.length;r<s;++r)if(c=(u=o(e,a=n[r],i)).type,h=u.value,"Nothing"!==c&&t([a],h,{customTypes:i.customTypes}))return h;throw new Error("Value "+JSON.stringify(e)+" does not type check against "+JSON.stringify(n)+".")}t=n(12).parsedTypeCheck,i={"*":function(e,t){switch(r.call(e).slice(8,-1)){case"Array":return o(e,{type:"Array"},t);case"Object":return o(e,{type:"Object"},t);default:return{type:"Just",value:u(e,[{type:"Undefined"},{type:"Null"},{type:"NaN"},{type:"Boolean"},{type:"Number"},{type:"Date"},{type:"RegExp"},{type:"Array"},{type:"Object"},{type:"String"}],(t.explicit=!0,t))}}},Undefined:function(e){return"undefined"===e||void 0===e?{type:"Just",value:void 0}:{type:"Nothing"}},Null:function(e){return"null"===e?{type:"Just",value:null}:{type:"Nothing"}},NaN:function(e){return"NaN"===e?{type:"Just",value:NaN}:{type:"Nothing"}},Boolean:function(e){return"true"===e?{type:"Just",value:!0}:"false"===e?{type:"Just",value:!1}:{type:"Nothing"}},Number:function(e){return{type:"Just",value:+e}},Int:function(e){return{type:"Just",value:+e}},Float:function(e){return{type:"Just",value:+e}},Date:function(e,t){var n;return(n=/^\#([\s\S]*)\#$/.exec(e))?{type:"Just",value:new Date(+n[1]||n[1])}:t.explicit?{type:"Nothing"}:{type:"Just",value:new Date(+e||e)}},RegExp:function(e,t){var n;return(n=/^\/([\s\S]*)\/([gimy]*)$/.exec(e))?{type:"Just",value:new RegExp(n[1],n[2])}:t.explicit?{type:"Nothing"}:{type:"Just",value:new RegExp(e)}},Array:function(e,t){return s(e,{of:[{type:"*"}]},t)},Object:function(e,t){return a(e,{of:{}},t)},String:function(e){var t;return"String"!==r.call(e).slice(8,-1)?{type:"Nothing"}:(t=e.match(/^'([\s\S]*)'$/))?{type:"Just",value:t[1].replace(/\\'/g,"'")}:(t=e.match(/^"([\s\S]*)"$/))?{type:"Just",value:t[1].replace(/\\"/g,'"')}:{type:"Just",value:e}}},e.exports=u}).call(this)},function(e,t,n){(function(){var t,i,r;function s(e,t){if(e[0]===t)return e.shift();throw new Error("Expected '"+t+"', but got '"+e[0]+"' instead in "+JSON.stringify(e)+".")}function a(e,t){if(e[0]===t)return e.shift()}function o(e,t,n){var i,r,o,u;for(i=t[0],r=t[1],n&&s(e,i),o=[],u=","+(n?r:"");e.length&&n&&e[0]!==r;)o.push(p(e,u)),a(e,",");return n&&s(e,r),o}function u(e,t){return o(e,["[","]"],t)}function c(e,t){return o(e,["(",")"],t)}function h(e,t){var n,i,r;for(t&&s(e,"{"),n={},i=","+(t?"}":"");e.length&&(!t||"}"!==e[0]);)r=l(e,":"),s(e,":"),n[r]=p(e,i),a(e,",");return t&&s(e,"}"),n}function l(e,t){var n;for(null==t&&(t=""),n="";e.length&&-1===t.indexOf(e[0]);)n+=e.shift();return n}function p(e,t){switch(e[0]){case"[":return u(e,!0);case"(":return c(e,!0);case"{":return h(e,!0);default:return l(e,t)}}function f(e){return!e}t=n(7).reject,i=/\[\]\(\)}{:,/.source,r=RegExp("(\"(?:\\\\\"|[^\"])*\")|('(?:\\\\'|[^'])*')|(/(?:\\\\/|[^/])*/[a-zA-Z]*)|(#.*#)|(["+i+"])|([^\\s"+i+"](?:\\s*[^\\s"+i+"]+)*)|\\s*"),e.exports=function(e,n,i){var s;if(null==i&&(i={}),!i.explicit&&1===e.length&&"String"===e[0].type)return"'"+n.replace(/\\'/g,"\\\\'")+"'";if(!(s=function(e,t,n){var i,r,s,a,o,l,f,d;return r=(i=t[0]).type,s=i.structure,a=e.concat(),n.explicit||1!==t.length||(r||!s)&&"Array"!==r&&"Object"!==r?l=p(e):(o="array"===s||"Array"===r?u(e,"["===e[0]):"tuple"===s?c(e,"("===e[0]):h(e,"{"===e[0]),l=e.length?p("array"===s||"Array"===r?((f=a).unshift("["),f.push("]"),f):((d=a).unshift("("),d.push(")"),d)):o),l}(t(f,n.split(r)),e,i)))throw new Error("Error parsing '"+n+"'.");return s}}).call(this)},function(e,t,n){(function(){var t,i,r,s,a;t=n(57),i=n(56),r=n(12).parseType,s=function(e,n,r){return null==r&&(r={}),null==r.explicit&&(r.explicit=!1),null==r.customTypes&&(r.customTypes={}),i(t(e,n,r),e,r)},a=function(e,t,n){return s(r(e),t,n)},e.exports={VERSION:"0.3.0",parse:a,parsedTypeParse:s}}).call(this)},function(e,t,n){(function(){var t,i,r,s,a,o,u,c={}.toString;function h(e,t){if(!(e instanceof Object))return!1;switch(t.structure){case"fields":return function(e,t){var n,i,r,s,a,o,u;for(r in n={},i=0,e)n[r]=!0,i++;for(a in s=0,o=t.of){if(u=o[a],!p(e[a],u))return!1;n[a]&&s++}return t.subset||i===s}(e,t);case"array":return function(e,t){return r(function(e){return p(e,t.of)},e)}(e,t);case"tuple":return function(e,t){var n,i,r,s,a;for(n=0,i=0,s=(r=t.of).length;i<s;++i){if(a=r[i],!p(e[n],a))return!1;n++}return e.length<=n}(e,t)}}function l(e,t){var n,i,r,s;if(n=t.type,i=t.structure,n)return"*"===n||((r=u[n]||a[n])?r.typeOf===c.call(e).slice(8,-1)&&r.validate(e):n===c.call(e).slice(8,-1)&&(!i||h(e,t)));if(i)return(!(s=o[i])||s===c.call(e).slice(8,-1))&&h(e,t);throw new Error("No type defined. Input: "+e+".")}function p(e,t){if("Array"!==c.call(t).slice(8,-1))throw new Error("Types must be in an array. Input: "+e+".");return i(function(t){return l(e,t)},t)}t=n(7),i=t.any,r=t.all,s=t.isItNaN,a={Number:{typeOf:"Number",validate:function(e){return!s(e)}},NaN:{typeOf:"Number",validate:s},Int:{typeOf:"Number",validate:function(e){return!s(e)&&e%1==0}},Float:{typeOf:"Number",validate:function(e){return!s(e)}},Date:{typeOf:"Date",validate:function(e){return!s(e.getTime())}}},o={array:"Array",tuple:"Array"},e.exports=function(e,t,n){return null==n&&(n={}),u=n.customTypes||{},p(t,e)}}).call(this)},function(e,t){(function(){var t,n;function i(e){var t;if(null==(t=e[0]))throw new Error("Unexpected end of input.");return t}function r(e){var n;if(n=i(e),!t.test(n))throw new Error("Expected text, got '"+n+"' instead.");return e.shift()}function s(e,t){var n;if((n=i(e))!==t)throw new Error("Expected '"+t+"', got '"+n+"' instead.");return e.shift()}function a(e,t){return e[0]===t?e.shift():null}function o(e){var t;return t=r(e),s(e,":"),[t,h(e)]}function u(e){switch(e[0]){case"[":return function(e){var t;if(s(e,"["),"]"===i(e))throw new Error("Must specify type of Array - eg. [Type], got [] instead.");return t=h(e),s(e,"]"),{structure:"array",of:t}}(e);case"(":return function(e){var t;if(t=[],s(e,"("),")"===i(e))throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.");for(;t.push(h(e)),a(e,","),")"!==i(e););return s(e,")"),{structure:"tuple",of:t}}(e);case"{":return function(e){var t,n,r,u,c;for(t={},s(e,"{"),n=!1;;){if(a(e,"...")){n=!0;break}if(u=(r=o(e))[0],c=r[1],t[u]=c,a(e,","),"}"===i(e))break}return s(e,"}"),{structure:"fields",of:t,subset:n}}(e)}}function c(e){var n,a,o,c;if((a="*"===(n=i(e)))||t.test(n))return o=a?s(e,"*"):r(e),(c=u(e))?(c.type=o,c):{type:o};if(!(c=u(e)))throw new Error("Unexpected character: "+n);return c}function h(e){var t,n,r,s,o;if("::"===i(e))throw new Error("No comment before comment separator '::' found.");for(null!=(t=e[1])&&"::"===t&&(e.shift(),e.shift()),n=[],r={},"Maybe"===i(e)&&(e.shift(),n=[{type:"Undefined"},{type:"Null"}],r={Undefined:!0,Null:!0});r[o=(s=c(e)).type]||n.push(s),r[o]=!0,a(e,"|"););return n}t=/[\$\w]+/,n=RegExp("\\.\\.\\.|::|->|"+t.source+"|\\S","g"),e.exports=function(e){var t;if(!e.length)throw new Error("No type specified.");if(function(e,t){var n=-1,i=t.length>>>0;for(;++n<i;)if(e===t[n])return!0;return!1}("->",t=e.match(n)||[]))throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.");try{return h(t)}catch(n){throw new Error(n.message+" - Remaining tokens: "+JSON.stringify(t)+" - Initial input: '"+e+"'")}}}).call(this)},function(e,t){var n=e.exports=function(e,t,n){"object"==typeof e&&(e=(n=e).start,t=n.stop),"object"==typeof t&&(n=t,e=e||n.start,t=void 0),t||(t=e,e=0),n||(n={});var i=n.mode||"soft",r="hard"===i?/\b/:/(\S+\s+)/;return function(n){return n.toString().split(r).reduce(function(n,r){if("hard"===i)for(var s=0;s<r.length;s+=t-e)n.push(r.slice(s,s+t-e));else n.push(r);return n},[]).reduce(function(n,i){if(""===i)return n;var r=i.replace(/\t/g,"    "),s=n.length-1;if(n[s].length+r.length>t)n[s]=n[s].replace(/\s+$/,""),r.split(/\n/).forEach(function(t){n.push(new Array(e+1).join(" ")+t.replace(/^\s+/,""))});else if(r.match(/\n/)){var a=r.split(/\n/);n[s]+=a.shift(),a.forEach(function(t){n.push(new Array(e+1).join(" ")+t.replace(/^\s+/,""))})}else n[s]+=r;return n},[new Array(e+1).join(" ")]).join("\n")}};n.soft=n,n.hard=function(e,t){return n(e,t,{mode:"hard"})}},function(e,t,n){(function(){var t,i,r,s,a,o,u,c,h,l,p,f,d,m,x;function g(e,t){var n;return e+""+D(" ",(n=t-e.length)>0?n:0)}function y(e,t){return e.replace(/{{([a-zA-Z$_][a-zA-Z$_0-9]*)}}/g,function(e,n){var i;return null!=(i=t[n])?i:"{{"+n+"}}"})}function D(e,t){for(var n="";t>0;(t>>=1)&&(e+=e))1&t&&(n+=e);return n}t=n(7),i=t.id,t.find,r=t.sort,s=t.min,a=t.max,o=t.map,u=t.unlines,t=n(15),c=t.nameToRaw,h=t.dasherize,l=t.naturalJoin,p=n(61),f=function(e,t,n){var i,r,s,a,u,h,l,f,d,m,x,g,y;return i=e.option,r=null!=(s=e.shortNames)?s:[],a=null!=(s=e.longNames)?s:[],u=e.type,e.description,h=t.aliasSeparator,l=t.typeSeparator,f=t.initialIndent,e.negateName&&(i="no-"+i,a&&(a=o(function(e){return"no-"+e},a))),d=1===i.length?[i].concat(r,a):r.concat([i],a),x=(m=o(c,d).join(h)).length,y=(g="NUM"===i?"::":l).length,null!=n&&!e.boolean&&f+x+y+u.length>n?m+""+g+p(f+x+y,n)(u).replace(/^\s+/,""):m+""+(e.boolean?"":g+""+u)},d=function(e){null==e.aliasSeparator&&(e.aliasSeparator=", "),null==e.typeSeparator&&(e.typeSeparator=" "),null==e.descriptionSeparator&&(e.descriptionSeparator="  "),null==e.initialIndent&&(e.initialIndent=2),null==e.secondaryIndent&&(e.secondaryIndent=4),null==e.maxPadFactor&&(e.maxPadFactor=1.5)},m=function(e,t){var n,r,s;return n=t.stdout,r=null!=(s=t.helpStyle)?s:{},d(r),function(t){var s,a,o,c,l,d,m,x,g,y,v,E,C,A,S,w;a=(s=null!=n&&n.isTTY?n.columns-1:null)?p(s):i;try{o=e(h(t))}catch(e){return e.message}return c=f(o,r),l=o.default&&!o.negateName?"\ndefault: "+o.default:"",d=o.restPositional?"Everything after this option is considered a positional argument, even if it looks like an option.":"","description:",y=(x=(m=o.longDescription||o.description&&(C=o.description,A=C.charAt(0).toUpperCase(),S=C.slice(1),w=/[\.!\?]$/.test(C)?"":".",A+""+S+w))&&d?m+" "+d:(g=m||d)?g:"")?s&&x.length-1-"description:".length>s?"\ndescription:\n"+a(x):"\ndescription: "+x:"",v=(g=o.example)?(E=[].concat(g)).length>1?"\nexamples:\n"+u(E):"\nexample: "+E[0]:"",c+""+(l||y||v?"\n"+D("=",c.length):"")+l+y+v}},x=function(e){var t,n,i,o,c,h,m,x,v,E;return t=e.options,n=e.prepend,i=e.append,o=null!=(c=e.helpStyle)?c:{},h=e.stdout,d(o),o.aliasSeparator,o.typeSeparator,m=o.descriptionSeparator,x=o.maxPadFactor,v=o.initialIndent,E=o.secondaryIndent,function(e){var c,d,C,A,S,w,F,b,k,B,T,N,I,M,O,P,L,j,J,U,z,X,R,K,_,H,W,V,q,G;for(d=(c=null!=e?e:{}).showHidden,C=c.interpolate,A=null!=h&&h.isTTY?h.columns-1:null,S=[],w=function(e){return S.push(null!=e?e:"")},n&&(w(C?y(n,C):n),w()),F=[],b=0,k=0,B=[],T=0,N=(c=t).length;T<N;++T)I=c[T],!d&&I.hidden||((M=I.heading)?F.push({type:"heading",value:M}):(O=f(I,o,A),P=[],null!=(M=I.description)&&P.push(M),(M=I.enum)&&P.push("either: "+l(M)),I.default&&!I.negateName&&P.push("default: "+I.default),L=P.join(" - "),F.push({type:"option",pre:O,desc:L,descLen:L.length}),b++,k+=j=O.length,B.push(j)));for(U=(J=r(B))[J.length-1],z=b>2?s((v+k/b)*x,U):U,T=J.length-1;T>=0;--T)if((j=J[T])<=z){X=j;break}if(R=m.length,null!=A)for(K=0,_=0,T=0,N=F.length;T<N;++T)"option"===(I=F[T]).type&&(O=I.pre,L=I.desc,0===(H=I.descLen)?I.wrap="none":(j=a(X,O.length)+v+R)+H>A?H/2.5>A-j?(K++,I.wrap="full"):(_++,I.wrap="partial"):I.wrap="none");for(W=D(" ",v),V=b>1&&K+.5*_>.5*b,T=0,N=F.length;T<N;++T)if(q=T,"heading"===(I=F[T]).type)0!==q&&w(),w(I.value+":");else{if(O=I.pre,L=I.desc,H=I.descLen,G=I.wrap,null!=A){if(V||"full"===G){w(W+""+O+"\n"+(G=p(v+E,A))(L));continue}if("partial"===G){G=p(v+R+a(X,O.length),A),w(W+""+g(O,X)+m+G(L).replace(/^\s+/,""));continue}}w(0===H?W+""+O:W+""+g(O,X)+m+L)}return i&&(w(),w(C?y(i,C):i)),u(S)}},e.exports={generateHelp:x,generateHelpForOption:m}}).call(this)},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e){var i;!function(){"use strict";var r;try{r="undefined"!=typeof Intl&&void 0!==Intl.Collator?Intl.Collator("generic",{sensitivity:"base"}):null}catch(e){console.log("Collator could not be initialized and wouldn't be used")}var s=[],a=[],o={get:function(e,t,n){var i,o,u,c,h,l,p=n&&r&&n.useCollator,f=e.length,d=t.length;if(0===f)return d;if(0===d)return f;for(u=0;u<d;++u)s[u]=u,a[u]=t.charCodeAt(u);if(s[d]=d,p)for(u=0;u<f;++u){for(o=u+1,c=0;c<d;++c)i=o,l=0===r.compare(e.charAt(u),String.fromCharCode(a[c])),(o=s[c]+(l?0:1))>(h=i+1)&&(o=h),o>(h=s[c+1]+1)&&(o=h),s[c]=i;s[c]=o}else for(u=0;u<f;++u){for(o=u+1,c=0;c<d;++c)i=o,l=e.charCodeAt(u)===a[c],(o=s[c]+(l?0:1))>(h=i+1)&&(o=h),o>(h=s[c+1]+1)&&(o=h),s[c]=i;s[c]=o}return o}};null!==n(64)&&n(63)?void 0===(i=function(){return o}.call(t,n,t,e))||(e.exports=i):void 0!==e&&null!==e&&void 0!==t&&e.exports===t?e.exports=o:"undefined"!=typeof self&&"function"==typeof self.postMessage&&"function"==typeof self.importScripts?self.Levenshtein=o:"undefined"!=typeof window&&null!==window&&(window.Levenshtein=o)}()}).call(this,n(65)(e))},function(e,t){var n=Array.prototype.slice,i="function"==typeof Object.keys?Object.keys:function(e){var t=[];for(var n in e)t.push(n);return t},r=e.exports=function(e,t){return 0===e&&0===t?1/e==1/t:e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():o(e)?o(t):"object"!=typeof e&&"object"!=typeof t?e==t:function(e,t){if(s(e)||s(t))return!1;if(e.prototype!==t.prototype)return!1;if(a(e))return!!a(t)&&(e=n.call(e),t=n.call(t),r(e,t));try{var o,u,c=i(e),h=i(t)}catch(e){return!1}if(c.length!=h.length)return!1;for(c.sort(),h.sort(),u=c.length-1;u>=0;u--)if(c[u]!=h[u])return!1;for(u=c.length-1;u>=0;u--)if(o=c[u],!r(e[o],t[o]))return!1;return!0}(e,t))};function s(e){return null===e||void 0===e}function a(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function o(e){return"number"==typeof e&&e!=e}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d,m,x,g,y,D,v,E,C,A,S,w,F,b,k,B,T,N,I,M;function O(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=O(function(e,t){return e>t?e:t}),i=O(function(e,t){return e<t?e:t}),r=function(e){return-e},s=Math.abs,a=function(e){return e<0?-1:e>0?1:0},o=O(function(e,t){return~~(e/t)}),u=O(function(e,t){return e%t}),c=O(function(e,t){return Math.floor(e/t)}),h=O(function(e,t){var n;return(e%(n=t)+n)%n}),l=function(e){return 1/e},f=2*(p=Math.PI),d=Math.exp,m=Math.sqrt,x=Math.log,g=O(function(e,t){return Math.pow(e,t)}),y=Math.sin,D=Math.tan,v=Math.cos,E=Math.asin,C=Math.acos,A=Math.atan,S=O(function(e,t){return Math.atan2(e,t)}),w=function(e){return~~e},F=Math.round,b=Math.ceil,k=Math.floor,B=function(e){return e!=e},T=function(e){return e%2==0},N=function(e){return e%2!=0},I=O(function(e,t){var n;for(e=Math.abs(e),t=Math.abs(t);0!==t;)n=e%t,e=t,t=n;return e}),M=O(function(e,t){return Math.abs(Math.floor(e/I(e,t)*t))}),e.exports={max:n,min:i,negate:r,abs:s,signum:a,quot:o,rem:u,div:c,mod:h,recip:l,pi:p,tau:f,exp:d,sqrt:m,ln:x,pow:g,sin:y,tan:D,cos:v,acos:C,asin:E,atan:A,atan2:S,truncate:w,round:F,ceiling:b,floor:k,isItNaN:B,even:T,odd:N,gcd:I,lcm:M}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d;function m(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=m(function(e,t){return t.split(e)}),i=m(function(e,t){return t.join(e)}),r=function(e){return e.length?e.split("\n"):[]},s=function(e){return e.join("\n")},a=function(e){return e.length?e.split(/[ ]+/):[]},o=function(e){return e.join(" ")},u=function(e){return e.split("")},c=function(e){return e.join("")},h=function(e){return e.split("").reverse().join("")},l=m(function(e,t){var n,i;for(n="",i=0;i<e;++i)n+=t;return n}),p=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},f=function(e){return e.replace(/[-_]+(.)?/g,function(e,t){return(null!=t?t:"").toUpperCase()})},d=function(e){return e.replace(/([^-A-Z])([A-Z]+)/g,function(e,t,n){return t+"-"+(n.length>1?n:n.toLowerCase())}).replace(/^([A-Z]+)/,function(e,t){return t.length>1?t+"-":t.toLowerCase()})},e.exports={split:n,join:i,lines:r,unlines:s,words:a,unwords:o,chars:u,unchars:c,reverse:h,repeat:l,capitalize:p,camelize:f,dasherize:d}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d,m;function x(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=function(e){var t,n,i=[];for(t in e)n=e[t],i.push(n);return i},i=function(e){var t,n=[];for(t in e)n.push(t);return n},r=function(e){var t,n,i,r={};for(t=0,n=e.length;t<n;++t)r[(i=e[t])[0]]=i[1];return r},s=function(e){var t,n,i=[];for(t in e)n=e[t],i.push([t,n]);return i},a=x(function(e,t){var n,i,r,s={};for(n=0,i=e.length;n<i;++n)r=n,s[e[n]]=t[r];return s}),o=function(e){var t,n,i,r;for(i in t=[],n=[],e)r=e[i],t.push(i),n.push(r);return[t,n]},u=function(e){var t;for(t in e)return!1;return!0},c=x(function(e,t){var n;for(n in t)e(t[n]);return t}),h=x(function(e,t){var n,i,r={};for(n in t)i=t[n],r[n]=e(i);return r}),l=function(e){var t,n,i={};for(t in e)(n=e[t])&&(i[t]=n);return i},p=x(function(e,t){var n,i,r={};for(n in t)e(i=t[n])&&(r[n]=i);return r}),f=x(function(e,t){var n,i,r={};for(n in t)e(i=t[n])||(r[n]=i);return r}),d=x(function(e,t){var n,i,r,s;for(r in n={},i={},t)(e(s=t[r])?n:i)[r]=s;return[n,i]}),m=x(function(e,t){var n,i;for(n in t)if(e(i=t[n]))return i}),e.exports={values:n,keys:i,pairsToObj:r,objToPairs:s,listsToObj:a,objToLists:o,empty:u,each:c,map:h,filter:p,compact:l,reject:f,partition:d,find:m}},function(e,t){var n,i,r,s,a,o,u,c,h,l,p,f,d,m,x,g,y,D,v,E,C,A,S,w,F,b,k,B,T,N,I,M,O,P,L,j,J,U,z,X,R,K,_,H,W,V,q,G,Y,$,Z,Q,ee,te,ne,ie,re,se,ae,oe,ue,ce,he,le,pe,fe,de,me,xe,ge={}.toString,ye=[].slice;function De(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}function ve(e,t){for(var n=-1,i=t.length>>>0;++n<i;)if(e===t[n])return!0;return!1}function Ee(e){return!e}n=De(function(e,t){var n,i;for(n=0,i=t.length;n<i;++n)e(t[n]);return t}),i=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)r=t[n],s.push(e(r));return s}),r=function(e){var t,n,i,r=[];for(t=0,n=e.length;t<n;++t)(i=e[t])&&r.push(i);return r},s=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)e(r=t[n])&&s.push(r);return s}),a=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)e(r=t[n])||s.push(r);return s}),o=De(function(e,t){var n,i,r,s,a;for(n=[],i=[],r=0,s=t.length;r<s;++r)(e(a=t[r])?n:i).push(a);return[n,i]}),u=De(function(e,t){var n,i,r;for(n=0,i=t.length;n<i;++n)if(e(r=t[n]))return r}),c=h=function(e){return e[0]},l=function(e){if(e.length)return e.slice(1)},p=function(e){return e[e.length-1]},f=function(e){if(e.length)return e.slice(0,-1)},d=function(e){return!e.length},m=function(e){return e.concat().reverse()},x=function(e){var t,n,i,r;for(t=[],n=0,i=e.length;n<i;++n)ve(r=e[n],t)||t.push(r);return t},g=De(function(e,t){var n,i,r,s,a,o=[];for(n=[],i=0,r=t.length;i<r;++i)ve(a=e(s=t[i]),n)||(n.push(a),o.push(s));return o}),y=D=De(function(e,t,n){var i,r;for(i=0,r=n.length;i<r;++i)t=e(t,n[i]);return t}),v=E=De(function(e,t){return y(e,t[0],t.slice(1))}),C=De(function(e,t,n){var i;for(i=n.length-1;i>=0;--i)t=e(n[i],t);return t}),A=De(function(e,t){return C(e,t[t.length-1],t.slice(0,-1))}),S=De(function(e,t){var n,i,r;for(n=[],i=t;null!=(r=e(i));)n.push(r[0]),i=r[1];return n}),w=function(e){return[].concat.apply([],e)},F=De(function(e,t){var n;return[].concat.apply([],function(){var i,r,s,a=[];for(i=0,s=(r=t).length;i<s;++i)n=r[i],a.push(e(n));return a}())}),b=function(e){var t;return[].concat.apply([],function(){var n,i,r,s=[];for(n=0,r=(i=e).length;n<r;++n)t=i[n],"Array"===ge.call(t).slice(8,-1)?s.push(b(t)):s.push(t);return s}())},k=function(e){var t,n,i,r,s,a,o;t=ye.call(arguments,1),n=[];e:for(i=0,r=e.length;i<r;++i){for(s=e[i],a=0,o=t.length;a<o;++a)if(ve(s,t[a]))continue e;n.push(s)}return n},B=function(e){var t,n,i,r,s,a,o;t=ye.call(arguments,1),n=[];e:for(i=0,r=e.length;i<r;++i){for(s=e[i],a=0,o=t.length;a<o;++a)if(!ve(s,t[a]))continue e;n.push(s)}return n},T=function(){var e,t,n,i,r,s,a,o;for(t=[],n=0,i=(e=ye.call(arguments)).length;n<i;++n)for(s=0,a=(r=e[n]).length;s<a;++s)ve(o=r[s],t)||t.push(o);return t},N=De(function(e,t){var n,i,r,s;for(n={},i=0,r=t.length;i<r;++i)(s=e(t[i]))in n?n[s]+=1:n[s]=1;return n}),I=De(function(e,t){var n,i,r,s,a;for(n={},i=0,r=t.length;i<r;++i)(a=e(s=t[i]))in n?n[a].push(s):n[a]=[s];return n}),M=function(e){var t,n;for(t=0,n=e.length;t<n;++t)if(!e[t])return!1;return!0},O=function(e){var t,n;for(t=0,n=e.length;t<n;++t)if(e[t])return!0;return!1},P=De(function(e,t){var n,i;for(n=0,i=t.length;n<i;++n)if(e(t[n]))return!0;return!1}),L=De(function(e,t){var n,i;for(n=0,i=t.length;n<i;++n)if(!e(t[n]))return!1;return!0}),j=function(e){return e.concat().sort(function(e,t){return e>t?1:e<t?-1:0})},J=De(function(e,t){return t.concat().sort(e)}),U=De(function(e,t){return t.concat().sort(function(t,n){return e(t)>e(n)?1:e(t)<e(n)?-1:0})}),z=function(e){var t,n,i;for(t=0,n=0,i=e.length;n<i;++n)t+=e[n];return t},X=function(e){var t,n,i;for(t=1,n=0,i=e.length;n<i;++n)t*=e[n];return t},R=K=function(e){var t,n,i;for(t=0,n=0,i=e.length;n<i;++n)t+=e[n];return t/e.length},_=function(e){var t,n,i,r,s;for(t=e[0],n=0,r=(i=e.slice(1)).length;n<r;++n)(s=i[n])>t&&(t=s);return t},H=function(e){var t,n,i,r,s;for(t=e[0],n=0,r=(i=e.slice(1)).length;n<r;++n)(s=i[n])<t&&(t=s);return t},W=De(function(e,t){var n,i,r,s,a;for(n=t[0],i=0,s=(r=t.slice(1)).length;i<s;++i)e(a=r[i])>e(n)&&(n=a);return n}),V=De(function(e,t){var n,i,r,s,a;for(n=t[0],i=0,s=(r=t.slice(1)).length;i<s;++i)e(a=r[i])<e(n)&&(n=a);return n}),q=G=De(function(e,t,n){var i,r;return i=t,[t].concat(function(){var t,s,a,o=[];for(t=0,a=(s=n).length;t<a;++t)r=s[t],o.push(i=e(i,r));return o}())}),Y=$=De(function(e,t){if(t.length)return q(e,t[0],t.slice(1))}),Z=De(function(e,t,n){return n=n.concat().reverse(),q(e,t,n).reverse()}),Q=De(function(e,t){if(t.length)return t=t.concat().reverse(),q(e,t[0],t.slice(1)).reverse()}),ee=De(function(e,t,n){return n.slice(e,t)}),te=De(function(e,t){return e<=0?t.slice(0,0):t.slice(0,e)}),ne=De(function(e,t){return e<=0?t:t.slice(e)}),ie=De(function(e,t){return[te(e,t),ne(e,t)]}),re=De(function(e,t){var n,i;if(!(n=t.length))return t;for(i=0;i<n&&e(t[i]);)i+=1;return t.slice(0,i)}),se=De(function(e,t){var n,i;if(!(n=t.length))return t;for(i=0;i<n&&e(t[i]);)i+=1;return t.slice(i)}),ae=De(function(e,t){return[re(e,t),se(e,t)]}),oe=De(function(e,t){return ae(function(){var e=arguments;return function(){var t,n;for(n=e[0].apply(this,arguments),t=1;t<e.length;++t)n=e[t](n);return n}}(e,Ee),t)}),ue=De(function(e,t){var n,i,r,s,a,o;for(n=[],i=t.length,r=0,s=e.length;r<s&&(a=r,o=e[r],a!==i);++r)n.push([o,t[a]]);return n}),ce=De(function(e,t,n){var i,r,s,a,o,u;for(i=[],r=n.length,s=0,a=t.length;s<a&&(o=s,u=t[s],o!==r);++s)i.push(e(u,n[o]));return i}),he=function(){var e,t,n,i,r,s,a,o,u,c=[];for(t=void 0,n=0,i=(e=ye.call(arguments)).length;n<i;++n)t<=(s=(r=e[n]).length)||(t=s);for(n=0;n<t;++n){for(a=n,o=[],u=0,i=e.length;u<i;++u)r=e[u],o.push(r[a]);c.push(o)}return c},le=function(e){var t,n,i,r,s,a,o,u=[];for(n=void 0,i=0,r=(t=ye.call(arguments,1)).length;i<r;++i)n<=(a=(s=t[i]).length)||(n=a);for(i=0;i<n;++i)o=i,u.push(e.apply(null,c()));return u;function c(){var e,n,i,r=[];for(e=0,i=(n=t).length;e<i;++e)s=n[e],r.push(s[o]);return r}},pe=De(function(e,t){return e<0?t[t.length+e]:t[e]}),fe=De(function(e,t){var n,i,r;for(n=0,i=t.length;n<i;++n)if(r=n,t[n]===e)return r}),de=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)r=n,t[n]===e&&s.push(r);return s}),me=De(function(e,t){var n,i,r;for(n=0,i=t.length;n<i;++n)if(r=n,e(t[n]))return r}),xe=De(function(e,t){var n,i,r,s=[];for(n=0,i=t.length;n<i;++n)r=n,e(t[n])&&s.push(r);return s}),e.exports={each:n,map:i,filter:s,compact:r,reject:a,partition:o,find:u,head:c,first:h,tail:l,last:p,initial:f,empty:d,reverse:m,difference:k,intersection:B,union:T,countBy:N,groupBy:I,fold:y,fold1:v,foldl:D,foldl1:E,foldr:C,foldr1:A,unfoldr:S,andList:M,orList:O,any:P,all:L,unique:x,uniqueBy:g,sort:j,sortWith:J,sortBy:U,sum:z,product:X,mean:R,average:K,concat:w,concatMap:F,flatten:b,maximum:_,minimum:H,maximumBy:W,minimumBy:V,scan:q,scan1:Y,scanl:G,scanl1:$,scanr:Z,scanr1:Q,slice:ee,take:te,drop:ne,splitAt:ie,takeWhile:re,dropWhile:se,span:ae,breakList:oe,zip:ue,zipWith:ce,zipAll:he,zipAllWith:le,at:pe,elemIndex:fe,elemIndices:de,findIndex:me,findIndices:xe}},function(e,t){var n,i,r,s,a,o,u=[].slice,c={}.toString;function h(e,t){var n,i=function(r){return e.length>1?function(){var s=r?r.concat():[];return n=t&&n||this,s.push.apply(s,arguments)<e.length&&arguments.length?i.call(n,s):e.apply(n,s)}:e};return i()}n=h(function(e,t){return e.apply(null,t)}),i=function(e){return h(e)},r=h(function(e,t,n){return e(n,t)}),s=function(e){return t=function(t){return function(){return e(t(t)).apply(null,arguments)}},function(){return e(t(t)).apply(null,arguments)};var t},a=h(function(e,t,n,i){return e(t(n),t(i))}),o=function(e){var t;return t={},function(){var n,i,r;return n=u.call(arguments),i=function(){var e,t,i,s=[];for(e=0,i=(t=n).length;e<i;++e)r=t[e],s.push(r+c.call(r).slice(8,-1));return s}().join(""),t[i]=i in t?t[i]:e.apply(null,n)}},e.exports={curry:i,flip:r,fix:s,apply:n,over:a,memoize:o}},function(e,t,n){(function(){var t,i,r,s,a,o,u,c,h,l,p,f,d,m,x,g,y,D,v,E,C={}.toString,A=[].slice;(t=n(7)).id,i=t.map,t.compact,r=t.any,t.groupBy,s=t.partition,a=t.chars,t.isItNaN,o=t.keys,t.Obj,u=t.camelize,c=n(67),t=n(15),h=t.closestString,l=t.nameToRaw,p=t.dasherize,f=t.naturalJoin,t=n(62),d=t.generateHelp,m=t.generateHelpForOption,t=n(12),x=t.parsedTypeCheck,g=t.parseType,y=n(58).parsedTypeParse,D=function(e){var t,n,i={};for(t in e)n=e[t],i[u(t)]=n;return i},v=function(e){var t,n,r;return t="--?[a-zA-Z][-a-z-A-Z0-9]*=",n=RegExp("(?:"+t+")?(?:'(?:\\\\'|[^'])+'|\"(?:\\\\\"|[^\"])+\")|[^'\"\\s]+","g"),r=RegExp("^("+t+")?['\"]([\\s\\S]*)['\"]$"),i(function(e){return e.replace(r,"$1$2")},e.match(n)||[])},(E=function(e){var t,n,i,u,E;return t={},n={},i=[],"Undefined"===C.call(e.stdout).slice(8,-1)&&(e.stdout=process.stdout),null==e.positionalAnywhere&&(e.positionalAnywhere=!0),null==e.typeAliases&&(e.typeAliases={}),null==e.defaults&&(e.defaults={}),null!=e.concatRepeatedArrays&&(e.defaults.concatRepeatedArrays=e.concatRepeatedArrays),null!=e.mergeRepeatedObjects&&(e.defaults.mergeRepeatedObjects=e.mergeRepeatedObjects),function(r){var a,o,u,c,h,l,p,f,d,m,x,D,v,E,S,w,F,b,k,B,T,N;if("Array"!==C.call(r).slice(8,-1))throw new Error("No options defined.");for(a=0,o=r.length;a<o;++a)if(null==(u=r[a]).heading){if(c=u.option,null!=t[c])throw new Error("Option '"+c+"' already defined.");for(h in l=e.defaults)p=l[h],null==u[h]&&(u[h]=p);if("Boolean"===u.type&&null==u.boolean&&(u.boolean=!0),null==u.parsedType){if(!u.type)throw new Error("No type defined for option '"+c+"'.");try{f=null!=(d=e.typeAliases[u.type])?d:u.type,u.parsedType=g(f)}catch(e){throw m=e,new Error("Option '"+c+"': Error parsing type '"+u.type+"': "+m.message)}}if(u.default)try{n[c]=y(u.parsedType,u.default)}catch(e){throw m=e,new Error("Option '"+c+"': Error parsing default value '"+u.default+"' for type '"+u.type+"': "+m.message)}if(u.enum&&!u.parsedPossiblities){for(x=[],D=u.parsedType,v=0,E=(l=u.enum).length;v<E;++v){S=l[v];try{x.push(y(D,S))}catch(e){throw m=e,new Error("Option '"+c+"': Error parsing enum value '"+S+"' for type '"+u.type+"': "+m.message)}}u.parsedPossibilities=x}if(d=u.dependsOn)if(d.length)if(w=(l=[].concat(u.dependsOn))[0],F=A.call(l,1),b=w.toLowerCase(),F.length){if("and"!==b&&"or"!==b)throw new Error("Option '"+c+"': If you have more than one dependency, you must specify either 'and' or 'or'");u.dependsOn=[b].concat(A.call(F))}else"and"===(l=b.toLowerCase())||"or"===l?u.dependsOn=null:u.dependsOn=["and",w];else u.dependsOn=null;if(u.required&&i.push(c),t[c]=u,null!=u.concatRepeatedArrays)if(k=u.concatRepeatedArrays,"Boolean"===C.call(k).slice(8,-1))u.concatRepeatedArrays=[k,{}];else if(1===k.length)u.concatRepeatedArrays=[k[0],{}];else if(2!==k.length)throw new Error("Invalid setting for concatRepeatedArrays");if(u.alias||u.aliases){if("NUM"===c)throw new Error("-NUM option can't have aliases.");for(u.alias&&null==u.aliases&&(u.aliases=[].concat(u.alias)),v=0,E=(l=u.aliases).length;v<E;++v){if(B=l[v],null!=t[B])throw new Error("Option '"+B+"' already defined.");t[B]=u}T=(l=s(I,u.aliases))[0],N=l[1],null==u.shortNames&&(u.shortNames=T),null==u.longNames&&(u.longNames=N)}u.aliases&&0!==u.shortNames.length||"Boolean"!==u.type||"true"!==u.default||(u.negateName=!0)}function I(e){return 1===e.length}}(e.options),u=function(e){var n,i;if(null==(n=t[e]))throw i=h(o(t),e),new Error("Invalid option '"+l(e)+"'"+(i?" - perhaps you meant '"+l(i)+"'?":"."));return n},{parse:E=function(s,o){var h,d,m,g,E,S,w,F,b,k,B,T,N,I,M,O,P,L,j,J,U,z,X,R,K,_,H,W,V,q,G,Y,$,Z,Q,ee,te,ne,ie;switch(h=(null!=o?o:{}).slice,d={},m=[],g=!1,E=!1,S=null,w=function(e,t){var n,i,s,a;if((n=u(e)).boolean)i=t;else{try{s=n.concatRepeatedArrays,i=null!=s&&s[0]&&s[1].oneValuePerFlag&&1===n.parsedType.length&&"array"===n.parsedType[0].structure?[y(n.parsedType[0].of,t)]:y(n.parsedType,t)}catch(i){throw i,new Error("Invalid value for option '"+e+"' - expected type "+n.type+", received value: "+t+".")}if(n.enum&&!r(function(e){return c(e,i)},n.parsedPossibilities))throw new Error("Option "+e+": '"+i+"' not one of "+f(n.enum)+".")}a=C.call(d[e]).slice(8,-1),null!=d[e]?null!=n.concatRepeatedArrays&&n.concatRepeatedArrays[0]&&"Array"===a?d[e]=d[e].concat(i):n.mergeRepeatedObjects&&"Object"===a?function(e,t){var n={}.hasOwnProperty;for(var i in t)n.call(t,i)&&(e[i]=t[i])}(d[e],i):d[e]=i:d[e]=i,n.restPositional&&(g=!0),n.overrideRequired&&(E=!0)},F=function(){var e,t,i;for(e in t=n)i=t[e],null==d[e]&&(d[e]=i)},b=function(){var e,t,n,r;if(!E)for(e=0,n=(t=i).length;e<n;++e)if(r=t[e],!d[r])throw new Error("Option "+l(r)+" is required.")},k=function(e,t){throw new Error("The options "+l(e)+" and "+l(t)+" are mutually exclusive - you cannot use them at the same time.")},B=function(){var t,n,i,r,s,a,o,u,c,h,l;if(t=e.mutuallyExclusive)for(n=0,i=t.length;n<i;++n)for(s=null,a=0,o=(r=t[n]).length;a<o;++a)if(u=r[a],"Array"===C.call(u).slice(8,-1)){for(c=0,h=u.length;c<h;++c)if((l=u[c])in d){if(null==s){s=l;break}k(s,l)}}else u in d&&(null!=s?k(s,u):s=u)},T=function(e){var t,n,i,r,s,a,o;if(!(t=e.dependsOn)||e.dependenciesMet)return!0;for(n=t[0],r=0,s=(i=A.call(t,1)).length;r<s;++r)if(a=i[r],(o=d[a])&&T(o)){if("or"===n)return!0}else if("and"===n)throw new Error("The option '"+e.option+"' did not have its dependencies met.");if("and"===n)return!0;throw new Error("The option '"+e.option+"' did not meet any of its dependencies.")},N=function(){var e;for(e in d)T(t[e])},I=function(){if(S)throw new Error("Value for '"+S+"' of type '"+u(S).type+"' required.")},C.call(s).slice(8,-1)){case"String":M=v(s.slice(null!=h?h:0));break;case"Array":M=s.slice(null!=h?h:2);break;case"Object":for(O in d={},s)if(P=s[O],"_"!==O){if(L=u(p(O)),!x(L.parsedType,P))throw new Error("Option '"+L.option+"': Invalid type for '"+P+"' - expected type '"+L.type+"'.");d[L.option]=P}return B(),N(),F(),b(),(j=D(d))._=s._||[],j;default:throw new Error("Invalid argument to 'parse': "+s+".")}for(J=0,U=M.length;J<U;++J)if("--"===(z=M[J]))g=!0;else if(g)m.push(z);else if(X=z.match(/^(--?)([a-zA-Z][-a-zA-Z0-9]*)(=)?(.*)?$/)){if(R=X,I(),K=1===R[1].length,_=R[2],H=null!=R[3],W=R[4],H&&null==W)throw new Error("No value for '"+_+"' specified.");if(K)for(q=(V=a(_)).length,G=0,Y=V.length;G<Y;++G)if($=G,Z=V[G],ee=(Q=u(Z)).option,g)m.push(Z);else if($===q-1)H?w(ee,te=Q.boolean?y([{type:"Boolean"}],W):W):Q.boolean?w(ee,!0):S=ee;else{if(!Q.boolean)throw new Error("Can't set argument '"+Z+"' when not last flag in a group of short flags.");w(ee,!0)}else if(ne=!1,(X=_.match(/^no-(.+)$/))?(ne=!0,ie=X[1],Q=u(ie)):Q=u(_),ee=Q.option,Q.boolean)te=!H||y([{type:"Boolean"}],W),w(ee,ne?!te:te);else{if(ne)throw new Error("Only use 'no-' prefix for Boolean options, not with '"+ie+"'.");H?w(ee,W):S=ee}}else if(X=z.match(/^-([0-9]+(?:\.[0-9]+)?)$/)){if(!(Q=t.NUM))throw new Error("No -NUM option defined.");w(Q.option,X[1])}else S?(w(S,z),S=null):(m.push(z),e.positionalAnywhere||(g=!0));return I(),B(),N(),F(),b(),(j=D(d))._=m,j},parseArgv:function(e){return E(e,{slice:2})},generateHelp:d(e),generateHelpForOption:m(u,e)}}).VERSION="0.8.2",e.exports=E}).call(this)},function(e,t,n){"use strict";const i=n(73);e.exports=i({prepend:"wist [options] file.brs [file.brs] [dir]",defaults:{concatRepeatedArrays:!0,mergeRepeatedObjects:!0},options:[{heading:"Basic configuration"},{option:"init",alias:"i",type:"Boolean",description:"Initialize Wist"},{option:"config",alias:"c",type:"String",description:"Use specified configuration file"},{option:"format",alias:"f",type:"String",enum:["compact","json","stylish","unix","visualstudio"],default:"stylish",description:"Output format"},{option:"verbose",alias:"v",type:"Boolean",default:!1,description:"Verbose logging"},{option:"help",alias:"h",type:"Boolean",description:"Show help"}]})},function(e,t,n){"use strict";const i=n(74),r=n(55),s=n(16),a=n(6),o=n(1);const u={execute(e){let t;try{t=i.parse(e)}catch(e){return console.error(e.message),1}const n=t._;if(t.init)return function(e){let t=0;t=e.config?c(e.config):c("../config/wist-recommended.json");return t}(t);if(t.config)return c(t.config);if(!t.help&&n.length){var a=process.hrtime();const e=new r(t),i=e.executeOnFiles(n);if(function(e,t,n){let i;try{i=e.getFormatter(n)}catch(e){return s.error(e.message),!1}const r=i(t);return r&&s.info(r),!0}(e,i.results,t.format)){var o=process.hrtime(a);return s.info(`Finished in ${(o[0]+o[1]/1e9).toFixed(2)}s\n`),i.errorCount?1:0}return 1}return s.info(i.generateHelp()),0}};function c(e){return a.existsSync(e)?function(e){try{let t=n(11)(e);a.writeFileSync(".wistrc.json",JSON.stringify(t,null,2))}catch(e){return console.error(e.message),1}return 0}(e=o.resolve(e)):(console.error("Invalid path to configuration file."),1)}e.exports=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2V4Y2VwdGlvbi5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29uZmlnL2NvbmZpZy1vcHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzIHN5bmMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R5cGUtY2hlY2svbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcHRpb25hdG9yL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9sb2dnaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9maWxlLWZpbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29uZmlnL2NvbmZpZy1jYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9kdW1wZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzcHJpbWEvZGlzdC9lc3ByaW1hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvanMvZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy9yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy91bmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9wYWlycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL29tYXAuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYnVmZmVyXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3RpbWVzdGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2Zsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvYm9vbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL251bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zZXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvbWFyay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmlwLWpzb24tY29tbWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtaXMtaW5zaWRlL2xpYi9wYXRoLWlzLWluc2lkZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29uZmlnL2NvbmZpZy1maWxlLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm9zXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFsYW5jZWQtbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbmNhdC1tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JyYWNlLWV4cGFuc2lvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaW1hdGNoL21pbmltYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbG9hZC1ydWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcnVsZXMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXZlbnRzXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2xpbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xpLWVuZ2luZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGV2bi9saWIvY2FzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGV2bi9saWIvcGFyc2Utc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sZXZuL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHlwZS1jaGVjay9saWIvY2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R5cGUtY2hlY2svbGliL3BhcnNlLXR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dvcmR3cmFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcHRpb25hdG9yL2xpYi9oZWxwLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYXN0LWxldmVuc2h0ZWluL2xldmVuc2h0ZWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9OdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWx1ZGUtbHMvbGliL1N0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJlbHVkZS1scy9saWIvT2JqLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9GdW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcHRpb25hdG9yL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xpLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInciLCJzIiwiWUFNTEV4Y2VwdGlvbiIsIlRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyIsIllBTUxfTk9ERV9LSU5EUyIsInRhZyIsIm9wdGlvbnMiLCJtYXAiLCJyZXN1bHQiLCJrZXlzIiwiZm9yRWFjaCIsImluZGV4T2YiLCJ0aGlzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJkYXRhIiwiaW5zdGFuY2VPZiIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImRlZmF1bHRTdHlsZSIsInN0eWxlQWxpYXNlcyIsInN0eWxlIiwiYWxpYXMiLCJTdHJpbmciLCJyZXF1aXJlIiwiY29tbW9uIiwiVHlwZSIsImNvbXBpbGVMaXN0Iiwic2NoZW1hIiwiZXhjbHVkZSIsImluY2x1ZGUiLCJpbmNsdWRlZFNjaGVtYSIsImN1cnJlbnRUeXBlIiwicHJldmlvdXNUeXBlIiwicHJldmlvdXNJbmRleCIsInB1c2giLCJmaWx0ZXIiLCJ0eXBlIiwiaW5kZXgiLCJTY2hlbWEiLCJkZWZpbml0aW9uIiwiaW1wbGljaXQiLCJleHBsaWNpdCIsImxvYWRLaW5kIiwiY29tcGlsZWRJbXBsaWNpdCIsImNvbXBpbGVkRXhwbGljaXQiLCJjb21waWxlZFR5cGVNYXAiLCJsZW5ndGgiLCJzY2FsYXIiLCJzZXF1ZW5jZSIsIm1hcHBpbmciLCJmYWxsYmFjayIsImNvbGxlY3RUeXBlIiwiYXJndW1lbnRzIiwiY29tcGlsZU1hcCIsIkRFRkFVTFQiLCJjcmVhdGUiLCJzY2hlbWFzIiwidHlwZXMiLCJ0b0FycmF5IiwiZXZlcnkiLCJpc05vdGhpbmciLCJzdWJqZWN0IiwiaXNPYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJyZXBlYXQiLCJzdHJpbmciLCJjb3VudCIsImN5Y2xlIiwiaXNOZWdhdGl2ZVplcm8iLCJudW1iZXIiLCJOdW1iZXIiLCJORUdBVElWRV9JTkZJTklUWSIsImV4dGVuZCIsInRhcmdldCIsInNvdXJjZSIsImtleSIsInNvdXJjZUtleXMiLCJyZWFzb24iLCJtYXJrIiwiRXJyb3IiLCJtZXNzYWdlIiwidG9TdHJpbmciLCJjYXB0dXJlU3RhY2tUcmFjZSIsImNvbnN0cnVjdG9yIiwic3RhY2siLCJjb21wYWN0IiwiRnVuYyIsIkxpc3QiLCJPYmoiLCJTdHIiLCJOdW0iLCJpZCIsImlzVHlwZSIsInJlcGxpY2F0ZSIsInByZWx1ZGUiLCJ0b1N0cmluZyQiLCJjdXJyeSQiLCJmIiwiYm91bmQiLCJjb250ZXh0IiwiX2N1cnJ5IiwiYXJncyIsInBhcmFtcyIsImNvbmNhdCIsImFwcGx5IiwieCIsInNsaWNlIiwiaSQiLCJyZXN1bHRzJCIsImVtcHR5IiwidGFrZSIsImRyb3AiLCJzcGxpdEF0IiwidGFrZVdoaWxlIiwiZHJvcFdoaWxlIiwic3BhbiIsImJyZWFrU3RyIiwiYnJlYWtMaXN0IiwiZWFjaCIsInJlamVjdCIsInBhcnRpdGlvbiIsImZpbmQiLCJoZWFkIiwiZmlyc3QiLCJ0YWlsIiwibGFzdCIsImluaXRpYWwiLCJyZXZlcnNlIiwiZGlmZmVyZW5jZSIsImludGVyc2VjdGlvbiIsInVuaW9uIiwiY291bnRCeSIsImdyb3VwQnkiLCJmb2xkIiwiZm9sZGwiLCJmb2xkMSIsImZvbGRsMSIsImZvbGRyIiwiZm9sZHIxIiwidW5mb2xkciIsImFuZExpc3QiLCJvckxpc3QiLCJhbnkiLCJhbGwiLCJ1bmlxdWUiLCJ1bmlxdWVCeSIsInNvcnQiLCJzb3J0V2l0aCIsInNvcnRCeSIsInN1bSIsInByb2R1Y3QiLCJtZWFuIiwiYXZlcmFnZSIsImNvbmNhdE1hcCIsImZsYXR0ZW4iLCJtYXhpbXVtIiwibWluaW11bSIsIm1heGltdW1CeSIsIm1pbmltdW1CeSIsInNjYW4iLCJzY2FubCIsInNjYW4xIiwic2NhbmwxIiwic2NhbnIiLCJzY2FucjEiLCJ6aXAiLCJ6aXBXaXRoIiwiemlwQWxsIiwiemlwQWxsV2l0aCIsImF0IiwiZWxlbUluZGV4IiwiZWxlbUluZGljZXMiLCJmaW5kSW5kZXgiLCJmaW5kSW5kaWNlcyIsImN1cnJ5IiwiZmxpcCIsImZpeCIsIm92ZXIiLCJzcGxpdCIsImpvaW4iLCJsaW5lcyIsInVubGluZXMiLCJ3b3JkcyIsInVud29yZHMiLCJjaGFycyIsInVuY2hhcnMiLCJjYXBpdGFsaXplIiwiY2FtZWxpemUiLCJkYXNoZXJpemUiLCJ2YWx1ZXMiLCJwYWlyc1RvT2JqIiwib2JqVG9QYWlycyIsImxpc3RzVG9PYmoiLCJvYmpUb0xpc3RzIiwibWF4IiwibWluIiwibmVnYXRlIiwiYWJzIiwic2lnbnVtIiwicXVvdCIsInJlbSIsImRpdiIsIm1vZCIsInJlY2lwIiwicGkiLCJ0YXUiLCJleHAiLCJzcXJ0IiwibG4iLCJwb3ciLCJzaW4iLCJ0YW4iLCJjb3MiLCJhY29zIiwiYXNpbiIsImF0YW4iLCJhdGFuMiIsInRydW5jYXRlIiwicm91bmQiLCJjZWlsaW5nIiwiZmxvb3IiLCJpc0l0TmFOIiwiZXZlbiIsIm9kZCIsImdjZCIsImxjbSIsIlZFUlNJT04iLCJtaW5pbWF0Y2giLCJwYXRoIiwiUlVMRV9TRVZFUklUWV9TVFJJTkdTIiwiUlVMRV9TRVZFUklUWSIsInJlZHVjZSIsIlZBTElEX1NFVkVSSVRJRVMiLCJjcmVhdGVFbXB0eUNvbmZpZyIsImdsb2JhbHMiLCJlbnYiLCJydWxlcyIsInBhcnNlck9wdGlvbnMiLCJbb2JqZWN0IE9iamVjdF0iLCJlbnZDb250ZXh0IiwiZW52Q29uZmlnIiwiZW52aXJvbm1lbnQiLCJhc3NpZ24iLCJjb25maWciLCJlbnZDb250ZW50IiwibWVyZ2UiLCJjcmVhdGVFbnZpcm9ubWVudENvbmZpZyIsImRlZXBtZXJnZSIsInNyYyIsImNvbWJpbmUiLCJpc1J1bGUiLCJhcnJheSIsImRzdCIsImUiLCJydWxlSWQiLCJydWxlQ29uZmlnIiwidG9Mb3dlckNhc2UiLCJzZXZlcml0eSIsImlzVmFsaWRTZXZlcml0eSIsInZlY3RvciIsImNvbmZpZ0NhY2hlIiwiY2FjaGVkQ29uZmlnIiwiZ2V0TWVyZ2VkVmVjdG9yQ29uZmlnIiwic3VidmVjdG9yIiwiZnJvbSIsInBhcnRpYWxDYWNoZWRDb25maWciLCJuZWFyZXN0Q2FjaGVJbmRleCIsInBvcCIsImZpbmFsQ29uZmlnIiwibWVyZ2VWZWN0b3JFbnRyeSIsInNldE1lcmdlZFZlY3RvckNvbmZpZyIsInZlY3RvckVudHJ5IiwidmVjdG9yRW50cnlDb25maWciLCJnZXRDb25maWciLCJmaWxlUGF0aCIsIm92ZXJyaWRlcyIsIm1lcmdlZENvbmZpZyIsIm92ZXJyaWRlIiwib3ZlcnJpZGVJbmRleCIsIm1hdGNoaW5nT3ZlcnJpZGVzIiwibGFzdENvbmZpZyIsImJhc2VEaXJlY3RvcnkiLCJmaWxlcyIsInBhdHRlcm5zIiwiZXhjbHVkZWRQYXR0ZXJucyIsInBhdHRlcm5MaXN0IiwiZXhjbHVkZWRQYXR0ZXJuTGlzdCIsInBhdHRlcm4iLCJpc0Fic29sdXRlIiwiaW5jbHVkZXMiLCJvcHRzIiwibWF0Y2hCYXNlIiwic29tZSIsImV4Y2x1ZGVkUGF0dGVybiIsIndlYnBhY2tFbXB0eUNvbnRleHQiLCJyZXEiLCJjb2RlIiwicGFyc2VUeXBlIiwicGFyc2VkVHlwZUNoZWNrIiwidHlwZUNoZWNrIiwiaW5wdXQiLCJmbCIsImNsb3Nlc3RTdHJpbmciLCJuYW1lVG9SYXciLCJuYXR1cmFsSm9pbiIsInBvc3NpYmlsaXRpZXMiLCJkaXN0YW5jZXMiLCJyZWYkIiwiaXQiLCJsb25nZXIiLCJzaG9ydGVyIiwiZGlzdGFuY2UiLCJ0ZXN0IiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZnMiLCJnZXREaXJlY3RvcnlFbnRyaWVzIiwiZGlyZWN0b3J5IiwicmVhZGRpclN5bmMiLCJleCIsIm5vcm1hbGl6ZURpcmVjdG9yeUVudHJpZXMiLCJlbnRyaWVzIiwic3VwcG9ydGVkQ29uZmlncyIsImZpbGVIYXNoIiwiZW50cnkiLCJyZXNvbHZlZEVudHJ5Iiwic3RhdFN5bmMiLCJpc0ZpbGUiLCJjd2QiLCJmaWxlTmFtZXMiLCJwcm9jZXNzIiwiY2FjaGUiLCJkaXJzIiwic2VhcmNoZWQiLCJmaWxlc01hcCIsImsiLCJqIiwiY2hpbGQiLCJkaXJuYW1lIiwiaGFzaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25maWdGdWxsTmFtZUNhY2hlIiwiTWFwIiwibG9jYWxIaWVyYXJjaHlDYWNoZSIsIm1lcmdlZFZlY3RvckNhY2hlIiwibWVyZ2VkQ2FjaGUiLCJjb25maWdGdWxsTmFtZSIsInNldCIsInBhcmVudERpcmVjdG9yaWVzIiwicGFyZW50Q29uZmlncyIsImxvY2FsQ29uZmlnRGlyZWN0b3J5IiwiZGlyZWN0b3J5UGFyZW50Q29uZmlncyIsIkRFRkFVTFRfRlVMTF9TQ0hFTUEiLCJERUZBVUxUX1NBRkVfU0NIRU1BIiwiX3RvU3RyaW5nIiwiX2hhc093blByb3BlcnR5IiwiQ0hBUl9UQUIiLCJDSEFSX0xJTkVfRkVFRCIsIkNIQVJfU1BBQ0UiLCJDSEFSX0VYQ0xBTUFUSU9OIiwiQ0hBUl9ET1VCTEVfUVVPVEUiLCJDSEFSX1NIQVJQIiwiQ0hBUl9QRVJDRU5UIiwiQ0hBUl9BTVBFUlNBTkQiLCJDSEFSX1NJTkdMRV9RVU9URSIsIkNIQVJfQVNURVJJU0siLCJDSEFSX0NPTU1BIiwiQ0hBUl9NSU5VUyIsIkNIQVJfQ09MT04iLCJDSEFSX0dSRUFURVJfVEhBTiIsIkNIQVJfUVVFU1RJT04iLCJDSEFSX0NPTU1FUkNJQUxfQVQiLCJDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQiLCJDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUIiwiQ0hBUl9HUkFWRV9BQ0NFTlQiLCJDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVCIsIkNIQVJfVkVSVElDQUxfTElORSIsIkNIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVCIsIkVTQ0FQRV9TRVFVRU5DRVMiLCIwIiwiNyIsIjgiLCI5IiwiMTAiLCIxMSIsIjEyIiwiMTMiLCIyNyIsIjM0IiwiOTIiLCIxMzMiLCIxNjAiLCI4MjMyIiwiODIzMyIsIkRFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYIiwiZW5jb2RlSGV4IiwiY2hhcmFjdGVyIiwiaGFuZGxlIiwidG9VcHBlckNhc2UiLCJTdGF0ZSIsImluZGVudCIsIk1hdGgiLCJza2lwSW52YWxpZCIsImZsb3dMZXZlbCIsInN0eWxlTWFwIiwiY29tcGlsZVN0eWxlTWFwIiwic29ydEtleXMiLCJsaW5lV2lkdGgiLCJub1JlZnMiLCJub0NvbXBhdE1vZGUiLCJjb25kZW5zZUZsb3ciLCJpbXBsaWNpdFR5cGVzIiwiZXhwbGljaXRUeXBlcyIsImR1cGxpY2F0ZXMiLCJ1c2VkRHVwbGljYXRlcyIsImluZGVudFN0cmluZyIsInNwYWNlcyIsImxpbmUiLCJpbmQiLCJwb3NpdGlvbiIsIm5leHQiLCJnZW5lcmF0ZU5leHRMaW5lIiwic3RhdGUiLCJsZXZlbCIsImlzV2hpdGVzcGFjZSIsImlzUHJpbnRhYmxlIiwiaXNQbGFpblNhZmUiLCJTVFlMRV9QTEFJTiIsIlNUWUxFX1NJTkdMRSIsIlNUWUxFX0xJVEVSQUwiLCJTVFlMRV9GT0xERUQiLCJTVFlMRV9ET1VCTEUiLCJjaG9vc2VTY2FsYXJTdHlsZSIsInNpbmdsZUxpbmVPbmx5IiwiaW5kZW50UGVyTGV2ZWwiLCJ0ZXN0QW1iaWd1b3VzVHlwZSIsImNoYXIiLCJoYXNMaW5lQnJlYWsiLCJoYXNGb2xkYWJsZUxpbmUiLCJzaG91bGRUcmFja1dpZHRoIiwicHJldmlvdXNMaW5lQnJlYWsiLCJwbGFpbiIsImNoYXJDb2RlQXQiLCJ3cml0ZVNjYWxhciIsImlza2V5IiwiZHVtcCIsInN0ciIsInRlc3RJbXBsaWNpdFJlc29sdmluZyIsInJlcGxhY2UiLCJibG9ja0hlYWRlciIsImRyb3BFbmRpbmdOZXdsaW5lIiwid2lkdGgiLCJtb3JlSW5kZW50ZWQiLCJtYXRjaCIsImxpbmVSZSIsIm5leHRMRiIsImxhc3RJbmRleCIsImZvbGRMaW5lIiwicHJldk1vcmVJbmRlbnRlZCIsImV4ZWMiLCJwcmVmaXgiLCJmb2xkU3RyaW5nIiwiZXNjYXBlU2VxIiwiZXNjYXBlU3RyaW5nIiwiaW5kZW50SW5kaWNhdG9yIiwiY2xpcCIsImVuZCIsImJyZWFrUmUiLCJzdGFydCIsImN1cnIiLCJkZXRlY3RUeXBlIiwiX3Jlc3VsdCIsInR5cGVMaXN0Iiwid3JpdGVOb2RlIiwiYmxvY2siLCJkdXBsaWNhdGVJbmRleCIsImR1cGxpY2F0ZSIsIm9iamVjdE9yQXJyYXkiLCJvYmplY3RLZXkiLCJvYmplY3RWYWx1ZSIsImV4cGxpY2l0UGFpciIsInBhaXJCdWZmZXIiLCJfdGFnIiwib2JqZWN0S2V5TGlzdCIsIndyaXRlQmxvY2tNYXBwaW5nIiwid3JpdGVGbG93TWFwcGluZyIsIndyaXRlQmxvY2tTZXF1ZW5jZSIsIndyaXRlRmxvd1NlcXVlbmNlIiwiZ2V0RHVwbGljYXRlUmVmZXJlbmNlcyIsIm9iamVjdHMiLCJkdXBsaWNhdGVzSW5kZXhlcyIsImluc3BlY3ROb2RlIiwic2FmZUR1bXAiLCJmYWN0b3J5IiwibG9hZGVkIiwiY29tbWVudF9oYW5kbGVyXzEiLCJqc3hfcGFyc2VyXzEiLCJwYXJzZXJfMSIsInRva2VuaXplcl8xIiwicGFyc2UiLCJkZWxlZ2F0ZSIsImNvbW1lbnRIYW5kbGVyIiwicHJveHlEZWxlZ2F0ZSIsIm5vZGUiLCJtZXRhZGF0YSIsInZpc2l0IiwicGFyc2VyRGVsZWdhdGUiLCJjb2xsZWN0Q29tbWVudCIsImNvbW1lbnQiLCJhdHRhY2hDb21tZW50IiwiQ29tbWVudEhhbmRsZXIiLCJhdHRhY2giLCJwYXJzZXIiLCJpc01vZHVsZSIsInNvdXJjZVR5cGUiLCJqc3giLCJKU1hQYXJzZXIiLCJQYXJzZXIiLCJhc3QiLCJwYXJzZU1vZHVsZSIsInBhcnNlU2NyaXB0IiwiY29tbWVudHMiLCJ0b2tlbnMiLCJ0b2xlcmFudCIsImVycm9ycyIsImVycm9ySGFuZGxlciIsInBhcnNpbmdPcHRpb25zIiwidG9rZW5pemUiLCJ0b2tlbml6ZXIiLCJUb2tlbml6ZXIiLCJ0b2tlbiIsImdldE5leHRUb2tlbiIsInRvbGVyYXRlIiwic3ludGF4XzEiLCJTeW50YXgiLCJ2ZXJzaW9uIiwibGVhZGluZyIsInRyYWlsaW5nIiwiaW5zZXJ0SW5uZXJDb21tZW50cyIsIkJsb2NrU3RhdGVtZW50IiwiYm9keSIsImlubmVyQ29tbWVudHMiLCJvZmZzZXQiLCJ1bnNoaWZ0Iiwic3BsaWNlIiwiZmluZFRyYWlsaW5nQ29tbWVudHMiLCJ0cmFpbGluZ0NvbW1lbnRzIiwiZW50cnlfMSIsImZpcnN0Q29tbWVudCIsInJhbmdlIiwiZmluZExlYWRpbmdDb21tZW50cyIsImxlYWRpbmdDb21tZW50cyIsInZpc2l0Tm9kZSIsIlByb2dyYW0iLCJ2aXNpdENvbW1lbnQiLCJsb2MiLCJBc3NpZ25tZW50RXhwcmVzc2lvbiIsIkFzc2lnbm1lbnRQYXR0ZXJuIiwiQXJyYXlFeHByZXNzaW9uIiwiQXJyYXlQYXR0ZXJuIiwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24iLCJBd2FpdEV4cHJlc3Npb24iLCJCaW5hcnlFeHByZXNzaW9uIiwiQnJlYWtTdGF0ZW1lbnQiLCJDYWxsRXhwcmVzc2lvbiIsIkNhdGNoQ2xhdXNlIiwiQ2xhc3NCb2R5IiwiQ2xhc3NEZWNsYXJhdGlvbiIsIkNsYXNzRXhwcmVzc2lvbiIsIkNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsIkNvbnRpbnVlU3RhdGVtZW50IiwiRG9XaGlsZVN0YXRlbWVudCIsIkRlYnVnZ2VyU3RhdGVtZW50IiwiRW1wdHlTdGF0ZW1lbnQiLCJFeHBvcnRBbGxEZWNsYXJhdGlvbiIsIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbiIsIkV4cG9ydE5hbWVkRGVjbGFyYXRpb24iLCJFeHBvcnRTcGVjaWZpZXIiLCJFeHByZXNzaW9uU3RhdGVtZW50IiwiRm9yU3RhdGVtZW50IiwiRm9yT2ZTdGF0ZW1lbnQiLCJGb3JJblN0YXRlbWVudCIsIkZ1bmN0aW9uRGVjbGFyYXRpb24iLCJGdW5jdGlvbkV4cHJlc3Npb24iLCJJZGVudGlmaWVyIiwiSWZTdGF0ZW1lbnQiLCJJbXBvcnREZWNsYXJhdGlvbiIsIkltcG9ydERlZmF1bHRTcGVjaWZpZXIiLCJJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIiLCJJbXBvcnRTcGVjaWZpZXIiLCJMaXRlcmFsIiwiTGFiZWxlZFN0YXRlbWVudCIsIkxvZ2ljYWxFeHByZXNzaW9uIiwiTWVtYmVyRXhwcmVzc2lvbiIsIk1ldGFQcm9wZXJ0eSIsIk1ldGhvZERlZmluaXRpb24iLCJOZXdFeHByZXNzaW9uIiwiT2JqZWN0RXhwcmVzc2lvbiIsIk9iamVjdFBhdHRlcm4iLCJQcm9wZXJ0eSIsIlJlc3RFbGVtZW50IiwiUmV0dXJuU3RhdGVtZW50IiwiU2VxdWVuY2VFeHByZXNzaW9uIiwiU3ByZWFkRWxlbWVudCIsIlN1cGVyIiwiU3dpdGNoQ2FzZSIsIlN3aXRjaFN0YXRlbWVudCIsIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbiIsIlRlbXBsYXRlRWxlbWVudCIsIlRlbXBsYXRlTGl0ZXJhbCIsIlRoaXNFeHByZXNzaW9uIiwiVGhyb3dTdGF0ZW1lbnQiLCJUcnlTdGF0ZW1lbnQiLCJVbmFyeUV4cHJlc3Npb24iLCJVcGRhdGVFeHByZXNzaW9uIiwiVmFyaWFibGVEZWNsYXJhdGlvbiIsIlZhcmlhYmxlRGVjbGFyYXRvciIsIldoaWxlU3RhdGVtZW50IiwiV2l0aFN0YXRlbWVudCIsIllpZWxkRXhwcmVzc2lvbiIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImIiLCJfXyIsImNoYXJhY3Rlcl8xIiwiSlNYTm9kZSIsImpzeF9zeW50YXhfMSIsIk5vZGUiLCJ0b2tlbl8xIiwieGh0bWxfZW50aXRpZXNfMSIsImdldFF1YWxpZmllZEVsZW1lbnROYW1lIiwiZWxlbWVudE5hbWUiLCJxdWFsaWZpZWROYW1lIiwiSlNYU3ludGF4IiwiSlNYSWRlbnRpZmllciIsIkpTWE5hbWVzcGFjZWROYW1lIiwibnMiLCJuYW1lc3BhY2UiLCJKU1hNZW1iZXJFeHByZXNzaW9uIiwiZXhwciIsIlRva2VuTmFtZSIsIl9zdXBlciIsInBhcnNlUHJpbWFyeUV4cHJlc3Npb24iLCJwYXJzZUpTWFJvb3QiLCJzdGFydEpTWCIsInNjYW5uZXIiLCJzdGFydE1hcmtlciIsImxpbmVOdW1iZXIiLCJsaW5lU3RhcnQiLCJjb2x1bW4iLCJmaW5pc2hKU1giLCJuZXh0VG9rZW4iLCJyZWVudGVySlNYIiwiZXhwZWN0SlNYIiwiY3JlYXRlSlNYTm9kZSIsImNvbGxlY3RDb21tZW50cyIsImNyZWF0ZUpTWENoaWxkTm9kZSIsInNjYW5YSFRNTEVudGl0eSIsInF1b3RlIiwidmFsaWQiLCJ0ZXJtaW5hdGVkIiwibnVtZXJpYyIsImhleCIsImVvZiIsImNoIiwiQ2hhcmFjdGVyIiwiaXNEZWNpbWFsRGlnaXQiLCJpc0hleERpZ2l0Iiwic3Vic3RyIiwiZnJvbUNoYXJDb2RlIiwicGFyc2VJbnQiLCJYSFRNTEVudGl0aWVzIiwibGV4SlNYIiwiY3AiLCJuMSIsIm4yIiwiaXNJZGVudGlmaWVyU3RhcnQiLCJpc0lkZW50aWZpZXJQYXJ0IiwibGV4IiwibmV4dEpTWFRva2VuIiwibGFzdE1hcmtlciIsImNvbnZlcnRUb2tlbiIsIm5leHRKU1hUZXh0IiwidGV4dCIsImlzTGluZVRlcm1pbmF0b3IiLCJwZWVrSlNYVG9rZW4iLCJzYXZlU3RhdGUiLCJzY2FuQ29tbWVudHMiLCJyZXN0b3JlU3RhdGUiLCJ0aHJvd1VuZXhwZWN0ZWRUb2tlbiIsIm1hdGNoSlNYIiwicGFyc2VKU1hJZGVudGlmaWVyIiwiZmluYWxpemUiLCJwYXJzZUpTWEVsZW1lbnROYW1lIiwibmFtZV8xIiwicGFyc2VKU1hBdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZSIsImlkZW50aWZpZXIiLCJuYW1lXzIiLCJwYXJzZUpTWFN0cmluZ0xpdGVyYWxBdHRyaWJ1dGUiLCJyYXciLCJnZXRUb2tlblJhdyIsInBhcnNlSlNYRXhwcmVzc2lvbkF0dHJpYnV0ZSIsInRvbGVyYXRlRXJyb3IiLCJleHByZXNzaW9uIiwicGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbiIsIkpTWEV4cHJlc3Npb25Db250YWluZXIiLCJwYXJzZUpTWEF0dHJpYnV0ZVZhbHVlIiwicGFyc2VKU1hFbGVtZW50IiwicGFyc2VKU1hOYW1lVmFsdWVBdHRyaWJ1dGUiLCJKU1hBdHRyaWJ1dGUiLCJwYXJzZUpTWFNwcmVhZEF0dHJpYnV0ZSIsImFyZ3VtZW50IiwiSlNYU3ByZWFkQXR0cmlidXRlIiwicGFyc2VKU1hBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsInBhcnNlSlNYT3BlbmluZ0VsZW1lbnQiLCJzZWxmQ2xvc2luZyIsIkpTWE9wZW5pbmdFbGVtZW50IiwicGFyc2VKU1hCb3VuZGFyeUVsZW1lbnQiLCJuYW1lXzMiLCJKU1hDbG9zaW5nRWxlbWVudCIsInBhcnNlSlNYRW1wdHlFeHByZXNzaW9uIiwiSlNYRW1wdHlFeHByZXNzaW9uIiwicGFyc2VKU1hFeHByZXNzaW9uQ29udGFpbmVyIiwicGFyc2VKU1hDaGlsZHJlbiIsImNoaWxkcmVuIiwiSlNYVGV4dCIsImNvbnRhaW5lciIsInBhcnNlQ29tcGxleEpTWEVsZW1lbnQiLCJlbCIsImVsZW1lbnQiLCJvcGVuaW5nIiwiSlNYRWxlbWVudCIsImNsb3NpbmciLCJvcGVuXzEiLCJpc1N0YXJ0T2ZFeHByZXNzaW9uIiwiUmVnZXgiLCJOb25Bc2NpaUlkZW50aWZpZXJTdGFydCIsIk5vbkFzY2lpSWRlbnRpZmllclBhcnQiLCJmcm9tQ29kZVBvaW50IiwiaXNXaGl0ZVNwYWNlIiwiaXNPY3RhbERpZ2l0Iiwib3BlbmluZ0VsZW1lbnQiLCJjbG9zaW5nRWxlbWVudCIsImVsZW1lbnRzIiwiZ2VuZXJhdG9yIiwiYXN5bmMiLCJvcGVyYXRvciIsImxlZnQiLCJyaWdodCIsIkFzeW5jQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24iLCJBc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24iLCJBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbiIsImxvZ2ljYWwiLCJsYWJlbCIsImNhbGxlZSIsInBhcmFtIiwic3VwZXJDbGFzcyIsIkNvbXB1dGVkTWVtYmVyRXhwcmVzc2lvbiIsImNvbXB1dGVkIiwiY29uc2VxdWVudCIsImFsdGVybmF0ZSIsIkRpcmVjdGl2ZSIsImRpcmVjdGl2ZSIsImRlY2xhcmF0aW9uIiwic3BlY2lmaWVycyIsImxvY2FsIiwiZXhwb3J0ZWQiLCJpbml0IiwidXBkYXRlIiwiaW1wb3J0ZWQiLCJtZXRhIiwiaXNTdGF0aWMiLCJzdGF0aWMiLCJNb2R1bGUiLCJwcm9wZXJ0aWVzIiwibWV0aG9kIiwic2hvcnRoYW5kIiwiUmVnZXhMaXRlcmFsIiwiZmxhZ3MiLCJyZWdleCIsIlNjcmlwdCIsImV4cHJlc3Npb25zIiwiU3RhdGljTWVtYmVyRXhwcmVzc2lvbiIsImRpc2NyaW1pbmFudCIsImNhc2VzIiwicXVhc2kiLCJxdWFzaXMiLCJoYW5kbGVyIiwiZmluYWxpemVyIiwiZGVjbGFyYXRpb25zIiwiYXNzZXJ0XzEiLCJlcnJvcl9oYW5kbGVyXzEiLCJtZXNzYWdlc18xIiwic2Nhbm5lcl8xIiwiRXJyb3JIYW5kbGVyIiwiU2Nhbm5lciIsInRyYWNrQ29tbWVudCIsIm9wZXJhdG9yUHJlY2VkZW5jZSIsIikiLCI7IiwiLCIsIj0iLCJdIiwifHwiLCImJiIsInwiLCJeIiwiJiIsIj09IiwiIT0iLCI9PT0iLCIhPT0iLCI8IiwiPiIsIjw9IiwiPj0iLCI8PCIsIj4+IiwiPj4+IiwiKyIsIi0iLCIqIiwiLyIsIiUiLCJsb29rYWhlYWQiLCJoYXNMaW5lVGVybWluYXRvciIsImF3YWl0IiwiYWxsb3dJbiIsImFsbG93U3RyaWN0RGlyZWN0aXZlIiwiYWxsb3dZaWVsZCIsImZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciIsImlzQXNzaWdubWVudFRhcmdldCIsImlzQmluZGluZ0VsZW1lbnQiLCJpbkZ1bmN0aW9uQm9keSIsImluSXRlcmF0aW9uIiwiaW5Td2l0Y2giLCJsYWJlbFNldCIsInN0cmljdCIsInRocm93RXJyb3IiLCJtZXNzYWdlRm9ybWF0IiwiX2kiLCJtc2ciLCJ3aG9sZSIsImlkeCIsImFzc2VydCIsImNyZWF0ZUVycm9yIiwidW5leHBlY3RlZFRva2VuRXJyb3IiLCJNZXNzYWdlcyIsIlVuZXhwZWN0ZWRUb2tlbiIsIlVuZXhwZWN0ZWRFT1MiLCJVbmV4cGVjdGVkSWRlbnRpZmllciIsIlVuZXhwZWN0ZWROdW1iZXIiLCJVbmV4cGVjdGVkU3RyaW5nIiwiVW5leHBlY3RlZFRlbXBsYXRlIiwiaXNGdXR1cmVSZXNlcnZlZFdvcmQiLCJVbmV4cGVjdGVkUmVzZXJ2ZWQiLCJpc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQiLCJTdHJpY3RSZXNlcnZlZFdvcmQiLCJsYXN0TWFya2VyTGluZVN0YXJ0IiwidG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4iLCJtdWx0aUxpbmUiLCJ0IiwibmV4dFJlZ2V4VG9rZW4iLCJzY2FuUmVnRXhwIiwiY3JlYXRlTm9kZSIsInN0YXJ0Tm9kZSIsIm1hcmtlciIsImV4cGVjdCIsImV4cGVjdENvbW1hU2VwYXJhdG9yIiwiZXhwZWN0S2V5d29yZCIsImtleXdvcmQiLCJtYXRjaEtleXdvcmQiLCJtYXRjaENvbnRleHR1YWxLZXl3b3JkIiwibWF0Y2hBc3NpZ24iLCJvcCIsImlzb2xhdGVDb3ZlckdyYW1tYXIiLCJwYXJzZUZ1bmN0aW9uIiwicHJldmlvdXNJc0JpbmRpbmdFbGVtZW50IiwicHJldmlvdXNJc0Fzc2lnbm1lbnRUYXJnZXQiLCJwcmV2aW91c0ZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciIsImluaGVyaXRDb3ZlckdyYW1tYXIiLCJjb25zdW1lU2VtaWNvbG9uIiwibWF0Y2hBc3luY0Z1bmN0aW9uIiwicGFyc2VGdW5jdGlvbkV4cHJlc3Npb24iLCJvY3RhbCIsIlN0cmljdE9jdGFsTGl0ZXJhbCIsInBhcnNlVGVtcGxhdGVMaXRlcmFsIiwicGFyc2VHcm91cEV4cHJlc3Npb24iLCJwYXJzZUFycmF5SW5pdGlhbGl6ZXIiLCJwYXJzZU9iamVjdEluaXRpYWxpemVyIiwicGFyc2VJZGVudGlmaWVyTmFtZSIsInBhcnNlQ2xhc3NFeHByZXNzaW9uIiwicGFyc2VTcHJlYWRFbGVtZW50IiwiYXJnIiwicGFyc2VQcm9wZXJ0eU1ldGhvZCIsInByZXZpb3VzU3RyaWN0IiwicHJldmlvdXNBbGxvd1N0cmljdERpcmVjdGl2ZSIsInNpbXBsZSIsInBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cyIsImZpcnN0UmVzdHJpY3RlZCIsInN0cmljdGVkIiwicGFyc2VQcm9wZXJ0eU1ldGhvZEZ1bmN0aW9uIiwicHJldmlvdXNBbGxvd1lpZWxkIiwicGFyc2VGb3JtYWxQYXJhbWV0ZXJzIiwicGFyc2VQcm9wZXJ0eU1ldGhvZEFzeW5jRnVuY3Rpb24iLCJwcmV2aW91c0F3YWl0IiwicGFyc2VPYmplY3RQcm9wZXJ0eUtleSIsImlzUHJvcGVydHlLZXkiLCJwYXJzZU9iamVjdFByb3BlcnR5IiwiaGFzUHJvdG8iLCJpc0FzeW5jIiwibG9va2FoZWFkUHJvcGVydHlLZXkiLCJxdWFsaWZpZWRQcm9wZXJ0eU5hbWUiLCJwYXJzZUdldHRlck1ldGhvZCIsInBhcnNlU2V0dGVyTWV0aG9kIiwicGFyc2VHZW5lcmF0b3JNZXRob2QiLCJEdXBsaWNhdGVQcm90b1Byb3BlcnR5IiwicGFyc2VUZW1wbGF0ZUhlYWQiLCJjb29rZWQiLCJwYXJzZVRlbXBsYXRlRWxlbWVudCIsInBhcnNlRXhwcmVzc2lvbiIsInJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybiIsInN0YXJ0VG9rZW4iLCJwYXJzZVJlc3RFbGVtZW50IiwiYXJyb3ciLCJwYXJzZUFyZ3VtZW50cyIsImlzSWRlbnRpZmllck5hbWUiLCJwYXJzZU5ld0V4cHJlc3Npb24iLCJwYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb24iLCJwYXJzZUFzeW5jQXJndW1lbnQiLCJwYXJzZUFzeW5jQXJndW1lbnRzIiwicGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsIiwibWF5YmVBc3luYyIsInByZXZpb3VzQWxsb3dJbiIsImFzeW5jQXJyb3ciLCJwYXJzZVN1cGVyIiwicGFyc2VVcGRhdGVFeHByZXNzaW9uIiwicGFyc2VVbmFyeUV4cHJlc3Npb24iLCJpc1Jlc3RyaWN0ZWRXb3JkIiwiU3RyaWN0TEhTUHJlZml4IiwiSW52YWxpZExIU0luQXNzaWdubWVudCIsIlN0cmljdExIU1Bvc3RmaXgiLCJwYXJzZUF3YWl0RXhwcmVzc2lvbiIsIlN0cmljdERlbGV0ZSIsInBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uIiwiYmluYXJ5UHJlY2VkZW5jZSIsInBhcnNlQmluYXJ5RXhwcmVzc2lvbiIsInByZWMiLCJtYXJrZXJzIiwicHJlY2VkZW5jZXMiLCJwYXJzZUNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImNoZWNrUGF0dGVyblBhcmFtIiwidmFsaWRhdGVQYXJhbSIsInJlaW50ZXJwcmV0QXNDb3ZlckZvcm1hbHNMaXN0IiwicGFyYW1TZXQiLCJTdHJpY3RQYXJhbUR1cGUiLCJwYXJzZVlpZWxkRXhwcmVzc2lvbiIsImxpc3QiLCJTdHJpY3RMSFNBc3NpZ25tZW50IiwicGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSIsInN0YXRlbWVudCIsIklsbGVnYWxFeHBvcnREZWNsYXJhdGlvbiIsInBhcnNlRXhwb3J0RGVjbGFyYXRpb24iLCJJbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb24iLCJwYXJzZUltcG9ydERlY2xhcmF0aW9uIiwicGFyc2VMZXhpY2FsRGVjbGFyYXRpb24iLCJpbkZvciIsInBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbiIsInBhcnNlQ2xhc3NEZWNsYXJhdGlvbiIsImlzTGV4aWNhbERlY2xhcmF0aW9uIiwicGFyc2VTdGF0ZW1lbnQiLCJwYXJzZUJsb2NrIiwicGFyc2VMZXhpY2FsQmluZGluZyIsInBhcnNlUGF0dGVybiIsIlN0cmljdFZhck5hbWUiLCJEZWNsYXJhdGlvbk1pc3NpbmdJbml0aWFsaXplciIsInBhcnNlQmluZGluZ0xpc3QiLCJwYXJzZUJpbmRpbmdSZXN0RWxlbWVudCIsInBhcnNlQXJyYXlQYXR0ZXJuIiwicGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQiLCJwYXJzZVByb3BlcnR5UGF0dGVybiIsImtleVRva2VuIiwicGFyc2VWYXJpYWJsZUlkZW50aWZpZXIiLCJwYXJzZU9iamVjdFBhdHRlcm4iLCJMZXRJbkxleGljYWxCaW5kaW5nIiwicGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uIiwicGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCIsIm9wdCIsInBhcnNlVmFyaWFibGVTdGF0ZW1lbnQiLCJwYXJzZUVtcHR5U3RhdGVtZW50IiwicGFyc2VFeHByZXNzaW9uU3RhdGVtZW50IiwicGFyc2VJZkNsYXVzZSIsIlN0cmljdEZ1bmN0aW9uIiwicGFyc2VJZlN0YXRlbWVudCIsInBhcnNlRG9XaGlsZVN0YXRlbWVudCIsInByZXZpb3VzSW5JdGVyYXRpb24iLCJwYXJzZVdoaWxlU3RhdGVtZW50IiwicGFyc2VGb3JTdGF0ZW1lbnQiLCJmb3JJbiIsImRlY2wiLCJGb3JJbk9mTG9vcEluaXRpYWxpemVyIiwiaW5pdFN0YXJ0VG9rZW4iLCJJbnZhbGlkTEhTSW5Gb3JJbiIsIkludmFsaWRMSFNJbkZvckxvb3AiLCJpbml0U2VxIiwicGFyc2VDb250aW51ZVN0YXRlbWVudCIsIlVua25vd25MYWJlbCIsIklsbGVnYWxDb250aW51ZSIsInBhcnNlQnJlYWtTdGF0ZW1lbnQiLCJJbGxlZ2FsQnJlYWsiLCJwYXJzZVJldHVyblN0YXRlbWVudCIsIklsbGVnYWxSZXR1cm4iLCJwYXJzZVdpdGhTdGF0ZW1lbnQiLCJTdHJpY3RNb2RlV2l0aCIsInBhcnNlU3dpdGNoQ2FzZSIsInBhcnNlU3dpdGNoU3RhdGVtZW50IiwicHJldmlvdXNJblN3aXRjaCIsImRlZmF1bHRGb3VuZCIsImNsYXVzZSIsIk11bHRpcGxlRGVmYXVsdHNJblN3aXRjaCIsInBhcnNlTGFiZWxsZWRTdGF0ZW1lbnQiLCJSZWRlY2xhcmF0aW9uIiwiR2VuZXJhdG9ySW5MZWdhY3lDb250ZXh0IiwicGFyc2VUaHJvd1N0YXRlbWVudCIsIk5ld2xpbmVBZnRlclRocm93IiwicGFyc2VDYXRjaENsYXVzZSIsInBhcmFtTWFwIiwiRHVwbGljYXRlQmluZGluZyIsIlN0cmljdENhdGNoVmFyaWFibGUiLCJwYXJzZUZpbmFsbHlDbGF1c2UiLCJwYXJzZVRyeVN0YXRlbWVudCIsIk5vQ2F0Y2hPckZpbmFsbHkiLCJwYXJzZURlYnVnZ2VyU3RhdGVtZW50IiwicGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXMiLCJwcmV2aW91c0xhYmVsU2V0IiwicHJldmlvdXNJbkZ1bmN0aW9uQm9keSIsIlN0cmljdFBhcmFtTmFtZSIsIndyaXRhYmxlIiwiRGVmYXVsdFJlc3RQYXJhbWV0ZXIiLCJQYXJhbWV0ZXJBZnRlclJlc3RQYXJhbWV0ZXIiLCJwYXJzZUZvcm1hbFBhcmFtZXRlciIsImlkZW50aWZpZXJJc09wdGlvbmFsIiwiaXNHZW5lcmF0b3IiLCJTdHJpY3RGdW5jdGlvbk5hbWUiLCJwcmV2aW91c0FsbG93QXdhaXQiLCJmb3JtYWxQYXJhbWV0ZXJzIiwicGFyc2VEaXJlY3RpdmUiLCJJbGxlZ2FsTGFuZ3VhZ2VNb2RlRGlyZWN0aXZlIiwiQmFkR2V0dGVyQXJpdHkiLCJCYWRTZXR0ZXJBcml0eSIsIkJhZFNldHRlclJlc3RQYXJhbWV0ZXIiLCJwYXJzZUNsYXNzRWxlbWVudCIsImhhc0NvbnN0cnVjdG9yIiwicHVuY3R1YXRvciIsIkNvbnN0cnVjdG9ySXNBc3luYyIsIlN0YXRpY1Byb3RvdHlwZSIsIkNvbnN0cnVjdG9yU3BlY2lhbE1ldGhvZCIsIkR1cGxpY2F0ZUNvbnN0cnVjdG9yIiwicGFyc2VDbGFzc0VsZW1lbnRMaXN0IiwicGFyc2VDbGFzc0JvZHkiLCJlbGVtZW50TGlzdCIsImNsYXNzQm9keSIsInBhcnNlTW9kdWxlU3BlY2lmaWVyIiwiSW52YWxpZE1vZHVsZVNwZWNpZmllciIsInBhcnNlSW1wb3J0U3BlY2lmaWVyIiwicGFyc2VOYW1lZEltcG9ydHMiLCJwYXJzZUltcG9ydERlZmF1bHRTcGVjaWZpZXIiLCJwYXJzZUltcG9ydE5hbWVzcGFjZVNwZWNpZmllciIsIk5vQXNBZnRlckltcG9ydE5hbWVzcGFjZSIsIk1pc3NpbmdGcm9tQ2xhdXNlIiwicGFyc2VFeHBvcnRTcGVjaWZpZXIiLCJleHBvcnREZWNsYXJhdGlvbiIsImlzRXhwb3J0RnJvbUlkZW50aWZpZXIiLCJjb25kaXRpb24iLCJyZWNvcmRFcnJvciIsImNvbnN0cnVjdEVycm9yIiwiYmFzZSIsImNvbCIsImRlc2NyaXB0aW9uIiwiSW52YWxpZEVzY2FwZWRSZXNlcnZlZFdvcmQiLCJJbnZhbGlkSGV4RXNjYXBlU2VxdWVuY2UiLCJJbnZhbGlkUmVnRXhwIiwiVGVtcGxhdGVPY3RhbExpdGVyYWwiLCJVbmV4cGVjdGVkVG9rZW5JbGxlZ2FsIiwiVW50ZXJtaW5hdGVkUmVnRXhwIiwiaGV4VmFsdWUiLCJvY3RhbFZhbHVlIiwiY3VybHlTdGFjayIsInNraXBTaW5nbGVMaW5lQ29tbWVudCIsInNraXBNdWx0aUxpbmVDb21tZW50IiwiaXNLZXl3b3JkIiwiY29kZVBvaW50QXQiLCJzZWNvbmQiLCJzY2FuSGV4RXNjYXBlIiwibGVuIiwic2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGUiLCJnZXRJZGVudGlmaWVyIiwiZ2V0Q29tcGxleElkZW50aWZpZXIiLCJvY3RhbFRvRGVjaW1hbCIsInNjYW5JZGVudGlmaWVyIiwicmVzdG9yZSIsInNjYW5QdW5jdHVhdG9yIiwic2NhbkhleExpdGVyYWwiLCJudW0iLCJzY2FuQmluYXJ5TGl0ZXJhbCIsInNjYW5PY3RhbExpdGVyYWwiLCJpc0ltcGxpY2l0T2N0YWxMaXRlcmFsIiwic2Nhbk51bWVyaWNMaXRlcmFsIiwicGFyc2VGbG9hdCIsInNjYW5TdHJpbmdMaXRlcmFsIiwidW5lc2NhcGVkXzEiLCJ1bmVzY2FwZWQiLCJvY3RUb0RlYyIsInNjYW5UZW1wbGF0ZSIsInJhd09mZnNldCIsInVuZXNjYXBlZF8yIiwidGVzdFJlZ0V4cCIsInRtcCIsInNlbGYiLCIkMCIsIiQxIiwiJDIiLCJjb2RlUG9pbnQiLCJSZWdFeHAiLCJleGNlcHRpb24iLCJzY2FuUmVnRXhwQm9keSIsImNsYXNzTWFya2VyIiwic2NhblJlZ0V4cEZsYWdzIiwiYW1wIiwiYXBvcyIsImd0IiwibmJzcCIsImlleGNsIiwiY2VudCIsInBvdW5kIiwiY3VycmVuIiwieWVuIiwiYnJ2YmFyIiwic2VjdCIsInVtbCIsImNvcHkiLCJvcmRmIiwibGFxdW8iLCJub3QiLCJzaHkiLCJyZWciLCJtYWNyIiwiZGVnIiwicGx1c21uIiwic3VwMiIsInN1cDMiLCJhY3V0ZSIsIm1pY3JvIiwicGFyYSIsIm1pZGRvdCIsImNlZGlsIiwic3VwMSIsIm9yZG0iLCJyYXF1byIsImZyYWMxNCIsImZyYWMxMiIsImZyYWMzNCIsImlxdWVzdCIsIkFncmF2ZSIsIkFhY3V0ZSIsIkFjaXJjIiwiQXRpbGRlIiwiQXVtbCIsIkFyaW5nIiwiQUVsaWciLCJDY2VkaWwiLCJFZ3JhdmUiLCJFYWN1dGUiLCJFY2lyYyIsIkV1bWwiLCJJZ3JhdmUiLCJJYWN1dGUiLCJJY2lyYyIsIkl1bWwiLCJFVEgiLCJOdGlsZGUiLCJPZ3JhdmUiLCJPYWN1dGUiLCJPY2lyYyIsIk90aWxkZSIsIk91bWwiLCJ0aW1lcyIsIk9zbGFzaCIsIlVncmF2ZSIsIlVhY3V0ZSIsIlVjaXJjIiwiVXVtbCIsIllhY3V0ZSIsIlRIT1JOIiwic3psaWciLCJhZ3JhdmUiLCJhYWN1dGUiLCJhY2lyYyIsImF0aWxkZSIsImF1bWwiLCJhcmluZyIsImFlbGlnIiwiY2NlZGlsIiwiZWdyYXZlIiwiZWFjdXRlIiwiZWNpcmMiLCJldW1sIiwiaWdyYXZlIiwiaWFjdXRlIiwiaWNpcmMiLCJpdW1sIiwiZXRoIiwibnRpbGRlIiwib2dyYXZlIiwib2FjdXRlIiwib2NpcmMiLCJvdGlsZGUiLCJvdW1sIiwiZGl2aWRlIiwib3NsYXNoIiwidWdyYXZlIiwidWFjdXRlIiwidWNpcmMiLCJ1dW1sIiwieWFjdXRlIiwidGhvcm4iLCJ5dW1sIiwiT0VsaWciLCJvZWxpZyIsIlNjYXJvbiIsInNjYXJvbiIsIll1bWwiLCJmbm9mIiwiY2lyYyIsInRpbGRlIiwiQWxwaGEiLCJCZXRhIiwiR2FtbWEiLCJEZWx0YSIsIkVwc2lsb24iLCJaZXRhIiwiRXRhIiwiVGhldGEiLCJJb3RhIiwiS2FwcGEiLCJMYW1iZGEiLCJNdSIsIk51IiwiWGkiLCJPbWljcm9uIiwiUGkiLCJSaG8iLCJTaWdtYSIsIlRhdSIsIlVwc2lsb24iLCJQaGkiLCJDaGkiLCJQc2kiLCJPbWVnYSIsImFscGhhIiwiYmV0YSIsImdhbW1hIiwiZGVsdGEiLCJlcHNpbG9uIiwiemV0YSIsImV0YSIsInRoZXRhIiwiaW90YSIsImthcHBhIiwibGFtYmRhIiwibXUiLCJudSIsInhpIiwib21pY3JvbiIsInJobyIsInNpZ21hZiIsInNpZ21hIiwidXBzaWxvbiIsInBoaSIsImNoaSIsInBzaSIsIm9tZWdhIiwidGhldGFzeW0iLCJ1cHNpaCIsInBpdiIsImVuc3AiLCJlbXNwIiwidGhpbnNwIiwienduaiIsInp3aiIsImxybSIsInJsbSIsIm5kYXNoIiwibWRhc2giLCJsc3F1byIsInJzcXVvIiwic2JxdW8iLCJsZHF1byIsInJkcXVvIiwiYmRxdW8iLCJkYWdnZXIiLCJEYWdnZXIiLCJidWxsIiwiaGVsbGlwIiwicGVybWlsIiwicHJpbWUiLCJQcmltZSIsImxzYXF1byIsInJzYXF1byIsIm9saW5lIiwiZnJhc2wiLCJldXJvIiwiaW1hZ2UiLCJ3ZWllcnAiLCJyZWFsIiwidHJhZGUiLCJhbGVmc3ltIiwibGFyciIsInVhcnIiLCJyYXJyIiwiZGFyciIsImhhcnIiLCJjcmFyciIsImxBcnIiLCJ1QXJyIiwickFyciIsImRBcnIiLCJoQXJyIiwiZm9yYWxsIiwicGFydCIsImV4aXN0IiwibmFibGEiLCJpc2luIiwibm90aW4iLCJuaSIsInByb2QiLCJtaW51cyIsImxvd2FzdCIsInJhZGljIiwicHJvcCIsImluZmluIiwiYW5nIiwiYW5kIiwib3IiLCJjYXAiLCJjdXAiLCJpbnQiLCJ0aGVyZTQiLCJzaW0iLCJjb25nIiwiYXN5bXAiLCJuZSIsImVxdWl2IiwibGUiLCJnZSIsInN1YiIsInN1cCIsIm5zdWIiLCJzdWJlIiwic3VwZSIsIm9wbHVzIiwib3RpbWVzIiwicGVycCIsInNkb3QiLCJsY2VpbCIsInJjZWlsIiwibGZsb29yIiwicmZsb29yIiwibG96Iiwic3BhZGVzIiwiY2x1YnMiLCJoZWFydHMiLCJkaWFtcyIsImxhbmciLCJyYW5nIiwiUmVhZGVyIiwiY3VybHkiLCJwYXJlbiIsImJlZm9yZUZ1bmN0aW9uRXhwcmVzc2lvbiIsImlzUmVnZXhTdGFydCIsInByZXZpb3VzIiwiY2hlY2siLCJ0cmFja1JhbmdlIiwidHJhY2tMb2MiLCJidWZmZXIiLCJyZWFkZXIiLCJzaGlmdCIsImVzcHJpbWEiLCJfIiwid2luZG93IiwiZXJyIiwiRnVuY3Rpb24iLCJyZWdleHAiLCJtb2RpZmllcnMiLCJnbG9iYWwiLCJtdWx0aWxpbmUiLCJpZ25vcmVDYXNlIiwicGFpciIsInBhaXJLZXkiLCJwYWlySGFzS2V5Iiwib2JqZWN0S2V5cyIsIk5vZGVCdWZmZXIiLCJCdWZmZXIiLCJCQVNFNjRfTUFQIiwiYml0bGVuIiwiY2hhckF0IiwidGFpbGJpdHMiLCJiaXRzIiwiaXNCdWZmZXIiLCJZQU1MX0RBVEVfUkVHRVhQIiwiWUFNTF9USU1FU1RBTVBfUkVHRVhQIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsImRhdGUiLCJmcmFjdGlvbiIsIkRhdGUiLCJVVEMiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInRvSVNPU3RyaW5nIiwiWUFNTF9GTE9BVF9QQVRURVJOIiwiU0NJRU5USUZJQ19XSVRIT1VUX0RPVCIsInNpZ24iLCJkaWdpdHMiLCJQT1NJVElWRV9JTkZJTklUWSIsIk5hTiIsInYiLCJyZXMiLCJpc05hTiIsImlzT2N0Q29kZSIsImlzRGVjQ29kZSIsImhhc0RpZ2l0cyIsImJpbmFyeSIsImRlY2ltYWwiLCJoZXhhZGVjaW1hbCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsImNhbWVsY2FzZSIsImNhbm9uaWNhbCIsIk1hcmsiLCJnZXRTbmlwcGV0IiwibWF4TGVuZ3RoIiwic25pcHBldCIsIndoZXJlIiwiQ09OVEVYVF9GTE9XX0lOIiwiQ09OVEVYVF9GTE9XX09VVCIsIkNPTlRFWFRfQkxPQ0tfSU4iLCJDT05URVhUX0JMT0NLX09VVCIsIkNIT01QSU5HX0NMSVAiLCJDSE9NUElOR19TVFJJUCIsIkNIT01QSU5HX0tFRVAiLCJQQVRURVJOX05PTl9QUklOVEFCTEUiLCJQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUyIsIlBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTIiwiUEFUVEVSTl9UQUdfSEFORExFIiwiUEFUVEVSTl9UQUdfVVJJIiwiaXNfRU9MIiwiaXNfV0hJVEVfU1BBQ0UiLCJpc19XU19PUl9FT0wiLCJpc19GTE9XX0lORElDQVRPUiIsImZyb21IZXhDb2RlIiwibGMiLCJzaW1wbGVFc2NhcGVTZXF1ZW5jZSIsImNoYXJGcm9tQ29kZXBvaW50Iiwic2ltcGxlRXNjYXBlQ2hlY2siLCJzaW1wbGVFc2NhcGVNYXAiLCJnZW5lcmF0ZUVycm9yIiwiZmlsZW5hbWUiLCJ0aHJvd1dhcm5pbmciLCJvbldhcm5pbmciLCJkaXJlY3RpdmVIYW5kbGVycyIsIllBTUwiLCJtYWpvciIsIm1pbm9yIiwiY2hlY2tMaW5lQnJlYWtzIiwiVEFHIiwidGFnTWFwIiwiY2FwdHVyZVNlZ21lbnQiLCJjaGVja0pzb24iLCJfcG9zaXRpb24iLCJfbGVuZ3RoIiwiX2NoYXJhY3RlciIsIm1lcmdlTWFwcGluZ3MiLCJkZXN0aW5hdGlvbiIsIm92ZXJyaWRhYmxlS2V5cyIsInF1YW50aXR5Iiwic3RvcmVNYXBwaW5nUGFpciIsImtleVRhZyIsImtleU5vZGUiLCJ2YWx1ZU5vZGUiLCJzdGFydExpbmUiLCJzdGFydFBvcyIsImpzb24iLCJyZWFkTGluZUJyZWFrIiwic2tpcFNlcGFyYXRpb25TcGFjZSIsImFsbG93Q29tbWVudHMiLCJjaGVja0luZGVudCIsImxpbmVCcmVha3MiLCJsaW5lSW5kZW50IiwidGVzdERvY3VtZW50U2VwYXJhdG9yIiwid3JpdGVGb2xkZWRMaW5lcyIsInJlYWRCbG9ja1NlcXVlbmNlIiwibm9kZUluZGVudCIsIl9saW5lIiwiX2FuY2hvciIsImFuY2hvciIsImRldGVjdGVkIiwiYW5jaG9yTWFwIiwiY29tcG9zZU5vZGUiLCJyZWFkVGFnUHJvcGVydHkiLCJ0YWdIYW5kbGUiLCJ0YWdOYW1lIiwiaXNWZXJiYXRpbSIsImlzTmFtZWQiLCJyZWFkQW5jaG9yUHJvcGVydHkiLCJwYXJlbnRJbmRlbnQiLCJub2RlQ29udGV4dCIsImFsbG93VG9TZWVrIiwiYWxsb3dDb21wYWN0IiwiYWxsb3dCbG9ja1N0eWxlcyIsImFsbG93QmxvY2tTY2FsYXJzIiwiYWxsb3dCbG9ja0NvbGxlY3Rpb25zIiwidHlwZUluZGV4IiwidHlwZVF1YW50aXR5IiwiZmxvd0luZGVudCIsImJsb2NrSW5kZW50IiwiaW5kZW50U3RhdHVzIiwiYXROZXdMaW5lIiwiaGFzQ29udGVudCIsImxpc3RlbmVyIiwiZm9sbG93aW5nIiwiX3BvcyIsImF0RXhwbGljaXRLZXkiLCJyZWFkQmxvY2tNYXBwaW5nIiwidGVybWluYXRvciIsImlzUGFpciIsImlzRXhwbGljaXRQYWlyIiwiaXNNYXBwaW5nIiwicmVhZE5leHQiLCJyZWFkRmxvd0NvbGxlY3Rpb24iLCJjYXB0dXJlU3RhcnQiLCJmb2xkaW5nIiwiY2hvbXBpbmciLCJkaWRSZWFkQ29udGVudCIsImRldGVjdGVkSW5kZW50IiwidGV4dEluZGVudCIsImVtcHR5TGluZXMiLCJhdE1vcmVJbmRlbnRlZCIsInJlYWRCbG9ja1NjYWxhciIsImNhcHR1cmVFbmQiLCJyZWFkU2luZ2xlUXVvdGVkU2NhbGFyIiwiaGV4TGVuZ3RoIiwiaGV4UmVzdWx0IiwicmVhZERvdWJsZVF1b3RlZFNjYWxhciIsInJlYWRBbGlhcyIsIndpdGhpbkZsb3dDb2xsZWN0aW9uIiwiaGFzUGVuZGluZ0NvbnRlbnQiLCJfbGluZVN0YXJ0IiwiX2xpbmVJbmRlbnQiLCJfa2luZCIsInJlYWRQbGFpblNjYWxhciIsInR5cGVNYXAiLCJyZWFkRG9jdW1lbnQiLCJkaXJlY3RpdmVOYW1lIiwiZGlyZWN0aXZlQXJncyIsImRvY3VtZW50U3RhcnQiLCJoYXNEaXJlY3RpdmVzIiwibGVnYWN5IiwiZG9jdW1lbnRzIiwibG9hZERvY3VtZW50cyIsImxvYWRBbGwiLCJpdGVyYXRvciIsImxvYWQiLCJzYWZlTG9hZEFsbCIsIm91dHB1dCIsInNhZmVMb2FkIiwibG9hZGVyIiwiZHVtcGVyIiwiZGVwcmVjYXRlZCIsIkZBSUxTQUZFX1NDSEVNQSIsIkpTT05fU0NIRU1BIiwiQ09SRV9TQ0hFTUEiLCJNSU5JTUFMX1NDSEVNQSIsIlNBRkVfU0NIRU1BIiwiREVGQVVMVF9TQ0hFTUEiLCJjb21wb3NlIiwiYWRkQ29uc3RydWN0b3IiLCJ5YW1sIiwic3RyaXBXaXRob3V0V2hpdGVzcGFjZSIsInN0cmlwV2l0aFdoaXRlc3BhY2UiLCJjdXJyZW50Q2hhciIsIm5leHRDaGFyIiwiaW5zaWRlU3RyaW5nIiwiaW5zaWRlQ29tbWVudCIsInJldCIsInN0cmlwIiwid2hpdGVzcGFjZSIsInN0cmlwVHJhaWxpbmdTZXAiLCJ0aGVQYXRoIiwic2VwIiwicG90ZW50aWFsUGFyZW50IiwicGxhdGZvcm0iLCJsYXN0SW5kZXhPZiIsInVuZGVmaW5lZCIsIkNvbmZpZ09wcyIsInBhdGhJc0luc2lkZSIsInN0cmlwQ29tbWVudHMiLCJDT05GSUdfRklMRVMiLCJyZWFkRmlsZSIsInJlYWRGaWxlU3luYyIsImxvYWRDb25maWdGaWxlIiwiZmlsZSIsImV4dG5hbWUiLCJsb2FkWUFNTENvbmZpZ0ZpbGUiLCJsb2FkSlNPTkNvbmZpZ0ZpbGUiLCJnZXRCYXNlRGlyIiwiY29uZmlnRmlsZVBhdGgiLCJwcm9qZWN0UGF0aCIsIl9fZGlybmFtZSIsImdldExvb2t1cFBhdGgiLCJiYXNlZGlyIiwicmVsYXRpdmVUbyIsImZ1bGxQYXRoIiwiY29uZmlnQ29udGV4dCIsInJlc29sdmVkUGF0aCIsImxvYWRGcm9tRGlzayIsInNldENvbmZpZyIsImV4aXN0c1N5bmMiLCJvcyIsIkNvbmZpZ0ZpbGUiLCJDb25maWdDYWNoZSIsIkZpbGVGaW5kZXIiLCJQRVJTT05BTF9DT05GSUdfRElSIiwiaG9tZWRpciIsImxpbnRlckNvbnRleHQiLCJpZ25vcmUiLCJpZ25vcmVQYXRoIiwiYmFzZUNvbmZpZyIsImxvYWRPYmplY3QiLCJsb2FkU3BlY2lmaWNDb25maWciLCJjb25maWdGaWxlIiwiY2xpQ29uZmlnT3B0aW9ucyIsImNsaUNvbmZpZyIsImNvbmZpZ0tleSIsInNwZWNpZmljQ29uZmlnIiwicGVyc29uYWxDb25maWciLCJnZXRGaWxlbmFtZUZvckRpcmVjdG9yeSIsImNvbmZpZ3MiLCJnZXRMb2NhbENvbmZpZ0hpZXJhcmNoeSIsImxvY2FsQ29uZmlnRmlsZXMiLCJmaW5kTG9jYWxDb25maWdGaWxlcyIsInByb2plY3RDb25maWdQYXRoIiwibG9jYWxDb25maWdGaWxlIiwibG9jYWxDb25maWdIaWVyYXJjaHlDYWNoZSIsImdldEhpZXJhcmNoeUxvY2FsQ29uZmlncyIsImxvY2FsQ29uZmlnSGllcmFyY2h5Iiwic2V0SGllcmFyY2h5TG9jYWxDb25maWdzIiwibG9jYWxDb25maWciLCJyb290IiwiZ2V0UGVyc29uYWxDb25maWciLCJub0NvbmZpZ0Vycm9yIiwibWVzc2FnZVRlbXBsYXRlIiwibWVzc2FnZURhdGEiLCJmaWxlc0V4YW1pbmVkIiwiZ2V0Q29uZmlnSGllcmFyY2h5IiwicmVsYXRpdmVQYXRoIiwicmVsYXRpdmUiLCJwYXRoTWF0Y2hlc0dsb2JzIiwiZXhjbHVkZWRGaWxlcyIsImxvY2FsQ29uZmlnRmluZGVyIiwiZmluZEFsbEluRGlyZWN0b3J5QW5kUGFyZW50cyIsImdldENvbmZpZ1ZlY3RvciIsImdldE1lcmdlZENvbmZpZyIsImdldENvbmZpZ0Zyb21WZWN0b3IiLCJzZXRNZXJnZWRDb25maWciLCJiYWxhbmNlZCIsImEiLCJtYXliZU1hdGNoIiwicHJlIiwicG9zdCIsImJlZ3MiLCJiZWciLCJhaSIsImJpIiwieHMiLCJmbiIsImV4cGFuZCIsImlzVG9wIiwiZXhwYW5zaW9ucyIsImlzTnVtZXJpY1NlcXVlbmNlIiwiaXNBbHBoYVNlcXVlbmNlIiwiaXNTZXF1ZW5jZSIsImlzT3B0aW9ucyIsImVzY0Nsb3NlIiwicGFyc2VDb21tYVBhcnRzIiwicGFydHMiLCJwb3N0UGFydHMiLCJlbWJyYWNlIiwiTiIsInkiLCJpbmNyIiwibHRlIiwiZ3RlIiwicGFkIiwiaXNQYWRkZWQiLCJuZWVkIiwieiIsImV4cGFuc2lvbiIsImVzY1NsYXNoIiwiZXNjT3BlbiIsImVzY0NvbW1hIiwiZXNjUGVyaW9kIiwiZXNjYXBlQnJhY2VzIiwidW5lc2NhcGVCcmFjZXMiLCJyYW5kb20iLCJNaW5pbWF0Y2giLCJlciIsIkdMT0JTVEFSIiwicGxUeXBlcyIsIiEiLCJvcGVuIiwiY2xvc2UiLCI/IiwiQCIsInFtYXJrIiwic3RhciIsInR3b1N0YXJEb3QiLCJ0d29TdGFyTm9Eb3QiLCJyZVNwZWNpYWxzIiwic2xhc2hTcGxpdCIsImV4dCIsIlR5cGVFcnJvciIsIm5vY29tbWVudCIsInRyaW0iLCJtYWtlIiwiYnJhY2VFeHBhbmQiLCJub2JyYWNlIiwiZGVmYXVsdHMiLCJkZWYiLCJvcmlnIiwiZGVidWciLCJfbWFkZSIsInBhcnNlTmVnYXRlIiwiZ2xvYlNldCIsImdsb2JQYXJ0cyIsInNpIiwibmVnYXRlT2Zmc2V0Iiwibm9uZWdhdGUiLCJpc1N1YiIsIm5vZ2xvYnN0YXIiLCJzdGF0ZUNoYXIiLCJyZSIsImhhc01hZ2ljIiwibm9jYXNlIiwiZXNjYXBpbmciLCJwYXR0ZXJuTGlzdFN0YWNrIiwibmVnYXRpdmVMaXN0cyIsImluQ2xhc3MiLCJyZUNsYXNzU3RhcnQiLCJjbGFzc1N0YXJ0IiwicGF0dGVyblN0YXJ0IiwiZG90IiwiY2xlYXJTdGF0ZUNoYXIiLCJub2V4dCIsInJlU3RhcnQiLCJwbCIsInJlRW5kIiwiY3MiLCJzdWJzdHJpbmciLCJzcCIsIlNVQlBBUlNFIiwiYWRkUGF0dGVyblN0YXJ0IiwibmwiLCJubEJlZm9yZSIsIm5sRmlyc3QiLCJubExhc3QiLCJubEFmdGVyIiwib3BlblBhcmVuc0JlZm9yZSIsImNsZWFuQWZ0ZXIiLCJkb2xsYXIiLCJuZXdSZSIsInJlZ0V4cCIsIl9nbG9iIiwiX3NyYyIsIm1ha2VSZSIsInR3b1N0YXIiLCJtbSIsIm5vbnVsbCIsInBhcnRpYWwiLCJoaXQiLCJtYXRjaE9uZSIsImZsaXBOZWdhdGUiLCJmaSIsImZyIiwicHIiLCJzd2FsbG93ZWUiLCJydWxlc0RpciIsImxvYWRSdWxlcyIsIl9ydWxlcyIsInJ1bGVNb2R1bGUiLCJuZXdSdWxlcyIsImRlZmluZSIsImFsbFJ1bGVzIiwicnVsZSIsIkV2ZW50RW1pdHRlciIsIlJ1bGVzIiwiZ2V0UnVsZVNldmVyaXR5Iiwic3VwZXIiLCJtZXNzYWdlcyIsInJlbW92ZUFsbExpc3RlbmVycyIsInBhcnNlUmVzdWx0IiwicGFyc2VUZXh0IiwiZmF0YWwiLCJjdXJyZW50RmlsZW5hbWUiLCJub3JtYWxpemUiLCJydWxlQ3JlYXRvciIsInJ1bGVDb250ZXh0IiwiZnJlZXplIiwicmVwb3J0IiwiZGVzY3JpcHRvciIsInByb2JsZW0iLCJub2RlVHlwZSIsImVuZExpbmUiLCJlbmRDb2x1bW4iLCJjcmVhdGVQcm9ibGVtRnJvbURlc2NyaXB0b3IiLCJzZWxlY3RvciIsIm9uIiwidHJhdmVyc2UiLCJsaW5lRGlmZiIsIkxpbnRlciIsIkNvbmZpZyIsImNhbGN1bGF0ZVN0YXRzUGVyUnVuIiwicmVzdWx0cyIsInN0YXQiLCJlcnJvckNvdW50Iiwid2FybmluZ0NvdW50IiwicHJvY2Vzc1RleHQiLCJsaW50ZXIiLCJjb25maWdIZWxwZXIiLCJmaWxlRXh0ZW5zaW9uIiwicmVzZXQiLCJzdGF0cyIsImNhbGN1bGF0ZVN0YXRzUGVyRmlsZSIsInZlcmlmeSIsIkNMSUVuZ2luZSIsImV4ZWN1dGVPbkZpbGUiLCJwcm9jZXNzRmlsZSIsImZvcm1hdCIsImZvcm1hdHRlclBhdGgiLCJnZXRGb3JtYXR0ZXIiLCJjYXN0QXJyYXkiLCJ0eXBlT2YiLCJvZiIsImxlbiQiLCJ0eXBlc0Nhc3QiLCJjYXN0RmllbGRzIiwicmVzdWx0T2JqJCIsInR5cGVDYXN0IiwidHlwZU9iaiIsInN0cnVjdHVyZSIsImNhc3RGdW5jIiwiY3VzdG9tVHlwZXMiLCJjYXN0IiwiY2FzdFR1cGxlIiwidmFsdWVUeXBlIiwiVW5kZWZpbmVkIiwiTnVsbCIsIkJvb2xlYW4iLCJJbnQiLCJGbG9hdCIsInRoYXQiLCJzcGVjaWFsIiwidG9rZW5SZWdleCIsImNvbnN1bWVPcCIsIm1heWJlQ29uc3VtZU9wIiwiY29uc3VtZUxpc3QiLCJhcmckIiwiaGFzRGVsaW1pdGVycyIsInVudGlsVGVzdCIsImNvbnN1bWVFbGVtZW50IiwiY29uc3VtZUFycmF5IiwiY29uc3VtZVR1cGxlIiwiY29uc3VtZUZpZWxkcyIsImNvbnN1bWVWYWx1ZSIsIm91dCIsIm5vdCQiLCJvcmlnVG9rZW5zIiwiZmluYWxSZXN1bHQiLCJ4JCIsInkkIiwiY29uc3VtZVRvcExldmVsIiwicGFyc2VTdHJpbmciLCJwYXJzZWRUeXBlUGFyc2UiLCJwYXJzZWRUeXBlIiwiZGVmYXVsdFR5cGUiLCJjaGVja1N0cnVjdHVyZSIsImlucHV0S2V5cyIsIm51bUlucHV0S2V5cyIsIm51bU9mS2V5cyIsImNoZWNrTXVsdGlwbGUiLCJzdWJzZXQiLCJjaGVja0ZpZWxkcyIsImNoZWNrQXJyYXkiLCJjaGVja1R1cGxlIiwic2V0dGluZyIsInZhbGlkYXRlIiwidHVwbGUiLCJpZGVudGlmaWVyUmVnZXgiLCJwZWVrIiwiY29uc3VtZUlkZW50IiwiY29uc3VtZUZpZWxkIiwiY29uc3VtZVR5cGVzIiwibWF5YmVDb25zdW1lU3RydWN0dXJlIiwiY29tcG9uZW50cyIsImZpZWxkcyIsImNvbnN1bWVUeXBlIiwid2lsZGNhcmQiLCJ0eXBlc1NvRmFyIiwiaW4kIiwiZSQiLCJ3b3Jkd3JhcCIsInN0b3AiLCJtb2RlIiwiYWNjIiwicmF3Q2h1bmsiLCJjaHVuayIsInNvZnQiLCJoYXJkIiwiZ2V0UHJlVGV4dCIsInNldEhlbHBTdHlsZURlZmF1bHRzIiwiZ2VuZXJhdGVIZWxwRm9yT3B0aW9uIiwiZ2VuZXJhdGVIZWxwIiwicGFkQW1vdW50IiwicmVwZWF0U3RyaW5nJCIsImludGVycCIsIm9wdGlvbiIsIm1heFdpZHRoIiwibWFpbk5hbWUiLCJzaG9ydE5hbWVzIiwibG9uZ05hbWVzIiwiYWxpYXNTZXBhcmF0b3IiLCJ0eXBlU2VwYXJhdG9yIiwiaW5pdGlhbEluZGVudCIsIm5hbWVzIiwibmFtZXNTdHJpbmciLCJuYW1lc1N0cmluZ0xlbiIsInR5cGVTZXBhcmF0b3JTdHJpbmciLCJ0eXBlU2VwYXJhdG9yU3RyaW5nTGVuIiwibmVnYXRlTmFtZSIsImJvb2xlYW4iLCJ3cmFwIiwiaGVscFN0eWxlIiwiZGVzY3JpcHRpb25TZXBhcmF0b3IiLCJzZWNvbmRhcnlJbmRlbnQiLCJtYXhQYWRGYWN0b3IiLCJnZXRPcHRpb24iLCJzdGRvdXQiLCJvcHRpb25OYW1lIiwiZGVmYXVsdFN0cmluZyIsInJlc3RQb3NpdGlvbmFsU3RyaW5nIiwiZnVsbERlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb25TdHJpbmciLCJleGFtcGxlU3RyaW5nIiwiZXhhbXBsZXMiLCJyZXN0IiwicGVyaW9kIiwiaXNUVFkiLCJjb2x1bW5zIiwicmVzdFBvc2l0aW9uYWwiLCJsb25nRGVzY3JpcHRpb24iLCJleGFtcGxlIiwicHJlcGVuZCIsImFwcGVuZCIsInNob3dIaWRkZW4iLCJpbnRlcnBvbGF0ZSIsIm9wdGlvbkNvdW50IiwidG90YWxQcmVMZW4iLCJwcmVMZW5zIiwiaXRlbSIsImRlc2NQYXJ0cyIsImRlc2MiLCJwcmVMZW4iLCJzb3J0ZWRQcmVMZW5zIiwibWF4UHJlTGVuIiwiZGVzY1NlcExlbiIsImZ1bGxXcmFwQ291bnQiLCJwYXJ0aWFsV3JhcENvdW50IiwiZGVzY0xlbiIsImluaXRpYWxTcGFjZSIsIndyYXBBbGxGdWxsIiwiaGlkZGVuIiwiaGVhZGluZyIsIl9fd2VicGFja19hbWRfb3B0aW9uc19fIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImNvbGxhdG9yIiwiSW50bCIsIkNvbGxhdG9yIiwic2Vuc2l0aXZpdHkiLCJwcmV2Um93Iiwic3RyMkNoYXIiLCJMZXZlbnNodGVpbiIsInN0cjEiLCJzdHIyIiwiY3VyQ29sIiwibmV4dENvbCIsInN0ckNtcCIsInVzZUNvbGxhdG9yIiwic3RyMUxlbiIsInN0cjJMZW4iLCJjb21wYXJlIiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicFNsaWNlIiwiT2JqZWN0X2tleXMiLCJvYmoiLCJkZWVwRXF1YWwiLCJhY3R1YWwiLCJleHBlY3RlZCIsImlzTnVtYmVyTmFOIiwiaXNVbmRlZmluZWRPck51bGwiLCJpc0FyZ3VtZW50cyIsImthIiwia2IiLCJvYmpFcXVpdiIsIlBJIiwiY2VpbCIsImxvd2VyIiwidXBwZXIiLCJwYXNzZWQiLCJmYWlsZWQiLCJzbGljZSQiLCJzZWVuIiwidmFsIiwibWVtbyIsInhzcyIsInlzcyIsImokIiwibGVuMSQiLCJvdXRlciIsImZ1bmN0aW9ucyIsImNvbXBvc2UkIiwieXMiLCJtaW5MZW5ndGgiLCJscmVzdWx0JCIsImZuJCIsIm1lbW9pemUiLCJnIiwiZGVlcElzIiwicGFyc2VMZXZuIiwiY2FtZWxpemVLZXlzIiwibWFpbiIsImFzc2lnbk9wdCIsInJlcGxhY2VSZWdleCIsImxpYk9wdGlvbnMiLCJyZXF1aXJlZCIsInBvc2l0aW9uYWxBbnl3aGVyZSIsInR5cGVBbGlhc2VzIiwiY29uY2F0UmVwZWF0ZWRBcnJheXMiLCJtZXJnZVJlcGVhdGVkT2JqZWN0cyIsInBhcnNlZFBvc3NpYmlsaXRpZXMiLCJwb3NzaWJpbGl0eSIsInJhd0RlcGVuZHNUeXBlIiwiZGVwZW5kc09wdHMiLCJkZXBlbmRzVHlwZSIsImNyYSIsInBhcnNlZFBvc3NpYmxpdGllcyIsImRlcGVuZHNPbiIsImFsaWFzZXMiLCJwb3NzaWJseU1lYW50IiwicG9zaXRpb25hbCIsIm92ZXJyaWRlUmVxdWlyZWQiLCJzZXRWYWx1ZSIsInNldERlZmF1bHRzIiwiY2hlY2tSZXF1aXJlZCIsIm11dHVhbGx5RXhjbHVzaXZlRXJyb3IiLCJjaGVja011dHVhbGx5RXhjbHVzaXZlIiwiY2hlY2tEZXBlbmRlbmN5IiwiY2hlY2tEZXBlbmRlbmNpZXMiLCJjaGVja1Byb3AiLCJzaG9ydCIsImFyZ05hbWUiLCJ1c2luZ0Fzc2lnbiIsImZsYWciLCJ2YWxQcmltZSIsIm5lZ2F0ZWQiLCJub2VkTmFtZSIsIm9uZVZhbHVlUGVyRmxhZyIsIm93biIsImltcG9ydCQiLCJwcmVzZW50IiwiayQiLCJsZW4yJCIsIm11dHVhbGx5RXhjbHVzaXZlIiwidGFyZ2V0T3B0aW9uTmFtZXMiLCJ0YXJnZXRPcHRpb25OYW1lIiwidGFyZ2V0T3B0aW9uIiwiZGVwZW5kZW5jaWVzTWV0IiwiTlVNIiwicGFyc2VBcmd2Iiwib3B0aW9uYXRvciIsImVudW0iLCJkZWZhdWx0IiwiY2xpIiwiY3VycmVudE9wdGlvbnMiLCJoYW5kbGVDb25maWd1cmF0aW9uIiwiaGFuZGxlSW5pdGlhbGl6ZSIsImhlbHAiLCJocnN0YXJ0IiwiaHJ0aW1lIiwiZW5naW5lIiwiZXhlY3V0ZU9uRmlsZXMiLCJmb3JtYXR0ZXIiLCJpbmZvIiwicHJpbnRSZXN1bHRzIiwiaHJlbmQiLCJ0b0ZpeGVkIiwiY29udGVudHMiLCJ3cml0ZUZpbGVTeW5jIiwic2V0dXBDb25maWd1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QSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsS0FBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsT0FBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsTUFBQSxJQUNBQyxLQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0FDLEtBQUEsSUFDQUMsSUFBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsS0FBQSxJQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxPQUFBLElBQ0FDLE1BQUEsSUFDQUMsS0FBQSxJQUNBQyxPQUFBLElBQ0FDLE1BQUEsSUFDQUMsTUFBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsTUFBQSxJQUNBQyxPQUFBLElBQ0FDLEtBQUEsSUFDQUMsTUFBQSxJQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxPQUFBLElBQ0FDLE1BQUEsSUFDQUMsS0FBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsTUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsT0FBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsTUFBQSxJQUNBQyxPQUFBLElBQ0FDLEtBQUEsSUFDQUMsT0FBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0FDLEtBQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0FDLEtBQUEsSUFDQUMsTUFBQSxJQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxLQUFBLElBQ0FDLEtBQUEsSUFDQUMsS0FBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsS0FBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsUUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsTUFBQSxJQUNBQyxLQUFBLElBQ0FDLE1BQUEsSUFDQUMsT0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxRQUFBLElBQ0FDLEdBQUEsSUFDQUMsSUFBQSxJQUNBQyxNQUFBLElBQ0FDLElBQUEsSUFDQUMsUUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsS0FBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsUUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsTUFBQSxJQUNBQyxLQUFBLElBQ0FDLE1BQUEsSUFDQUMsT0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxRQUFBLElBQ0FwakMsR0FBQSxJQUNBcWpDLElBQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0F0akMsSUFBQSxJQUNBdWpDLFFBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsTUFBQSxJQUNBQyxTQUFBLElBQ0FDLE1BQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLEtBQUEsSUFDQUMsT0FBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLE1BQUEsSUFDQUMsTUFBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsTUFBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsTUFBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsS0FBQSxJQUNBQyxPQUFBLElBQ0FDLE9BQUEsSUFDQUMsTUFBQSxJQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0FDLE1BQUEsSUFDQUMsS0FBQSxJQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsS0FBQSxJQUNBQyxNQUFBLElBQ0FDLFFBQUEsSUFDQUMsS0FBQSxJQUNBQyxLQUFBLElBQ0FDLEtB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QUFBQSxDQUFBeW5ELEdBQ0E5eEMsRUFBQXN4RCxjQUpBLGVBSUE3dkQsS0FBQUMsVUFBQTJ2RCxFQUFBLFNBQ0ssTUFBQXAxRCxHQUVMLE9BREE0RCxRQUFBRSxNQUFBOUQsRUFBQTdLLFNBQ0EsRUFFQSxTQXBCQW1nRSxDQU5BajBELEVBQUE5QyxFQUFBek4sUUFBQXVRLEtBR0F1QyxRQUFBRSxNQUFBLHVDQUNBLEdBeUJBdlYsRUFBQUQsUUFBQWdtRSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIHdhc20gbW9kdWxlc1xuIFx0dmFyIGluc3RhbGxlZFdhc21Nb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBvYmplY3Qgd2l0aCBhbGwgY29tcGlsZWQgV2ViQXNzZW1ibHkuTW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy53ID0ge307XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3NSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBZQU1MRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcblxudmFyIFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyA9IFtcbiAgJ2tpbmQnLFxuICAncmVzb2x2ZScsXG4gICdjb25zdHJ1Y3QnLFxuICAnaW5zdGFuY2VPZicsXG4gICdwcmVkaWNhdGUnLFxuICAncmVwcmVzZW50JyxcbiAgJ2RlZmF1bHRTdHlsZScsXG4gICdzdHlsZUFsaWFzZXMnXG5dO1xuXG52YXIgWUFNTF9OT0RFX0tJTkRTID0gW1xuICAnc2NhbGFyJyxcbiAgJ3NlcXVlbmNlJyxcbiAgJ21hcHBpbmcnXG5dO1xuXG5mdW5jdGlvbiBjb21waWxlU3R5bGVBbGlhc2VzKG1hcCkge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKG1hcCAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIG1hcFtzdHlsZV0uZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgcmVzdWx0W1N0cmluZyhhbGlhcyldID0gc3R5bGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIFR5cGUodGFnLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBvcHRpb24gXCInICsgbmFtZSArICdcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVE9ETzogQWRkIHRhZyBmb3JtYXQgY2hlY2suXG4gIHRoaXMudGFnICAgICAgICAgID0gdGFnO1xuICB0aGlzLmtpbmQgICAgICAgICA9IG9wdGlvbnNbJ2tpbmQnXSAgICAgICAgIHx8IG51bGw7XG4gIHRoaXMucmVzb2x2ZSAgICAgID0gb3B0aW9uc1sncmVzb2x2ZSddICAgICAgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdGhpcy5jb25zdHJ1Y3QgICAgPSBvcHRpb25zWydjb25zdHJ1Y3QnXSAgICB8fCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YTsgfTtcbiAgdGhpcy5pbnN0YW5jZU9mICAgPSBvcHRpb25zWydpbnN0YW5jZU9mJ10gICB8fCBudWxsO1xuICB0aGlzLnByZWRpY2F0ZSAgICA9IG9wdGlvbnNbJ3ByZWRpY2F0ZSddICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50ICAgID0gb3B0aW9uc1sncmVwcmVzZW50J10gICAgfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgPSBvcHRpb25zWydkZWZhdWx0U3R5bGUnXSB8fCBudWxsO1xuICB0aGlzLnN0eWxlQWxpYXNlcyA9IGNvbXBpbGVTdHlsZUFsaWFzZXMob3B0aW9uc1snc3R5bGVBbGlhc2VzJ10gfHwgbnVsbCk7XG5cbiAgaWYgKFlBTUxfTk9ERV9LSU5EUy5pbmRleE9mKHRoaXMua2luZCkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1Vua25vd24ga2luZCBcIicgKyB0aGlzLmtpbmQgKyAnXCIgaXMgc3BlY2lmaWVkIGZvciBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHlwZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKmVzbGludC1kaXNhYmxlIG1heC1sZW4qL1xuXG52YXIgY29tbW9uICAgICAgICA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgWUFNTEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG52YXIgVHlwZSAgICAgICAgICA9IHJlcXVpcmUoJy4vdHlwZScpO1xuXG5cbmZ1bmN0aW9uIGNvbXBpbGVMaXN0KHNjaGVtYSwgbmFtZSwgcmVzdWx0KSB7XG4gIHZhciBleGNsdWRlID0gW107XG5cbiAgc2NoZW1hLmluY2x1ZGUuZm9yRWFjaChmdW5jdGlvbiAoaW5jbHVkZWRTY2hlbWEpIHtcbiAgICByZXN1bHQgPSBjb21waWxlTGlzdChpbmNsdWRlZFNjaGVtYSwgbmFtZSwgcmVzdWx0KTtcbiAgfSk7XG5cbiAgc2NoZW1hW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKGN1cnJlbnRUeXBlKSB7XG4gICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKHByZXZpb3VzVHlwZSwgcHJldmlvdXNJbmRleCkge1xuICAgICAgaWYgKHByZXZpb3VzVHlwZS50YWcgPT09IGN1cnJlbnRUeXBlLnRhZyAmJiBwcmV2aW91c1R5cGUua2luZCA9PT0gY3VycmVudFR5cGUua2luZCkge1xuICAgICAgICBleGNsdWRlLnB1c2gocHJldmlvdXNJbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXN1bHQucHVzaChjdXJyZW50VHlwZSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgIHJldHVybiBleGNsdWRlLmluZGV4T2YoaW5kZXgpID09PSAtMTtcbiAgfSk7XG59XG5cblxuZnVuY3Rpb24gY29tcGlsZU1hcCgvKiBsaXN0cy4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzY2FsYXI6IHt9LFxuICAgICAgICBzZXF1ZW5jZToge30sXG4gICAgICAgIG1hcHBpbmc6IHt9LFxuICAgICAgICBmYWxsYmFjazoge31cbiAgICAgIH0sIGluZGV4LCBsZW5ndGg7XG5cbiAgZnVuY3Rpb24gY29sbGVjdFR5cGUodHlwZSkge1xuICAgIHJlc3VsdFt0eXBlLmtpbmRdW3R5cGUudGFnXSA9IHJlc3VsdFsnZmFsbGJhY2snXVt0eXBlLnRhZ10gPSB0eXBlO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgYXJndW1lbnRzW2luZGV4XS5mb3JFYWNoKGNvbGxlY3RUeXBlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIFNjaGVtYShkZWZpbml0aW9uKSB7XG4gIHRoaXMuaW5jbHVkZSAgPSBkZWZpbml0aW9uLmluY2x1ZGUgIHx8IFtdO1xuICB0aGlzLmltcGxpY2l0ID0gZGVmaW5pdGlvbi5pbXBsaWNpdCB8fCBbXTtcbiAgdGhpcy5leHBsaWNpdCA9IGRlZmluaXRpb24uZXhwbGljaXQgfHwgW107XG5cbiAgdGhpcy5pbXBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgaWYgKHR5cGUubG9hZEtpbmQgJiYgdHlwZS5sb2FkS2luZCAhPT0gJ3NjYWxhcicpIHtcbiAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdUaGVyZSBpcyBhIG5vbi1zY2FsYXIgdHlwZSBpbiB0aGUgaW1wbGljaXQgbGlzdCBvZiBhIHNjaGVtYS4gSW1wbGljaXQgcmVzb2x2aW5nIG9mIHN1Y2ggdHlwZXMgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuY29tcGlsZWRJbXBsaWNpdCA9IGNvbXBpbGVMaXN0KHRoaXMsICdpbXBsaWNpdCcsIFtdKTtcbiAgdGhpcy5jb21waWxlZEV4cGxpY2l0ID0gY29tcGlsZUxpc3QodGhpcywgJ2V4cGxpY2l0JywgW10pO1xuICB0aGlzLmNvbXBpbGVkVHlwZU1hcCAgPSBjb21waWxlTWFwKHRoaXMuY29tcGlsZWRJbXBsaWNpdCwgdGhpcy5jb21waWxlZEV4cGxpY2l0KTtcbn1cblxuXG5TY2hlbWEuREVGQVVMVCA9IG51bGw7XG5cblxuU2NoZW1hLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZVNjaGVtYSgpIHtcbiAgdmFyIHNjaGVtYXMsIHR5cGVzO1xuXG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHNjaGVtYXMgPSBTY2hlbWEuREVGQVVMVDtcbiAgICAgIHR5cGVzID0gYXJndW1lbnRzWzBdO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDI6XG4gICAgICBzY2hlbWFzID0gYXJndW1lbnRzWzBdO1xuICAgICAgdHlwZXMgPSBhcmd1bWVudHNbMV07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignV3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgU2NoZW1hLmNyZWF0ZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgc2NoZW1hcyA9IGNvbW1vbi50b0FycmF5KHNjaGVtYXMpO1xuICB0eXBlcyA9IGNvbW1vbi50b0FycmF5KHR5cGVzKTtcblxuICBpZiAoIXNjaGVtYXMuZXZlcnkoZnVuY3Rpb24gKHNjaGVtYSkgeyByZXR1cm4gc2NoZW1hIGluc3RhbmNlb2YgU2NoZW1hOyB9KSkge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdTcGVjaWZpZWQgbGlzdCBvZiBzdXBlciBzY2hlbWFzIChvciBhIHNpbmdsZSBTY2hlbWEgb2JqZWN0KSBjb250YWlucyBhIG5vbi1TY2hlbWEgb2JqZWN0LicpO1xuICB9XG5cbiAgaWYgKCF0eXBlcy5ldmVyeShmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gdHlwZSBpbnN0YW5jZW9mIFR5cGU7IH0pKSB7XG4gICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1NwZWNpZmllZCBsaXN0IG9mIFlBTUwgdHlwZXMgKG9yIGEgc2luZ2xlIFR5cGUgb2JqZWN0KSBjb250YWlucyBhIG5vbi1UeXBlIG9iamVjdC4nKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2NoZW1hKHtcbiAgICBpbmNsdWRlOiBzY2hlbWFzLFxuICAgIGV4cGxpY2l0OiB0eXBlc1xuICB9KTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWE7XG4iLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gaXNOb3RoaW5nKHN1YmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3ViamVjdCA9PT0gJ3VuZGVmaW5lZCcpIHx8IChzdWJqZWN0ID09PSBudWxsKTtcbn1cblxuXG5mdW5jdGlvbiBpc09iamVjdChzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnKSAmJiAoc3ViamVjdCAhPT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gdG9BcnJheShzZXF1ZW5jZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShzZXF1ZW5jZSkpIHJldHVybiBzZXF1ZW5jZTtcbiAgZWxzZSBpZiAoaXNOb3RoaW5nKHNlcXVlbmNlKSkgcmV0dXJuIFtdO1xuXG4gIHJldHVybiBbIHNlcXVlbmNlIF07XG59XG5cblxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCBrZXksIHNvdXJjZUtleXM7XG5cbiAgaWYgKHNvdXJjZSkge1xuICAgIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHNvdXJjZUtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAga2V5ID0gc291cmNlS2V5c1tpbmRleF07XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cblxuZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgY291bnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnLCBjeWNsZTtcblxuICBmb3IgKGN5Y2xlID0gMDsgY3ljbGUgPCBjb3VudDsgY3ljbGUgKz0gMSkge1xuICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIGlzTmVnYXRpdmVaZXJvKG51bWJlcikge1xuICByZXR1cm4gKG51bWJlciA9PT0gMCkgJiYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gMSAvIG51bWJlcik7XG59XG5cblxubW9kdWxlLmV4cG9ydHMuaXNOb3RoaW5nICAgICAgPSBpc05vdGhpbmc7XG5tb2R1bGUuZXhwb3J0cy5pc09iamVjdCAgICAgICA9IGlzT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMudG9BcnJheSAgICAgICAgPSB0b0FycmF5O1xubW9kdWxlLmV4cG9ydHMucmVwZWF0ICAgICAgICAgPSByZXBlYXQ7XG5tb2R1bGUuZXhwb3J0cy5pc05lZ2F0aXZlWmVybyA9IGlzTmVnYXRpdmVaZXJvO1xubW9kdWxlLmV4cG9ydHMuZXh0ZW5kICAgICAgICAgPSBleHRlbmQ7XG4iLCIvLyBKUy1ZQU1MJ3MgZGVmYXVsdCBzY2hlbWEgZm9yIGBzYWZlTG9hZGAgZnVuY3Rpb24uXG4vLyBJdCBpcyBub3QgZGVzY3JpYmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vL1xuLy8gVGhpcyBzY2hlbWEgaXMgYmFzZWQgb24gc3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hIGFuZCBpbmNsdWRlcyBtb3N0IG9mXG4vLyBleHRyYSB0eXBlcyBkZXNjcmliZWQgYXQgWUFNTCB0YWcgcmVwb3NpdG9yeS4gKGh0dHA6Ly95YW1sLm9yZy90eXBlLylcblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFNjaGVtYSh7XG4gIGluY2x1ZGU6IFtcbiAgICByZXF1aXJlKCcuL2NvcmUnKVxuICBdLFxuICBpbXBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvdGltZXN0YW1wJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9tZXJnZScpXG4gIF0sXG4gIGV4cGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9iaW5hcnknKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL29tYXAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL3BhaXJzJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zZXQnKVxuICBdXG59KTtcbiIsIi8vIFlBTUwgZXJyb3IgY2xhc3MuIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODQ1ODk4NFxuLy9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gWUFNTEV4Y2VwdGlvbihyZWFzb24sIG1hcmspIHtcbiAgLy8gU3VwZXIgY29uc3RydWN0b3JcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICB0aGlzLm5hbWUgPSAnWUFNTEV4Y2VwdGlvbic7XG4gIHRoaXMucmVhc29uID0gcmVhc29uO1xuICB0aGlzLm1hcmsgPSBtYXJrO1xuICB0aGlzLm1lc3NhZ2UgPSAodGhpcy5yZWFzb24gfHwgJyh1bmtub3duIHJlYXNvbiknKSArICh0aGlzLm1hcmsgPyAnICcgKyB0aGlzLm1hcmsudG9TdHJpbmcoKSA6ICcnKTtcblxuICAvLyBJbmNsdWRlIHN0YWNrIHRyYWNlIGluIGVycm9yIG9iamVjdFxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAvLyBDaHJvbWUgYW5kIE5vZGVKU1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIEZGLCBJRSAxMCsgYW5kIFNhZmFyaSA2Ky4gRmFsbGJhY2sgZm9yIG90aGVyc1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrIHx8ICcnO1xuICB9XG59XG5cblxuLy8gSW5oZXJpdCBmcm9tIEVycm9yXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbjtcblxuXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMubmFtZSArICc6ICc7XG5cbiAgcmVzdWx0ICs9IHRoaXMucmVhc29uIHx8ICcodW5rbm93biByZWFzb24pJztcblxuICBpZiAoIWNvbXBhY3QgJiYgdGhpcy5tYXJrKSB7XG4gICAgcmVzdWx0ICs9ICcgJyArIHRoaXMubWFyay50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBZQU1MRXhjZXB0aW9uO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS40LjBcbnZhciBGdW5jLCBMaXN0LCBPYmosIFN0ciwgTnVtLCBpZCwgaXNUeXBlLCByZXBsaWNhdGUsIHByZWx1ZGUsIHRvU3RyaW5nJCA9IHt9LnRvU3RyaW5nO1xuRnVuYyA9IHJlcXVpcmUoJy4vRnVuYy5qcycpO1xuTGlzdCA9IHJlcXVpcmUoJy4vTGlzdC5qcycpO1xuT2JqID0gcmVxdWlyZSgnLi9PYmouanMnKTtcblN0ciA9IHJlcXVpcmUoJy4vU3RyLmpzJyk7XG5OdW0gPSByZXF1aXJlKCcuL051bS5qcycpO1xuaWQgPSBmdW5jdGlvbih4KXtcbiAgcmV0dXJuIHg7XG59O1xuaXNUeXBlID0gY3VycnkkKGZ1bmN0aW9uKHR5cGUsIHgpe1xuICByZXR1cm4gdG9TdHJpbmckLmNhbGwoeCkuc2xpY2UoOCwgLTEpID09PSB0eXBlO1xufSk7XG5yZXBsaWNhdGUgPSBjdXJyeSQoZnVuY3Rpb24obiwgeCl7XG4gIHZhciBpJCwgcmVzdWx0cyQgPSBbXTtcbiAgZm9yIChpJCA9IDA7IGkkIDwgbjsgKytpJCkge1xuICAgIHJlc3VsdHMkLnB1c2goeCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufSk7XG5TdHIuZW1wdHkgPSBMaXN0LmVtcHR5O1xuU3RyLnNsaWNlID0gTGlzdC5zbGljZTtcblN0ci50YWtlID0gTGlzdC50YWtlO1xuU3RyLmRyb3AgPSBMaXN0LmRyb3A7XG5TdHIuc3BsaXRBdCA9IExpc3Quc3BsaXRBdDtcblN0ci50YWtlV2hpbGUgPSBMaXN0LnRha2VXaGlsZTtcblN0ci5kcm9wV2hpbGUgPSBMaXN0LmRyb3BXaGlsZTtcblN0ci5zcGFuID0gTGlzdC5zcGFuO1xuU3RyLmJyZWFrU3RyID0gTGlzdC5icmVha0xpc3Q7XG5wcmVsdWRlID0ge1xuICBGdW5jOiBGdW5jLFxuICBMaXN0OiBMaXN0LFxuICBPYmo6IE9iaixcbiAgU3RyOiBTdHIsXG4gIE51bTogTnVtLFxuICBpZDogaWQsXG4gIGlzVHlwZTogaXNUeXBlLFxuICByZXBsaWNhdGU6IHJlcGxpY2F0ZVxufTtcbnByZWx1ZGUuZWFjaCA9IExpc3QuZWFjaDtcbnByZWx1ZGUubWFwID0gTGlzdC5tYXA7XG5wcmVsdWRlLmZpbHRlciA9IExpc3QuZmlsdGVyO1xucHJlbHVkZS5jb21wYWN0ID0gTGlzdC5jb21wYWN0O1xucHJlbHVkZS5yZWplY3QgPSBMaXN0LnJlamVjdDtcbnByZWx1ZGUucGFydGl0aW9uID0gTGlzdC5wYXJ0aXRpb247XG5wcmVsdWRlLmZpbmQgPSBMaXN0LmZpbmQ7XG5wcmVsdWRlLmhlYWQgPSBMaXN0LmhlYWQ7XG5wcmVsdWRlLmZpcnN0ID0gTGlzdC5maXJzdDtcbnByZWx1ZGUudGFpbCA9IExpc3QudGFpbDtcbnByZWx1ZGUubGFzdCA9IExpc3QubGFzdDtcbnByZWx1ZGUuaW5pdGlhbCA9IExpc3QuaW5pdGlhbDtcbnByZWx1ZGUuZW1wdHkgPSBMaXN0LmVtcHR5O1xucHJlbHVkZS5yZXZlcnNlID0gTGlzdC5yZXZlcnNlO1xucHJlbHVkZS5kaWZmZXJlbmNlID0gTGlzdC5kaWZmZXJlbmNlO1xucHJlbHVkZS5pbnRlcnNlY3Rpb24gPSBMaXN0LmludGVyc2VjdGlvbjtcbnByZWx1ZGUudW5pb24gPSBMaXN0LnVuaW9uO1xucHJlbHVkZS5jb3VudEJ5ID0gTGlzdC5jb3VudEJ5O1xucHJlbHVkZS5ncm91cEJ5ID0gTGlzdC5ncm91cEJ5O1xucHJlbHVkZS5mb2xkID0gTGlzdC5mb2xkO1xucHJlbHVkZS5mb2xkbCA9IExpc3QuZm9sZGw7XG5wcmVsdWRlLmZvbGQxID0gTGlzdC5mb2xkMTtcbnByZWx1ZGUuZm9sZGwxID0gTGlzdC5mb2xkbDE7XG5wcmVsdWRlLmZvbGRyID0gTGlzdC5mb2xkcjtcbnByZWx1ZGUuZm9sZHIxID0gTGlzdC5mb2xkcjE7XG5wcmVsdWRlLnVuZm9sZHIgPSBMaXN0LnVuZm9sZHI7XG5wcmVsdWRlLmFuZExpc3QgPSBMaXN0LmFuZExpc3Q7XG5wcmVsdWRlLm9yTGlzdCA9IExpc3Qub3JMaXN0O1xucHJlbHVkZS5hbnkgPSBMaXN0LmFueTtcbnByZWx1ZGUuYWxsID0gTGlzdC5hbGw7XG5wcmVsdWRlLnVuaXF1ZSA9IExpc3QudW5pcXVlO1xucHJlbHVkZS51bmlxdWVCeSA9IExpc3QudW5pcXVlQnk7XG5wcmVsdWRlLnNvcnQgPSBMaXN0LnNvcnQ7XG5wcmVsdWRlLnNvcnRXaXRoID0gTGlzdC5zb3J0V2l0aDtcbnByZWx1ZGUuc29ydEJ5ID0gTGlzdC5zb3J0Qnk7XG5wcmVsdWRlLnN1bSA9IExpc3Quc3VtO1xucHJlbHVkZS5wcm9kdWN0ID0gTGlzdC5wcm9kdWN0O1xucHJlbHVkZS5tZWFuID0gTGlzdC5tZWFuO1xucHJlbHVkZS5hdmVyYWdlID0gTGlzdC5hdmVyYWdlO1xucHJlbHVkZS5jb25jYXQgPSBMaXN0LmNvbmNhdDtcbnByZWx1ZGUuY29uY2F0TWFwID0gTGlzdC5jb25jYXRNYXA7XG5wcmVsdWRlLmZsYXR0ZW4gPSBMaXN0LmZsYXR0ZW47XG5wcmVsdWRlLm1heGltdW0gPSBMaXN0Lm1heGltdW07XG5wcmVsdWRlLm1pbmltdW0gPSBMaXN0Lm1pbmltdW07XG5wcmVsdWRlLm1heGltdW1CeSA9IExpc3QubWF4aW11bUJ5O1xucHJlbHVkZS5taW5pbXVtQnkgPSBMaXN0Lm1pbmltdW1CeTtcbnByZWx1ZGUuc2NhbiA9IExpc3Quc2NhbjtcbnByZWx1ZGUuc2NhbmwgPSBMaXN0LnNjYW5sO1xucHJlbHVkZS5zY2FuMSA9IExpc3Quc2NhbjE7XG5wcmVsdWRlLnNjYW5sMSA9IExpc3Quc2NhbmwxO1xucHJlbHVkZS5zY2FuciA9IExpc3Quc2NhbnI7XG5wcmVsdWRlLnNjYW5yMSA9IExpc3Quc2NhbnIxO1xucHJlbHVkZS5zbGljZSA9IExpc3Quc2xpY2U7XG5wcmVsdWRlLnRha2UgPSBMaXN0LnRha2U7XG5wcmVsdWRlLmRyb3AgPSBMaXN0LmRyb3A7XG5wcmVsdWRlLnNwbGl0QXQgPSBMaXN0LnNwbGl0QXQ7XG5wcmVsdWRlLnRha2VXaGlsZSA9IExpc3QudGFrZVdoaWxlO1xucHJlbHVkZS5kcm9wV2hpbGUgPSBMaXN0LmRyb3BXaGlsZTtcbnByZWx1ZGUuc3BhbiA9IExpc3Quc3BhbjtcbnByZWx1ZGUuYnJlYWtMaXN0ID0gTGlzdC5icmVha0xpc3Q7XG5wcmVsdWRlLnppcCA9IExpc3QuemlwO1xucHJlbHVkZS56aXBXaXRoID0gTGlzdC56aXBXaXRoO1xucHJlbHVkZS56aXBBbGwgPSBMaXN0LnppcEFsbDtcbnByZWx1ZGUuemlwQWxsV2l0aCA9IExpc3QuemlwQWxsV2l0aDtcbnByZWx1ZGUuYXQgPSBMaXN0LmF0O1xucHJlbHVkZS5lbGVtSW5kZXggPSBMaXN0LmVsZW1JbmRleDtcbnByZWx1ZGUuZWxlbUluZGljZXMgPSBMaXN0LmVsZW1JbmRpY2VzO1xucHJlbHVkZS5maW5kSW5kZXggPSBMaXN0LmZpbmRJbmRleDtcbnByZWx1ZGUuZmluZEluZGljZXMgPSBMaXN0LmZpbmRJbmRpY2VzO1xucHJlbHVkZS5hcHBseSA9IEZ1bmMuYXBwbHk7XG5wcmVsdWRlLmN1cnJ5ID0gRnVuYy5jdXJyeTtcbnByZWx1ZGUuZmxpcCA9IEZ1bmMuZmxpcDtcbnByZWx1ZGUuZml4ID0gRnVuYy5maXg7XG5wcmVsdWRlLm92ZXIgPSBGdW5jLm92ZXI7XG5wcmVsdWRlLnNwbGl0ID0gU3RyLnNwbGl0O1xucHJlbHVkZS5qb2luID0gU3RyLmpvaW47XG5wcmVsdWRlLmxpbmVzID0gU3RyLmxpbmVzO1xucHJlbHVkZS51bmxpbmVzID0gU3RyLnVubGluZXM7XG5wcmVsdWRlLndvcmRzID0gU3RyLndvcmRzO1xucHJlbHVkZS51bndvcmRzID0gU3RyLnVud29yZHM7XG5wcmVsdWRlLmNoYXJzID0gU3RyLmNoYXJzO1xucHJlbHVkZS51bmNoYXJzID0gU3RyLnVuY2hhcnM7XG5wcmVsdWRlLnJlcGVhdCA9IFN0ci5yZXBlYXQ7XG5wcmVsdWRlLmNhcGl0YWxpemUgPSBTdHIuY2FwaXRhbGl6ZTtcbnByZWx1ZGUuY2FtZWxpemUgPSBTdHIuY2FtZWxpemU7XG5wcmVsdWRlLmRhc2hlcml6ZSA9IFN0ci5kYXNoZXJpemU7XG5wcmVsdWRlLnZhbHVlcyA9IE9iai52YWx1ZXM7XG5wcmVsdWRlLmtleXMgPSBPYmoua2V5cztcbnByZWx1ZGUucGFpcnNUb09iaiA9IE9iai5wYWlyc1RvT2JqO1xucHJlbHVkZS5vYmpUb1BhaXJzID0gT2JqLm9ialRvUGFpcnM7XG5wcmVsdWRlLmxpc3RzVG9PYmogPSBPYmoubGlzdHNUb09iajtcbnByZWx1ZGUub2JqVG9MaXN0cyA9IE9iai5vYmpUb0xpc3RzO1xucHJlbHVkZS5tYXggPSBOdW0ubWF4O1xucHJlbHVkZS5taW4gPSBOdW0ubWluO1xucHJlbHVkZS5uZWdhdGUgPSBOdW0ubmVnYXRlO1xucHJlbHVkZS5hYnMgPSBOdW0uYWJzO1xucHJlbHVkZS5zaWdudW0gPSBOdW0uc2lnbnVtO1xucHJlbHVkZS5xdW90ID0gTnVtLnF1b3Q7XG5wcmVsdWRlLnJlbSA9IE51bS5yZW07XG5wcmVsdWRlLmRpdiA9IE51bS5kaXY7XG5wcmVsdWRlLm1vZCA9IE51bS5tb2Q7XG5wcmVsdWRlLnJlY2lwID0gTnVtLnJlY2lwO1xucHJlbHVkZS5waSA9IE51bS5waTtcbnByZWx1ZGUudGF1ID0gTnVtLnRhdTtcbnByZWx1ZGUuZXhwID0gTnVtLmV4cDtcbnByZWx1ZGUuc3FydCA9IE51bS5zcXJ0O1xucHJlbHVkZS5sbiA9IE51bS5sbjtcbnByZWx1ZGUucG93ID0gTnVtLnBvdztcbnByZWx1ZGUuc2luID0gTnVtLnNpbjtcbnByZWx1ZGUudGFuID0gTnVtLnRhbjtcbnByZWx1ZGUuY29zID0gTnVtLmNvcztcbnByZWx1ZGUuYWNvcyA9IE51bS5hY29zO1xucHJlbHVkZS5hc2luID0gTnVtLmFzaW47XG5wcmVsdWRlLmF0YW4gPSBOdW0uYXRhbjtcbnByZWx1ZGUuYXRhbjIgPSBOdW0uYXRhbjI7XG5wcmVsdWRlLnRydW5jYXRlID0gTnVtLnRydW5jYXRlO1xucHJlbHVkZS5yb3VuZCA9IE51bS5yb3VuZDtcbnByZWx1ZGUuY2VpbGluZyA9IE51bS5jZWlsaW5nO1xucHJlbHVkZS5mbG9vciA9IE51bS5mbG9vcjtcbnByZWx1ZGUuaXNJdE5hTiA9IE51bS5pc0l0TmFOO1xucHJlbHVkZS5ldmVuID0gTnVtLmV2ZW47XG5wcmVsdWRlLm9kZCA9IE51bS5vZGQ7XG5wcmVsdWRlLmdjZCA9IE51bS5nY2Q7XG5wcmVsdWRlLmxjbSA9IE51bS5sY207XG5wcmVsdWRlLlZFUlNJT04gPSAnMS4xLjInO1xubW9kdWxlLmV4cG9ydHMgPSBwcmVsdWRlO1xuZnVuY3Rpb24gY3VycnkkKGYsIGJvdW5kKXtcbiAgdmFyIGNvbnRleHQsXG4gIF9jdXJyeSA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICByZXR1cm4gZi5sZW5ndGggPiAxID8gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmdzID8gYXJncy5jb25jYXQoKSA6IFtdO1xuICAgICAgY29udGV4dCA9IGJvdW5kID8gY29udGV4dCB8fCB0aGlzIDogdGhpcztcbiAgICAgIHJldHVybiBwYXJhbXMucHVzaC5hcHBseShwYXJhbXMsIGFyZ3VtZW50cykgPFxuICAgICAgICAgIGYubGVuZ3RoICYmIGFyZ3VtZW50cy5sZW5ndGggP1xuICAgICAgICBfY3VycnkuY2FsbChjb250ZXh0LCBwYXJhbXMpIDogZi5hcHBseShjb250ZXh0LCBwYXJhbXMpO1xuICAgIH0gOiBmO1xuICB9O1xuICByZXR1cm4gX2N1cnJ5KCk7XG59IiwiLy8gSlMtWUFNTCdzIGRlZmF1bHQgc2NoZW1hIGZvciBgbG9hZGAgZnVuY3Rpb24uXG4vLyBJdCBpcyBub3QgZGVzY3JpYmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vL1xuLy8gVGhpcyBzY2hlbWEgaXMgYmFzZWQgb24gSlMtWUFNTCdzIGRlZmF1bHQgc2FmZSBzY2hlbWEgYW5kIGluY2x1ZGVzXG4vLyBKYXZhU2NyaXB0LXNwZWNpZmljIHR5cGVzOiAhIWpzL3VuZGVmaW5lZCwgISFqcy9yZWdleHAgYW5kICEhanMvZnVuY3Rpb24uXG4vL1xuLy8gQWxzbyB0aGlzIHNjaGVtYSBpcyB1c2VkIGFzIGRlZmF1bHQgYmFzZSBzY2hlbWEgYXQgYFNjaGVtYS5jcmVhdGVgIGZ1bmN0aW9uLlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWEuREVGQVVMVCA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9kZWZhdWx0X3NhZmUnKVxuICBdLFxuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvanMvdW5kZWZpbmVkJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9qcy9yZWdleHAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2pzL2Z1bmN0aW9uJylcbiAgXVxufSk7XG4iLCIvLyBTdGFuZGFyZCBZQU1MJ3MgRmFpbHNhZmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAyMzQ2XG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvc3RyJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zZXEnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL21hcCcpXG4gIF1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBtaW5pbWF0Y2ggPSByZXF1aXJlKCdtaW5pbWF0Y2gnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgUlVMRV9TRVZFUklUWV9TVFJJTkdTID0gWydvZmYnLCAnd2FybicsICdlcnJvciddLFxuICAgIFJVTEVfU0VWRVJJVFkgPSBSVUxFX1NFVkVSSVRZX1NUUklOR1MucmVkdWNlKChtYXAsIHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICBtYXBbdmFsdWVdID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30pLFxuICAgIFZBTElEX1NFVkVSSVRJRVMgPSBbMCwgMSwgMiwgJ29mZicsICd3YXJuJywgJ2Vycm9yJ107XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQdWJsaWMgSW50ZXJmYWNlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZW1wdHkgY29uZmlndXJhdGlvbiBvYmplY3Qgc3VpdGFibGUgZm9yIG1lcmdpbmcgYXMgYSBiYXNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEEgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICovXG4gICAgY3JlYXRlRW1wdHlDb25maWcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnbG9iYWxzOiB7fSxcbiAgICAgICAgICAgIGVudjoge30sXG4gICAgICAgICAgICBydWxlczoge30sXG4gICAgICAgICAgICBwYXJzZXJPcHRpb25zOiB7fVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVudmlyb25tZW50IGNvbmZpZyBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkIGVudmlyb25tZW50cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYm9vbGVhbj59IGVudiBUaGUgZW52aXJvbm1lbnQgc2V0dGluZ3MuXG4gICAgICogQHBhcmFtIHtFbnZpcm9ubWVudHN9IGVudkNvbnRleHQgVGhlIGVudmlyb25tZW50IGNvbnRleHQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gQSBjb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBydWxlcyBhbmQgZ2xvYmFsc1xuICAgICAqICAgICAgc2V0LlxuICAgICAqL1xuICAgIGNyZWF0ZUVudmlyb25tZW50Q29uZmlnKGVudiwgZW52Q29udGV4dCkge1xuXG4gICAgICAgIGNvbnN0IGVudkNvbmZpZyA9IHRoaXMuY3JlYXRlRW1wdHlDb25maWcoKTtcblxuICAgICAgICBpZiAoZW52KSB7XG4gICAgICAgICAgICBlbnZDb25maWcuZW52ID0gZW52O1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhlbnYpLmZpbHRlcihuYW1lID0+IGVudltuYW1lXSkuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnZpcm9ubWVudCA9IGVudkNvbnRleHQuZ2V0KG5hbWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudC5nbG9iYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudkNvbmZpZy5nbG9iYWxzLCBlbnZpcm9ubWVudC5nbG9iYWxzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudC5wYXJzZXJPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudkNvbmZpZy5wYXJzZXJPcHRpb25zLCBlbnZpcm9ubWVudC5wYXJzZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVudkNvbmZpZztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBjb25maWcgd2l0aCBlbnZpcm9ubWVudCBzZXR0aW5ncywgYXBwbGllcyB0aGUgZ2xvYmFscyBhbmRcbiAgICAgKiBlY21hRmVhdHVyZXMgdG8gdGhlIGNvbmZpZ3VyYXRpb24gYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7RW52aXJvbm1lbnRzfSBlbnZDb250ZW50IGVudiBjb250ZXh0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSB1cGRhdGVkIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgYXBwbHlFbnZpcm9ubWVudHMoY29uZmlnLCBlbnZDb250ZW50KSB7XG4gICAgICAgIGlmIChjb25maWcuZW52ICYmIHR5cGVvZiBjb25maWcuZW52ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVyZ2UodGhpcy5jcmVhdGVFbnZpcm9ubWVudENvbmZpZyhjb25maWcuZW52LCBlbnZDb250ZW50KSwgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0d28gY29uZmlnIG9iamVjdHMuIFRoaXMgd2lsbCBub3Qgb25seSBhZGQgbWlzc2luZyBrZXlzLCBidXQgd2lsbCBhbHNvIG1vZGlmeSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBjb25maWcgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNyYyBjb25maWcgb2JqZWN0LiBPdmVycmlkZXMgaW4gdGhpcyBjb25maWcgb2JqZWN0IHdpbGwgdGFrZSBwcmlvcml0eSBvdmVyIGJhc2UuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY29tYmluZV0gV2hldGhlciB0byBjb21iaW5lIGFycmF5cyBvciBub3RcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1J1bGVdIFdoZXRoZXIgaXRzIGEgcnVsZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IG1lcmdlZCBjb25maWcgb2JqZWN0LlxuICAgICAqL1xuICAgIG1lcmdlOiBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzcmMsIGNvbWJpbmUsIGlzUnVsZSkge1xuXG4gICAgICAgIC8qXG4gICAgICAgICBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuICAgICAgICAgQ29weXJpZ2h0IChjKSAyMDEyIE5pY2hvbGFzIEZpc2hlclxuXG4gICAgICAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAgICAgICBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG8gZGVhbFxuICAgICAgICAgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICAgICAgICAgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICAgICAgICAgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gICAgICAgICBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gICAgICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICAgICAgICAgYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgICAgICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gICAgICAgICBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgICAgICAgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICAgICAgICAgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgICAgICAgIFRIRSBTT0ZUV0FSRS5cbiAgICAgICAgICovXG5cbiAgICAgICAgLypcbiAgICAgICAgICogVGhpcyBjb2RlIGlzIHRha2VuIGZyb20gZGVlcG1lcmdlIHJlcG9cbiAgICAgICAgICogKGh0dHBzOi8vZ2l0aHViLmNvbS9LeWxlQU1hdGhld3MvZGVlcG1lcmdlKVxuICAgICAgICAgKiBhbmQgbW9kaWZpZWQgdG8gbWVldCBvdXIgbmVlZHMuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhcnJheSA9IEFycmF5LmlzQXJyYXkoc3JjKSB8fCBBcnJheS5pc0FycmF5KHRhcmdldCk7XG4gICAgICAgIGxldCBkc3QgPSBhcnJheSAmJiBbXSB8fCB7fTtcblxuICAgICAgICBjb21iaW5lID0gISFjb21iaW5lO1xuICAgICAgICBpc1J1bGUgPSAhIWlzUnVsZTtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQgfHwgW107XG5cbiAgICAgICAgICAgIC8vIHNyYyBjb3VsZCBiZSBhIHN0cmluZywgc28gY2hlY2sgZm9yIGFycmF5XG4gICAgICAgICAgICBpZiAoaXNSdWxlICYmIEFycmF5LmlzQXJyYXkoc3JjKSAmJiBzcmMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGRzdCA9IGRzdC5jb25jYXQoc3JjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRzdCA9IGRzdC5jb25jYXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzcmMgIT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBbc3JjXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKChlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgZSA9IHNyY1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRzdFtpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZHN0W2ldID0gZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1J1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdFtpXSA9IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkc3RbaV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBjb21iaW5lLCBpc1J1bGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbWJpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdFtpXSA9IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHN0LmluZGV4T2YoZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHN0W2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdvdmVycmlkZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRzdFtrZXldID0gKHRhcmdldFtrZXldIHx8IFtdKS5jb25jYXQoc3JjW2tleV0gfHwgW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNyY1trZXldKSB8fCBBcnJheS5pc0FycmF5KHRhcmdldFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBkc3Rba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc3JjW2tleV0sIGtleSA9PT0gJ3BsdWdpbnMnIHx8IGtleSA9PT0gJ2V4dGVuZHMnLCBpc1J1bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3JjW2tleV0gIT09ICdvYmplY3QnIHx8ICFzcmNba2V5XSB8fCBrZXkgPT09ICdleHBvcnRlZCcgfHwga2V5ID09PSAnYXN0R2xvYmFscycpIHtcbiAgICAgICAgICAgICAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRzdFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldIHx8IHt9LCBzcmNba2V5XSwgY29tYmluZSwga2V5ID09PSAncnVsZXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIG5ldy1zdHlsZSBzZXZlcml0eSBzZXR0aW5ncyAob2ZmLCB3YXJuLCBlcnJvcikgaW50byBvbGQtc3R5bGVcbiAgICAgKiBzZXZlcml0eSBzZXR0aW5ncyAoMCwgMSwgMikgZm9yIGFsbCBydWxlcy4gQXNzdW1wdGlvbiBpcyB0aGF0IHNldmVyaXR5XG4gICAgICogdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcyBjb3JyZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBvYmplY3QgdG8gbm9ybWFsaXplLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIG5vcm1hbGl6ZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5ydWxlcykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLnJ1bGVzKS5mb3JFYWNoKHJ1bGVJZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZUNvbmZpZyA9IGNvbmZpZy5ydWxlc1tydWxlSWRdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBydWxlQ29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcucnVsZXNbcnVsZUlkXSA9IFJVTEVfU0VWRVJJVFlbcnVsZUNvbmZpZy50b0xvd2VyQ2FzZSgpXSB8fCAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShydWxlQ29uZmlnKSAmJiB0eXBlb2YgcnVsZUNvbmZpZ1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgcnVsZUNvbmZpZ1swXSA9IFJVTEVfU0VWRVJJVFlbcnVsZUNvbmZpZ1swXS50b0xvd2VyQ2FzZSgpXSB8fCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIG9sZC1zdHlsZSBzZXZlcml0eSBzZXR0aW5ncyAoMCwgMSwgMikgaW50byBuZXctc3R5bGVcbiAgICAgKiBzZXZlcml0eSBzZXR0aW5ncyAob2ZmLCB3YXJuLCBlcnJvcikgZm9yIGFsbCBydWxlcy4gQXNzdW1wdGlvbiBpcyB0aGF0IHNldmVyaXR5XG4gICAgICogdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcyBjb3JyZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBvYmplY3QgdG8gbm9ybWFsaXplLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIG5vcm1hbGl6ZVRvU3RyaW5ncyhjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5ydWxlcykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLnJ1bGVzKS5mb3JFYWNoKHJ1bGVJZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZUNvbmZpZyA9IGNvbmZpZy5ydWxlc1tydWxlSWRdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBydWxlQ29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcucnVsZXNbcnVsZUlkXSA9IFJVTEVfU0VWRVJJVFlfU1RSSU5HU1tydWxlQ29uZmlnXSB8fCBSVUxFX1NFVkVSSVRZX1NUUklOR1NbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJ1bGVDb25maWcpICYmIHR5cGVvZiBydWxlQ29uZmlnWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBydWxlQ29uZmlnWzBdID0gUlVMRV9TRVZFUklUWV9TVFJJTkdTW3J1bGVDb25maWdbMF1dIHx8IFJVTEVfU0VWRVJJVFlfU1RSSU5HU1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBzZXZlcml0eSBmb3IgdGhlIGdpdmVuIHJ1bGUgY29uZmlndXJhdGlvbiByZXByZXNlbnRzIGFuIGVycm9yLlxuICAgICAqIEBwYXJhbSB7aW50fHN0cmluZ3xBcnJheX0gcnVsZUNvbmZpZyBUaGUgY29uZmlndXJhdGlvbiBmb3IgYW4gaW5kaXZpZHVhbCBydWxlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBydWxlIHJlcHJlc2VudHMgYW4gZXJyb3IsIGZhbHNlIGlmIG5vdC5cbiAgICAgKi9cbiAgICBpc0Vycm9yU2V2ZXJpdHkocnVsZUNvbmZpZykge1xuICAgICAgICBsZXQgc2V2ZXJpdHkgPSBBcnJheS5pc0FycmF5KHJ1bGVDb25maWcpID8gcnVsZUNvbmZpZ1swXSA6IHJ1bGVDb25maWc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzZXZlcml0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHNldmVyaXR5ID0gUlVMRV9TRVZFUklUWVtzZXZlcml0eS50b0xvd2VyQ2FzZSgpXSB8fCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh0eXBlb2Ygc2V2ZXJpdHkgPT09ICdudW1iZXInICYmIHNldmVyaXR5ID09PSAyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiBjb25maWcgaGFzIHZhbGlkIHNldmVyaXR5IG9yIG5vdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8QXJyYXl9IHJ1bGVDb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBmb3IgYW4gaW5kaXZpZHVhbCBydWxlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIGNvbmZpZ3VyYXRpb24gaGFzIHZhbGlkIHNldmVyaXR5LlxuICAgICAqL1xuICAgIGlzVmFsaWRTZXZlcml0eShydWxlQ29uZmlnKSB7XG4gICAgICAgIGxldCBzZXZlcml0eSA9IEFycmF5LmlzQXJyYXkocnVsZUNvbmZpZykgPyBydWxlQ29uZmlnWzBdIDogcnVsZUNvbmZpZztcblxuICAgICAgICBpZiAodHlwZW9mIHNldmVyaXR5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc2V2ZXJpdHkgPSBzZXZlcml0eS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBWQUxJRF9TRVZFUklUSUVTLmluZGV4T2Yoc2V2ZXJpdHkpICE9PSAtMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgZXZlcnkgcnVsZSBvZiBhIGdpdmVuIGNvbmZpZyBoYXMgdmFsaWQgc2V2ZXJpdHkgb3Igbm90LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBmb3IgcnVsZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgY29uZmlndXJhdGlvbiBoYXMgdmFsaWQgc2V2ZXJpdHkuXG4gICAgICovXG4gICAgaXNFdmVyeVNldmVyaXR5VmFsaWQoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhjb25maWcpLmV2ZXJ5KHJ1bGVJZCA9PiB0aGlzLmlzVmFsaWRTZXZlcml0eShjb25maWdbcnVsZUlkXSkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgYWxsIGNvbmZpZ3VyYXRpb25zIGluIGEgZ2l2ZW4gY29uZmlnIHZlY3Rvci4gQSB2ZWN0b3IgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCBjb250YWluaW5nIGEgY29uZmlnXG4gICAgICogZmlsZSBwYXRoIGFuZCBhIGxpc3Qgb2Ygc3ViY29uZmlnIGluZGljZXMgdGhhdCBtYXRjaCB0aGUgY3VycmVudCBmaWxlIHBhdGguIEFsbCBjb25maWcgZGF0YSBpcyBhc3N1bWVkIHRvIGJlXG4gICAgICogY2FjaGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gdmVjdG9yIGxpc3Qgb2YgY29uZmlnIGZpbGVzIGFuZCB0aGVpciBzdWJjb25maWcgaW5kaWNlcyB0aGF0IG1hdGNoIHRoZSBjdXJyZW50IGZpbGUgcGF0aFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdDYWNoZSB0aGUgY29uZmlnIGNhY2hlXG4gICAgICogQHJldHVybnMge09iamVjdH0gY29uZmlnIG9iamVjdFxuICAgICAqL1xuICAgIGdldENvbmZpZ0Zyb21WZWN0b3IodmVjdG9yLCBjb25maWdDYWNoZSkge1xuXG4gICAgICAgIGNvbnN0IGNhY2hlZENvbmZpZyA9IGNvbmZpZ0NhY2hlLmdldE1lcmdlZFZlY3RvckNvbmZpZyh2ZWN0b3IpO1xuXG4gICAgICAgIGlmIChjYWNoZWRDb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDb25maWc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdWJ2ZWN0b3IgPSBBcnJheS5mcm9tKHZlY3Rvcik7XG4gICAgICAgIGxldCBuZWFyZXN0Q2FjaGVJbmRleCA9IHN1YnZlY3Rvci5sZW5ndGggLSAxLFxuICAgICAgICAgICAgcGFydGlhbENhY2hlZENvbmZpZztcblxuICAgICAgICB3aGlsZSAobmVhcmVzdENhY2hlSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgcGFydGlhbENhY2hlZENvbmZpZyA9IGNvbmZpZ0NhY2hlLmdldE1lcmdlZFZlY3RvckNvbmZpZyhzdWJ2ZWN0b3IpO1xuICAgICAgICAgICAgaWYgKHBhcnRpYWxDYWNoZWRDb25maWcpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnZlY3Rvci5wb3AoKTtcbiAgICAgICAgICAgIG5lYXJlc3RDYWNoZUluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcnRpYWxDYWNoZWRDb25maWcpIHtcbiAgICAgICAgICAgIHBhcnRpYWxDYWNoZWRDb25maWcgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaW5hbENvbmZpZyA9IHBhcnRpYWxDYWNoZWRDb25maWc7XG5cbiAgICAgICAgLy8gU3RhcnQgZnJvbSBlbnRyeSBpbW1lZGlhdGVseSBmb2xsb3dpbmcgbmVhcmVzdCBjYWNoZWQgY29uZmlnIChmaXJzdCB1bmNhY2hlZCBlbnRyeSlcbiAgICAgICAgZm9yIChsZXQgaSA9IG5lYXJlc3RDYWNoZUluZGV4ICsgMTsgaSA8IHZlY3Rvci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZmluYWxDb25maWcgPSB0aGlzLm1lcmdlVmVjdG9yRW50cnkoZmluYWxDb25maWcsIHZlY3RvcltpXSwgY29uZmlnQ2FjaGUpO1xuICAgICAgICAgICAgY29uZmlnQ2FjaGUuc2V0TWVyZ2VkVmVjdG9yQ29uZmlnKHZlY3Rvci5zbGljZSgwLCBpICsgMSksIGZpbmFsQ29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaW5hbENvbmZpZztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBjb25maWcgb3B0aW9ucyBmcm9tIGEgc2luZ2xlIHZlY3RvciBlbnRyeSBpbnRvIHRoZSBzdXBwbGllZCBjb25maWcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyB0aGUgYmFzZSBjb25maWcgdG8gbWVyZ2UgdGhlIHZlY3RvciBlbnRyeSdzIG9wdGlvbnMgaW50b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2ZWN0b3JFbnRyeSBhIHNpbmdsZSBlbnRyeSBmcm9tIGEgdmVjdG9yLCBjb25zaXN0aW5nIG9mIGEgY29uZmlnIGZpbGUgcGF0aCBhbmQgYW4gYXJyYXkgb2ZcbiAgICAgKiBtYXRjaGluZyBvdmVycmlkZSBpbmRpY2VzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ0NhY2hlIHRoZSBjb25maWcgY2FjaGVcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBtZXJnZWQgY29uZmlnIG9iamVjdFxuICAgICAqL1xuICAgIG1lcmdlVmVjdG9yRW50cnkoY29uZmlnLCB2ZWN0b3JFbnRyeSwgY29uZmlnQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgdmVjdG9yRW50cnlDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdDYWNoZS5nZXRDb25maWcodmVjdG9yRW50cnkuZmlsZVBhdGgpKTtcbiAgICAgICAgbGV0IG1lcmdlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyksXG4gICAgICAgICAgICBvdmVycmlkZXM7XG5cbiAgICAgICAgaWYgKHZlY3RvckVudHJ5Q29uZmlnLm92ZXJyaWRlcykge1xuICAgICAgICAgICAgb3ZlcnJpZGVzID0gdmVjdG9yRW50cnlDb25maWcub3ZlcnJpZGVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAob3ZlcnJpZGUsIG92ZXJyaWRlSW5kZXgpID0+IHZlY3RvckVudHJ5Lm1hdGNoaW5nT3ZlcnJpZGVzLmluZGV4T2Yob3ZlcnJpZGVJbmRleCkgIT09IC0xXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3ZlcnJpZGVzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlKG1lcmdlZENvbmZpZywgdmVjdG9yRW50cnlDb25maWcpO1xuXG4gICAgICAgIGRlbGV0ZSBtZXJnZWRDb25maWcub3ZlcnJpZGVzO1xuXG4gICAgICAgIG1lcmdlZENvbmZpZyA9IG92ZXJyaWRlcy5yZWR1Y2UoKGxhc3RDb25maWcsIG92ZXJyaWRlKSA9PiB0aGlzLm1lcmdlKGxhc3RDb25maWcsIG92ZXJyaWRlKSwgbWVyZ2VkQ29uZmlnKTtcblxuICAgICAgICBpZiAobWVyZ2VkQ29uZmlnLmZpbGVQYXRoKSB7XG4gICAgICAgICAgICBkZWxldGUgbWVyZ2VkQ29uZmlnLmZpbGVQYXRoO1xuICAgICAgICAgICAgZGVsZXRlIG1lcmdlZENvbmZpZy5iYXNlRGlyZWN0b3J5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1lcmdlZENvbmZpZy5maWxlcykge1xuICAgICAgICAgICAgZGVsZXRlIG1lcmdlZENvbmZpZy5maWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXJnZWRDb25maWc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGF0IHRoZSBzcGVjaWZpZWQgZmlsZSBwYXRoIG1hdGNoZXMgYWxsIG9mIHRoZSBzdXBwbGllZCBnbG9iIHBhdHRlcm5zLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlUGF0aCBUaGUgZmlsZSBwYXRoIHRvIHRlc3QgcGF0dGVybnMgYWdhaW5zdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXR0ZXJucyBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zLCBvZiB3aGljaCBhdCBsZWFzdCBvbmUgc2hvdWxkIG1hdGNoIHRoZSBmaWxlIHBhdGhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW2V4Y2x1ZGVkUGF0dGVybnNdIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMsIG9mIHdoaWNoIG5vbmUgc2hvdWxkIG1hdGNoIHRoZSBmaWxlIHBhdGhcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbGwgdGhlIHN1cHBsaWVkIHBhdHRlcm5zIG1hdGNoIHRoZSBmaWxlIHBhdGgsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHBhdGhNYXRjaGVzR2xvYnMoZmlsZVBhdGgsIHBhdHRlcm5zLCBleGNsdWRlZFBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm5MaXN0ID0gW10uY29uY2F0KHBhdHRlcm5zKTtcbiAgICAgICAgY29uc3QgZXhjbHVkZWRQYXR0ZXJuTGlzdCA9IFtdLmNvbmNhdChleGNsdWRlZFBhdHRlcm5zIHx8IFtdKTtcblxuICAgICAgICBwYXR0ZXJuTGlzdC5jb25jYXQoZXhjbHVkZWRQYXR0ZXJuTGlzdCkuZm9yRWFjaChwYXR0ZXJuID0+IHtcbiAgICAgICAgICAgIGlmIChwYXRoLmlzQWJzb2x1dGUocGF0dGVybikgfHwgcGF0dGVybi5pbmNsdWRlcygnLi4nKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvdmVycmlkZSBwYXR0ZXJuIChleHBlY3RlZCByZWxhdGl2ZSBwYXRoIG5vdCBjb250YWluaW5nICcuLicpOiAke3BhdHRlcm59YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7IG1hdGNoQmFzZTogdHJ1ZSB9O1xuXG4gICAgICAgIHJldHVybiBwYXR0ZXJuTGlzdC5zb21lKHBhdHRlcm4gPT4gbWluaW1hdGNoKGZpbGVQYXRoLCBwYXR0ZXJuLCBvcHRzKSkgJiZcbiAgICAgICAgICAgICFleGNsdWRlZFBhdHRlcm5MaXN0LnNvbWUoZXhjbHVkZWRQYXR0ZXJuID0+IG1pbmltYXRjaChmaWxlUGF0aCwgZXhjbHVkZWRQYXR0ZXJuLCBvcHRzKSk7XG4gICAgfVxufTtcbiIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKCdDYW5ub3QgZmluZCBtb2R1bGUgXCInICsgcmVxICsgJ1wiLicpO1xuXHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdHRocm93IGU7XG59XG53ZWJwYWNrRW1wdHlDb250ZXh0LmtleXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFtdOyB9O1xud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5Q29udGV4dDtcbndlYnBhY2tFbXB0eUNvbnRleHQuaWQgPSAxMTsiLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjQuMFxuKGZ1bmN0aW9uKCl7XG4gIHZhciBWRVJTSU9OLCBwYXJzZVR5cGUsIHBhcnNlZFR5cGVDaGVjaywgdHlwZUNoZWNrO1xuICBWRVJTSU9OID0gJzAuMy4yJztcbiAgcGFyc2VUeXBlID0gcmVxdWlyZSgnLi9wYXJzZS10eXBlJyk7XG4gIHBhcnNlZFR5cGVDaGVjayA9IHJlcXVpcmUoJy4vY2hlY2snKTtcbiAgdHlwZUNoZWNrID0gZnVuY3Rpb24odHlwZSwgaW5wdXQsIG9wdGlvbnMpe1xuICAgIHJldHVybiBwYXJzZWRUeXBlQ2hlY2socGFyc2VUeXBlKHR5cGUpLCBpbnB1dCwgb3B0aW9ucyk7XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFZFUlNJT046IFZFUlNJT04sXG4gICAgdHlwZUNoZWNrOiB0eXBlQ2hlY2ssXG4gICAgcGFyc2VkVHlwZUNoZWNrOiBwYXJzZWRUeXBlQ2hlY2ssXG4gICAgcGFyc2VUeXBlOiBwYXJzZVR5cGVcbiAgfTtcbn0pLmNhbGwodGhpcyk7XG4iLCIvLyBTdGFuZGFyZCBZQU1MJ3MgSlNPTiBzY2hlbWEuXG4vLyBodHRwOi8vd3d3LnlhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNpZDI4MDMyMzFcbi8vXG4vLyBOT1RFOiBKUy1ZQU1MIGRvZXMgbm90IHN1cHBvcnQgc2NoZW1hLXNwZWNpZmljIHRhZyByZXNvbHV0aW9uIHJlc3RyaWN0aW9ucy5cbi8vIFNvLCB0aGlzIHNjaGVtYSBpcyBub3Qgc3VjaCBzdHJpY3QgYXMgZGVmaW5lZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy8gSXQgYWxsb3dzIG51bWJlcnMgaW4gYmluYXJ5IG5vdGFpb24sIHVzZSBgTnVsbGAgYW5kIGBOVUxMYCBhcyBgbnVsbGAsIGV0Yy5cblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFNjaGVtYSh7XG4gIGluY2x1ZGU6IFtcbiAgICByZXF1aXJlKCcuL2ZhaWxzYWZlJylcbiAgXSxcbiAgaW1wbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL251bGwnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2Jvb2wnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2ludCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvZmxvYXQnKVxuICBdXG59KTtcbiIsIi8vIFN0YW5kYXJkIFlBTUwncyBDb3JlIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwNDkyM1xuLy9cbi8vIE5PVEU6IEpTLVlBTUwgZG9lcyBub3Qgc3VwcG9ydCBzY2hlbWEtc3BlY2lmaWMgdGFnIHJlc29sdXRpb24gcmVzdHJpY3Rpb25zLlxuLy8gU28sIENvcmUgc2NoZW1hIGhhcyBubyBkaXN0aW5jdGlvbnMgZnJvbSBKU09OIHNjaGVtYSBpcyBKUy1ZQU1MLlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgaW5jbHVkZTogW1xuICAgIHJlcXVpcmUoJy4vanNvbicpXG4gIF1cbn0pO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS41LjBcbihmdW5jdGlvbigpe1xuICB2YXIgcHJlbHVkZSwgbWFwLCBzb3J0QnksIGZsLCBjbG9zZXN0U3RyaW5nLCBuYW1lVG9SYXcsIGRhc2hlcml6ZSwgbmF0dXJhbEpvaW47XG4gIHByZWx1ZGUgPSByZXF1aXJlKCdwcmVsdWRlLWxzJyksIG1hcCA9IHByZWx1ZGUubWFwLCBzb3J0QnkgPSBwcmVsdWRlLnNvcnRCeTtcbiAgZmwgPSByZXF1aXJlKCdmYXN0LWxldmVuc2h0ZWluJyk7XG4gIGNsb3Nlc3RTdHJpbmcgPSBmdW5jdGlvbihwb3NzaWJpbGl0aWVzLCBpbnB1dCl7XG4gICAgdmFyIGRpc3RhbmNlcywgcmVmJCwgc3RyaW5nLCBkaXN0YW5jZSwgdGhpcyQgPSB0aGlzO1xuICAgIGlmICghcG9zc2liaWxpdGllcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlzdGFuY2VzID0gbWFwKGZ1bmN0aW9uKGl0KXtcbiAgICAgIHZhciByZWYkLCBsb25nZXIsIHNob3J0ZXI7XG4gICAgICByZWYkID0gaW5wdXQubGVuZ3RoID4gaXQubGVuZ3RoXG4gICAgICAgID8gW2lucHV0LCBpdF1cbiAgICAgICAgOiBbaXQsIGlucHV0XSwgbG9uZ2VyID0gcmVmJFswXSwgc2hvcnRlciA9IHJlZiRbMV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdHJpbmc6IGl0LFxuICAgICAgICBkaXN0YW5jZTogZmwuZ2V0KGxvbmdlciwgc2hvcnRlcilcbiAgICAgIH07XG4gICAgfSkoXG4gICAgcG9zc2liaWxpdGllcyk7XG4gICAgcmVmJCA9IHNvcnRCeShmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4gaXQuZGlzdGFuY2U7XG4gICAgfSwgZGlzdGFuY2VzKVswXSwgc3RyaW5nID0gcmVmJC5zdHJpbmcsIGRpc3RhbmNlID0gcmVmJC5kaXN0YW5jZTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xuICBuYW1lVG9SYXcgPSBmdW5jdGlvbihuYW1lKXtcbiAgICBpZiAobmFtZS5sZW5ndGggPT09IDEgfHwgbmFtZSA9PT0gJ05VTScpIHtcbiAgICAgIHJldHVybiBcIi1cIiArIG5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIi0tXCIgKyBuYW1lO1xuICAgIH1cbiAgfTtcbiAgZGFzaGVyaXplID0gZnVuY3Rpb24oc3RyaW5nKXtcbiAgICBpZiAoL15bQS1aXS8udGVzdChzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJlbHVkZS5kYXNoZXJpemUoc3RyaW5nKTtcbiAgICB9XG4gIH07XG4gIG5hdHVyYWxKb2luID0gZnVuY3Rpb24oYXJyYXkpe1xuICAgIGlmIChhcnJheS5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gYXJyYXkuam9pbignIG9yICcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXJyYXkuc2xpY2UoMCwgLTEpLmpvaW4oJywgJykgKyBcIiwgb3IgXCIgKyBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNsb3Nlc3RTdHJpbmc6IGNsb3Nlc3RTdHJpbmcsXG4gICAgbmFtZVRvUmF3OiBuYW1lVG9SYXcsXG4gICAgZGFzaGVyaXplOiBkYXNoZXJpemUsXG4gICAgbmF0dXJhbEpvaW46IG5hdHVyYWxKb2luXG4gIH07XG59KS5jYWxsKHRoaXMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpbmZvKCkge1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBBcnJheS5mcm9tKGFyZ3VtZW50cykpO1xuICAgIH0sXG4gICAgZXJyb3IoKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgQXJyYXkuZnJvbShhcmd1bWVudHMpKTtcbiAgICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyksXG4gICAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEhlbHBlcnNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogR2V0IHRoZSBlbnRyaWVzIGZvciBhIGRpcmVjdG9yeS4gSW5jbHVkaW5nIGEgdHJ5LWNhdGNoIG1heSBiZSBkZXRyaW1lbnRhbCB0b1xuICogZnVuY3Rpb24gcGVyZm9ybWFuY2UsIHNvIG1vdmUgaXQgb3V0IGhlcmUgYSBzZXBhcmF0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXJlY3RvcnkgVGhlIGRpcmVjdG9yeSB0byBzZWFyY2ggaW4uXG4gKiBAcmV0dXJucyB7c3RyaW5nW119IFRoZSBlbnRyaWVzIGluIHRoZSBkaXJlY3Rvcnkgb3IgYW4gZW1wdHkgYXJyYXkgb24gZXJyb3IuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXREaXJlY3RvcnlFbnRyaWVzKGRpcmVjdG9yeSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmcy5yZWFkZGlyU3luYyhkaXJlY3RvcnkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBoYXNoIG9mIGZpbGVuYW1lcyBmcm9tIGEgZGlyZWN0b3J5IGxpc3RpbmdcbiAqIEBwYXJhbSB7c3RyaW5nW119IGVudHJpZXMgQXJyYXkgb2YgZGlyZWN0b3J5IGVudHJpZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0b3J5IFBhdGggdG8gYSBjdXJyZW50IGRpcmVjdG9yeS5cbiAqIEBwYXJhbSB7c3RyaW5nW119IHN1cHBvcnRlZENvbmZpZ3MgTGlzdCBvZiBzdXBwb3J0IGZpbGVuYW1lcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IEhhc2htYXAgb2YgZmlsZW5hbWVzXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdG9yeUVudHJpZXMoZW50cmllcywgZGlyZWN0b3J5LCBzdXBwb3J0ZWRDb25maWdzKSB7XG4gICAgY29uc3QgZmlsZUhhc2ggPSB7fTtcblxuICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgIGlmIChzdXBwb3J0ZWRDb25maWdzLmluZGV4T2YoZW50cnkpID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkRW50cnkgPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCBlbnRyeSk7XG5cbiAgICAgICAgICAgIGlmIChmcy5zdGF0U3luYyhyZXNvbHZlZEVudHJ5KS5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgICAgIGZpbGVIYXNoW2VudHJ5XSA9IHJlc29sdmVkRW50cnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZmlsZUhhc2g7XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBUElcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogRmlsZUZpbmRlciBjbGFzc1xuICovXG5jbGFzcyBGaWxlRmluZGVyIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGZpbGVzIFRoZSBiYXNlbmFtZShzKSBvZiB0aGUgZmlsZShzKSB0byBmaW5kLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjd2QgQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGZpbGVzLCBjd2QpIHtcbiAgICAgICAgdGhpcy5maWxlTmFtZXMgPSBBcnJheS5pc0FycmF5KGZpbGVzKSA/IGZpbGVzIDogW2ZpbGVzXTtcbiAgICAgICAgdGhpcy5jd2QgPSBjd2QgfHwgcHJvY2Vzcy5jd2QoKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiBmaWxlcyB3aXRoIHRoZSBzcGVjaWZpZWQgZmlsZSBuYW1lcywgaW4gZGlyZWN0b3J5IGFuZFxuICAgICAqIHBhcmVudCBkaXJlY3Rvcmllcy4gQ2FjaGUgdGhlIHJlc3VsdHMuXG4gICAgICogRG9lcyBub3QgY2hlY2sgaWYgYSBtYXRjaGluZyBkaXJlY3RvcnkgZW50cnkgaXMgYSBmaWxlLlxuICAgICAqIFNlYXJjaGVzIGZvciBhbGwgdGhlIGZpbGUgbmFtZXMgaW4gdGhpcy5maWxlTmFtZXMuXG4gICAgICogSXMgY3VycmVudGx5IHVzZWQgYnkgbGliL2NvbmZpZy5qcyB0byBmaW5kIC53aXN0cmMuanNvbiBmaWxlcy5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGRpcmVjdG9yeSBUaGUgZGlyZWN0b3J5IHRvIHN0YXJ0IHRoZSBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7R2VuZXJhdG9yRnVuY3Rpb259IHRvIGl0ZXJhdGUgdGhlIGZpbGUgcGF0aHMgZm91bmRcbiAgICAgKi9cbiAgICAqZmluZEFsbEluRGlyZWN0b3J5QW5kUGFyZW50cyhkaXJlY3RvcnkpIHtcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG4gICAgICAgIGlmIChkaXJlY3RvcnkpIHtcbiAgICAgICAgICAgIGRpcmVjdG9yeSA9IHBhdGgucmVzb2x2ZSh0aGlzLmN3ZCwgZGlyZWN0b3J5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpcmVjdG9yeSA9IHRoaXMuY3dkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KGRpcmVjdG9yeSkpIHtcbiAgICAgICAgICAgIHlpZWxkKiBjYWNoZVtkaXJlY3RvcnldO1xuICAgICAgICAgICAgcmV0dXJuOyAvLyB0byBhdm9pZCBkb2luZyB0aGUgbm9ybWFsIGxvb3AgYWZ0ZXJ3YXJkc1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGlycyA9IFtdO1xuICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSB0aGlzLmZpbGVOYW1lcztcbiAgICAgICAgbGV0IHNlYXJjaGVkID0gMDtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBkaXJzW3NlYXJjaGVkKytdID0gZGlyZWN0b3J5O1xuICAgICAgICAgICAgY2FjaGVbZGlyZWN0b3J5XSA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBmaWxlc01hcCA9IG5vcm1hbGl6ZURpcmVjdG9yeUVudHJpZXMoZ2V0RGlyZWN0b3J5RW50cmllcyhkaXJlY3RvcnkpLCBkaXJlY3RvcnksIGZpbGVOYW1lcyk7XG5cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhmaWxlc01hcCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBmaWxlTmFtZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVzTWFwW2ZpbGVOYW1lc1trXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gZmlsZXNNYXBbZmlsZU5hbWVzW2tdXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBmaWxlIHBhdGggdG8gdGhlIGNhY2hlIG9mIGVhY2ggZGlyZWN0b3J5IHNlYXJjaGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzZWFyY2hlZDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbZGlyc1tqXV0ucHVzaChmaWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIGZpbGVQYXRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gZGlyZWN0b3J5O1xuXG4gICAgICAgICAgICAvLyBBc3NpZ24gcGFyZW50IGRpcmVjdG9yeSB0byBkaXJlY3RvcnkuXG4gICAgICAgICAgICBkaXJlY3RvcnkgPSBwYXRoLmRpcm5hbWUoZGlyZWN0b3J5KTtcblxuICAgICAgICAgICAgaWYgKGRpcmVjdG9yeSA9PT0gY2hpbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSB3aGlsZSAoIWNhY2hlLmhhc093blByb3BlcnR5KGRpcmVjdG9yeSkpO1xuXG4gICAgICAgIC8vIEFkZCB3aGF0IGhhcyBiZWVuIGNhY2hlZCBwcmV2aW91c2x5IHRvIHRoZSBjYWNoZSBvZiBlYWNoIGRpcmVjdG9yeSBzZWFyY2hlZC5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWFyY2hlZDsgaSsrKSB7XG4gICAgICAgICAgICBkaXJzLnB1c2guYXBwbHkoY2FjaGVbZGlyc1tpXV0sIGNhY2hlW2RpcmVjdG9yeV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgeWllbGQqIGNhY2hlW2RpcnNbMF1dO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlRmluZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSGVscGVyc1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBHZXQgYSBzdHJpbmcgaGFzaCBmb3IgYSBjb25maWcgdmVjdG9yXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IHZlY3RvciBjb25maWcgdmVjdG9yIHRvIGhhc2hcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGhhc2ggb2YgdGhlIHZlY3RvciB2YWx1ZXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGhhc2godmVjdG9yKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZlY3Rvcik7XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBUElcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBjYWNoaW5nIGNsYXNzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ29uZmlnQ2FjaGUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29uZmlnRnVsbE5hbWVDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5sb2NhbEhpZXJhcmNoeUNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLm1lcmdlZFZlY3RvckNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLm1lcmdlZENhY2hlID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBjb25maWcgb2JqZWN0IGZyb20gdGhlIGNhY2hlIGZvciB0aGUgc3BlY2lmaWVkIGNvbmZpZyBmaWxlIHBhdGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZ0Z1bGxOYW1lIHRoZSBuYW1lIG9mIHRoZSBjb25maWd1cmF0aW9uIGFzIHVzZWQgaW4gdGhlIGVzbGludCBjb25maWcoZS5nLiAncGx1Z2luOm5vZGUvcmVjb21tZW5kZWQnKSxcbiAgICAgKiBvciB0aGUgYWJzb2x1dGUgcGF0aCB0byBhIGNvbmZpZyBmaWxlLiBUaGlzIHNob3VsZCB1bmlxdWVseSBpZGVudGlmeSBhIGNvbmZpZy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IGNvbmZpZyBvYmplY3QsIGlmIGZvdW5kIGluIHRoZSBjYWNoZSwgb3RoZXJ3aXNlIG51bGxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldENvbmZpZyhjb25maWdGdWxsTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWdGdWxsTmFtZUNhY2hlLmdldChjb25maWdGdWxsTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIGNvbmZpZyBvYmplY3QgaW4gdGhlIGNhY2hlIGZvciB0aGUgc3BlY2lmaWVkIGNvbmZpZyBmaWxlIHBhdGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZ0Z1bGxOYW1lIHRoZSBuYW1lIG9mIHRoZSBjb25maWd1cmF0aW9uIGFzIHVzZWQgaW4gdGhlIGVzbGludCBjb25maWcoZS5nLiAncGx1Z2luOm5vZGUvcmVjb21tZW5kZWQnKSxcbiAgICAgKiBvciB0aGUgYWJzb2x1dGUgcGF0aCB0byBhIGNvbmZpZyBmaWxlLiBUaGlzIHNob3VsZCB1bmlxdWVseSBpZGVudGlmeSBhIGNvbmZpZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIHRoZSBjb25maWcgb2JqZWN0IHRvIGFkZCB0byB0aGUgY2FjaGVcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHNldENvbmZpZyhjb25maWdGdWxsTmFtZSwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnRnVsbE5hbWVDYWNoZS5zZXQoY29uZmlnRnVsbE5hbWUsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgaGllcmFyY2h5LWxvY2FsIGNvbmZpZyBvYmplY3RzIHRoYXQgYXBwbHkgdG8gdGhlIHNwZWNpZmllZCBkaXJlY3RvcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdG9yeSB0aGUgcGF0aCB0byB0aGUgZGlyZWN0b3J5XG4gICAgICogQHJldHVybnMge09iamVjdFtdfG51bGx9IGEgbGlzdCBvZiBjb25maWcgb2JqZWN0cywgaWYgZm91bmQgaW4gdGhlIGNhY2hlLCBvdGhlcndpc2UgbnVsbFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0SGllcmFyY2h5TG9jYWxDb25maWdzKGRpcmVjdG9yeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbEhpZXJhcmNoeUNhY2hlLmdldChkaXJlY3RvcnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBwYXJlbnQgZGlyZWN0b3JpZXMsIHNldHMgdGhlIGxpc3Qgb2YgY29uZmlnIG9iamVjdHMgZm9yIHRoYXQgZGlyZWN0b3J5IHRvIHRoZVxuICAgICAqIGFwcHJvcHJpYXRlIHN1YnNldCBvZiB0aGUgc3VwcGxpZWQgcGFyZW50IGNvbmZpZyBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmVudERpcmVjdG9yaWVzIGEgbGlzdCBvZiBwYXJlbnQgZGlyZWN0b3JpZXMgdG8gYWRkIHRvIHRoZSBjb25maWcgY2FjaGVcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBwYXJlbnRDb25maWdzIGEgbGlzdCBvZiBjb25maWcgb2JqZWN0cyB0aGF0IGFwcGx5IHRvIHRoZSBsb3dlc3QgZGlyZWN0b3J5IGluIHBhcmVudERpcmVjdG9yaWVzXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzZXRIaWVyYXJjaHlMb2NhbENvbmZpZ3MocGFyZW50RGlyZWN0b3JpZXMsIHBhcmVudENvbmZpZ3MpIHtcbiAgICAgICAgcGFyZW50RGlyZWN0b3JpZXMuZm9yRWFjaCgobG9jYWxDb25maWdEaXJlY3RvcnksIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdG9yeVBhcmVudENvbmZpZ3MgPSBwYXJlbnRDb25maWdzLnNsaWNlKDAsIHBhcmVudENvbmZpZ3MubGVuZ3RoIC0gaSk7XG5cbiAgICAgICAgICAgIHRoaXMubG9jYWxIaWVyYXJjaHlDYWNoZS5zZXQobG9jYWxDb25maWdEaXJlY3RvcnksIGRpcmVjdG9yeVBhcmVudENvbmZpZ3MpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbWVyZ2VkIGNvbmZpZyBvYmplY3QgY29ycmVzcG9uZGluZyB0byB0aGUgc3VwcGxpZWQgdmVjdG9yLlxuICAgICAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gdmVjdG9yIHRoZSB2ZWN0b3IgdG8gZmluZCBhIG1lcmdlZCBjb25maWcgZm9yXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfSBhIG1lcmdlZCBjb25maWcgb2JqZWN0LCBpZiBmb3VuZCBpbiB0aGUgY2FjaGUsIG90aGVyd2lzZSBudWxsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRNZXJnZWRWZWN0b3JDb25maWcodmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lcmdlZFZlY3RvckNhY2hlLmdldChoYXNoKHZlY3RvcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtZXJnZWQgY29uZmlnIG9iamVjdCBpbiB0aGUgY2FjaGUgZm9yIHRoZSBzdXBwbGllZCB2ZWN0b3IuXG4gICAgICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSB2ZWN0b3IgdGhlIHZlY3RvciB0byBzYXZlIGEgbWVyZ2VkIGNvbmZpZyBmb3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIHRoZSBtZXJnZWQgY29uZmlnIG9iamVjdCB0byBhZGQgdG8gdGhlIGNhY2hlXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzZXRNZXJnZWRWZWN0b3JDb25maWcodmVjdG9yLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5tZXJnZWRWZWN0b3JDYWNoZS5zZXQoaGFzaCh2ZWN0b3IpLCBjb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBtZXJnZWQgY29uZmlnIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBzdXBwbGllZCB2ZWN0b3IsIGluY2x1ZGluZyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZnJvbSBvdXRzaWRlXG4gICAgICogdGhlIHZlY3Rvci5cbiAgICAgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IHZlY3RvciB0aGUgdmVjdG9yIHRvIGZpbmQgYSBtZXJnZWQgY29uZmlnIGZvclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gYSBtZXJnZWQgY29uZmlnIG9iamVjdCwgaWYgZm91bmQgaW4gdGhlIGNhY2hlLCBvdGhlcndpc2UgbnVsbFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0TWVyZ2VkQ29uZmlnKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXJnZWRDYWNoZS5nZXQoaGFzaCh2ZWN0b3IpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbWVyZ2VkIGNvbmZpZyBvYmplY3QgaW4gdGhlIGNhY2hlIGZvciB0aGUgc3VwcGxpZWQgdmVjdG9yLCBpbmNsdWRpbmcgY29uZmlndXJhdGlvbiBvcHRpb25zIGZyb20gb3V0c2lkZVxuICAgICAqIHRoZSB2ZWN0b3IuXG4gICAgICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSB2ZWN0b3IgdGhlIHZlY3RvciB0byBzYXZlIGEgbWVyZ2VkIGNvbmZpZyBmb3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIHRoZSBtZXJnZWQgY29uZmlnIG9iamVjdCB0byBhZGQgdG8gdGhlIGNhY2hlXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzZXRNZXJnZWRDb25maWcodmVjdG9yLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5tZXJnZWRDYWNoZS5zZXQoaGFzaCh2ZWN0b3IpLCBjb25maWcpO1xuICAgIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuXG52YXIgY29tbW9uICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgWUFNTEV4Y2VwdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG52YXIgREVGQVVMVF9GVUxMX1NDSEVNQSA9IHJlcXVpcmUoJy4vc2NoZW1hL2RlZmF1bHRfZnVsbCcpO1xudmFyIERFRkFVTFRfU0FGRV9TQ0hFTUEgPSByZXF1aXJlKCcuL3NjaGVtYS9kZWZhdWx0X3NhZmUnKTtcblxudmFyIF90b1N0cmluZyAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIENIQVJfVEFCICAgICAgICAgICAgICAgICAgPSAweDA5OyAvKiBUYWIgKi9cbnZhciBDSEFSX0xJTkVfRkVFRCAgICAgICAgICAgID0gMHgwQTsgLyogTEYgKi9cbnZhciBDSEFSX1NQQUNFICAgICAgICAgICAgICAgID0gMHgyMDsgLyogU3BhY2UgKi9cbnZhciBDSEFSX0VYQ0xBTUFUSU9OICAgICAgICAgID0gMHgyMTsgLyogISAqL1xudmFyIENIQVJfRE9VQkxFX1FVT1RFICAgICAgICAgPSAweDIyOyAvKiBcIiAqL1xudmFyIENIQVJfU0hBUlAgICAgICAgICAgICAgICAgPSAweDIzOyAvKiAjICovXG52YXIgQ0hBUl9QRVJDRU5UICAgICAgICAgICAgICA9IDB4MjU7IC8qICUgKi9cbnZhciBDSEFSX0FNUEVSU0FORCAgICAgICAgICAgID0gMHgyNjsgLyogJiAqL1xudmFyIENIQVJfU0lOR0xFX1FVT1RFICAgICAgICAgPSAweDI3OyAvKiAnICovXG52YXIgQ0hBUl9BU1RFUklTSyAgICAgICAgICAgICA9IDB4MkE7IC8qICogKi9cbnZhciBDSEFSX0NPTU1BICAgICAgICAgICAgICAgID0gMHgyQzsgLyogLCAqL1xudmFyIENIQVJfTUlOVVMgICAgICAgICAgICAgICAgPSAweDJEOyAvKiAtICovXG52YXIgQ0hBUl9DT0xPTiAgICAgICAgICAgICAgICA9IDB4M0E7IC8qIDogKi9cbnZhciBDSEFSX0dSRUFURVJfVEhBTiAgICAgICAgID0gMHgzRTsgLyogPiAqL1xudmFyIENIQVJfUVVFU1RJT04gICAgICAgICAgICAgPSAweDNGOyAvKiA/ICovXG52YXIgQ0hBUl9DT01NRVJDSUFMX0FUICAgICAgICA9IDB4NDA7IC8qIEAgKi9cbnZhciBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQgID0gMHg1QjsgLyogWyAqL1xudmFyIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQgPSAweDVEOyAvKiBdICovXG52YXIgQ0hBUl9HUkFWRV9BQ0NFTlQgICAgICAgICA9IDB4NjA7IC8qIGAgKi9cbnZhciBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVCAgID0gMHg3QjsgLyogeyAqL1xudmFyIENIQVJfVkVSVElDQUxfTElORSAgICAgICAgPSAweDdDOyAvKiB8ICovXG52YXIgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUICA9IDB4N0Q7IC8qIH0gKi9cblxudmFyIEVTQ0FQRV9TRVFVRU5DRVMgPSB7fTtcblxuRVNDQVBFX1NFUVVFTkNFU1sweDAwXSAgID0gJ1xcXFwwJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwN10gICA9ICdcXFxcYSc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDhdICAgPSAnXFxcXGInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA5XSAgID0gJ1xcXFx0JztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQV0gICA9ICdcXFxcbic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MEJdICAgPSAnXFxcXHYnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBDXSAgID0gJ1xcXFxmJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwRF0gICA9ICdcXFxccic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MUJdICAgPSAnXFxcXGUnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIyXSAgID0gJ1xcXFxcIic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4NUNdICAgPSAnXFxcXFxcXFwnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDg1XSAgID0gJ1xcXFxOJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHhBMF0gICA9ICdcXFxcXyc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MjAyOF0gPSAnXFxcXEwnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIwMjldID0gJ1xcXFxQJztcblxudmFyIERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYID0gW1xuICAneScsICdZJywgJ3llcycsICdZZXMnLCAnWUVTJywgJ29uJywgJ09uJywgJ09OJyxcbiAgJ24nLCAnTicsICdubycsICdObycsICdOTycsICdvZmYnLCAnT2ZmJywgJ09GRidcbl07XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZU1hcChzY2hlbWEsIG1hcCkge1xuICB2YXIgcmVzdWx0LCBrZXlzLCBpbmRleCwgbGVuZ3RoLCB0YWcsIHN0eWxlLCB0eXBlO1xuXG4gIGlmIChtYXAgPT09IG51bGwpIHJldHVybiB7fTtcblxuICByZXN1bHQgPSB7fTtcbiAga2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHRhZyA9IGtleXNbaW5kZXhdO1xuICAgIHN0eWxlID0gU3RyaW5nKG1hcFt0YWddKTtcblxuICAgIGlmICh0YWcuc2xpY2UoMCwgMikgPT09ICchIScpIHtcbiAgICAgIHRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjonICsgdGFnLnNsaWNlKDIpO1xuICAgIH1cbiAgICB0eXBlID0gc2NoZW1hLmNvbXBpbGVkVHlwZU1hcFsnZmFsbGJhY2snXVt0YWddO1xuXG4gICAgaWYgKHR5cGUgJiYgX2hhc093blByb3BlcnR5LmNhbGwodHlwZS5zdHlsZUFsaWFzZXMsIHN0eWxlKSkge1xuICAgICAgc3R5bGUgPSB0eXBlLnN0eWxlQWxpYXNlc1tzdHlsZV07XG4gICAgfVxuXG4gICAgcmVzdWx0W3RhZ10gPSBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUhleChjaGFyYWN0ZXIpIHtcbiAgdmFyIHN0cmluZywgaGFuZGxlLCBsZW5ndGg7XG5cbiAgc3RyaW5nID0gY2hhcmFjdGVyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgPD0gMHhGRikge1xuICAgIGhhbmRsZSA9ICd4JztcbiAgICBsZW5ndGggPSAyO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkYpIHtcbiAgICBoYW5kbGUgPSAndSc7XG4gICAgbGVuZ3RoID0gNDtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPD0gMHhGRkZGRkZGRikge1xuICAgIGhhbmRsZSA9ICdVJztcbiAgICBsZW5ndGggPSA4O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdjb2RlIHBvaW50IHdpdGhpbiBhIHN0cmluZyBtYXkgbm90IGJlIGdyZWF0ZXIgdGhhbiAweEZGRkZGRkZGJyk7XG4gIH1cblxuICByZXR1cm4gJ1xcXFwnICsgaGFuZGxlICsgY29tbW9uLnJlcGVhdCgnMCcsIGxlbmd0aCAtIHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBTdGF0ZShvcHRpb25zKSB7XG4gIHRoaXMuc2NoZW1hICAgICAgID0gb3B0aW9uc1snc2NoZW1hJ10gfHwgREVGQVVMVF9GVUxMX1NDSEVNQTtcbiAgdGhpcy5pbmRlbnQgICAgICAgPSBNYXRoLm1heCgxLCAob3B0aW9uc1snaW5kZW50J10gfHwgMikpO1xuICB0aGlzLnNraXBJbnZhbGlkICA9IG9wdGlvbnNbJ3NraXBJbnZhbGlkJ10gfHwgZmFsc2U7XG4gIHRoaXMuZmxvd0xldmVsICAgID0gKGNvbW1vbi5pc05vdGhpbmcob3B0aW9uc1snZmxvd0xldmVsJ10pID8gLTEgOiBvcHRpb25zWydmbG93TGV2ZWwnXSk7XG4gIHRoaXMuc3R5bGVNYXAgICAgID0gY29tcGlsZVN0eWxlTWFwKHRoaXMuc2NoZW1hLCBvcHRpb25zWydzdHlsZXMnXSB8fCBudWxsKTtcbiAgdGhpcy5zb3J0S2V5cyAgICAgPSBvcHRpb25zWydzb3J0S2V5cyddIHx8IGZhbHNlO1xuICB0aGlzLmxpbmVXaWR0aCAgICA9IG9wdGlvbnNbJ2xpbmVXaWR0aCddIHx8IDgwO1xuICB0aGlzLm5vUmVmcyAgICAgICA9IG9wdGlvbnNbJ25vUmVmcyddIHx8IGZhbHNlO1xuICB0aGlzLm5vQ29tcGF0TW9kZSA9IG9wdGlvbnNbJ25vQ29tcGF0TW9kZSddIHx8IGZhbHNlO1xuICB0aGlzLmNvbmRlbnNlRmxvdyA9IG9wdGlvbnNbJ2NvbmRlbnNlRmxvdyddIHx8IGZhbHNlO1xuXG4gIHRoaXMuaW1wbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQ7XG4gIHRoaXMuZXhwbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkRXhwbGljaXQ7XG5cbiAgdGhpcy50YWcgPSBudWxsO1xuICB0aGlzLnJlc3VsdCA9ICcnO1xuXG4gIHRoaXMuZHVwbGljYXRlcyA9IFtdO1xuICB0aGlzLnVzZWREdXBsaWNhdGVzID0gbnVsbDtcbn1cblxuLy8gSW5kZW50cyBldmVyeSBsaW5lIGluIGEgc3RyaW5nLiBFbXB0eSBsaW5lcyAoXFxuIG9ubHkpIGFyZSBub3QgaW5kZW50ZWQuXG5mdW5jdGlvbiBpbmRlbnRTdHJpbmcoc3RyaW5nLCBzcGFjZXMpIHtcbiAgdmFyIGluZCA9IGNvbW1vbi5yZXBlYXQoJyAnLCBzcGFjZXMpLFxuICAgICAgcG9zaXRpb24gPSAwLFxuICAgICAgbmV4dCA9IC0xLFxuICAgICAgcmVzdWx0ID0gJycsXG4gICAgICBsaW5lLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICBuZXh0ID0gc3RyaW5nLmluZGV4T2YoJ1xcbicsIHBvc2l0aW9uKTtcbiAgICBpZiAobmV4dCA9PT0gLTEpIHtcbiAgICAgIGxpbmUgPSBzdHJpbmcuc2xpY2UocG9zaXRpb24pO1xuICAgICAgcG9zaXRpb24gPSBsZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmUgPSBzdHJpbmcuc2xpY2UocG9zaXRpb24sIG5leHQgKyAxKTtcbiAgICAgIHBvc2l0aW9uID0gbmV4dCArIDE7XG4gICAgfVxuXG4gICAgaWYgKGxpbmUubGVuZ3RoICYmIGxpbmUgIT09ICdcXG4nKSByZXN1bHQgKz0gaW5kO1xuXG4gICAgcmVzdWx0ICs9IGxpbmU7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCkge1xuICByZXR1cm4gJ1xcbicgKyBjb21tb24ucmVwZWF0KCcgJywgc3RhdGUuaW5kZW50ICogbGV2ZWwpO1xufVxuXG5mdW5jdGlvbiB0ZXN0SW1wbGljaXRSZXNvbHZpbmcoc3RhdGUsIHN0cikge1xuICB2YXIgaW5kZXgsIGxlbmd0aCwgdHlwZTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gc3RhdGUuaW1wbGljaXRUeXBlcy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdHlwZSA9IHN0YXRlLmltcGxpY2l0VHlwZXNbaW5kZXhdO1xuXG4gICAgaWYgKHR5cGUucmVzb2x2ZShzdHIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIFszM10gcy13aGl0ZSA6Oj0gcy1zcGFjZSB8IHMtdGFiXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UoYykge1xuICByZXR1cm4gYyA9PT0gQ0hBUl9TUEFDRSB8fCBjID09PSBDSEFSX1RBQjtcbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBjaGFyYWN0ZXIgY2FuIGJlIHByaW50ZWQgd2l0aG91dCBlc2NhcGluZy5cbi8vIEZyb20gWUFNTCAxLjI6IFwiYW55IGFsbG93ZWQgY2hhcmFjdGVycyBrbm93biB0byBiZSBub24tcHJpbnRhYmxlXG4vLyBzaG91bGQgYWxzbyBiZSBlc2NhcGVkLiBbSG93ZXZlcixdIFRoaXMgaXNu4oCZdCBtYW5kYXRvcnlcIlxuLy8gRGVyaXZlZCBmcm9tIG5iLWNoYXIgLSBcXHQgLSAjeDg1IC0gI3hBMCAtICN4MjAyOCAtICN4MjAyOS5cbmZ1bmN0aW9uIGlzUHJpbnRhYmxlKGMpIHtcbiAgcmV0dXJuICAoMHgwMDAyMCA8PSBjICYmIGMgPD0gMHgwMDAwN0UpXG4gICAgICB8fCAoKDB4MDAwQTEgPD0gYyAmJiBjIDw9IDB4MDBEN0ZGKSAmJiBjICE9PSAweDIwMjggJiYgYyAhPT0gMHgyMDI5KVxuICAgICAgfHwgKCgweDBFMDAwIDw9IGMgJiYgYyA8PSAweDAwRkZGRCkgJiYgYyAhPT0gMHhGRUZGIC8qIEJPTSAqLylcbiAgICAgIHx8ICAoMHgxMDAwMCA8PSBjICYmIGMgPD0gMHgxMEZGRkYpO1xufVxuXG4vLyBTaW1wbGlmaWVkIHRlc3QgZm9yIHZhbHVlcyBhbGxvd2VkIGFmdGVyIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gcGxhaW4gc3R5bGUuXG5mdW5jdGlvbiBpc1BsYWluU2FmZShjKSB7XG4gIC8vIFVzZXMgYSBzdWJzZXQgb2YgbmItY2hhciAtIGMtZmxvdy1pbmRpY2F0b3IgLSBcIjpcIiAtIFwiI1wiXG4gIC8vIHdoZXJlIG5iLWNoYXIgOjo9IGMtcHJpbnRhYmxlIC0gYi1jaGFyIC0gYy1ieXRlLW9yZGVyLW1hcmsuXG4gIHJldHVybiBpc1ByaW50YWJsZShjKSAmJiBjICE9PSAweEZFRkZcbiAgICAvLyAtIGMtZmxvdy1pbmRpY2F0b3JcbiAgICAmJiBjICE9PSBDSEFSX0NPTU1BXG4gICAgJiYgYyAhPT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUXG4gICAgLy8gLSBcIjpcIiAtIFwiI1wiXG4gICAgJiYgYyAhPT0gQ0hBUl9DT0xPTlxuICAgICYmIGMgIT09IENIQVJfU0hBUlA7XG59XG5cbi8vIFNpbXBsaWZpZWQgdGVzdCBmb3IgdmFsdWVzIGFsbG93ZWQgYXMgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiBwbGFpbiBzdHlsZS5cbmZ1bmN0aW9uIGlzUGxhaW5TYWZlRmlyc3QoYykge1xuICAvLyBVc2VzIGEgc3Vic2V0IG9mIG5zLWNoYXIgLSBjLWluZGljYXRvclxuICAvLyB3aGVyZSBucy1jaGFyID0gbmItY2hhciAtIHMtd2hpdGUuXG4gIHJldHVybiBpc1ByaW50YWJsZShjKSAmJiBjICE9PSAweEZFRkZcbiAgICAmJiAhaXNXaGl0ZXNwYWNlKGMpIC8vIC0gcy13aGl0ZVxuICAgIC8vIC0gKGMtaW5kaWNhdG9yIDo6PVxuICAgIC8vIOKAnC3igJ0gfCDigJw/4oCdIHwg4oCcOuKAnSB8IOKAnCzigJ0gfCDigJxb4oCdIHwg4oCcXeKAnSB8IOKAnHvigJ0gfCDigJx94oCdXG4gICAgJiYgYyAhPT0gQ0hBUl9NSU5VU1xuICAgICYmIGMgIT09IENIQVJfUVVFU1RJT05cbiAgICAmJiBjICE9PSBDSEFSX0NPTE9OXG4gICAgJiYgYyAhPT0gQ0hBUl9DT01NQVxuICAgICYmIGMgIT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVFxuICAgIC8vIHwg4oCcI+KAnSB8IOKAnCbigJ0gfCDigJwq4oCdIHwg4oCcIeKAnSB8IOKAnHzigJ0gfCDigJw+4oCdIHwg4oCcJ+KAnSB8IOKAnFwi4oCdXG4gICAgJiYgYyAhPT0gQ0hBUl9TSEFSUFxuICAgICYmIGMgIT09IENIQVJfQU1QRVJTQU5EXG4gICAgJiYgYyAhPT0gQ0hBUl9BU1RFUklTS1xuICAgICYmIGMgIT09IENIQVJfRVhDTEFNQVRJT05cbiAgICAmJiBjICE9PSBDSEFSX1ZFUlRJQ0FMX0xJTkVcbiAgICAmJiBjICE9PSBDSEFSX0dSRUFURVJfVEhBTlxuICAgICYmIGMgIT09IENIQVJfU0lOR0xFX1FVT1RFXG4gICAgJiYgYyAhPT0gQ0hBUl9ET1VCTEVfUVVPVEVcbiAgICAvLyB8IOKAnCXigJ0gfCDigJxA4oCdIHwg4oCcYOKAnSlcbiAgICAmJiBjICE9PSBDSEFSX1BFUkNFTlRcbiAgICAmJiBjICE9PSBDSEFSX0NPTU1FUkNJQUxfQVRcbiAgICAmJiBjICE9PSBDSEFSX0dSQVZFX0FDQ0VOVDtcbn1cblxudmFyIFNUWUxFX1BMQUlOICAgPSAxLFxuICAgIFNUWUxFX1NJTkdMRSAgPSAyLFxuICAgIFNUWUxFX0xJVEVSQUwgPSAzLFxuICAgIFNUWUxFX0ZPTERFRCAgPSA0LFxuICAgIFNUWUxFX0RPVUJMRSAgPSA1O1xuXG4vLyBEZXRlcm1pbmVzIHdoaWNoIHNjYWxhciBzdHlsZXMgYXJlIHBvc3NpYmxlIGFuZCByZXR1cm5zIHRoZSBwcmVmZXJyZWQgc3R5bGUuXG4vLyBsaW5lV2lkdGggPSAtMSA9PiBubyBsaW1pdC5cbi8vIFByZS1jb25kaXRpb25zOiBzdHIubGVuZ3RoID4gMC5cbi8vIFBvc3QtY29uZGl0aW9uczpcbi8vICAgIFNUWUxFX1BMQUlOIG9yIFNUWUxFX1NJTkdMRSA9PiBubyBcXG4gYXJlIGluIHRoZSBzdHJpbmcuXG4vLyAgICBTVFlMRV9MSVRFUkFMID0+IG5vIGxpbmVzIGFyZSBzdWl0YWJsZSBmb3IgZm9sZGluZyAob3IgbGluZVdpZHRoIGlzIC0xKS5cbi8vICAgIFNUWUxFX0ZPTERFRCA9PiBhIGxpbmUgPiBsaW5lV2lkdGggYW5kIGNhbiBiZSBmb2xkZWQgKGFuZCBsaW5lV2lkdGggIT0gLTEpLlxuZnVuY3Rpb24gY2hvb3NlU2NhbGFyU3R5bGUoc3RyaW5nLCBzaW5nbGVMaW5lT25seSwgaW5kZW50UGVyTGV2ZWwsIGxpbmVXaWR0aCwgdGVzdEFtYmlndW91c1R5cGUpIHtcbiAgdmFyIGk7XG4gIHZhciBjaGFyO1xuICB2YXIgaGFzTGluZUJyZWFrID0gZmFsc2U7XG4gIHZhciBoYXNGb2xkYWJsZUxpbmUgPSBmYWxzZTsgLy8gb25seSBjaGVja2VkIGlmIHNob3VsZFRyYWNrV2lkdGhcbiAgdmFyIHNob3VsZFRyYWNrV2lkdGggPSBsaW5lV2lkdGggIT09IC0xO1xuICB2YXIgcHJldmlvdXNMaW5lQnJlYWsgPSAtMTsgLy8gY291bnQgdGhlIGZpcnN0IGxpbmUgY29ycmVjdGx5XG4gIHZhciBwbGFpbiA9IGlzUGxhaW5TYWZlRmlyc3Qoc3RyaW5nLmNoYXJDb2RlQXQoMCkpXG4gICAgICAgICAgJiYgIWlzV2hpdGVzcGFjZShzdHJpbmcuY2hhckNvZGVBdChzdHJpbmcubGVuZ3RoIC0gMSkpO1xuXG4gIGlmIChzaW5nbGVMaW5lT25seSkge1xuICAgIC8vIENhc2U6IG5vIGJsb2NrIHN0eWxlcy5cbiAgICAvLyBDaGVjayBmb3IgZGlzYWxsb3dlZCBjaGFyYWN0ZXJzIHRvIHJ1bGUgb3V0IHBsYWluIGFuZCBzaW5nbGUuXG4gICAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhciA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgaWYgKCFpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICAgICAgfVxuICAgICAgcGxhaW4gPSBwbGFpbiAmJiBpc1BsYWluU2FmZShjaGFyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2FzZTogYmxvY2sgc3R5bGVzIHBlcm1pdHRlZC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY2hhciA9PT0gQ0hBUl9MSU5FX0ZFRUQpIHtcbiAgICAgICAgaGFzTGluZUJyZWFrID0gdHJ1ZTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGxpbmUgY2FuIGJlIGZvbGRlZC5cbiAgICAgICAgaWYgKHNob3VsZFRyYWNrV2lkdGgpIHtcbiAgICAgICAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHxcbiAgICAgICAgICAgIC8vIEZvbGRhYmxlIGxpbmUgPSB0b28gbG9uZywgYW5kIG5vdCBtb3JlLWluZGVudGVkLlxuICAgICAgICAgICAgKGkgLSBwcmV2aW91c0xpbmVCcmVhayAtIDEgPiBsaW5lV2lkdGggJiZcbiAgICAgICAgICAgICBzdHJpbmdbcHJldmlvdXNMaW5lQnJlYWsgKyAxXSAhPT0gJyAnKTtcbiAgICAgICAgICBwcmV2aW91c0xpbmVCcmVhayA9IGk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gICAgICB9XG4gICAgICBwbGFpbiA9IHBsYWluICYmIGlzUGxhaW5TYWZlKGNoYXIpO1xuICAgIH1cbiAgICAvLyBpbiBjYXNlIHRoZSBlbmQgaXMgbWlzc2luZyBhIFxcblxuICAgIGhhc0ZvbGRhYmxlTGluZSA9IGhhc0ZvbGRhYmxlTGluZSB8fCAoc2hvdWxkVHJhY2tXaWR0aCAmJlxuICAgICAgKGkgLSBwcmV2aW91c0xpbmVCcmVhayAtIDEgPiBsaW5lV2lkdGggJiZcbiAgICAgICBzdHJpbmdbcHJldmlvdXNMaW5lQnJlYWsgKyAxXSAhPT0gJyAnKSk7XG4gIH1cbiAgLy8gQWx0aG91Z2ggZXZlcnkgc3R5bGUgY2FuIHJlcHJlc2VudCBcXG4gd2l0aG91dCBlc2NhcGluZywgcHJlZmVyIGJsb2NrIHN0eWxlc1xuICAvLyBmb3IgbXVsdGlsaW5lLCBzaW5jZSB0aGV5J3JlIG1vcmUgcmVhZGFibGUgYW5kIHRoZXkgZG9uJ3QgYWRkIGVtcHR5IGxpbmVzLlxuICAvLyBBbHNvIHByZWZlciBmb2xkaW5nIGEgc3VwZXItbG9uZyBsaW5lLlxuICBpZiAoIWhhc0xpbmVCcmVhayAmJiAhaGFzRm9sZGFibGVMaW5lKSB7XG4gICAgLy8gU3RyaW5ncyBpbnRlcnByZXRhYmxlIGFzIGFub3RoZXIgdHlwZSBoYXZlIHRvIGJlIHF1b3RlZDtcbiAgICAvLyBlLmcuIHRoZSBzdHJpbmcgJ3RydWUnIHZzLiB0aGUgYm9vbGVhbiB0cnVlLlxuICAgIHJldHVybiBwbGFpbiAmJiAhdGVzdEFtYmlndW91c1R5cGUoc3RyaW5nKVxuICAgICAgPyBTVFlMRV9QTEFJTiA6IFNUWUxFX1NJTkdMRTtcbiAgfVxuICAvLyBFZGdlIGNhc2U6IGJsb2NrIGluZGVudGF0aW9uIGluZGljYXRvciBjYW4gb25seSBoYXZlIG9uZSBkaWdpdC5cbiAgaWYgKHN0cmluZ1swXSA9PT0gJyAnICYmIGluZGVudFBlckxldmVsID4gOSkge1xuICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gIH1cbiAgLy8gQXQgdGhpcyBwb2ludCB3ZSBrbm93IGJsb2NrIHN0eWxlcyBhcmUgdmFsaWQuXG4gIC8vIFByZWZlciBsaXRlcmFsIHN0eWxlIHVubGVzcyB3ZSB3YW50IHRvIGZvbGQuXG4gIHJldHVybiBoYXNGb2xkYWJsZUxpbmUgPyBTVFlMRV9GT0xERUQgOiBTVFlMRV9MSVRFUkFMO1xufVxuXG4vLyBOb3RlOiBsaW5lIGJyZWFraW5nL2ZvbGRpbmcgaXMgaW1wbGVtZW50ZWQgZm9yIG9ubHkgdGhlIGZvbGRlZCBzdHlsZS5cbi8vIE5CLiBXZSBkcm9wIHRoZSBsYXN0IHRyYWlsaW5nIG5ld2xpbmUgKGlmIGFueSkgb2YgYSByZXR1cm5lZCBibG9jayBzY2FsYXJcbi8vICBzaW5jZSB0aGUgZHVtcGVyIGFkZHMgaXRzIG93biBuZXdsaW5lLiBUaGlzIGFsd2F5cyB3b3Jrczpcbi8vICAgIOKAoiBObyBlbmRpbmcgbmV3bGluZSA9PiB1bmFmZmVjdGVkOyBhbHJlYWR5IHVzaW5nIHN0cmlwIFwiLVwiIGNob21waW5nLlxuLy8gICAg4oCiIEVuZGluZyBuZXdsaW5lICAgID0+IHJlbW92ZWQgdGhlbiByZXN0b3JlZC5cbi8vICBJbXBvcnRhbnRseSwgdGhpcyBrZWVwcyB0aGUgXCIrXCIgY2hvbXAgaW5kaWNhdG9yIGZyb20gZ2FpbmluZyBhbiBleHRyYSBsaW5lLlxuZnVuY3Rpb24gd3JpdGVTY2FsYXIoc3RhdGUsIHN0cmluZywgbGV2ZWwsIGlza2V5KSB7XG4gIHN0YXRlLmR1bXAgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gXCInJ1wiO1xuICAgIH1cbiAgICBpZiAoIXN0YXRlLm5vQ29tcGF0TW9kZSAmJlxuICAgICAgICBERVBSRUNBVEVEX0JPT0xFQU5TX1NZTlRBWC5pbmRleE9mKHN0cmluZykgIT09IC0xKSB7XG4gICAgICByZXR1cm4gXCInXCIgKyBzdHJpbmcgKyBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgaW5kZW50ID0gc3RhdGUuaW5kZW50ICogTWF0aC5tYXgoMSwgbGV2ZWwpOyAvLyBubyAwLWluZGVudCBzY2FsYXJzXG4gICAgLy8gQXMgaW5kZW50YXRpb24gZ2V0cyBkZWVwZXIsIGxldCB0aGUgd2lkdGggZGVjcmVhc2UgbW9ub3RvbmljYWxseVxuICAgIC8vIHRvIHRoZSBsb3dlciBib3VuZCBtaW4oc3RhdGUubGluZVdpZHRoLCA0MCkuXG4gICAgLy8gTm90ZSB0aGF0IHRoaXMgaW1wbGllc1xuICAgIC8vICBzdGF0ZS5saW5lV2lkdGgg4omkIDQwICsgc3RhdGUuaW5kZW50OiB3aWR0aCBpcyBmaXhlZCBhdCB0aGUgbG93ZXIgYm91bmQuXG4gICAgLy8gIHN0YXRlLmxpbmVXaWR0aCA+IDQwICsgc3RhdGUuaW5kZW50OiB3aWR0aCBkZWNyZWFzZXMgdW50aWwgdGhlIGxvd2VyIGJvdW5kLlxuICAgIC8vIFRoaXMgYmVoYXZlcyBiZXR0ZXIgdGhhbiBhIGNvbnN0YW50IG1pbmltdW0gd2lkdGggd2hpY2ggZGlzYWxsb3dzIG5hcnJvd2VyIG9wdGlvbnMsXG4gICAgLy8gb3IgYW4gaW5kZW50IHRocmVzaG9sZCB3aGljaCBjYXVzZXMgdGhlIHdpZHRoIHRvIHN1ZGRlbmx5IGluY3JlYXNlLlxuICAgIHZhciBsaW5lV2lkdGggPSBzdGF0ZS5saW5lV2lkdGggPT09IC0xXG4gICAgICA/IC0xIDogTWF0aC5tYXgoTWF0aC5taW4oc3RhdGUubGluZVdpZHRoLCA0MCksIHN0YXRlLmxpbmVXaWR0aCAtIGluZGVudCk7XG5cbiAgICAvLyBXaXRob3V0IGtub3dpbmcgaWYga2V5cyBhcmUgaW1wbGljaXQvZXhwbGljaXQsIGFzc3VtZSBpbXBsaWNpdCBmb3Igc2FmZXR5LlxuICAgIHZhciBzaW5nbGVMaW5lT25seSA9IGlza2V5XG4gICAgICAvLyBObyBibG9jayBzdHlsZXMgaW4gZmxvdyBtb2RlLlxuICAgICAgfHwgKHN0YXRlLmZsb3dMZXZlbCA+IC0xICYmIGxldmVsID49IHN0YXRlLmZsb3dMZXZlbCk7XG4gICAgZnVuY3Rpb24gdGVzdEFtYmlndWl0eShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB0ZXN0SW1wbGljaXRSZXNvbHZpbmcoc3RhdGUsIHN0cmluZyk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjaG9vc2VTY2FsYXJTdHlsZShzdHJpbmcsIHNpbmdsZUxpbmVPbmx5LCBzdGF0ZS5pbmRlbnQsIGxpbmVXaWR0aCwgdGVzdEFtYmlndWl0eSkpIHtcbiAgICAgIGNhc2UgU1RZTEVfUExBSU46XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICBjYXNlIFNUWUxFX1NJTkdMRTpcbiAgICAgICAgcmV0dXJuIFwiJ1wiICsgc3RyaW5nLnJlcGxhY2UoLycvZywgXCInJ1wiKSArIFwiJ1wiO1xuICAgICAgY2FzZSBTVFlMRV9MSVRFUkFMOlxuICAgICAgICByZXR1cm4gJ3wnICsgYmxvY2tIZWFkZXIoc3RyaW5nLCBzdGF0ZS5pbmRlbnQpXG4gICAgICAgICAgKyBkcm9wRW5kaW5nTmV3bGluZShpbmRlbnRTdHJpbmcoc3RyaW5nLCBpbmRlbnQpKTtcbiAgICAgIGNhc2UgU1RZTEVfRk9MREVEOlxuICAgICAgICByZXR1cm4gJz4nICsgYmxvY2tIZWFkZXIoc3RyaW5nLCBzdGF0ZS5pbmRlbnQpXG4gICAgICAgICAgKyBkcm9wRW5kaW5nTmV3bGluZShpbmRlbnRTdHJpbmcoZm9sZFN0cmluZyhzdHJpbmcsIGxpbmVXaWR0aCksIGluZGVudCkpO1xuICAgICAgY2FzZSBTVFlMRV9ET1VCTEU6XG4gICAgICAgIHJldHVybiAnXCInICsgZXNjYXBlU3RyaW5nKHN0cmluZywgbGluZVdpZHRoKSArICdcIic7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignaW1wb3NzaWJsZSBlcnJvcjogaW52YWxpZCBzY2FsYXIgc3R5bGUnKTtcbiAgICB9XG4gIH0oKSk7XG59XG5cbi8vIFByZS1jb25kaXRpb25zOiBzdHJpbmcgaXMgdmFsaWQgZm9yIGEgYmxvY2sgc2NhbGFyLCAxIDw9IGluZGVudFBlckxldmVsIDw9IDkuXG5mdW5jdGlvbiBibG9ja0hlYWRlcihzdHJpbmcsIGluZGVudFBlckxldmVsKSB7XG4gIHZhciBpbmRlbnRJbmRpY2F0b3IgPSAoc3RyaW5nWzBdID09PSAnICcpID8gU3RyaW5nKGluZGVudFBlckxldmVsKSA6ICcnO1xuXG4gIC8vIG5vdGUgdGhlIHNwZWNpYWwgY2FzZTogdGhlIHN0cmluZyAnXFxuJyBjb3VudHMgYXMgYSBcInRyYWlsaW5nXCIgZW1wdHkgbGluZS5cbiAgdmFyIGNsaXAgPSAgICAgICAgICBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnXFxuJztcbiAgdmFyIGtlZXAgPSBjbGlwICYmIChzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDJdID09PSAnXFxuJyB8fCBzdHJpbmcgPT09ICdcXG4nKTtcbiAgdmFyIGNob21wID0ga2VlcCA/ICcrJyA6IChjbGlwID8gJycgOiAnLScpO1xuXG4gIHJldHVybiBpbmRlbnRJbmRpY2F0b3IgKyBjaG9tcCArICdcXG4nO1xufVxuXG4vLyAoU2VlIHRoZSBub3RlIGZvciB3cml0ZVNjYWxhci4pXG5mdW5jdGlvbiBkcm9wRW5kaW5nTmV3bGluZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMV0gPT09ICdcXG4nID8gc3RyaW5nLnNsaWNlKDAsIC0xKSA6IHN0cmluZztcbn1cblxuLy8gTm90ZTogYSBsb25nIGxpbmUgd2l0aG91dCBhIHN1aXRhYmxlIGJyZWFrIHBvaW50IHdpbGwgZXhjZWVkIHRoZSB3aWR0aCBsaW1pdC5cbi8vIFByZS1jb25kaXRpb25zOiBldmVyeSBjaGFyIGluIHN0ciBpc1ByaW50YWJsZSwgc3RyLmxlbmd0aCA+IDAsIHdpZHRoID4gMC5cbmZ1bmN0aW9uIGZvbGRTdHJpbmcoc3RyaW5nLCB3aWR0aCkge1xuICAvLyBJbiBmb2xkZWQgc3R5bGUsICRrJCBjb25zZWN1dGl2ZSBuZXdsaW5lcyBvdXRwdXQgYXMgJGsrMSQgbmV3bGluZXPigJRcbiAgLy8gdW5sZXNzIHRoZXkncmUgYmVmb3JlIG9yIGFmdGVyIGEgbW9yZS1pbmRlbnRlZCBsaW5lLCBvciBhdCB0aGUgdmVyeVxuICAvLyBiZWdpbm5pbmcgb3IgZW5kLCBpbiB3aGljaCBjYXNlICRrJCBtYXBzIHRvICRrJC5cbiAgLy8gVGhlcmVmb3JlLCBwYXJzZSBlYWNoIGNodW5rIGFzIG5ld2xpbmUocykgZm9sbG93ZWQgYnkgYSBjb250ZW50IGxpbmUuXG4gIHZhciBsaW5lUmUgPSAvKFxcbispKFteXFxuXSopL2c7XG5cbiAgLy8gZmlyc3QgbGluZSAocG9zc2libHkgYW4gZW1wdHkgbGluZSlcbiAgdmFyIHJlc3VsdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHRMRiA9IHN0cmluZy5pbmRleE9mKCdcXG4nKTtcbiAgICBuZXh0TEYgPSBuZXh0TEYgIT09IC0xID8gbmV4dExGIDogc3RyaW5nLmxlbmd0aDtcbiAgICBsaW5lUmUubGFzdEluZGV4ID0gbmV4dExGO1xuICAgIHJldHVybiBmb2xkTGluZShzdHJpbmcuc2xpY2UoMCwgbmV4dExGKSwgd2lkdGgpO1xuICB9KCkpO1xuICAvLyBJZiB3ZSBoYXZlbid0IHJlYWNoZWQgdGhlIGZpcnN0IGNvbnRlbnQgbGluZSB5ZXQsIGRvbid0IGFkZCBhbiBleHRyYSBcXG4uXG4gIHZhciBwcmV2TW9yZUluZGVudGVkID0gc3RyaW5nWzBdID09PSAnXFxuJyB8fCBzdHJpbmdbMF0gPT09ICcgJztcbiAgdmFyIG1vcmVJbmRlbnRlZDtcblxuICAvLyByZXN0IG9mIHRoZSBsaW5lc1xuICB2YXIgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSBsaW5lUmUuZXhlYyhzdHJpbmcpKSkge1xuICAgIHZhciBwcmVmaXggPSBtYXRjaFsxXSwgbGluZSA9IG1hdGNoWzJdO1xuICAgIG1vcmVJbmRlbnRlZCA9IChsaW5lWzBdID09PSAnICcpO1xuICAgIHJlc3VsdCArPSBwcmVmaXhcbiAgICAgICsgKCFwcmV2TW9yZUluZGVudGVkICYmICFtb3JlSW5kZW50ZWQgJiYgbGluZSAhPT0gJydcbiAgICAgICAgPyAnXFxuJyA6ICcnKVxuICAgICAgKyBmb2xkTGluZShsaW5lLCB3aWR0aCk7XG4gICAgcHJldk1vcmVJbmRlbnRlZCA9IG1vcmVJbmRlbnRlZDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEdyZWVkeSBsaW5lIGJyZWFraW5nLlxuLy8gUGlja3MgdGhlIGxvbmdlc3QgbGluZSB1bmRlciB0aGUgbGltaXQgZWFjaCB0aW1lLFxuLy8gb3RoZXJ3aXNlIHNldHRsZXMgZm9yIHRoZSBzaG9ydGVzdCBsaW5lIG92ZXIgdGhlIGxpbWl0LlxuLy8gTkIuIE1vcmUtaW5kZW50ZWQgbGluZXMgKmNhbm5vdCogYmUgZm9sZGVkLCBhcyB0aGF0IHdvdWxkIGFkZCBhbiBleHRyYSBcXG4uXG5mdW5jdGlvbiBmb2xkTGluZShsaW5lLCB3aWR0aCkge1xuICBpZiAobGluZSA9PT0gJycgfHwgbGluZVswXSA9PT0gJyAnKSByZXR1cm4gbGluZTtcblxuICAvLyBTaW5jZSBhIG1vcmUtaW5kZW50ZWQgbGluZSBhZGRzIGEgXFxuLCBicmVha3MgY2FuJ3QgYmUgZm9sbG93ZWQgYnkgYSBzcGFjZS5cbiAgdmFyIGJyZWFrUmUgPSAvIFteIF0vZzsgLy8gbm90ZTogdGhlIG1hdGNoIGluZGV4IHdpbGwgYWx3YXlzIGJlIDw9IGxlbmd0aC0yLlxuICB2YXIgbWF0Y2g7XG4gIC8vIHN0YXJ0IGlzIGFuIGluY2x1c2l2ZSBpbmRleC4gZW5kLCBjdXJyLCBhbmQgbmV4dCBhcmUgZXhjbHVzaXZlLlxuICB2YXIgc3RhcnQgPSAwLCBlbmQsIGN1cnIgPSAwLCBuZXh0ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIC8vIEludmFyaWFudHM6IDAgPD0gc3RhcnQgPD0gbGVuZ3RoLTEuXG4gIC8vICAgMCA8PSBjdXJyIDw9IG5leHQgPD0gbWF4KDAsIGxlbmd0aC0yKS4gY3VyciAtIHN0YXJ0IDw9IHdpZHRoLlxuICAvLyBJbnNpZGUgdGhlIGxvb3A6XG4gIC8vICAgQSBtYXRjaCBpbXBsaWVzIGxlbmd0aCA+PSAyLCBzbyBjdXJyIGFuZCBuZXh0IGFyZSA8PSBsZW5ndGgtMi5cbiAgd2hpbGUgKChtYXRjaCA9IGJyZWFrUmUuZXhlYyhsaW5lKSkpIHtcbiAgICBuZXh0ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gbWFpbnRhaW4gaW52YXJpYW50OiBjdXJyIC0gc3RhcnQgPD0gd2lkdGhcbiAgICBpZiAobmV4dCAtIHN0YXJ0ID4gd2lkdGgpIHtcbiAgICAgIGVuZCA9IChjdXJyID4gc3RhcnQpID8gY3VyciA6IG5leHQ7IC8vIGRlcml2ZSBlbmQgPD0gbGVuZ3RoLTJcbiAgICAgIHJlc3VsdCArPSAnXFxuJyArIGxpbmUuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAvLyBza2lwIHRoZSBzcGFjZSB0aGF0IHdhcyBvdXRwdXQgYXMgXFxuXG4gICAgICBzdGFydCA9IGVuZCArIDE7ICAgICAgICAgICAgICAgICAgICAvLyBkZXJpdmUgc3RhcnQgPD0gbGVuZ3RoLTFcbiAgICB9XG4gICAgY3VyciA9IG5leHQ7XG4gIH1cblxuICAvLyBCeSB0aGUgaW52YXJpYW50cywgc3RhcnQgPD0gbGVuZ3RoLTEsIHNvIHRoZXJlIGlzIHNvbWV0aGluZyBsZWZ0IG92ZXIuXG4gIC8vIEl0IGlzIGVpdGhlciB0aGUgd2hvbGUgc3RyaW5nIG9yIGEgcGFydCBzdGFydGluZyBmcm9tIG5vbi13aGl0ZXNwYWNlLlxuICByZXN1bHQgKz0gJ1xcbic7XG4gIC8vIEluc2VydCBhIGJyZWFrIGlmIHRoZSByZW1haW5kZXIgaXMgdG9vIGxvbmcgYW5kIHRoZXJlIGlzIGEgYnJlYWsgYXZhaWxhYmxlLlxuICBpZiAobGluZS5sZW5ndGggLSBzdGFydCA+IHdpZHRoICYmIGN1cnIgPiBzdGFydCkge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0LCBjdXJyKSArICdcXG4nICsgbGluZS5zbGljZShjdXJyICsgMSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ICs9IGxpbmUuc2xpY2Uoc3RhcnQpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5zbGljZSgxKTsgLy8gZHJvcCBleHRyYSBcXG4gam9pbmVyXG59XG5cbi8vIEVzY2FwZXMgYSBkb3VibGUtcXVvdGVkIHN0cmluZy5cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyhzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgY2hhcjtcbiAgdmFyIGVzY2FwZVNlcTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXIgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICBlc2NhcGVTZXEgPSBFU0NBUEVfU0VRVUVOQ0VTW2NoYXJdO1xuICAgIHJlc3VsdCArPSAhZXNjYXBlU2VxICYmIGlzUHJpbnRhYmxlKGNoYXIpXG4gICAgICA/IHN0cmluZ1tpXVxuICAgICAgOiBlc2NhcGVTZXEgfHwgZW5jb2RlSGV4KGNoYXIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSAnJyxcbiAgICAgIF90YWcgICAgPSBzdGF0ZS50YWcsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aDtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAvLyBXcml0ZSBvbmx5IHZhbGlkIGVsZW1lbnRzLlxuICAgIGlmICh3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RbaW5kZXhdLCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBpZiAoaW5kZXggIT09IDApIF9yZXN1bHQgKz0gJywnICsgKCFzdGF0ZS5jb25kZW5zZUZsb3cgPyAnICcgOiAnJyk7XG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICdbJyArIF9yZXN1bHQgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgY29tcGFjdCkge1xuICB2YXIgX3Jlc3VsdCA9ICcnLFxuICAgICAgX3RhZyAgICA9IHN0YXRlLnRhZyxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIC8vIFdyaXRlIG9ubHkgdmFsaWQgZWxlbWVudHMuXG4gICAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RbaW5kZXhdLCB0cnVlLCB0cnVlKSkge1xuICAgICAgaWYgKCFjb21wYWN0IHx8IGluZGV4ICE9PSAwKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gJy0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Jlc3VsdCArPSAnLSAnO1xuICAgICAgfVxuXG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ1tdJzsgLy8gRW1wdHkgc2VxdWVuY2UgaWYgbm8gdmFsaWQgdmFsdWVzLlxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpckJ1ZmZlciA9ICcnO1xuXG4gICAgaWYgKGluZGV4ICE9PSAwKSBwYWlyQnVmZmVyICs9ICcsICc7XG5cbiAgICBvYmplY3RLZXkgPSBvYmplY3RLZXlMaXN0W2luZGV4XTtcbiAgICBvYmplY3RWYWx1ZSA9IG9iamVjdFtvYmplY3RLZXldO1xuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RLZXksIGZhbHNlLCBmYWxzZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQga2V5O1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpIHBhaXJCdWZmZXIgKz0gJz8gJztcblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcCArICc6JyArIChzdGF0ZS5jb25kZW5zZUZsb3cgPyAnJyA6ICcgJyk7XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdFZhbHVlLCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTsgLy8gU2tpcCB0aGlzIHBhaXIgYmVjYXVzZSBvZiBpbnZhbGlkIHZhbHVlLlxuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICd7JyArIF9yZXN1bHQgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0LCBjb21wYWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgZXhwbGljaXRQYWlyLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICAvLyBBbGxvdyBzb3J0aW5nIGtleXMgc28gdGhhdCB0aGUgb3V0cHV0IGZpbGUgaXMgZGV0ZXJtaW5pc3RpY1xuICBpZiAoc3RhdGUuc29ydEtleXMgPT09IHRydWUpIHtcbiAgICAvLyBEZWZhdWx0IHNvcnRpbmdcbiAgICBvYmplY3RLZXlMaXN0LnNvcnQoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3RhdGUuc29ydEtleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBDdXN0b20gc29ydCBmdW5jdGlvblxuICAgIG9iamVjdEtleUxpc3Quc29ydChzdGF0ZS5zb3J0S2V5cyk7XG4gIH0gZWxzZSBpZiAoc3RhdGUuc29ydEtleXMpIHtcbiAgICAvLyBTb21ldGhpbmcgaXMgd3JvbmdcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignc29ydEtleXMgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXJCdWZmZXIgPSAnJztcblxuICAgIGlmICghY29tcGFjdCB8fCBpbmRleCAhPT0gMCkge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCArIDEsIG9iamVjdEtleSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQga2V5LlxuICAgIH1cblxuICAgIGV4cGxpY2l0UGFpciA9IChzdGF0ZS50YWcgIT09IG51bGwgJiYgc3RhdGUudGFnICE9PSAnPycpIHx8XG4gICAgICAgICAgICAgICAgICAgKHN0YXRlLmR1bXAgJiYgc3RhdGUuZHVtcC5sZW5ndGggPiAxMDI0KTtcblxuICAgIGlmIChleHBsaWNpdFBhaXIpIHtcbiAgICAgIGlmIChzdGF0ZS5kdW1wICYmIENIQVJfTElORV9GRUVEID09PSBzdGF0ZS5kdW1wLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgcGFpckJ1ZmZlciArPSAnPyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/ICc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0VmFsdWUsIHRydWUsIGV4cGxpY2l0UGFpcikpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQgdmFsdWUuXG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhaXJCdWZmZXIgKz0gJzogJztcbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICAvLyBCb3RoIGtleSBhbmQgdmFsdWUgYXJlIHZhbGlkLlxuICAgIF9yZXN1bHQgKz0gcGFpckJ1ZmZlcjtcbiAgfVxuXG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSBfcmVzdWx0IHx8ICd7fSc7IC8vIEVtcHR5IG1hcHBpbmcgaWYgbm8gdmFsaWQgcGFpcnMuXG59XG5cbmZ1bmN0aW9uIGRldGVjdFR5cGUoc3RhdGUsIG9iamVjdCwgZXhwbGljaXQpIHtcbiAgdmFyIF9yZXN1bHQsIHR5cGVMaXN0LCBpbmRleCwgbGVuZ3RoLCB0eXBlLCBzdHlsZTtcblxuICB0eXBlTGlzdCA9IGV4cGxpY2l0ID8gc3RhdGUuZXhwbGljaXRUeXBlcyA6IHN0YXRlLmltcGxpY2l0VHlwZXM7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHR5cGVMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB0eXBlID0gdHlwZUxpc3RbaW5kZXhdO1xuXG4gICAgaWYgKCh0eXBlLmluc3RhbmNlT2YgIHx8IHR5cGUucHJlZGljYXRlKSAmJlxuICAgICAgICAoIXR5cGUuaW5zdGFuY2VPZiB8fCAoKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSAmJiAob2JqZWN0IGluc3RhbmNlb2YgdHlwZS5pbnN0YW5jZU9mKSkpICYmXG4gICAgICAgICghdHlwZS5wcmVkaWNhdGUgIHx8IHR5cGUucHJlZGljYXRlKG9iamVjdCkpKSB7XG5cbiAgICAgIHN0YXRlLnRhZyA9IGV4cGxpY2l0ID8gdHlwZS50YWcgOiAnPyc7XG5cbiAgICAgIGlmICh0eXBlLnJlcHJlc2VudCkge1xuICAgICAgICBzdHlsZSA9IHN0YXRlLnN0eWxlTWFwW3R5cGUudGFnXSB8fCB0eXBlLmRlZmF1bHRTdHlsZTtcblxuICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwodHlwZS5yZXByZXNlbnQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgICAgX3Jlc3VsdCA9IHR5cGUucmVwcmVzZW50KG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUucmVwcmVzZW50LCBzdHlsZSkpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZS5yZXByZXNlbnRbc3R5bGVdKG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCchPCcgKyB0eXBlLnRhZyArICc+IHRhZyByZXNvbHZlciBhY2NlcHRzIG5vdCBcIicgKyBzdHlsZSArICdcIiBzdHlsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZHVtcCA9IF9yZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gU2VyaWFsaXplcyBgb2JqZWN0YCBhbmQgd3JpdGVzIGl0IHRvIGdsb2JhbCBgcmVzdWx0YC5cbi8vIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBvciBmYWxzZSBvbiBpbnZhbGlkIG9iamVjdC5cbi8vXG5mdW5jdGlvbiB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3QsIGJsb2NrLCBjb21wYWN0LCBpc2tleSkge1xuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5kdW1wID0gb2JqZWN0O1xuXG4gIGlmICghZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBmYWxzZSkpIHtcbiAgICBkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIHRydWUpO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBfdG9TdHJpbmcuY2FsbChzdGF0ZS5kdW1wKTtcblxuICBpZiAoYmxvY2spIHtcbiAgICBibG9jayA9IChzdGF0ZS5mbG93TGV2ZWwgPCAwIHx8IHN0YXRlLmZsb3dMZXZlbCA+IGxldmVsKTtcbiAgfVxuXG4gIHZhciBvYmplY3RPckFycmF5ID0gdHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGR1cGxpY2F0ZUluZGV4LFxuICAgICAgZHVwbGljYXRlO1xuXG4gIGlmIChvYmplY3RPckFycmF5KSB7XG4gICAgZHVwbGljYXRlSW5kZXggPSBzdGF0ZS5kdXBsaWNhdGVzLmluZGV4T2Yob2JqZWN0KTtcbiAgICBkdXBsaWNhdGUgPSBkdXBsaWNhdGVJbmRleCAhPT0gLTE7XG4gIH1cblxuICBpZiAoKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHwgZHVwbGljYXRlIHx8IChzdGF0ZS5pbmRlbnQgIT09IDIgJiYgbGV2ZWwgPiAwKSkge1xuICAgIGNvbXBhY3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChkdXBsaWNhdGUgJiYgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgc3RhdGUuZHVtcCA9ICcqcmVmXycgKyBkdXBsaWNhdGVJbmRleDtcbiAgfSBlbHNlIHtcbiAgICBpZiAob2JqZWN0T3JBcnJheSAmJiBkdXBsaWNhdGUgJiYgIXN0YXRlLnVzZWREdXBsaWNhdGVzW2R1cGxpY2F0ZUluZGV4XSkge1xuICAgICAgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgKE9iamVjdC5rZXlzKHN0YXRlLmR1bXApLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wLCBjb21wYWN0KTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgaWYgKGJsb2NrICYmIChzdGF0ZS5kdW1wLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCwgY29tcGFjdCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gJz8nKSB7XG4gICAgICAgIHdyaXRlU2NhbGFyKHN0YXRlLCBzdGF0ZS5kdW1wLCBsZXZlbCwgaXNrZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUuc2tpcEludmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCd1bmFjY2VwdGFibGUga2luZCBvZiBhbiBvYmplY3QgdG8gZHVtcCAnICsgdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/Jykge1xuICAgICAgc3RhdGUuZHVtcCA9ICchPCcgKyBzdGF0ZS50YWcgKyAnPiAnICsgc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0RHVwbGljYXRlUmVmZXJlbmNlcyhvYmplY3QsIHN0YXRlKSB7XG4gIHZhciBvYmplY3RzID0gW10sXG4gICAgICBkdXBsaWNhdGVzSW5kZXhlcyA9IFtdLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaW5zcGVjdE5vZGUob2JqZWN0LCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGR1cGxpY2F0ZXNJbmRleGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBzdGF0ZS5kdXBsaWNhdGVzLnB1c2gob2JqZWN0c1tkdXBsaWNhdGVzSW5kZXhlc1tpbmRleF1dKTtcbiAgfVxuICBzdGF0ZS51c2VkRHVwbGljYXRlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0Tm9kZShvYmplY3QsIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKSB7XG4gIHZhciBvYmplY3RLZXlMaXN0LFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaWYgKG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jykge1xuICAgIGluZGV4ID0gb2JqZWN0cy5pbmRleE9mKG9iamVjdCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGR1cGxpY2F0ZXNJbmRleGVzLmluZGV4T2YoaW5kZXgpID09PSAtMSkge1xuICAgICAgICBkdXBsaWNhdGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0cy5wdXNoKG9iamVjdCk7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W2luZGV4XSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W29iamVjdEtleUxpc3RbaW5kZXhdXSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGR1bXAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKG9wdGlvbnMpO1xuXG4gIGlmICghc3RhdGUubm9SZWZzKSBnZXREdXBsaWNhdGVSZWZlcmVuY2VzKGlucHV0LCBzdGF0ZSk7XG5cbiAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgMCwgaW5wdXQsIHRydWUsIHRydWUpKSByZXR1cm4gc3RhdGUuZHVtcCArICdcXG4nO1xuXG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gc2FmZUR1bXAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGR1bXAoaW5wdXQsIGNvbW1vbi5leHRlbmQoeyBzY2hlbWE6IERFRkFVTFRfU0FGRV9TQ0hFTUEgfSwgb3B0aW9ucykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5kdW1wICAgICA9IGR1bXA7XG5tb2R1bGUuZXhwb3J0cy5zYWZlRHVtcCA9IHNhZmVEdW1wO1xuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJlc3ByaW1hXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImVzcHJpbWFcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHQvKlxyXG5cdCAgQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycywgaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xyXG5cclxuXHQgIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxyXG5cdCAgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XHJcblxyXG5cdCAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XHJcblx0ICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG5cdCAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XHJcblx0ICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxyXG5cdCAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcblxyXG5cdCAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcclxuXHQgIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcclxuXHQgIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXHJcblx0ICBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgPENPUFlSSUdIVCBIT0xERVI+IEJFIExJQUJMRSBGT1IgQU5ZXHJcblx0ICBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xyXG5cdCAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xyXG5cdCAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXHJcblx0ICBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxyXG5cdCAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXHJcblx0ICBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG5cdCovXHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdHZhciBjb21tZW50X2hhbmRsZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcblx0dmFyIGpzeF9wYXJzZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcblx0dmFyIHBhcnNlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcclxuXHR2YXIgdG9rZW5pemVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcclxuXHRmdW5jdGlvbiBwYXJzZShjb2RlLCBvcHRpb25zLCBkZWxlZ2F0ZSkge1xyXG5cdCAgICB2YXIgY29tbWVudEhhbmRsZXIgPSBudWxsO1xyXG5cdCAgICB2YXIgcHJveHlEZWxlZ2F0ZSA9IGZ1bmN0aW9uIChub2RlLCBtZXRhZGF0YSkge1xyXG5cdCAgICAgICAgaWYgKGRlbGVnYXRlKSB7XHJcblx0ICAgICAgICAgICAgZGVsZWdhdGUobm9kZSwgbWV0YWRhdGEpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGNvbW1lbnRIYW5kbGVyKSB7XHJcblx0ICAgICAgICAgICAgY29tbWVudEhhbmRsZXIudmlzaXQobm9kZSwgbWV0YWRhdGEpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICB2YXIgcGFyc2VyRGVsZWdhdGUgPSAodHlwZW9mIGRlbGVnYXRlID09PSAnZnVuY3Rpb24nKSA/IHByb3h5RGVsZWdhdGUgOiBudWxsO1xyXG5cdCAgICB2YXIgY29sbGVjdENvbW1lbnQgPSBmYWxzZTtcclxuXHQgICAgaWYgKG9wdGlvbnMpIHtcclxuXHQgICAgICAgIGNvbGxlY3RDb21tZW50ID0gKHR5cGVvZiBvcHRpb25zLmNvbW1lbnQgPT09ICdib29sZWFuJyAmJiBvcHRpb25zLmNvbW1lbnQpO1xyXG5cdCAgICAgICAgdmFyIGF0dGFjaENvbW1lbnQgPSAodHlwZW9mIG9wdGlvbnMuYXR0YWNoQ29tbWVudCA9PT0gJ2Jvb2xlYW4nICYmIG9wdGlvbnMuYXR0YWNoQ29tbWVudCk7XHJcblx0ICAgICAgICBpZiAoY29sbGVjdENvbW1lbnQgfHwgYXR0YWNoQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgIGNvbW1lbnRIYW5kbGVyID0gbmV3IGNvbW1lbnRfaGFuZGxlcl8xLkNvbW1lbnRIYW5kbGVyKCk7XHJcblx0ICAgICAgICAgICAgY29tbWVudEhhbmRsZXIuYXR0YWNoID0gYXR0YWNoQ29tbWVudDtcclxuXHQgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIHBhcnNlckRlbGVnYXRlID0gcHJveHlEZWxlZ2F0ZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICB2YXIgaXNNb2R1bGUgPSBmYWxzZTtcclxuXHQgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMuc291cmNlVHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHQgICAgICAgIGlzTW9kdWxlID0gKG9wdGlvbnMuc291cmNlVHlwZSA9PT0gJ21vZHVsZScpO1xyXG5cdCAgICB9XHJcblx0ICAgIHZhciBwYXJzZXI7XHJcblx0ICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLmpzeCA9PT0gJ2Jvb2xlYW4nICYmIG9wdGlvbnMuanN4KSB7XHJcblx0ICAgICAgICBwYXJzZXIgPSBuZXcganN4X3BhcnNlcl8xLkpTWFBhcnNlcihjb2RlLCBvcHRpb25zLCBwYXJzZXJEZWxlZ2F0ZSk7XHJcblx0ICAgIH1cclxuXHQgICAgZWxzZSB7XHJcblx0ICAgICAgICBwYXJzZXIgPSBuZXcgcGFyc2VyXzEuUGFyc2VyKGNvZGUsIG9wdGlvbnMsIHBhcnNlckRlbGVnYXRlKTtcclxuXHQgICAgfVxyXG5cdCAgICB2YXIgcHJvZ3JhbSA9IGlzTW9kdWxlID8gcGFyc2VyLnBhcnNlTW9kdWxlKCkgOiBwYXJzZXIucGFyc2VTY3JpcHQoKTtcclxuXHQgICAgdmFyIGFzdCA9IHByb2dyYW07XHJcblx0ICAgIGlmIChjb2xsZWN0Q29tbWVudCAmJiBjb21tZW50SGFuZGxlcikge1xyXG5cdCAgICAgICAgYXN0LmNvbW1lbnRzID0gY29tbWVudEhhbmRsZXIuY29tbWVudHM7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHBhcnNlci5jb25maWcudG9rZW5zKSB7XHJcblx0ICAgICAgICBhc3QudG9rZW5zID0gcGFyc2VyLnRva2VucztcclxuXHQgICAgfVxyXG5cdCAgICBpZiAocGFyc2VyLmNvbmZpZy50b2xlcmFudCkge1xyXG5cdCAgICAgICAgYXN0LmVycm9ycyA9IHBhcnNlci5lcnJvckhhbmRsZXIuZXJyb3JzO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBhc3Q7XHJcblx0fVxyXG5cdGV4cG9ydHMucGFyc2UgPSBwYXJzZTtcclxuXHRmdW5jdGlvbiBwYXJzZU1vZHVsZShjb2RlLCBvcHRpb25zLCBkZWxlZ2F0ZSkge1xyXG5cdCAgICB2YXIgcGFyc2luZ09wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdCAgICBwYXJzaW5nT3B0aW9ucy5zb3VyY2VUeXBlID0gJ21vZHVsZSc7XHJcblx0ICAgIHJldHVybiBwYXJzZShjb2RlLCBwYXJzaW5nT3B0aW9ucywgZGVsZWdhdGUpO1xyXG5cdH1cclxuXHRleHBvcnRzLnBhcnNlTW9kdWxlID0gcGFyc2VNb2R1bGU7XHJcblx0ZnVuY3Rpb24gcGFyc2VTY3JpcHQoY29kZSwgb3B0aW9ucywgZGVsZWdhdGUpIHtcclxuXHQgICAgdmFyIHBhcnNpbmdPcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHQgICAgcGFyc2luZ09wdGlvbnMuc291cmNlVHlwZSA9ICdzY3JpcHQnO1xyXG5cdCAgICByZXR1cm4gcGFyc2UoY29kZSwgcGFyc2luZ09wdGlvbnMsIGRlbGVnYXRlKTtcclxuXHR9XHJcblx0ZXhwb3J0cy5wYXJzZVNjcmlwdCA9IHBhcnNlU2NyaXB0O1xyXG5cdGZ1bmN0aW9uIHRva2VuaXplKGNvZGUsIG9wdGlvbnMsIGRlbGVnYXRlKSB7XHJcblx0ICAgIHZhciB0b2tlbml6ZXIgPSBuZXcgdG9rZW5pemVyXzEuVG9rZW5pemVyKGNvZGUsIG9wdGlvbnMpO1xyXG5cdCAgICB2YXIgdG9rZW5zO1xyXG5cdCAgICB0b2tlbnMgPSBbXTtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdG9rZW5pemVyLmdldE5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIGlmICghdG9rZW4pIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChkZWxlZ2F0ZSkge1xyXG5cdCAgICAgICAgICAgICAgICB0b2tlbiA9IGRlbGVnYXRlKHRva2VuKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIGNhdGNoIChlKSB7XHJcblx0ICAgICAgICB0b2tlbml6ZXIuZXJyb3JIYW5kbGVyLnRvbGVyYXRlKGUpO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmICh0b2tlbml6ZXIuZXJyb3JIYW5kbGVyLnRvbGVyYW50KSB7XHJcblx0ICAgICAgICB0b2tlbnMuZXJyb3JzID0gdG9rZW5pemVyLmVycm9ycygpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiB0b2tlbnM7XHJcblx0fVxyXG5cdGV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZTtcclxuXHR2YXIgc3ludGF4XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xyXG5cdGV4cG9ydHMuU3ludGF4ID0gc3ludGF4XzEuU3ludGF4O1xyXG5cdC8vIFN5bmMgd2l0aCAqLmpzb24gbWFuaWZlc3RzLlxyXG5cdGV4cG9ydHMudmVyc2lvbiA9ICc0LjAuMCc7XHJcblxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdHZhciBzeW50YXhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcblx0dmFyIENvbW1lbnRIYW5kbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQ29tbWVudEhhbmRsZXIoKSB7XHJcblx0ICAgICAgICB0aGlzLmF0dGFjaCA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5jb21tZW50cyA9IFtdO1xyXG5cdCAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xyXG5cdCAgICAgICAgdGhpcy5sZWFkaW5nID0gW107XHJcblx0ICAgICAgICB0aGlzLnRyYWlsaW5nID0gW107XHJcblx0ICAgIH1cclxuXHQgICAgQ29tbWVudEhhbmRsZXIucHJvdG90eXBlLmluc2VydElubmVyQ29tbWVudHMgPSBmdW5jdGlvbiAobm9kZSwgbWV0YWRhdGEpIHtcclxuXHQgICAgICAgIC8vICBpbm5uZXJDb21tZW50cyBmb3IgcHJvcGVydGllcyBlbXB0eSBibG9ja1xyXG5cdCAgICAgICAgLy8gIGBmdW5jdGlvbiBhKCkgey8qKiBjb21tZW50cyAqKlxcL31gXHJcblx0ICAgICAgICBpZiAobm9kZS50eXBlID09PSBzeW50YXhfMS5TeW50YXguQmxvY2tTdGF0ZW1lbnQgJiYgbm9kZS5ib2R5Lmxlbmd0aCA9PT0gMCkge1xyXG5cdCAgICAgICAgICAgIHZhciBpbm5lckNvbW1lbnRzID0gW107XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVhZGluZy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLmxlYWRpbmdbaV07XHJcblx0ICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YS5lbmQub2Zmc2V0ID49IGVudHJ5LnN0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbm5lckNvbW1lbnRzLnVuc2hpZnQoZW50cnkuY29tbWVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmxlYWRpbmcuc3BsaWNlKGksIDEpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFpbGluZy5zcGxpY2UoaSwgMSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKGlubmVyQ29tbWVudHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUuaW5uZXJDb21tZW50cyA9IGlubmVyQ29tbWVudHM7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBDb21tZW50SGFuZGxlci5wcm90b3R5cGUuZmluZFRyYWlsaW5nQ29tbWVudHMgPSBmdW5jdGlvbiAobWV0YWRhdGEpIHtcclxuXHQgICAgICAgIHZhciB0cmFpbGluZ0NvbW1lbnRzID0gW107XHJcblx0ICAgICAgICBpZiAodGhpcy50cmFpbGluZy5sZW5ndGggPiAwKSB7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJhaWxpbmcubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGVudHJ5XzEgPSB0aGlzLnRyYWlsaW5nW2ldO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZW50cnlfMS5zdGFydCA+PSBtZXRhZGF0YS5lbmQub2Zmc2V0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0cmFpbGluZ0NvbW1lbnRzLnVuc2hpZnQoZW50cnlfMS5jb21tZW50KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLnRyYWlsaW5nLmxlbmd0aCA9IDA7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRyYWlsaW5nQ29tbWVudHM7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XHJcblx0ICAgICAgICBpZiAoZW50cnkgJiYgZW50cnkubm9kZS50cmFpbGluZ0NvbW1lbnRzKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGZpcnN0Q29tbWVudCA9IGVudHJ5Lm5vZGUudHJhaWxpbmdDb21tZW50c1swXTtcclxuXHQgICAgICAgICAgICBpZiAoZmlyc3RDb21tZW50ICYmIGZpcnN0Q29tbWVudC5yYW5nZVswXSA+PSBtZXRhZGF0YS5lbmQub2Zmc2V0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHRyYWlsaW5nQ29tbWVudHMgPSBlbnRyeS5ub2RlLnRyYWlsaW5nQ29tbWVudHM7XHJcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSBlbnRyeS5ub2RlLnRyYWlsaW5nQ29tbWVudHM7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRyYWlsaW5nQ29tbWVudHM7XHJcblx0ICAgIH07XHJcblx0ICAgIENvbW1lbnRIYW5kbGVyLnByb3RvdHlwZS5maW5kTGVhZGluZ0NvbW1lbnRzID0gZnVuY3Rpb24gKG1ldGFkYXRhKSB7XHJcblx0ICAgICAgICB2YXIgbGVhZGluZ0NvbW1lbnRzID0gW107XHJcblx0ICAgICAgICB2YXIgdGFyZ2V0O1xyXG5cdCAgICAgICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcclxuXHQgICAgICAgICAgICBpZiAoZW50cnkgJiYgZW50cnkuc3RhcnQgPj0gbWV0YWRhdGEuc3RhcnQub2Zmc2V0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHRhcmdldCA9IGVudHJ5Lm5vZGU7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucG9wKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodGFyZ2V0KSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNvdW50ID0gdGFyZ2V0LmxlYWRpbmdDb21tZW50cyA/IHRhcmdldC5sZWFkaW5nQ29tbWVudHMubGVuZ3RoIDogMDtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gY291bnQgLSAxOyBpID49IDA7IC0taSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY29tbWVudCA9IHRhcmdldC5sZWFkaW5nQ29tbWVudHNbaV07XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjb21tZW50LnJhbmdlWzFdIDw9IG1ldGFkYXRhLnN0YXJ0Lm9mZnNldCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGVhZGluZ0NvbW1lbnRzLnVuc2hpZnQoY29tbWVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0YXJnZXQubGVhZGluZ0NvbW1lbnRzLnNwbGljZShpLCAxKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAodGFyZ2V0LmxlYWRpbmdDb21tZW50cyAmJiB0YXJnZXQubGVhZGluZ0NvbW1lbnRzLmxlbmd0aCA9PT0gMCkge1xyXG5cdCAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0LmxlYWRpbmdDb21tZW50cztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdDb21tZW50cztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlYWRpbmcubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuXHQgICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLmxlYWRpbmdbaV07XHJcblx0ICAgICAgICAgICAgaWYgKGVudHJ5LnN0YXJ0IDw9IG1ldGFkYXRhLnN0YXJ0Lm9mZnNldCkge1xyXG5cdCAgICAgICAgICAgICAgICBsZWFkaW5nQ29tbWVudHMudW5zaGlmdChlbnRyeS5jb21tZW50KTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5sZWFkaW5nLnNwbGljZShpLCAxKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gbGVhZGluZ0NvbW1lbnRzO1xyXG5cdCAgICB9O1xyXG5cdCAgICBDb21tZW50SGFuZGxlci5wcm90b3R5cGUudmlzaXROb2RlID0gZnVuY3Rpb24gKG5vZGUsIG1ldGFkYXRhKSB7XHJcblx0ICAgICAgICBpZiAobm9kZS50eXBlID09PSBzeW50YXhfMS5TeW50YXguUHJvZ3JhbSAmJiBub2RlLmJvZHkubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuaW5zZXJ0SW5uZXJDb21tZW50cyhub2RlLCBtZXRhZGF0YSk7XHJcblx0ICAgICAgICB2YXIgdHJhaWxpbmdDb21tZW50cyA9IHRoaXMuZmluZFRyYWlsaW5nQ29tbWVudHMobWV0YWRhdGEpO1xyXG5cdCAgICAgICAgdmFyIGxlYWRpbmdDb21tZW50cyA9IHRoaXMuZmluZExlYWRpbmdDb21tZW50cyhtZXRhZGF0YSk7XHJcblx0ICAgICAgICBpZiAobGVhZGluZ0NvbW1lbnRzLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgICAgICBub2RlLmxlYWRpbmdDb21tZW50cyA9IGxlYWRpbmdDb21tZW50cztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICh0cmFpbGluZ0NvbW1lbnRzLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgICAgICBub2RlLnRyYWlsaW5nQ29tbWVudHMgPSB0cmFpbGluZ0NvbW1lbnRzO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcclxuXHQgICAgICAgICAgICBub2RlOiBub2RlLFxyXG5cdCAgICAgICAgICAgIHN0YXJ0OiBtZXRhZGF0YS5zdGFydC5vZmZzZXRcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICB9O1xyXG5cdCAgICBDb21tZW50SGFuZGxlci5wcm90b3R5cGUudmlzaXRDb21tZW50ID0gZnVuY3Rpb24gKG5vZGUsIG1ldGFkYXRhKSB7XHJcblx0ICAgICAgICB2YXIgdHlwZSA9IChub2RlLnR5cGVbMF0gPT09ICdMJykgPyAnTGluZScgOiAnQmxvY2snO1xyXG5cdCAgICAgICAgdmFyIGNvbW1lbnQgPSB7XHJcblx0ICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuXHQgICAgICAgICAgICB2YWx1ZTogbm9kZS52YWx1ZVxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIGlmIChub2RlLnJhbmdlKSB7XHJcblx0ICAgICAgICAgICAgY29tbWVudC5yYW5nZSA9IG5vZGUucmFuZ2U7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAobm9kZS5sb2MpIHtcclxuXHQgICAgICAgICAgICBjb21tZW50LmxvYyA9IG5vZGUubG9jO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5jb21tZW50cy5wdXNoKGNvbW1lbnQpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMuYXR0YWNoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGVudHJ5ID0ge1xyXG5cdCAgICAgICAgICAgICAgICBjb21tZW50OiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5vZGUudmFsdWUsXHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZTogW21ldGFkYXRhLnN0YXJ0Lm9mZnNldCwgbWV0YWRhdGEuZW5kLm9mZnNldF1cclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IG1ldGFkYXRhLnN0YXJ0Lm9mZnNldFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgaWYgKG5vZGUubG9jKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVudHJ5LmNvbW1lbnQubG9jID0gbm9kZS5sb2M7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG5vZGUudHlwZSA9IHR5cGU7XHJcblx0ICAgICAgICAgICAgdGhpcy5sZWFkaW5nLnB1c2goZW50cnkpO1xyXG5cdCAgICAgICAgICAgIHRoaXMudHJhaWxpbmcucHVzaChlbnRyeSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIENvbW1lbnRIYW5kbGVyLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uIChub2RlLCBtZXRhZGF0YSkge1xyXG5cdCAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0xpbmVDb21tZW50Jykge1xyXG5cdCAgICAgICAgICAgIHRoaXMudmlzaXRDb21tZW50KG5vZGUsIG1ldGFkYXRhKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ0Jsb2NrQ29tbWVudCcpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnZpc2l0Q29tbWVudChub2RlLCBtZXRhZGF0YSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIGlmICh0aGlzLmF0dGFjaCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudmlzaXROb2RlKG5vZGUsIG1ldGFkYXRhKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgcmV0dXJuIENvbW1lbnRIYW5kbGVyO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5Db21tZW50SGFuZGxlciA9IENvbW1lbnRIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHRleHBvcnRzLlN5bnRheCA9IHtcclxuXHQgICAgQXNzaWdubWVudEV4cHJlc3Npb246ICdBc3NpZ25tZW50RXhwcmVzc2lvbicsXHJcblx0ICAgIEFzc2lnbm1lbnRQYXR0ZXJuOiAnQXNzaWdubWVudFBhdHRlcm4nLFxyXG5cdCAgICBBcnJheUV4cHJlc3Npb246ICdBcnJheUV4cHJlc3Npb24nLFxyXG5cdCAgICBBcnJheVBhdHRlcm46ICdBcnJheVBhdHRlcm4nLFxyXG5cdCAgICBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjogJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJyxcclxuXHQgICAgQXdhaXRFeHByZXNzaW9uOiAnQXdhaXRFeHByZXNzaW9uJyxcclxuXHQgICAgQmxvY2tTdGF0ZW1lbnQ6ICdCbG9ja1N0YXRlbWVudCcsXHJcblx0ICAgIEJpbmFyeUV4cHJlc3Npb246ICdCaW5hcnlFeHByZXNzaW9uJyxcclxuXHQgICAgQnJlYWtTdGF0ZW1lbnQ6ICdCcmVha1N0YXRlbWVudCcsXHJcblx0ICAgIENhbGxFeHByZXNzaW9uOiAnQ2FsbEV4cHJlc3Npb24nLFxyXG5cdCAgICBDYXRjaENsYXVzZTogJ0NhdGNoQ2xhdXNlJyxcclxuXHQgICAgQ2xhc3NCb2R5OiAnQ2xhc3NCb2R5JyxcclxuXHQgICAgQ2xhc3NEZWNsYXJhdGlvbjogJ0NsYXNzRGVjbGFyYXRpb24nLFxyXG5cdCAgICBDbGFzc0V4cHJlc3Npb246ICdDbGFzc0V4cHJlc3Npb24nLFxyXG5cdCAgICBDb25kaXRpb25hbEV4cHJlc3Npb246ICdDb25kaXRpb25hbEV4cHJlc3Npb24nLFxyXG5cdCAgICBDb250aW51ZVN0YXRlbWVudDogJ0NvbnRpbnVlU3RhdGVtZW50JyxcclxuXHQgICAgRG9XaGlsZVN0YXRlbWVudDogJ0RvV2hpbGVTdGF0ZW1lbnQnLFxyXG5cdCAgICBEZWJ1Z2dlclN0YXRlbWVudDogJ0RlYnVnZ2VyU3RhdGVtZW50JyxcclxuXHQgICAgRW1wdHlTdGF0ZW1lbnQ6ICdFbXB0eVN0YXRlbWVudCcsXHJcblx0ICAgIEV4cG9ydEFsbERlY2xhcmF0aW9uOiAnRXhwb3J0QWxsRGVjbGFyYXRpb24nLFxyXG5cdCAgICBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb246ICdFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24nLFxyXG5cdCAgICBFeHBvcnROYW1lZERlY2xhcmF0aW9uOiAnRXhwb3J0TmFtZWREZWNsYXJhdGlvbicsXHJcblx0ICAgIEV4cG9ydFNwZWNpZmllcjogJ0V4cG9ydFNwZWNpZmllcicsXHJcblx0ICAgIEV4cHJlc3Npb25TdGF0ZW1lbnQ6ICdFeHByZXNzaW9uU3RhdGVtZW50JyxcclxuXHQgICAgRm9yU3RhdGVtZW50OiAnRm9yU3RhdGVtZW50JyxcclxuXHQgICAgRm9yT2ZTdGF0ZW1lbnQ6ICdGb3JPZlN0YXRlbWVudCcsXHJcblx0ICAgIEZvckluU3RhdGVtZW50OiAnRm9ySW5TdGF0ZW1lbnQnLFxyXG5cdCAgICBGdW5jdGlvbkRlY2xhcmF0aW9uOiAnRnVuY3Rpb25EZWNsYXJhdGlvbicsXHJcblx0ICAgIEZ1bmN0aW9uRXhwcmVzc2lvbjogJ0Z1bmN0aW9uRXhwcmVzc2lvbicsXHJcblx0ICAgIElkZW50aWZpZXI6ICdJZGVudGlmaWVyJyxcclxuXHQgICAgSWZTdGF0ZW1lbnQ6ICdJZlN0YXRlbWVudCcsXHJcblx0ICAgIEltcG9ydERlY2xhcmF0aW9uOiAnSW1wb3J0RGVjbGFyYXRpb24nLFxyXG5cdCAgICBJbXBvcnREZWZhdWx0U3BlY2lmaWVyOiAnSW1wb3J0RGVmYXVsdFNwZWNpZmllcicsXHJcblx0ICAgIEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcjogJ0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllcicsXHJcblx0ICAgIEltcG9ydFNwZWNpZmllcjogJ0ltcG9ydFNwZWNpZmllcicsXHJcblx0ICAgIExpdGVyYWw6ICdMaXRlcmFsJyxcclxuXHQgICAgTGFiZWxlZFN0YXRlbWVudDogJ0xhYmVsZWRTdGF0ZW1lbnQnLFxyXG5cdCAgICBMb2dpY2FsRXhwcmVzc2lvbjogJ0xvZ2ljYWxFeHByZXNzaW9uJyxcclxuXHQgICAgTWVtYmVyRXhwcmVzc2lvbjogJ01lbWJlckV4cHJlc3Npb24nLFxyXG5cdCAgICBNZXRhUHJvcGVydHk6ICdNZXRhUHJvcGVydHknLFxyXG5cdCAgICBNZXRob2REZWZpbml0aW9uOiAnTWV0aG9kRGVmaW5pdGlvbicsXHJcblx0ICAgIE5ld0V4cHJlc3Npb246ICdOZXdFeHByZXNzaW9uJyxcclxuXHQgICAgT2JqZWN0RXhwcmVzc2lvbjogJ09iamVjdEV4cHJlc3Npb24nLFxyXG5cdCAgICBPYmplY3RQYXR0ZXJuOiAnT2JqZWN0UGF0dGVybicsXHJcblx0ICAgIFByb2dyYW06ICdQcm9ncmFtJyxcclxuXHQgICAgUHJvcGVydHk6ICdQcm9wZXJ0eScsXHJcblx0ICAgIFJlc3RFbGVtZW50OiAnUmVzdEVsZW1lbnQnLFxyXG5cdCAgICBSZXR1cm5TdGF0ZW1lbnQ6ICdSZXR1cm5TdGF0ZW1lbnQnLFxyXG5cdCAgICBTZXF1ZW5jZUV4cHJlc3Npb246ICdTZXF1ZW5jZUV4cHJlc3Npb24nLFxyXG5cdCAgICBTcHJlYWRFbGVtZW50OiAnU3ByZWFkRWxlbWVudCcsXHJcblx0ICAgIFN1cGVyOiAnU3VwZXInLFxyXG5cdCAgICBTd2l0Y2hDYXNlOiAnU3dpdGNoQ2FzZScsXHJcblx0ICAgIFN3aXRjaFN0YXRlbWVudDogJ1N3aXRjaFN0YXRlbWVudCcsXHJcblx0ICAgIFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjogJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbicsXHJcblx0ICAgIFRlbXBsYXRlRWxlbWVudDogJ1RlbXBsYXRlRWxlbWVudCcsXHJcblx0ICAgIFRlbXBsYXRlTGl0ZXJhbDogJ1RlbXBsYXRlTGl0ZXJhbCcsXHJcblx0ICAgIFRoaXNFeHByZXNzaW9uOiAnVGhpc0V4cHJlc3Npb24nLFxyXG5cdCAgICBUaHJvd1N0YXRlbWVudDogJ1Rocm93U3RhdGVtZW50JyxcclxuXHQgICAgVHJ5U3RhdGVtZW50OiAnVHJ5U3RhdGVtZW50JyxcclxuXHQgICAgVW5hcnlFeHByZXNzaW9uOiAnVW5hcnlFeHByZXNzaW9uJyxcclxuXHQgICAgVXBkYXRlRXhwcmVzc2lvbjogJ1VwZGF0ZUV4cHJlc3Npb24nLFxyXG5cdCAgICBWYXJpYWJsZURlY2xhcmF0aW9uOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXHJcblx0ICAgIFZhcmlhYmxlRGVjbGFyYXRvcjogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXHJcblx0ICAgIFdoaWxlU3RhdGVtZW50OiAnV2hpbGVTdGF0ZW1lbnQnLFxyXG5cdCAgICBXaXRoU3RhdGVtZW50OiAnV2l0aFN0YXRlbWVudCcsXHJcblx0ICAgIFlpZWxkRXhwcmVzc2lvbjogJ1lpZWxkRXhwcmVzc2lvbidcclxuXHR9O1xyXG5cblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcblx0ICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcblx0ICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcblx0ICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG5cdCAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcblx0ICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcblx0ICAgIH07XHJcblx0fSkoKTtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0dmFyIGNoYXJhY3Rlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuXHR2YXIgSlNYTm9kZSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblx0dmFyIGpzeF9zeW50YXhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XHJcblx0dmFyIE5vZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xyXG5cdHZhciBwYXJzZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XHJcblx0dmFyIHRva2VuXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcclxuXHR2YXIgeGh0bWxfZW50aXRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xyXG5cdHRva2VuXzEuVG9rZW5OYW1lWzEwMCAvKiBJZGVudGlmaWVyICovXSA9ICdKU1hJZGVudGlmaWVyJztcclxuXHR0b2tlbl8xLlRva2VuTmFtZVsxMDEgLyogVGV4dCAqL10gPSAnSlNYVGV4dCc7XHJcblx0Ly8gRnVsbHkgcXVhbGlmaWVkIGVsZW1lbnQgbmFtZSwgZS5nLiA8c3ZnOnBhdGg+IHJldHVybnMgXCJzdmc6cGF0aFwiXHJcblx0ZnVuY3Rpb24gZ2V0UXVhbGlmaWVkRWxlbWVudE5hbWUoZWxlbWVudE5hbWUpIHtcclxuXHQgICAgdmFyIHF1YWxpZmllZE5hbWU7XHJcblx0ICAgIHN3aXRjaCAoZWxlbWVudE5hbWUudHlwZSkge1xyXG5cdCAgICAgICAgY2FzZSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWElkZW50aWZpZXI6XHJcblx0ICAgICAgICAgICAgdmFyIGlkID0gZWxlbWVudE5hbWU7XHJcblx0ICAgICAgICAgICAgcXVhbGlmaWVkTmFtZSA9IGlkLm5hbWU7XHJcblx0ICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICBjYXNlIGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYTmFtZXNwYWNlZE5hbWU6XHJcblx0ICAgICAgICAgICAgdmFyIG5zID0gZWxlbWVudE5hbWU7XHJcblx0ICAgICAgICAgICAgcXVhbGlmaWVkTmFtZSA9IGdldFF1YWxpZmllZEVsZW1lbnROYW1lKG5zLm5hbWVzcGFjZSkgKyAnOicgK1xyXG5cdCAgICAgICAgICAgICAgICBnZXRRdWFsaWZpZWRFbGVtZW50TmFtZShucy5uYW1lKTtcclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgIGNhc2UganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hNZW1iZXJFeHByZXNzaW9uOlxyXG5cdCAgICAgICAgICAgIHZhciBleHByID0gZWxlbWVudE5hbWU7XHJcblx0ICAgICAgICAgICAgcXVhbGlmaWVkTmFtZSA9IGdldFF1YWxpZmllZEVsZW1lbnROYW1lKGV4cHIub2JqZWN0KSArICcuJyArXHJcblx0ICAgICAgICAgICAgICAgIGdldFF1YWxpZmllZEVsZW1lbnROYW1lKGV4cHIucHJvcGVydHkpO1xyXG5cdCAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIHF1YWxpZmllZE5hbWU7XHJcblx0fVxyXG5cdHZhciBKU1hQYXJzZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG5cdCAgICBfX2V4dGVuZHMoSlNYUGFyc2VyLCBfc3VwZXIpO1xyXG5cdCAgICBmdW5jdGlvbiBKU1hQYXJzZXIoY29kZSwgb3B0aW9ucywgZGVsZWdhdGUpIHtcclxuXHQgICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBjb2RlLCBvcHRpb25zLCBkZWxlZ2F0ZSkgfHwgdGhpcztcclxuXHQgICAgfVxyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlUHJpbWFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5tYXRjaCgnPCcpID8gdGhpcy5wYXJzZUpTWFJvb3QoKSA6IF9zdXBlci5wcm90b3R5cGUucGFyc2VQcmltYXJ5RXhwcmVzc2lvbi5jYWxsKHRoaXMpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnN0YXJ0SlNYID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgLy8gVW53aW5kIHRoZSBzY2FubmVyIGJlZm9yZSB0aGUgbG9va2FoZWFkIHRva2VuLlxyXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmluZGV4ID0gdGhpcy5zdGFydE1hcmtlci5pbmRleDtcclxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyID0gdGhpcy5zdGFydE1hcmtlci5saW5lO1xyXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmxpbmVTdGFydCA9IHRoaXMuc3RhcnRNYXJrZXIuaW5kZXggLSB0aGlzLnN0YXJ0TWFya2VyLmNvbHVtbjtcclxuXHQgICAgfTtcclxuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5maW5pc2hKU1ggPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAvLyBQcmltZSB0aGUgbmV4dCBsb29rYWhlYWQuXHJcblx0ICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnJlZW50ZXJKU1ggPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB0aGlzLnN0YXJ0SlNYKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgnfScpO1xyXG5cdCAgICAgICAgLy8gUG9wIHRoZSBjbG9zaW5nICd9JyBhZGRlZCBmcm9tIHRoZSBsb29rYWhlYWQuXHJcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcudG9rZW5zKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2tlbnMucG9wKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUuY3JlYXRlSlNYTm9kZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHRoaXMuY29sbGVjdENvbW1lbnRzKCk7XHJcblx0ICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgIGluZGV4OiB0aGlzLnNjYW5uZXIuaW5kZXgsXHJcblx0ICAgICAgICAgICAgbGluZTogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgY29sdW1uOiB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLmNyZWF0ZUpTWENoaWxkTm9kZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgaW5kZXg6IHRoaXMuc2Nhbm5lci5pbmRleCxcclxuXHQgICAgICAgICAgICBsaW5lOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICBjb2x1bW46IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnRcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUuc2NhblhIVE1MRW50aXR5ID0gZnVuY3Rpb24gKHF1b3RlKSB7XHJcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gJyYnO1xyXG5cdCAgICAgICAgdmFyIHZhbGlkID0gdHJ1ZTtcclxuXHQgICAgICAgIHZhciB0ZXJtaW5hdGVkID0gZmFsc2U7XHJcblx0ICAgICAgICB2YXIgbnVtZXJpYyA9IGZhbHNlO1xyXG5cdCAgICAgICAgdmFyIGhleCA9IGZhbHNlO1xyXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLnNjYW5uZXIuZW9mKCkgJiYgdmFsaWQgJiYgIXRlcm1pbmF0ZWQpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleF07XHJcblx0ICAgICAgICAgICAgaWYgKGNoID09PSBxdW90ZSkge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGVybWluYXRlZCA9IChjaCA9PT0gJzsnKTtcclxuXHQgICAgICAgICAgICByZXN1bHQgKz0gY2g7XHJcblx0ICAgICAgICAgICAgKyt0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XHJcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAocmVzdWx0Lmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIGUuZy4gJyYjMTIzOydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmljID0gKGNoID09PSAnIycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1lcmljKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGUuZy4gJyYjeDQxOydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGV4ID0gKGNoID09PSAneCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGhleCB8fCBjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQoY2guY2hhckNvZGVBdCgwKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyaWMgPSBudW1lcmljICYmICFoZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHZhbGlkICYmICEobnVtZXJpYyAmJiAhY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KGNoLmNoYXJDb2RlQXQoMCkpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHZhbGlkICYmICEoaGV4ICYmICFjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNIZXhEaWdpdChjaC5jaGFyQ29kZUF0KDApKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodmFsaWQgJiYgdGVybWluYXRlZCAmJiByZXN1bHQubGVuZ3RoID4gMikge1xyXG5cdCAgICAgICAgICAgIC8vIGUuZy4gJyYjeDQxOycgYmVjb21lcyBqdXN0ICcjeDQxJ1xyXG5cdCAgICAgICAgICAgIHZhciBzdHIgPSByZXN1bHQuc3Vic3RyKDEsIHJlc3VsdC5sZW5ndGggLSAyKTtcclxuXHQgICAgICAgICAgICBpZiAobnVtZXJpYyAmJiBzdHIubGVuZ3RoID4gMSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXN1bHQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHN0ci5zdWJzdHIoMSksIDEwKSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGhleCAmJiBzdHIubGVuZ3RoID4gMikge1xyXG5cdCAgICAgICAgICAgICAgICByZXN1bHQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KCcwJyArIHN0ci5zdWJzdHIoMSksIDE2KSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKCFudW1lcmljICYmICFoZXggJiYgeGh0bWxfZW50aXRpZXNfMS5YSFRNTEVudGl0aWVzW3N0cl0pIHtcclxuXHQgICAgICAgICAgICAgICAgcmVzdWx0ID0geGh0bWxfZW50aXRpZXNfMS5YSFRNTEVudGl0aWVzW3N0cl07XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gU2NhbiB0aGUgbmV4dCBKU1ggdG9rZW4uIFRoaXMgcmVwbGFjZXMgU2Nhbm5lciNsZXggd2hlbiBpbiBKU1ggbW9kZS5cclxuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5sZXhKU1ggPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgY3AgPSB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4KTtcclxuXHQgICAgICAgIC8vIDwgPiAvIDogPSB7IH1cclxuXHQgICAgICAgIGlmIChjcCA9PT0gNjAgfHwgY3AgPT09IDYyIHx8IGNwID09PSA0NyB8fCBjcCA9PT0gNTggfHwgY3AgPT09IDYxIHx8IGNwID09PSAxMjMgfHwgY3AgPT09IDEyNSkge1xyXG5cdCAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIHR5cGU6IDcgLyogUHVuY3R1YXRvciAqLyxcclxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG5cdCAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLnNjYW5uZXIubGluZVN0YXJ0LFxyXG5cdCAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5zY2FubmVyLmluZGV4IC0gMSxcclxuXHQgICAgICAgICAgICAgICAgZW5kOiB0aGlzLnNjYW5uZXIuaW5kZXhcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy8gXCIgJ1xyXG5cdCAgICAgICAgaWYgKGNwID09PSAzNCB8fCBjcCA9PT0gMzkpIHtcclxuXHQgICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICAgICAgdmFyIHF1b3RlID0gdGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXgrK107XHJcblx0ICAgICAgICAgICAgdmFyIHN0ciA9ICcnO1xyXG5cdCAgICAgICAgICAgIHdoaWxlICghdGhpcy5zY2FubmVyLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09IHF1b3RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChjaCA9PT0gJyYnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdHIgKz0gdGhpcy5zY2FuWEhUTUxFbnRpdHkocXVvdGUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RyICs9IGNoO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIHR5cGU6IDggLyogU3RyaW5nTGl0ZXJhbCAqLyxcclxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IHN0cixcclxuXHQgICAgICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5zY2FubmVyLmxpbmVTdGFydCxcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxyXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHRoaXMuc2Nhbm5lci5pbmRleFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvLyAuLi4gb3IgLlxyXG5cdCAgICAgICAgaWYgKGNwID09PSA0Nikge1xyXG5cdCAgICAgICAgICAgIHZhciBuMSA9IHRoaXMuc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLnNjYW5uZXIuaW5kZXggKyAxKTtcclxuXHQgICAgICAgICAgICB2YXIgbjIgPSB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4ICsgMik7XHJcblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gKG4xID09PSA0NiAmJiBuMiA9PT0gNDYpID8gJy4uLicgOiAnLic7XHJcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLmluZGV4O1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5pbmRleCArPSB2YWx1ZS5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgdHlwZTogNyAvKiBQdW5jdHVhdG9yICovLFxyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcblx0ICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMuc2Nhbm5lci5saW5lU3RhcnQsXHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuXHQgICAgICAgICAgICAgICAgZW5kOiB0aGlzLnNjYW5uZXIuaW5kZXhcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy8gYFxyXG5cdCAgICAgICAgaWYgKGNwID09PSA5Nikge1xyXG5cdCAgICAgICAgICAgIC8vIE9ubHkgcGxhY2Vob2xkZXIsIHNpbmNlIGl0IHdpbGwgYmUgcmVzY2FubmVkIGFzIGEgcmVhbCBhc3NpZ25tZW50IGV4cHJlc3Npb24uXHJcblx0ICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgdHlwZTogMTAgLyogVGVtcGxhdGUgKi8sXHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcclxuXHQgICAgICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5zY2FubmVyLmxpbmVTdGFydCxcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc2Nhbm5lci5pbmRleCxcclxuXHQgICAgICAgICAgICAgICAgZW5kOiB0aGlzLnNjYW5uZXIuaW5kZXhcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy8gSWRlbnRpZmVyIGNhbiBub3QgY29udGFpbiBiYWNrc2xhc2ggKGNoYXIgY29kZSA5MikuXHJcblx0ICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KGNwKSAmJiAoY3AgIT09IDkyKSkge1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcclxuXHQgICAgICAgICAgICArK3RoaXMuc2Nhbm5lci5pbmRleDtcclxuXHQgICAgICAgICAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YoKSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KGNoKSAmJiAoY2ggIT09IDkyKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09IDQ1KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyBIeXBoZW4gKGNoYXIgY29kZSA0NSkgY2FuIGJlIHBhcnQgb2YgYW4gaWRlbnRpZmllci5cclxuXHQgICAgICAgICAgICAgICAgICAgICsrdGhpcy5zY2FubmVyLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZShzdGFydCwgdGhpcy5zY2FubmVyLmluZGV4KTtcclxuXHQgICAgICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgICAgICB0eXBlOiAxMDAgLyogSWRlbnRpZmllciAqLyxcclxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGlkLFxyXG5cdCAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLnNjYW5uZXIubGluZVN0YXJ0LFxyXG5cdCAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXHJcblx0ICAgICAgICAgICAgICAgIGVuZDogdGhpcy5zY2FubmVyLmluZGV4XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLnNjYW5uZXIubGV4KCk7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUubmV4dEpTWFRva2VuID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdGhpcy5jb2xsZWN0Q29tbWVudHMoKTtcclxuXHQgICAgICAgIHRoaXMuc3RhcnRNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICB0aGlzLnN0YXJ0TWFya2VyLmxpbmUgPSB0aGlzLnNjYW5uZXIubGluZU51bWJlcjtcclxuXHQgICAgICAgIHRoaXMuc3RhcnRNYXJrZXIuY29sdW1uID0gdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydDtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubGV4SlNYKCk7XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIubGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgdGhpcy5sYXN0TWFya2VyLmNvbHVtbiA9IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7XHJcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcudG9rZW5zKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh0aGlzLmNvbnZlcnRUb2tlbih0b2tlbikpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRva2VuO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLm5leHRKU1hUZXh0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdGhpcy5zdGFydE1hcmtlci5pbmRleCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcclxuXHQgICAgICAgIHRoaXMuc3RhcnRNYXJrZXIubGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgdGhpcy5zdGFydE1hcmtlci5jb2x1bW4gPSB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0O1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLmluZGV4O1xyXG5cdCAgICAgICAgdmFyIHRleHQgPSAnJztcclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5zY2FubmVyLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdO1xyXG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gJ3snIHx8IGNoID09PSAnPCcpIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICsrdGhpcy5zY2FubmVyLmluZGV4O1xyXG5cdCAgICAgICAgICAgIHRleHQgKz0gY2g7XHJcblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGNoLmNoYXJDb2RlQXQoMCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5zY2FubmVyLmxpbmVOdW1iZXI7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgdGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdID09PSAnXFxuJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmxpbmVTdGFydCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIubGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgdGhpcy5sYXN0TWFya2VyLmNvbHVtbiA9IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7XHJcblx0ICAgICAgICB2YXIgdG9rZW4gPSB7XHJcblx0ICAgICAgICAgICAgdHlwZTogMTAxIC8qIFRleHQgKi8sXHJcblx0ICAgICAgICAgICAgdmFsdWU6IHRleHQsXHJcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLnNjYW5uZXIubGluZVN0YXJ0LFxyXG5cdCAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuc2Nhbm5lci5pbmRleFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIGlmICgodGV4dC5sZW5ndGggPiAwKSAmJiB0aGlzLmNvbmZpZy50b2tlbnMpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHRoaXMuY29udmVydFRva2VuKHRva2VuKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdG9rZW47XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGVla0pTWFRva2VuID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zY2FubmVyLnNhdmVTdGF0ZSgpO1xyXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpO1xyXG5cdCAgICAgICAgdmFyIG5leHQgPSB0aGlzLmxleEpTWCgpO1xyXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnJlc3RvcmVTdGF0ZShzdGF0ZSk7XHJcblx0ICAgICAgICByZXR1cm4gbmV4dDtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gRXhwZWN0IHRoZSBuZXh0IEpTWCB0b2tlbiB0byBtYXRjaCB0aGUgc3BlY2lmaWVkIHB1bmN0dWF0b3IuXHJcblx0ICAgIC8vIElmIG5vdCwgYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLlxyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLmV4cGVjdEpTWCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0SlNYVG9rZW4oKTtcclxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlICE9PSA3IC8qIFB1bmN0dWF0b3IgKi8gfHwgdG9rZW4udmFsdWUgIT09IHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIFJldHVybiB0cnVlIGlmIHRoZSBuZXh0IEpTWCB0b2tlbiBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgcHVuY3R1YXRvci5cclxuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5tYXRjaEpTWCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cdCAgICAgICAgdmFyIG5leHQgPSB0aGlzLnBlZWtKU1hUb2tlbigpO1xyXG5cdCAgICAgICAgcmV0dXJuIG5leHQudHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIG5leHQudmFsdWUgPT09IHZhbHVlO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYSWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLm5leHRKU1hUb2tlbigpO1xyXG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IDEwMCAvKiBJZGVudGlmaWVyICovKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hJZGVudGlmaWVyKHRva2VuLnZhbHVlKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hFbGVtZW50TmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgZWxlbWVudE5hbWUgPSB0aGlzLnBhcnNlSlNYSWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hKU1goJzonKSkge1xyXG5cdCAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBlbGVtZW50TmFtZTtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnOicpO1xyXG5cdCAgICAgICAgICAgIHZhciBuYW1lXzEgPSB0aGlzLnBhcnNlSlNYSWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgICAgIGVsZW1lbnROYW1lID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hOYW1lc3BhY2VkTmFtZShuYW1lc3BhY2UsIG5hbWVfMSkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaEpTWCgnLicpKSB7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKHRoaXMubWF0Y2hKU1goJy4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gZWxlbWVudE5hbWU7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0SlNYKCcuJyk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHRoaXMucGFyc2VKU1hJZGVudGlmaWVyKCk7XHJcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnROYW1lID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hNZW1iZXJFeHByZXNzaW9uKG9iamVjdCwgcHJvcGVydHkpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZWxlbWVudE5hbWU7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hBdHRyaWJ1dGVOYW1lID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcclxuXHQgICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lO1xyXG5cdCAgICAgICAgdmFyIGlkZW50aWZpZXIgPSB0aGlzLnBhcnNlSlNYSWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hKU1goJzonKSkge1xyXG5cdCAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBpZGVudGlmaWVyO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0SlNYKCc6Jyk7XHJcblx0ICAgICAgICAgICAgdmFyIG5hbWVfMiA9IHRoaXMucGFyc2VKU1hJZGVudGlmaWVyKCk7XHJcblx0ICAgICAgICAgICAgYXR0cmlidXRlTmFtZSA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IEpTWE5vZGUuSlNYTmFtZXNwYWNlZE5hbWUobmFtZXNwYWNlLCBuYW1lXzIpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPSBpZGVudGlmaWVyO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWU7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hTdHJpbmdMaXRlcmFsQXR0cmlidXRlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dEpTWFRva2VuKCk7XHJcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gOCAvKiBTdHJpbmdMaXRlcmFsICovKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5MaXRlcmFsKHRva2VuLnZhbHVlLCByYXcpKTtcclxuXHQgICAgfTtcclxuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWEV4cHJlc3Npb25BdHRyaWJ1dGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlSlNYTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RKU1goJ3snKTtcclxuXHQgICAgICAgIHRoaXMuZmluaXNoSlNYKCk7XHJcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnfScpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKCdKU1ggYXR0cmlidXRlcyBtdXN0IG9ubHkgYmUgYXNzaWduZWQgYSBub24tZW1wdHkgZXhwcmVzc2lvbicpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgIHRoaXMucmVlbnRlckpTWCgpO1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IEpTWE5vZGUuSlNYRXhwcmVzc2lvbkNvbnRhaW5lcihleHByZXNzaW9uKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLm1hdGNoSlNYKCd7JykgPyB0aGlzLnBhcnNlSlNYRXhwcmVzc2lvbkF0dHJpYnV0ZSgpIDpcclxuXHQgICAgICAgICAgICB0aGlzLm1hdGNoSlNYKCc8JykgPyB0aGlzLnBhcnNlSlNYRWxlbWVudCgpIDogdGhpcy5wYXJzZUpTWFN0cmluZ0xpdGVyYWxBdHRyaWJ1dGUoKTtcclxuXHQgICAgfTtcclxuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWE5hbWVWYWx1ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VKU1hBdHRyaWJ1dGVOYW1lKCk7XHJcblx0ICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hKU1goJz0nKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0SlNYKCc9Jyk7XHJcblx0ICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlSlNYQXR0cmlidXRlVmFsdWUoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYU3ByZWFkQXR0cmlidXRlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0SlNYKCd7Jyk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgnLi4uJyk7XHJcblx0ICAgICAgICB0aGlzLmZpbmlzaEpTWCgpO1xyXG5cdCAgICAgICAgdmFyIGFyZ3VtZW50ID0gdGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICB0aGlzLnJlZW50ZXJKU1goKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWFNwcmVhZEF0dHJpYnV0ZShhcmd1bWVudCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gW107XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMubWF0Y2hKU1goJy8nKSAmJiAhdGhpcy5tYXRjaEpTWCgnPicpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHRoaXMubWF0Y2hKU1goJ3snKSA/IHRoaXMucGFyc2VKU1hTcHJlYWRBdHRyaWJ1dGUoKSA6XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMucGFyc2VKU1hOYW1lVmFsdWVBdHRyaWJ1dGUoKTtcclxuXHQgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYT3BlbmluZ0VsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlSlNYTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RKU1goJzwnKTtcclxuXHQgICAgICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZUpTWEVsZW1lbnROYW1lKCk7XHJcblx0ICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMucGFyc2VKU1hBdHRyaWJ1dGVzKCk7XHJcblx0ICAgICAgICB2YXIgc2VsZkNsb3NpbmcgPSB0aGlzLm1hdGNoSlNYKCcvJyk7XHJcblx0ICAgICAgICBpZiAoc2VsZkNsb3NpbmcpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnLycpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5leHBlY3RKU1goJz4nKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWE9wZW5pbmdFbGVtZW50KG5hbWUsIHNlbGZDbG9zaW5nLCBhdHRyaWJ1dGVzKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hCb3VuZGFyeUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlSlNYTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RKU1goJzwnKTtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoSlNYKCcvJykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnLycpO1xyXG5cdCAgICAgICAgICAgIHZhciBuYW1lXzMgPSB0aGlzLnBhcnNlSlNYRWxlbWVudE5hbWUoKTtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnPicpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWENsb3NpbmdFbGVtZW50KG5hbWVfMykpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlSlNYRWxlbWVudE5hbWUoKTtcclxuXHQgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5wYXJzZUpTWEF0dHJpYnV0ZXMoKTtcclxuXHQgICAgICAgIHZhciBzZWxmQ2xvc2luZyA9IHRoaXMubWF0Y2hKU1goJy8nKTtcclxuXHQgICAgICAgIGlmIChzZWxmQ2xvc2luZykge1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0SlNYKCcvJyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgnPicpO1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IEpTWE5vZGUuSlNYT3BlbmluZ0VsZW1lbnQobmFtZSwgc2VsZkNsb3NpbmcsIGF0dHJpYnV0ZXMpKTtcclxuXHQgICAgfTtcclxuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWEVtcHR5RXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hDaGlsZE5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuY29sbGVjdENvbW1lbnRzKCk7XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIubGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgdGhpcy5sYXN0TWFya2VyLmNvbHVtbiA9IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hFbXB0eUV4cHJlc3Npb24oKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hFeHByZXNzaW9uQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0SlNYKCd7Jyk7XHJcblx0ICAgICAgICB2YXIgZXhwcmVzc2lvbjtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoSlNYKCd9JykpIHtcclxuXHQgICAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5wYXJzZUpTWEVtcHR5RXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0SlNYKCd9Jyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICB0aGlzLmZpbmlzaEpTWCgpO1xyXG5cdCAgICAgICAgICAgIGV4cHJlc3Npb24gPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICB0aGlzLnJlZW50ZXJKU1goKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWEV4cHJlc3Npb25Db250YWluZXIoZXhwcmVzc2lvbikpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYQ2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5zY2FubmVyLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWENoaWxkTm9kZSgpO1xyXG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dEpTWFRleHQoKTtcclxuXHQgICAgICAgICAgICBpZiAodG9rZW4uc3RhcnQgPCB0b2tlbi5lbmQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJhdyA9IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWFRleHQodG9rZW4udmFsdWUsIHJhdykpO1xyXG5cdCAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4XSA9PT0gJ3snKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLnBhcnNlSlNYRXhwcmVzc2lvbkNvbnRhaW5lcigpO1xyXG5cdCAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNvbnRhaW5lcik7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gY2hpbGRyZW47XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VDb21wbGV4SlNYRWxlbWVudCA9IGZ1bmN0aW9uIChlbCkge1xyXG5cdCAgICAgICAgdmFyIHN0YWNrID0gW107XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YoKSkge1xyXG5cdCAgICAgICAgICAgIGVsLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4uY29uY2F0KHRoaXMucGFyc2VKU1hDaGlsZHJlbigpKTtcclxuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlSlNYQ2hpbGROb2RlKCk7XHJcblx0ICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBhcnNlSlNYQm91bmRhcnlFbGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hPcGVuaW5nRWxlbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgb3BlbmluZyA9IGVsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nLnNlbGZDbG9zaW5nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWEVsZW1lbnQob3BlbmluZywgW10sIG51bGwpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChlbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbCA9IHsgbm9kZTogbm9kZSwgb3BlbmluZzogb3BlbmluZywgY2xvc2luZzogbnVsbCwgY2hpbGRyZW46IFtdIH07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hDbG9zaW5nRWxlbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICBlbC5jbG9zaW5nID0gZWxlbWVudDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG9wZW5fMSA9IGdldFF1YWxpZmllZEVsZW1lbnROYW1lKGVsLm9wZW5pbmcubmFtZSk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjbG9zZV8xID0gZ2V0UXVhbGlmaWVkRWxlbWVudE5hbWUoZWwuY2xvc2luZy5uYW1lKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG9wZW5fMSAhPT0gY2xvc2VfMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKCdFeHBlY3RlZCBjb3JyZXNwb25kaW5nIEpTWCBjbG9zaW5nIHRhZyBmb3IgJTAnLCBvcGVuXzEpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmZpbmFsaXplKGVsLm5vZGUsIG5ldyBKU1hOb2RlLkpTWEVsZW1lbnQoZWwub3BlbmluZywgZWwuY2hpbGRyZW4sIGVsLmNsb3NpbmcpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YWNrLnBvcCgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZWw7XHJcblx0ICAgIH07XHJcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcclxuXHQgICAgICAgIHZhciBvcGVuaW5nID0gdGhpcy5wYXJzZUpTWE9wZW5pbmdFbGVtZW50KCk7XHJcblx0ICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcclxuXHQgICAgICAgIHZhciBjbG9zaW5nID0gbnVsbDtcclxuXHQgICAgICAgIGlmICghb3BlbmluZy5zZWxmQ2xvc2luZykge1xyXG5cdCAgICAgICAgICAgIHZhciBlbCA9IHRoaXMucGFyc2VDb21wbGV4SlNYRWxlbWVudCh7IG5vZGU6IG5vZGUsIG9wZW5pbmc6IG9wZW5pbmcsIGNsb3Npbmc6IGNsb3NpbmcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9KTtcclxuXHQgICAgICAgICAgICBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xyXG5cdCAgICAgICAgICAgIGNsb3NpbmcgPSBlbC5jbG9zaW5nO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IEpTWE5vZGUuSlNYRWxlbWVudChvcGVuaW5nLCBjaGlsZHJlbiwgY2xvc2luZykpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYUm9vdCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIC8vIFBvcCB0aGUgb3BlbmluZyAnPCcgYWRkZWQgZnJvbSB0aGUgbG9va2FoZWFkLlxyXG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLnRva2Vucykge1xyXG5cdCAgICAgICAgICAgIHRoaXMudG9rZW5zLnBvcCgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5zdGFydEpTWCgpO1xyXG5cdCAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBhcnNlSlNYRWxlbWVudCgpO1xyXG5cdCAgICAgICAgdGhpcy5maW5pc2hKU1goKTtcclxuXHQgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG5cdCAgICB9O1xyXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLmlzU3RhcnRPZkV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5pc1N0YXJ0T2ZFeHByZXNzaW9uLmNhbGwodGhpcykgfHwgdGhpcy5tYXRjaCgnPCcpO1xyXG5cdCAgICB9O1xyXG5cdCAgICByZXR1cm4gSlNYUGFyc2VyO1xyXG5cdH0ocGFyc2VyXzEuUGFyc2VyKSk7XHJcblx0ZXhwb3J0cy5KU1hQYXJzZXIgPSBKU1hQYXJzZXI7XHJcblxuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdC8vIFNlZSBhbHNvIHRvb2xzL2dlbmVyYXRlLXVuaWNvZGUtcmVnZXguanMuXHJcblx0dmFyIFJlZ2V4ID0ge1xyXG5cdCAgICAvLyBVbmljb2RlIHY4LjAuMCBOb25Bc2NpaUlkZW50aWZpZXJTdGFydDpcclxuXHQgICAgTm9uQXNjaWlJZGVudGlmaWVyU3RhcnQ6IC9bXFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwLVxcdTA4QjRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ1Ri1cXHUwRDYxXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ2XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RDdcXHUxN0RDXFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFBQTdcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3RFxcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MUQwMC1cXHUxREJGXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOC1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxNjAtXFx1MjE4OFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MzAwNS1cXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzMS1cXHUzMDM1XFx1MzAzOC1cXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5Qi1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkQ1XFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RUZcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QURcXHVBN0IwLVxcdUE3QjdcXHVBN0Y3LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MEEtXFx1QTkyNVxcdUE5MzAtXFx1QTk0NlxcdUE5NjAtXFx1QTk3Q1xcdUE5ODQtXFx1QTlCMlxcdUE5Q0ZcXHVBOUUwLVxcdUE5RTRcXHVBOUU2LVxcdUE5RUZcXHVBOUZBLVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUFcXHVBQUYyLVxcdUFBRjRcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjVcXHVBQjcwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERDQwLVxcdURENzRcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERjAwLVxcdURGMUZcXHVERjMwLVxcdURGNEFcXHVERjUwLVxcdURGNzVcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZcXHVERkQxLVxcdURGRDVdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzlEXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMFxcdURFMTAtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNFxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDRbXFx1REMwMy1cXHVEQzM3XFx1REM4My1cXHVEQ0FGXFx1RENEMC1cXHVEQ0U4XFx1REQwMy1cXHVERDI2XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REYwMC1cXHVERjE5XXxcXHVEODA2W1xcdURDQTAtXFx1RENERlxcdURDRkZcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDMDAtXFx1REM2RVxcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJdW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFRDAtXFx1REVFRFxcdURGMDAtXFx1REYyRlxcdURGNDAtXFx1REY0M1xcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERjAwLVxcdURGNDRcXHVERjUwXFx1REY5My1cXHVERjlGXXxcXHVEODJDW1xcdURDMDBcXHVEQzAxXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OV18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNF18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMV18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdLyxcclxuXHQgICAgLy8gVW5pY29kZSB2OC4wLjAgTm9uQXNjaWlJZGVudGlmaWVyUGFydDpcclxuXHQgICAgTm9uQXNjaWlJZGVudGlmaWVyUGFydDogL1tcXHhBQVxceEI1XFx4QjdcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzAwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4My1cXHUwNDg3XFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1OTEtXFx1MDVCRFxcdTA1QkZcXHUwNUMxXFx1MDVDMlxcdTA1QzRcXHUwNUM1XFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MTAtXFx1MDYxQVxcdTA2MjAtXFx1MDY2OVxcdTA2NkUtXFx1MDZEM1xcdTA2RDUtXFx1MDZEQ1xcdTA2REYtXFx1MDZFOFxcdTA2RUEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwLVxcdTA3NEFcXHUwNzRELVxcdTA3QjFcXHUwN0MwLVxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODJEXFx1MDg0MC1cXHUwODVCXFx1MDhBMC1cXHUwOEI0XFx1MDhFMy1cXHUwOTYzXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MS1cXHUwOTgzXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCQy1cXHUwOUM0XFx1MDlDN1xcdTA5QzhcXHUwOUNCLVxcdTA5Q0VcXHUwOUQ3XFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTNcXHUwOUU2LVxcdTA5RjFcXHUwQTAxLVxcdTBBMDNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBM0NcXHUwQTNFLVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE2Ni1cXHUwQTc1XFx1MEE4MS1cXHUwQTgzXFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJDLVxcdTBBQzVcXHUwQUM3LVxcdTBBQzlcXHUwQUNCLVxcdTBBQ0RcXHUwQUQwXFx1MEFFMC1cXHUwQUUzXFx1MEFFNi1cXHUwQUVGXFx1MEFGOVxcdTBCMDEtXFx1MEIwM1xcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNDLVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEItXFx1MEI0RFxcdTBCNTZcXHUwQjU3XFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjNcXHUwQjY2LVxcdTBCNkZcXHUwQjcxXFx1MEI4MlxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJCRS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNEXFx1MEJEMFxcdTBCRDdcXHUwQkU2LVxcdTBCRUZcXHUwQzAwLVxcdTBDMDNcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNELVxcdTBDNDRcXHUwQzQ2LVxcdTBDNDhcXHUwQzRBLVxcdTBDNERcXHUwQzU1XFx1MEM1NlxcdTBDNTgtXFx1MEM1QVxcdTBDNjAtXFx1MEM2M1xcdTBDNjYtXFx1MEM2RlxcdTBDODEtXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkMtXFx1MENDNFxcdTBDQzYtXFx1MENDOFxcdTBDQ0EtXFx1MENDRFxcdTBDRDVcXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFM1xcdTBDRTYtXFx1MENFRlxcdTBDRjFcXHUwQ0YyXFx1MEQwMS1cXHUwRDAzXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRC1cXHUwRDQ0XFx1MEQ0Ni1cXHUwRDQ4XFx1MEQ0QS1cXHUwRDRFXFx1MEQ1N1xcdTBENUYtXFx1MEQ2M1xcdTBENjYtXFx1MEQ2RlxcdTBEN0EtXFx1MEQ3RlxcdTBEODJcXHUwRDgzXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBEQ0FcXHUwRENGLVxcdTBERDRcXHUwREQ2XFx1MEREOC1cXHUwRERGXFx1MERFNi1cXHUwREVGXFx1MERGMlxcdTBERjNcXHUwRTAxLVxcdTBFM0FcXHUwRTQwLVxcdTBFNEVcXHUwRTUwLVxcdTBFNTlcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCOVxcdTBFQkItXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRUM4LVxcdTBFQ0RcXHUwRUQwLVxcdTBFRDlcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEYxOFxcdTBGMTlcXHUwRjIwLVxcdTBGMjlcXHUwRjM1XFx1MEYzN1xcdTBGMzlcXHUwRjNFLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjcxLVxcdTBGODRcXHUwRjg2LVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAwMC1cXHUxMDQ5XFx1MTA1MC1cXHUxMDlEXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNUQtXFx1MTM1RlxcdTEzNjktXFx1MTM3MVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxNFxcdTE3MjAtXFx1MTczNFxcdTE3NDAtXFx1MTc1M1xcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3NzJcXHUxNzczXFx1MTc4MC1cXHUxN0QzXFx1MTdEN1xcdTE3RENcXHUxN0REXFx1MTdFMC1cXHUxN0U5XFx1MTgwQi1cXHUxODBEXFx1MTgxMC1cXHUxODE5XFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTkyMC1cXHUxOTJCXFx1MTkzMC1cXHUxOTNCXFx1MTk0Ni1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MTlEMC1cXHUxOURBXFx1MUEwMC1cXHUxQTFCXFx1MUEyMC1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3Ri1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUFBN1xcdTFBQjAtXFx1MUFCRFxcdTFCMDAtXFx1MUI0QlxcdTFCNTAtXFx1MUI1OVxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUJGM1xcdTFDMDAtXFx1MUMzN1xcdTFDNDAtXFx1MUM0OVxcdTFDNEQtXFx1MUM3RFxcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNGNlxcdTFDRjhcXHUxQ0Y5XFx1MUQwMC1cXHUxREY1XFx1MURGQy1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwMENcXHUyMDBEXFx1MjAzRlxcdTIwNDBcXHUyMDU0XFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMEQwLVxcdTIwRENcXHUyMEUxXFx1MjBFNS1cXHUyMEYwXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOC1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxNjAtXFx1MjE4OFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEN0YtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJERTAtXFx1MkRGRlxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyRlxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOTktXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYyQlxcdUE2NDAtXFx1QTY2RlxcdUE2NzQtXFx1QTY3RFxcdUE2N0YtXFx1QTZGMVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgyN1xcdUE4NDAtXFx1QTg3M1xcdUE4ODAtXFx1QThDNFxcdUE4RDAtXFx1QThEOVxcdUE4RTAtXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwMC1cXHVBOTJEXFx1QTkzMC1cXHVBOTUzXFx1QTk2MC1cXHVBOTdDXFx1QTk4MC1cXHVBOUMwXFx1QTlDRi1cXHVBOUQ5XFx1QTlFMC1cXHVBOUZFXFx1QUEwMC1cXHVBQTM2XFx1QUE0MC1cXHVBQTREXFx1QUE1MC1cXHVBQTU5XFx1QUE2MC1cXHVBQTc2XFx1QUE3QS1cXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVGXFx1QUFGMi1cXHVBQUY2XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkVBXFx1QUJFQ1xcdUFCRURcXHVBQkYwLVxcdUFCRjlcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFELVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFMDAtXFx1RkUwRlxcdUZFMjAtXFx1RkUyRlxcdUZFMzNcXHVGRTM0XFx1RkU0RC1cXHVGRTRGXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYxMC1cXHVGRjE5XFx1RkYyMS1cXHVGRjNBXFx1RkYzRlxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURERkRcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERUUwXFx1REYwMC1cXHVERjFGXFx1REYzMC1cXHVERjRBXFx1REY1MC1cXHVERjdBXFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXFx1REZEMS1cXHVERkQ1XXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQTAtXFx1RENBOVxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDAtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNlxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDRbXFx1REMwMC1cXHVEQzQ2XFx1REM2Ni1cXHVEQzZGXFx1REM3Ri1cXHVEQ0JBXFx1RENEMC1cXHVEQ0U4XFx1RENGMC1cXHVEQ0Y5XFx1REQwMC1cXHVERDM0XFx1REQzNi1cXHVERDNGXFx1REQ1MC1cXHVERDczXFx1REQ3NlxcdUREODAtXFx1RERDNFxcdUREQ0EtXFx1RERDQ1xcdURERDAtXFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMzdcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERUVBXFx1REVGMC1cXHVERUY5XFx1REYwMC1cXHVERjAzXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0MtXFx1REY0NFxcdURGNDdcXHVERjQ4XFx1REY0Qi1cXHVERjREXFx1REY1MFxcdURGNTdcXHVERjVELVxcdURGNjNcXHVERjY2LVxcdURGNkNcXHVERjcwLVxcdURGNzRdfFxcdUQ4MDVbXFx1REM4MC1cXHVEQ0M1XFx1RENDN1xcdURDRDAtXFx1RENEOVxcdUREODAtXFx1RERCNVxcdUREQjgtXFx1RERDMFxcdURERDgtXFx1RERERFxcdURFMDAtXFx1REU0MFxcdURFNDRcXHVERTUwLVxcdURFNTlcXHVERTgwLVxcdURFQjdcXHVERUMwLVxcdURFQzlcXHVERjAwLVxcdURGMTlcXHVERjFELVxcdURGMkJcXHVERjMwLVxcdURGMzldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0U5XFx1RENGRlxcdURFQzAtXFx1REVGOF18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3Ml1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REU2MC1cXHVERTY5XFx1REVEMC1cXHVERUVEXFx1REVGMC1cXHVERUY0XFx1REYwMC1cXHVERjM2XFx1REY0MC1cXHVERjQzXFx1REY1MC1cXHVERjU5XFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTAtXFx1REY3RVxcdURGOEYtXFx1REY5Rl18XFx1RDgyQ1tcXHVEQzAwXFx1REMwMV18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTlcXHVEQzlEXFx1REM5RV18XFx1RDgzNFtcXHVERDY1LVxcdURENjlcXHVERDZELVxcdURENzJcXHVERDdCLVxcdUREODJcXHVERDg1LVxcdUREOEJcXHVEREFBLVxcdUREQURcXHVERTQyLVxcdURFNDRdfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQlxcdURGQ0UtXFx1REZGRl18XFx1RDgzNltcXHVERTAwLVxcdURFMzZcXHVERTNCLVxcdURFNkNcXHVERTc1XFx1REU4NFxcdURFOUItXFx1REU5RlxcdURFQTEtXFx1REVBRl18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRcXHVEQ0QwLVxcdURDRDZdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXXxcXHVEQjQwW1xcdUREMDAtXFx1RERFRl0vXHJcblx0fTtcclxuXHRleHBvcnRzLkNoYXJhY3RlciA9IHtcclxuXHQgICAgLyogdHNsaW50OmRpc2FibGU6bm8tYml0d2lzZSAqL1xyXG5cdCAgICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiAoY3ApIHtcclxuXHQgICAgICAgIHJldHVybiAoY3AgPCAweDEwMDAwKSA/IFN0cmluZy5mcm9tQ2hhckNvZGUoY3ApIDpcclxuXHQgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgwMCArICgoY3AgLSAweDEwMDAwKSA+PiAxMCkpICtcclxuXHQgICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSgweERDMDAgKyAoKGNwIC0gMHgxMDAwMCkgJiAxMDIzKSk7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXdoaXRlLXNwYWNlXHJcblx0ICAgIGlzV2hpdGVTcGFjZTogZnVuY3Rpb24gKGNwKSB7XHJcblx0ICAgICAgICByZXR1cm4gKGNwID09PSAweDIwKSB8fCAoY3AgPT09IDB4MDkpIHx8IChjcCA9PT0gMHgwQikgfHwgKGNwID09PSAweDBDKSB8fCAoY3AgPT09IDB4QTApIHx8XHJcblx0ICAgICAgICAgICAgKGNwID49IDB4MTY4MCAmJiBbMHgxNjgwLCAweDIwMDAsIDB4MjAwMSwgMHgyMDAyLCAweDIwMDMsIDB4MjAwNCwgMHgyMDA1LCAweDIwMDYsIDB4MjAwNywgMHgyMDA4LCAweDIwMDksIDB4MjAwQSwgMHgyMDJGLCAweDIwNUYsIDB4MzAwMCwgMHhGRUZGXS5pbmRleE9mKGNwKSA+PSAwKTtcclxuXHQgICAgfSxcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGluZS10ZXJtaW5hdG9yc1xyXG5cdCAgICBpc0xpbmVUZXJtaW5hdG9yOiBmdW5jdGlvbiAoY3ApIHtcclxuXHQgICAgICAgIHJldHVybiAoY3AgPT09IDB4MEEpIHx8IChjcCA9PT0gMHgwRCkgfHwgKGNwID09PSAweDIwMjgpIHx8IChjcCA9PT0gMHgyMDI5KTtcclxuXHQgICAgfSxcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbmFtZXMtYW5kLWtleXdvcmRzXHJcblx0ICAgIGlzSWRlbnRpZmllclN0YXJ0OiBmdW5jdGlvbiAoY3ApIHtcclxuXHQgICAgICAgIHJldHVybiAoY3AgPT09IDB4MjQpIHx8IChjcCA9PT0gMHg1RikgfHxcclxuXHQgICAgICAgICAgICAoY3AgPj0gMHg0MSAmJiBjcCA8PSAweDVBKSB8fFxyXG5cdCAgICAgICAgICAgIChjcCA+PSAweDYxICYmIGNwIDw9IDB4N0EpIHx8XHJcblx0ICAgICAgICAgICAgKGNwID09PSAweDVDKSB8fFxyXG5cdCAgICAgICAgICAgICgoY3AgPj0gMHg4MCkgJiYgUmVnZXguTm9uQXNjaWlJZGVudGlmaWVyU3RhcnQudGVzdChleHBvcnRzLkNoYXJhY3Rlci5mcm9tQ29kZVBvaW50KGNwKSkpO1xyXG5cdCAgICB9LFxyXG5cdCAgICBpc0lkZW50aWZpZXJQYXJ0OiBmdW5jdGlvbiAoY3ApIHtcclxuXHQgICAgICAgIHJldHVybiAoY3AgPT09IDB4MjQpIHx8IChjcCA9PT0gMHg1RikgfHxcclxuXHQgICAgICAgICAgICAoY3AgPj0gMHg0MSAmJiBjcCA8PSAweDVBKSB8fFxyXG5cdCAgICAgICAgICAgIChjcCA+PSAweDYxICYmIGNwIDw9IDB4N0EpIHx8XHJcblx0ICAgICAgICAgICAgKGNwID49IDB4MzAgJiYgY3AgPD0gMHgzOSkgfHxcclxuXHQgICAgICAgICAgICAoY3AgPT09IDB4NUMpIHx8XHJcblx0ICAgICAgICAgICAgKChjcCA+PSAweDgwKSAmJiBSZWdleC5Ob25Bc2NpaUlkZW50aWZpZXJQYXJ0LnRlc3QoZXhwb3J0cy5DaGFyYWN0ZXIuZnJvbUNvZGVQb2ludChjcCkpKTtcclxuXHQgICAgfSxcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGl0ZXJhbHMtbnVtZXJpYy1saXRlcmFsc1xyXG5cdCAgICBpc0RlY2ltYWxEaWdpdDogZnVuY3Rpb24gKGNwKSB7XHJcblx0ICAgICAgICByZXR1cm4gKGNwID49IDB4MzAgJiYgY3AgPD0gMHgzOSk7IC8vIDAuLjlcclxuXHQgICAgfSxcclxuXHQgICAgaXNIZXhEaWdpdDogZnVuY3Rpb24gKGNwKSB7XHJcblx0ICAgICAgICByZXR1cm4gKGNwID49IDB4MzAgJiYgY3AgPD0gMHgzOSkgfHxcclxuXHQgICAgICAgICAgICAoY3AgPj0gMHg0MSAmJiBjcCA8PSAweDQ2KSB8fFxyXG5cdCAgICAgICAgICAgIChjcCA+PSAweDYxICYmIGNwIDw9IDB4NjYpOyAvLyBhLi5mXHJcblx0ICAgIH0sXHJcblx0ICAgIGlzT2N0YWxEaWdpdDogZnVuY3Rpb24gKGNwKSB7XHJcblx0ICAgICAgICByZXR1cm4gKGNwID49IDB4MzAgJiYgY3AgPD0gMHgzNyk7IC8vIDAuLjdcclxuXHQgICAgfVxyXG5cdH07XHJcblxuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdHZhciBqc3hfc3ludGF4XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cdC8qIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlICovXHJcblx0dmFyIEpTWENsb3NpbmdFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gSlNYQ2xvc2luZ0VsZW1lbnQobmFtZSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hDbG9zaW5nRWxlbWVudDtcclxuXHQgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEpTWENsb3NpbmdFbGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5KU1hDbG9zaW5nRWxlbWVudCA9IEpTWENsb3NpbmdFbGVtZW50O1xyXG5cdHZhciBKU1hFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gSlNYRWxlbWVudChvcGVuaW5nRWxlbWVudCwgY2hpbGRyZW4sIGNsb3NpbmdFbGVtZW50KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWEVsZW1lbnQ7XHJcblx0ICAgICAgICB0aGlzLm9wZW5pbmdFbGVtZW50ID0gb3BlbmluZ0VsZW1lbnQ7XHJcblx0ICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcblx0ICAgICAgICB0aGlzLmNsb3NpbmdFbGVtZW50ID0gY2xvc2luZ0VsZW1lbnQ7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEpTWEVsZW1lbnQ7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkpTWEVsZW1lbnQgPSBKU1hFbGVtZW50O1xyXG5cdHZhciBKU1hFbXB0eUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBKU1hFbXB0eUV4cHJlc3Npb24oKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWEVtcHR5RXhwcmVzc2lvbjtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gSlNYRW1wdHlFeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5KU1hFbXB0eUV4cHJlc3Npb24gPSBKU1hFbXB0eUV4cHJlc3Npb247XHJcblx0dmFyIEpTWEV4cHJlc3Npb25Db250YWluZXIgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBKU1hFeHByZXNzaW9uQ29udGFpbmVyKGV4cHJlc3Npb24pIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYRXhwcmVzc2lvbkNvbnRhaW5lcjtcclxuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEpTWEV4cHJlc3Npb25Db250YWluZXI7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkpTWEV4cHJlc3Npb25Db250YWluZXIgPSBKU1hFeHByZXNzaW9uQ29udGFpbmVyO1xyXG5cdHZhciBKU1hJZGVudGlmaWVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gSlNYSWRlbnRpZmllcihuYW1lKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWElkZW50aWZpZXI7XHJcblx0ICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBKU1hJZGVudGlmaWVyO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5KU1hJZGVudGlmaWVyID0gSlNYSWRlbnRpZmllcjtcclxuXHR2YXIgSlNYTWVtYmVyRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEpTWE1lbWJlckV4cHJlc3Npb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hNZW1iZXJFeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcblx0ICAgICAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEpTWE1lbWJlckV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkpTWE1lbWJlckV4cHJlc3Npb24gPSBKU1hNZW1iZXJFeHByZXNzaW9uO1xyXG5cdHZhciBKU1hBdHRyaWJ1dGUgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBKU1hBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYQXR0cmlidXRlO1xyXG5cdCAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gSlNYQXR0cmlidXRlO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5KU1hBdHRyaWJ1dGUgPSBKU1hBdHRyaWJ1dGU7XHJcblx0dmFyIEpTWE5hbWVzcGFjZWROYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gSlNYTmFtZXNwYWNlZE5hbWUobmFtZXNwYWNlLCBuYW1lKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWE5hbWVzcGFjZWROYW1lO1xyXG5cdCAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcblx0ICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBKU1hOYW1lc3BhY2VkTmFtZTtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuSlNYTmFtZXNwYWNlZE5hbWUgPSBKU1hOYW1lc3BhY2VkTmFtZTtcclxuXHR2YXIgSlNYT3BlbmluZ0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBKU1hPcGVuaW5nRWxlbWVudChuYW1lLCBzZWxmQ2xvc2luZywgYXR0cmlidXRlcykge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hPcGVuaW5nRWxlbWVudDtcclxuXHQgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcblx0ICAgICAgICB0aGlzLnNlbGZDbG9zaW5nID0gc2VsZkNsb3Npbmc7XHJcblx0ICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBKU1hPcGVuaW5nRWxlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuSlNYT3BlbmluZ0VsZW1lbnQgPSBKU1hPcGVuaW5nRWxlbWVudDtcclxuXHR2YXIgSlNYU3ByZWFkQXR0cmlidXRlID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gSlNYU3ByZWFkQXR0cmlidXRlKGFyZ3VtZW50KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWFNwcmVhZEF0dHJpYnV0ZTtcclxuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gSlNYU3ByZWFkQXR0cmlidXRlO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5KU1hTcHJlYWRBdHRyaWJ1dGUgPSBKU1hTcHJlYWRBdHRyaWJ1dGU7XHJcblx0dmFyIEpTWFRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBKU1hUZXh0KHZhbHVlLCByYXcpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYVGV4dDtcclxuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHQgICAgICAgIHRoaXMucmF3ID0gcmF3O1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBKU1hUZXh0O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5KU1hUZXh0ID0gSlNYVGV4dDtcclxuXG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0ZXhwb3J0cy5KU1hTeW50YXggPSB7XHJcblx0ICAgIEpTWEF0dHJpYnV0ZTogJ0pTWEF0dHJpYnV0ZScsXHJcblx0ICAgIEpTWENsb3NpbmdFbGVtZW50OiAnSlNYQ2xvc2luZ0VsZW1lbnQnLFxyXG5cdCAgICBKU1hFbGVtZW50OiAnSlNYRWxlbWVudCcsXHJcblx0ICAgIEpTWEVtcHR5RXhwcmVzc2lvbjogJ0pTWEVtcHR5RXhwcmVzc2lvbicsXHJcblx0ICAgIEpTWEV4cHJlc3Npb25Db250YWluZXI6ICdKU1hFeHByZXNzaW9uQ29udGFpbmVyJyxcclxuXHQgICAgSlNYSWRlbnRpZmllcjogJ0pTWElkZW50aWZpZXInLFxyXG5cdCAgICBKU1hNZW1iZXJFeHByZXNzaW9uOiAnSlNYTWVtYmVyRXhwcmVzc2lvbicsXHJcblx0ICAgIEpTWE5hbWVzcGFjZWROYW1lOiAnSlNYTmFtZXNwYWNlZE5hbWUnLFxyXG5cdCAgICBKU1hPcGVuaW5nRWxlbWVudDogJ0pTWE9wZW5pbmdFbGVtZW50JyxcclxuXHQgICAgSlNYU3ByZWFkQXR0cmlidXRlOiAnSlNYU3ByZWFkQXR0cmlidXRlJyxcclxuXHQgICAgSlNYVGV4dDogJ0pTWFRleHQnXHJcblx0fTtcclxuXG5cbi8qKiovIH0sXG4vKiA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0dmFyIHN5bnRheF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuXHQvKiB0c2xpbnQ6ZGlzYWJsZTptYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xyXG5cdHZhciBBcnJheUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBBcnJheUV4cHJlc3Npb24oZWxlbWVudHMpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5BcnJheUV4cHJlc3Npb247XHJcblx0ICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEFycmF5RXhwcmVzc2lvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQXJyYXlFeHByZXNzaW9uID0gQXJyYXlFeHByZXNzaW9uO1xyXG5cdHZhciBBcnJheVBhdHRlcm4gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBBcnJheVBhdHRlcm4oZWxlbWVudHMpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5BcnJheVBhdHRlcm47XHJcblx0ICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEFycmF5UGF0dGVybjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQXJyYXlQYXR0ZXJuID0gQXJyYXlQYXR0ZXJuO1xyXG5cdHZhciBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEFycm93RnVuY3Rpb25FeHByZXNzaW9uKHBhcmFtcywgYm9keSwgZXhwcmVzc2lvbikge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkFycm93RnVuY3Rpb25FeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5pZCA9IG51bGw7XHJcblx0ICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuYXN5bmMgPSBmYWxzZTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkFycm93RnVuY3Rpb25FeHByZXNzaW9uID0gQXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XHJcblx0dmFyIEFzc2lnbm1lbnRFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQXNzaWdubWVudEV4cHJlc3Npb24ob3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb247XHJcblx0ICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcblx0ICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG5cdCAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBBc3NpZ25tZW50RXhwcmVzc2lvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQXNzaWdubWVudEV4cHJlc3Npb24gPSBBc3NpZ25tZW50RXhwcmVzc2lvbjtcclxuXHR2YXIgQXNzaWdubWVudFBhdHRlcm4gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBBc3NpZ25tZW50UGF0dGVybihsZWZ0LCByaWdodCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuO1xyXG5cdCAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuXHQgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQXNzaWdubWVudFBhdHRlcm47XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkFzc2lnbm1lbnRQYXR0ZXJuID0gQXNzaWdubWVudFBhdHRlcm47XHJcblx0dmFyIEFzeW5jQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBBc3luY0Fycm93RnVuY3Rpb25FeHByZXNzaW9uKHBhcmFtcywgYm9keSwgZXhwcmVzc2lvbikge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkFycm93RnVuY3Rpb25FeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5pZCA9IG51bGw7XHJcblx0ICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuYXN5bmMgPSB0cnVlO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBBc3luY0Fycm93RnVuY3Rpb25FeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5Bc3luY0Fycm93RnVuY3Rpb25FeHByZXNzaW9uID0gQXN5bmNBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjtcclxuXHR2YXIgQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uKGlkLCBwYXJhbXMsIGJvZHkpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5GdW5jdGlvbkRlY2xhcmF0aW9uO1xyXG5cdCAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG5cdCAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG5cdCAgICAgICAgdGhpcy5nZW5lcmF0b3IgPSBmYWxzZTtcclxuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5hc3luYyA9IHRydWU7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uID0gQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uO1xyXG5cdHZhciBBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEFzeW5jRnVuY3Rpb25FeHByZXNzaW9uKGlkLCBwYXJhbXMsIGJvZHkpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5GdW5jdGlvbkV4cHJlc3Npb247XHJcblx0ICAgICAgICB0aGlzLmlkID0gaWQ7XHJcblx0ICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZmFsc2U7XHJcblx0ICAgICAgICB0aGlzLmFzeW5jID0gdHJ1ZTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQXN5bmNGdW5jdGlvbkV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkFzeW5jRnVuY3Rpb25FeHByZXNzaW9uID0gQXN5bmNGdW5jdGlvbkV4cHJlc3Npb247XHJcblx0dmFyIEF3YWl0RXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEF3YWl0RXhwcmVzc2lvbihhcmd1bWVudCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkF3YWl0RXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQXdhaXRFeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5Bd2FpdEV4cHJlc3Npb24gPSBBd2FpdEV4cHJlc3Npb247XHJcblx0dmFyIEJpbmFyeUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBCaW5hcnlFeHByZXNzaW9uKG9wZXJhdG9yLCBsZWZ0LCByaWdodCkge1xyXG5cdCAgICAgICAgdmFyIGxvZ2ljYWwgPSAob3BlcmF0b3IgPT09ICd8fCcgfHwgb3BlcmF0b3IgPT09ICcmJicpO1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gbG9naWNhbCA/IHN5bnRheF8xLlN5bnRheC5Mb2dpY2FsRXhwcmVzc2lvbiA6IHN5bnRheF8xLlN5bnRheC5CaW5hcnlFeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG5cdCAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuXHQgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQmluYXJ5RXhwcmVzc2lvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQmluYXJ5RXhwcmVzc2lvbiA9IEJpbmFyeUV4cHJlc3Npb247XHJcblx0dmFyIEJsb2NrU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQmxvY2tTdGF0ZW1lbnQoYm9keSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkJsb2NrU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQmxvY2tTdGF0ZW1lbnQ7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkJsb2NrU3RhdGVtZW50ID0gQmxvY2tTdGF0ZW1lbnQ7XHJcblx0dmFyIEJyZWFrU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQnJlYWtTdGF0ZW1lbnQobGFiZWwpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5CcmVha1N0YXRlbWVudDtcclxuXHQgICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQnJlYWtTdGF0ZW1lbnQ7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkJyZWFrU3RhdGVtZW50ID0gQnJlYWtTdGF0ZW1lbnQ7XHJcblx0dmFyIENhbGxFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQ2FsbEV4cHJlc3Npb24oY2FsbGVlLCBhcmdzKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguQ2FsbEV4cHJlc3Npb247XHJcblx0ICAgICAgICB0aGlzLmNhbGxlZSA9IGNhbGxlZTtcclxuXHQgICAgICAgIHRoaXMuYXJndW1lbnRzID0gYXJncztcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQ2FsbEV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkNhbGxFeHByZXNzaW9uID0gQ2FsbEV4cHJlc3Npb247XHJcblx0dmFyIENhdGNoQ2xhdXNlID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQ2F0Y2hDbGF1c2UocGFyYW0sIGJvZHkpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5DYXRjaENsYXVzZTtcclxuXHQgICAgICAgIHRoaXMucGFyYW0gPSBwYXJhbTtcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIENhdGNoQ2xhdXNlO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5DYXRjaENsYXVzZSA9IENhdGNoQ2xhdXNlO1xyXG5cdHZhciBDbGFzc0JvZHkgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBDbGFzc0JvZHkoYm9keSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkNsYXNzQm9keTtcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIENsYXNzQm9keTtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQ2xhc3NCb2R5ID0gQ2xhc3NCb2R5O1xyXG5cdHZhciBDbGFzc0RlY2xhcmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQ2xhc3NEZWNsYXJhdGlvbihpZCwgc3VwZXJDbGFzcywgYm9keSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkNsYXNzRGVjbGFyYXRpb247XHJcblx0ICAgICAgICB0aGlzLmlkID0gaWQ7XHJcblx0ICAgICAgICB0aGlzLnN1cGVyQ2xhc3MgPSBzdXBlckNsYXNzO1xyXG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQ2xhc3NEZWNsYXJhdGlvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQ2xhc3NEZWNsYXJhdGlvbiA9IENsYXNzRGVjbGFyYXRpb247XHJcblx0dmFyIENsYXNzRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIENsYXNzRXhwcmVzc2lvbihpZCwgc3VwZXJDbGFzcywgYm9keSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkNsYXNzRXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuaWQgPSBpZDtcclxuXHQgICAgICAgIHRoaXMuc3VwZXJDbGFzcyA9IHN1cGVyQ2xhc3M7XHJcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBDbGFzc0V4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkNsYXNzRXhwcmVzc2lvbiA9IENsYXNzRXhwcmVzc2lvbjtcclxuXHR2YXIgQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uKG9iamVjdCwgcHJvcGVydHkpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5NZW1iZXJFeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5jb21wdXRlZCA9IHRydWU7XHJcblx0ICAgICAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuXHQgICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5Db21wdXRlZE1lbWJlckV4cHJlc3Npb24gPSBDb21wdXRlZE1lbWJlckV4cHJlc3Npb247XHJcblx0dmFyIENvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIENvbmRpdGlvbmFsRXhwcmVzc2lvbih0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5Db25kaXRpb25hbEV4cHJlc3Npb247XHJcblx0ICAgICAgICB0aGlzLnRlc3QgPSB0ZXN0O1xyXG5cdCAgICAgICAgdGhpcy5jb25zZXF1ZW50ID0gY29uc2VxdWVudDtcclxuXHQgICAgICAgIHRoaXMuYWx0ZXJuYXRlID0gYWx0ZXJuYXRlO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBDb25kaXRpb25hbEV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IENvbmRpdGlvbmFsRXhwcmVzc2lvbjtcclxuXHR2YXIgQ29udGludWVTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBDb250aW51ZVN0YXRlbWVudChsYWJlbCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkNvbnRpbnVlU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBDb250aW51ZVN0YXRlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQ29udGludWVTdGF0ZW1lbnQgPSBDb250aW51ZVN0YXRlbWVudDtcclxuXHR2YXIgRGVidWdnZXJTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBEZWJ1Z2dlclN0YXRlbWVudCgpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5EZWJ1Z2dlclN0YXRlbWVudDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gRGVidWdnZXJTdGF0ZW1lbnQ7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkRlYnVnZ2VyU3RhdGVtZW50ID0gRGVidWdnZXJTdGF0ZW1lbnQ7XHJcblx0dmFyIERpcmVjdGl2ZSA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIERpcmVjdGl2ZShleHByZXNzaW9uLCBkaXJlY3RpdmUpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5FeHByZXNzaW9uU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuZGlyZWN0aXZlID0gZGlyZWN0aXZlO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBEaXJlY3RpdmU7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkRpcmVjdGl2ZSA9IERpcmVjdGl2ZTtcclxuXHR2YXIgRG9XaGlsZVN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIERvV2hpbGVTdGF0ZW1lbnQoYm9keSwgdGVzdCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkRvV2hpbGVTdGF0ZW1lbnQ7XHJcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG5cdCAgICAgICAgdGhpcy50ZXN0ID0gdGVzdDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gRG9XaGlsZVN0YXRlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuRG9XaGlsZVN0YXRlbWVudCA9IERvV2hpbGVTdGF0ZW1lbnQ7XHJcblx0dmFyIEVtcHR5U3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gRW1wdHlTdGF0ZW1lbnQoKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRW1wdHlTdGF0ZW1lbnQ7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEVtcHR5U3RhdGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5FbXB0eVN0YXRlbWVudCA9IEVtcHR5U3RhdGVtZW50O1xyXG5cdHZhciBFeHBvcnRBbGxEZWNsYXJhdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEV4cG9ydEFsbERlY2xhcmF0aW9uKHNvdXJjZSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkV4cG9ydEFsbERlY2xhcmF0aW9uO1xyXG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEV4cG9ydEFsbERlY2xhcmF0aW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5FeHBvcnRBbGxEZWNsYXJhdGlvbiA9IEV4cG9ydEFsbERlY2xhcmF0aW9uO1xyXG5cdHZhciBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24oZGVjbGFyYXRpb24pIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb247XHJcblx0ICAgICAgICB0aGlzLmRlY2xhcmF0aW9uID0gZGVjbGFyYXRpb247XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEV4cG9ydERlZmF1bHREZWNsYXJhdGlvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uID0gRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uO1xyXG5cdHZhciBFeHBvcnROYW1lZERlY2xhcmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gRXhwb3J0TmFtZWREZWNsYXJhdGlvbihkZWNsYXJhdGlvbiwgc3BlY2lmaWVycywgc291cmNlKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcclxuXHQgICAgICAgIHRoaXMuZGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbjtcclxuXHQgICAgICAgIHRoaXMuc3BlY2lmaWVycyA9IHNwZWNpZmllcnM7XHJcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gRXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuRXhwb3J0TmFtZWREZWNsYXJhdGlvbiA9IEV4cG9ydE5hbWVkRGVjbGFyYXRpb247XHJcblx0dmFyIEV4cG9ydFNwZWNpZmllciA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEV4cG9ydFNwZWNpZmllcihsb2NhbCwgZXhwb3J0ZWQpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5FeHBvcnRTcGVjaWZpZXI7XHJcblx0ICAgICAgICB0aGlzLmV4cG9ydGVkID0gZXhwb3J0ZWQ7XHJcblx0ICAgICAgICB0aGlzLmxvY2FsID0gbG9jYWw7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEV4cG9ydFNwZWNpZmllcjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuRXhwb3J0U3BlY2lmaWVyID0gRXhwb3J0U3BlY2lmaWVyO1xyXG5cdHZhciBFeHByZXNzaW9uU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gRXhwcmVzc2lvblN0YXRlbWVudChleHByZXNzaW9uKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRXhwcmVzc2lvblN0YXRlbWVudDtcclxuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEV4cHJlc3Npb25TdGF0ZW1lbnQ7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkV4cHJlc3Npb25TdGF0ZW1lbnQgPSBFeHByZXNzaW9uU3RhdGVtZW50O1xyXG5cdHZhciBGb3JJblN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEZvckluU3RhdGVtZW50KGxlZnQsIHJpZ2h0LCBib2R5KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRm9ySW5TdGF0ZW1lbnQ7XHJcblx0ICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG5cdCAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xyXG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcclxuXHQgICAgICAgIHRoaXMuZWFjaCA9IGZhbHNlO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBGb3JJblN0YXRlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuRm9ySW5TdGF0ZW1lbnQgPSBGb3JJblN0YXRlbWVudDtcclxuXHR2YXIgRm9yT2ZTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBGb3JPZlN0YXRlbWVudChsZWZ0LCByaWdodCwgYm9keSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkZvck9mU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuXHQgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEZvck9mU3RhdGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5Gb3JPZlN0YXRlbWVudCA9IEZvck9mU3RhdGVtZW50O1xyXG5cdHZhciBGb3JTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBGb3JTdGF0ZW1lbnQoaW5pdCwgdGVzdCwgdXBkYXRlLCBib2R5KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRm9yU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5pbml0ID0gaW5pdDtcclxuXHQgICAgICAgIHRoaXMudGVzdCA9IHRlc3Q7XHJcblx0ICAgICAgICB0aGlzLnVwZGF0ZSA9IHVwZGF0ZTtcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIEZvclN0YXRlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuRm9yU3RhdGVtZW50ID0gRm9yU3RhdGVtZW50O1xyXG5cdHZhciBGdW5jdGlvbkRlY2xhcmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gRnVuY3Rpb25EZWNsYXJhdGlvbihpZCwgcGFyYW1zLCBib2R5LCBnZW5lcmF0b3IpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5GdW5jdGlvbkRlY2xhcmF0aW9uO1xyXG5cdCAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG5cdCAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG5cdCAgICAgICAgdGhpcy5nZW5lcmF0b3IgPSBnZW5lcmF0b3I7XHJcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBmYWxzZTtcclxuXHQgICAgICAgIHRoaXMuYXN5bmMgPSBmYWxzZTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gRnVuY3Rpb25EZWNsYXJhdGlvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuRnVuY3Rpb25EZWNsYXJhdGlvbiA9IEZ1bmN0aW9uRGVjbGFyYXRpb247XHJcblx0dmFyIEZ1bmN0aW9uRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEZ1bmN0aW9uRXhwcmVzc2lvbihpZCwgcGFyYW1zLCBib2R5LCBnZW5lcmF0b3IpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5GdW5jdGlvbkV4cHJlc3Npb247XHJcblx0ICAgICAgICB0aGlzLmlkID0gaWQ7XHJcblx0ICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGdlbmVyYXRvcjtcclxuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5hc3luYyA9IGZhbHNlO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBGdW5jdGlvbkV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkZ1bmN0aW9uRXhwcmVzc2lvbiA9IEZ1bmN0aW9uRXhwcmVzc2lvbjtcclxuXHR2YXIgSWRlbnRpZmllciA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIElkZW50aWZpZXIobmFtZSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXI7XHJcblx0ICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBJZGVudGlmaWVyO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5JZGVudGlmaWVyID0gSWRlbnRpZmllcjtcclxuXHR2YXIgSWZTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBJZlN0YXRlbWVudCh0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5JZlN0YXRlbWVudDtcclxuXHQgICAgICAgIHRoaXMudGVzdCA9IHRlc3Q7XHJcblx0ICAgICAgICB0aGlzLmNvbnNlcXVlbnQgPSBjb25zZXF1ZW50O1xyXG5cdCAgICAgICAgdGhpcy5hbHRlcm5hdGUgPSBhbHRlcm5hdGU7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIElmU3RhdGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5JZlN0YXRlbWVudCA9IElmU3RhdGVtZW50O1xyXG5cdHZhciBJbXBvcnREZWNsYXJhdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEltcG9ydERlY2xhcmF0aW9uKHNwZWNpZmllcnMsIHNvdXJjZSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkltcG9ydERlY2xhcmF0aW9uO1xyXG5cdCAgICAgICAgdGhpcy5zcGVjaWZpZXJzID0gc3BlY2lmaWVycztcclxuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBJbXBvcnREZWNsYXJhdGlvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuSW1wb3J0RGVjbGFyYXRpb24gPSBJbXBvcnREZWNsYXJhdGlvbjtcclxuXHR2YXIgSW1wb3J0RGVmYXVsdFNwZWNpZmllciA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIEltcG9ydERlZmF1bHRTcGVjaWZpZXIobG9jYWwpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5JbXBvcnREZWZhdWx0U3BlY2lmaWVyO1xyXG5cdCAgICAgICAgdGhpcy5sb2NhbCA9IGxvY2FsO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBJbXBvcnREZWZhdWx0U3BlY2lmaWVyO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5JbXBvcnREZWZhdWx0U3BlY2lmaWVyID0gSW1wb3J0RGVmYXVsdFNwZWNpZmllcjtcclxuXHR2YXIgSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyKGxvY2FsKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyO1xyXG5cdCAgICAgICAgdGhpcy5sb2NhbCA9IGxvY2FsO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkltcG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcjtcclxuXHR2YXIgSW1wb3J0U3BlY2lmaWVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gSW1wb3J0U3BlY2lmaWVyKGxvY2FsLCBpbXBvcnRlZCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkltcG9ydFNwZWNpZmllcjtcclxuXHQgICAgICAgIHRoaXMubG9jYWwgPSBsb2NhbDtcclxuXHQgICAgICAgIHRoaXMuaW1wb3J0ZWQgPSBpbXBvcnRlZDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gSW1wb3J0U3BlY2lmaWVyO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5JbXBvcnRTcGVjaWZpZXIgPSBJbXBvcnRTcGVjaWZpZXI7XHJcblx0dmFyIExhYmVsZWRTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBMYWJlbGVkU3RhdGVtZW50KGxhYmVsLCBib2R5KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTGFiZWxlZFN0YXRlbWVudDtcclxuXHQgICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIExhYmVsZWRTdGF0ZW1lbnQ7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkxhYmVsZWRTdGF0ZW1lbnQgPSBMYWJlbGVkU3RhdGVtZW50O1xyXG5cdHZhciBMaXRlcmFsID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gTGl0ZXJhbCh2YWx1ZSwgcmF3KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTGl0ZXJhbDtcclxuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHQgICAgICAgIHRoaXMucmF3ID0gcmF3O1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBMaXRlcmFsO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5MaXRlcmFsID0gTGl0ZXJhbDtcclxuXHR2YXIgTWV0YVByb3BlcnR5ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gTWV0YVByb3BlcnR5KG1ldGEsIHByb3BlcnR5KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTWV0YVByb3BlcnR5O1xyXG5cdCAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuXHQgICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gTWV0YVByb3BlcnR5O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5NZXRhUHJvcGVydHkgPSBNZXRhUHJvcGVydHk7XHJcblx0dmFyIE1ldGhvZERlZmluaXRpb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBNZXRob2REZWZpbml0aW9uKGtleSwgY29tcHV0ZWQsIHZhbHVlLCBraW5kLCBpc1N0YXRpYykge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4Lk1ldGhvZERlZmluaXRpb247XHJcblx0ICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuXHQgICAgICAgIHRoaXMuY29tcHV0ZWQgPSBjb21wdXRlZDtcclxuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHQgICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XHJcblx0ICAgICAgICB0aGlzLnN0YXRpYyA9IGlzU3RhdGljO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBNZXRob2REZWZpbml0aW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5NZXRob2REZWZpbml0aW9uID0gTWV0aG9kRGVmaW5pdGlvbjtcclxuXHR2YXIgTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gTW9kdWxlKGJvZHkpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5Qcm9ncmFtO1xyXG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcclxuXHQgICAgICAgIHRoaXMuc291cmNlVHlwZSA9ICdtb2R1bGUnO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBNb2R1bGU7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLk1vZHVsZSA9IE1vZHVsZTtcclxuXHR2YXIgTmV3RXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIE5ld0V4cHJlc3Npb24oY2FsbGVlLCBhcmdzKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTmV3RXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuY2FsbGVlID0gY2FsbGVlO1xyXG5cdCAgICAgICAgdGhpcy5hcmd1bWVudHMgPSBhcmdzO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBOZXdFeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5OZXdFeHByZXNzaW9uID0gTmV3RXhwcmVzc2lvbjtcclxuXHR2YXIgT2JqZWN0RXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIE9iamVjdEV4cHJlc3Npb24ocHJvcGVydGllcykge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4Lk9iamVjdEV4cHJlc3Npb247XHJcblx0ICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBPYmplY3RFeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5PYmplY3RFeHByZXNzaW9uID0gT2JqZWN0RXhwcmVzc2lvbjtcclxuXHR2YXIgT2JqZWN0UGF0dGVybiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIE9iamVjdFBhdHRlcm4ocHJvcGVydGllcykge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4Lk9iamVjdFBhdHRlcm47XHJcblx0ICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBPYmplY3RQYXR0ZXJuO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5PYmplY3RQYXR0ZXJuID0gT2JqZWN0UGF0dGVybjtcclxuXHR2YXIgUHJvcGVydHkgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBQcm9wZXJ0eShraW5kLCBrZXksIGNvbXB1dGVkLCB2YWx1ZSwgbWV0aG9kLCBzaG9ydGhhbmQpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5Qcm9wZXJ0eTtcclxuXHQgICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG5cdCAgICAgICAgdGhpcy5jb21wdXRlZCA9IGNvbXB1dGVkO1xyXG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG5cdCAgICAgICAgdGhpcy5raW5kID0ga2luZDtcclxuXHQgICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xyXG5cdCAgICAgICAgdGhpcy5zaG9ydGhhbmQgPSBzaG9ydGhhbmQ7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIFByb3BlcnR5O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5Qcm9wZXJ0eSA9IFByb3BlcnR5O1xyXG5cdHZhciBSZWdleExpdGVyYWwgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBSZWdleExpdGVyYWwodmFsdWUsIHJhdywgcGF0dGVybiwgZmxhZ3MpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5MaXRlcmFsO1xyXG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG5cdCAgICAgICAgdGhpcy5yYXcgPSByYXc7XHJcblx0ICAgICAgICB0aGlzLnJlZ2V4ID0geyBwYXR0ZXJuOiBwYXR0ZXJuLCBmbGFnczogZmxhZ3MgfTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gUmVnZXhMaXRlcmFsO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5SZWdleExpdGVyYWwgPSBSZWdleExpdGVyYWw7XHJcblx0dmFyIFJlc3RFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gUmVzdEVsZW1lbnQoYXJndW1lbnQpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5SZXN0RWxlbWVudDtcclxuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gUmVzdEVsZW1lbnQ7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlJlc3RFbGVtZW50ID0gUmVzdEVsZW1lbnQ7XHJcblx0dmFyIFJldHVyblN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFJldHVyblN0YXRlbWVudChhcmd1bWVudCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlJldHVyblN0YXRlbWVudDtcclxuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gUmV0dXJuU3RhdGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5SZXR1cm5TdGF0ZW1lbnQgPSBSZXR1cm5TdGF0ZW1lbnQ7XHJcblx0dmFyIFNjcmlwdCA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFNjcmlwdChib2R5KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguUHJvZ3JhbTtcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgICAgICB0aGlzLnNvdXJjZVR5cGUgPSAnc2NyaXB0JztcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gU2NyaXB0O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5TY3JpcHQgPSBTY3JpcHQ7XHJcblx0dmFyIFNlcXVlbmNlRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFNlcXVlbmNlRXhwcmVzc2lvbihleHByZXNzaW9ucykge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucztcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gU2VxdWVuY2VFeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5TZXF1ZW5jZUV4cHJlc3Npb24gPSBTZXF1ZW5jZUV4cHJlc3Npb247XHJcblx0dmFyIFNwcmVhZEVsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBTcHJlYWRFbGVtZW50KGFyZ3VtZW50KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguU3ByZWFkRWxlbWVudDtcclxuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gU3ByZWFkRWxlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuU3ByZWFkRWxlbWVudCA9IFNwcmVhZEVsZW1lbnQ7XHJcblx0dmFyIFN0YXRpY01lbWJlckV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBTdGF0aWNNZW1iZXJFeHByZXNzaW9uKG9iamVjdCwgcHJvcGVydHkpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5NZW1iZXJFeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5jb21wdXRlZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcblx0ICAgICAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIFN0YXRpY01lbWJlckV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlN0YXRpY01lbWJlckV4cHJlc3Npb24gPSBTdGF0aWNNZW1iZXJFeHByZXNzaW9uO1xyXG5cdHZhciBTdXBlciA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFN1cGVyKCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlN1cGVyO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBTdXBlcjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuU3VwZXIgPSBTdXBlcjtcclxuXHR2YXIgU3dpdGNoQ2FzZSA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFN3aXRjaENhc2UodGVzdCwgY29uc2VxdWVudCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlN3aXRjaENhc2U7XHJcblx0ICAgICAgICB0aGlzLnRlc3QgPSB0ZXN0O1xyXG5cdCAgICAgICAgdGhpcy5jb25zZXF1ZW50ID0gY29uc2VxdWVudDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gU3dpdGNoQ2FzZTtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuU3dpdGNoQ2FzZSA9IFN3aXRjaENhc2U7XHJcblx0dmFyIFN3aXRjaFN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFN3aXRjaFN0YXRlbWVudChkaXNjcmltaW5hbnQsIGNhc2VzKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguU3dpdGNoU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5kaXNjcmltaW5hbnQgPSBkaXNjcmltaW5hbnQ7XHJcblx0ICAgICAgICB0aGlzLmNhc2VzID0gY2FzZXM7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIFN3aXRjaFN0YXRlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuU3dpdGNoU3RhdGVtZW50ID0gU3dpdGNoU3RhdGVtZW50O1xyXG5cdHZhciBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24odGFnLCBxdWFzaSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMudGFnID0gdGFnO1xyXG5cdCAgICAgICAgdGhpcy5xdWFzaSA9IHF1YXNpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbiA9IFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjtcclxuXHR2YXIgVGVtcGxhdGVFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gVGVtcGxhdGVFbGVtZW50KHZhbHVlLCB0YWlsKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguVGVtcGxhdGVFbGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG5cdCAgICAgICAgdGhpcy50YWlsID0gdGFpbDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gVGVtcGxhdGVFbGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5UZW1wbGF0ZUVsZW1lbnQgPSBUZW1wbGF0ZUVsZW1lbnQ7XHJcblx0dmFyIFRlbXBsYXRlTGl0ZXJhbCA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFRlbXBsYXRlTGl0ZXJhbChxdWFzaXMsIGV4cHJlc3Npb25zKSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguVGVtcGxhdGVMaXRlcmFsO1xyXG5cdCAgICAgICAgdGhpcy5xdWFzaXMgPSBxdWFzaXM7XHJcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIFRlbXBsYXRlTGl0ZXJhbDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuVGVtcGxhdGVMaXRlcmFsID0gVGVtcGxhdGVMaXRlcmFsO1xyXG5cdHZhciBUaGlzRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFRoaXNFeHByZXNzaW9uKCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlRoaXNFeHByZXNzaW9uO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBUaGlzRXhwcmVzc2lvbjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuVGhpc0V4cHJlc3Npb24gPSBUaGlzRXhwcmVzc2lvbjtcclxuXHR2YXIgVGhyb3dTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBUaHJvd1N0YXRlbWVudChhcmd1bWVudCkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlRocm93U3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBUaHJvd1N0YXRlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuVGhyb3dTdGF0ZW1lbnQgPSBUaHJvd1N0YXRlbWVudDtcclxuXHR2YXIgVHJ5U3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gVHJ5U3RhdGVtZW50KGJsb2NrLCBoYW5kbGVyLCBmaW5hbGl6ZXIpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5UcnlTdGF0ZW1lbnQ7XHJcblx0ICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2s7XHJcblx0ICAgICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdCAgICAgICAgdGhpcy5maW5hbGl6ZXIgPSBmaW5hbGl6ZXI7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIFRyeVN0YXRlbWVudDtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuVHJ5U3RhdGVtZW50ID0gVHJ5U3RhdGVtZW50O1xyXG5cdHZhciBVbmFyeUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBVbmFyeUV4cHJlc3Npb24ob3BlcmF0b3IsIGFyZ3VtZW50KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguVW5hcnlFeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG5cdCAgICAgICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xyXG5cdCAgICAgICAgdGhpcy5wcmVmaXggPSB0cnVlO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBVbmFyeUV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlVuYXJ5RXhwcmVzc2lvbiA9IFVuYXJ5RXhwcmVzc2lvbjtcclxuXHR2YXIgVXBkYXRlRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFVwZGF0ZUV4cHJlc3Npb24ob3BlcmF0b3IsIGFyZ3VtZW50LCBwcmVmaXgpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5VcGRhdGVFeHByZXNzaW9uO1xyXG5cdCAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG5cdCAgICAgICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xyXG5cdCAgICAgICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIFVwZGF0ZUV4cHJlc3Npb247XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlVwZGF0ZUV4cHJlc3Npb24gPSBVcGRhdGVFeHByZXNzaW9uO1xyXG5cdHZhciBWYXJpYWJsZURlY2xhcmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gVmFyaWFibGVEZWNsYXJhdGlvbihkZWNsYXJhdGlvbnMsIGtpbmQpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5WYXJpYWJsZURlY2xhcmF0aW9uO1xyXG5cdCAgICAgICAgdGhpcy5kZWNsYXJhdGlvbnMgPSBkZWNsYXJhdGlvbnM7XHJcblx0ICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBWYXJpYWJsZURlY2xhcmF0aW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5WYXJpYWJsZURlY2xhcmF0aW9uID0gVmFyaWFibGVEZWNsYXJhdGlvbjtcclxuXHR2YXIgVmFyaWFibGVEZWNsYXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gVmFyaWFibGVEZWNsYXJhdG9yKGlkLCBpbml0KSB7XHJcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguVmFyaWFibGVEZWNsYXJhdG9yO1xyXG5cdCAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG5cdCAgICAgICAgdGhpcy5pbml0ID0gaW5pdDtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gVmFyaWFibGVEZWNsYXJhdG9yO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5WYXJpYWJsZURlY2xhcmF0b3IgPSBWYXJpYWJsZURlY2xhcmF0b3I7XHJcblx0dmFyIFdoaWxlU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gV2hpbGVTdGF0ZW1lbnQodGVzdCwgYm9keSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LldoaWxlU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy50ZXN0ID0gdGVzdDtcclxuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIFdoaWxlU3RhdGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5XaGlsZVN0YXRlbWVudCA9IFdoaWxlU3RhdGVtZW50O1xyXG5cdHZhciBXaXRoU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gV2l0aFN0YXRlbWVudChvYmplY3QsIGJvZHkpIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5XaXRoU3RhdGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBXaXRoU3RhdGVtZW50O1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5XaXRoU3RhdGVtZW50ID0gV2l0aFN0YXRlbWVudDtcclxuXHR2YXIgWWllbGRFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gWWllbGRFeHByZXNzaW9uKGFyZ3VtZW50LCBkZWxlZ2F0ZSkge1xyXG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LllpZWxkRXhwcmVzc2lvbjtcclxuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcclxuXHQgICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gWWllbGRFeHByZXNzaW9uO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5ZaWVsZEV4cHJlc3Npb24gPSBZaWVsZEV4cHJlc3Npb247XHJcblxuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdHZhciBhc3NlcnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XHJcblx0dmFyIGVycm9yX2hhbmRsZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xyXG5cdHZhciBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XHJcblx0dmFyIE5vZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xyXG5cdHZhciBzY2FubmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcclxuXHR2YXIgc3ludGF4XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xyXG5cdHZhciB0b2tlbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XHJcblx0dmFyIEFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXIgPSAnQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcic7XHJcblx0dmFyIFBhcnNlciA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFBhcnNlcihjb2RlLCBvcHRpb25zLCBkZWxlZ2F0ZSkge1xyXG5cdCAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuXHQgICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG5cdCAgICAgICAgICAgIHJhbmdlOiAodHlwZW9mIG9wdGlvbnMucmFuZ2UgPT09ICdib29sZWFuJykgJiYgb3B0aW9ucy5yYW5nZSxcclxuXHQgICAgICAgICAgICBsb2M6ICh0eXBlb2Ygb3B0aW9ucy5sb2MgPT09ICdib29sZWFuJykgJiYgb3B0aW9ucy5sb2MsXHJcblx0ICAgICAgICAgICAgc291cmNlOiBudWxsLFxyXG5cdCAgICAgICAgICAgIHRva2VuczogKHR5cGVvZiBvcHRpb25zLnRva2VucyA9PT0gJ2Jvb2xlYW4nKSAmJiBvcHRpb25zLnRva2VucyxcclxuXHQgICAgICAgICAgICBjb21tZW50OiAodHlwZW9mIG9wdGlvbnMuY29tbWVudCA9PT0gJ2Jvb2xlYW4nKSAmJiBvcHRpb25zLmNvbW1lbnQsXHJcblx0ICAgICAgICAgICAgdG9sZXJhbnQ6ICh0eXBlb2Ygb3B0aW9ucy50b2xlcmFudCA9PT0gJ2Jvb2xlYW4nKSAmJiBvcHRpb25zLnRvbGVyYW50XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLmxvYyAmJiBvcHRpb25zLnNvdXJjZSAmJiBvcHRpb25zLnNvdXJjZSAhPT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuY29uZmlnLnNvdXJjZSA9IFN0cmluZyhvcHRpb25zLnNvdXJjZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XHJcblx0ICAgICAgICB0aGlzLmVycm9ySGFuZGxlciA9IG5ldyBlcnJvcl9oYW5kbGVyXzEuRXJyb3JIYW5kbGVyKCk7XHJcblx0ICAgICAgICB0aGlzLmVycm9ySGFuZGxlci50b2xlcmFudCA9IHRoaXMuY29uZmlnLnRvbGVyYW50O1xyXG5cdCAgICAgICAgdGhpcy5zY2FubmVyID0gbmV3IHNjYW5uZXJfMS5TY2FubmVyKGNvZGUsIHRoaXMuZXJyb3JIYW5kbGVyKTtcclxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci50cmFja0NvbW1lbnQgPSB0aGlzLmNvbmZpZy5jb21tZW50O1xyXG5cdCAgICAgICAgdGhpcy5vcGVyYXRvclByZWNlZGVuY2UgPSB7XHJcblx0ICAgICAgICAgICAgJyknOiAwLFxyXG5cdCAgICAgICAgICAgICc7JzogMCxcclxuXHQgICAgICAgICAgICAnLCc6IDAsXHJcblx0ICAgICAgICAgICAgJz0nOiAwLFxyXG5cdCAgICAgICAgICAgICddJzogMCxcclxuXHQgICAgICAgICAgICAnfHwnOiAxLFxyXG5cdCAgICAgICAgICAgICcmJic6IDIsXHJcblx0ICAgICAgICAgICAgJ3wnOiAzLFxyXG5cdCAgICAgICAgICAgICdeJzogNCxcclxuXHQgICAgICAgICAgICAnJic6IDUsXHJcblx0ICAgICAgICAgICAgJz09JzogNixcclxuXHQgICAgICAgICAgICAnIT0nOiA2LFxyXG5cdCAgICAgICAgICAgICc9PT0nOiA2LFxyXG5cdCAgICAgICAgICAgICchPT0nOiA2LFxyXG5cdCAgICAgICAgICAgICc8JzogNyxcclxuXHQgICAgICAgICAgICAnPic6IDcsXHJcblx0ICAgICAgICAgICAgJzw9JzogNyxcclxuXHQgICAgICAgICAgICAnPj0nOiA3LFxyXG5cdCAgICAgICAgICAgICc8PCc6IDgsXHJcblx0ICAgICAgICAgICAgJz4+JzogOCxcclxuXHQgICAgICAgICAgICAnPj4+JzogOCxcclxuXHQgICAgICAgICAgICAnKyc6IDksXHJcblx0ICAgICAgICAgICAgJy0nOiA5LFxyXG5cdCAgICAgICAgICAgICcqJzogMTEsXHJcblx0ICAgICAgICAgICAgJy8nOiAxMSxcclxuXHQgICAgICAgICAgICAnJSc6IDExXHJcblx0ICAgICAgICB9O1xyXG5cdCAgICAgICAgdGhpcy5sb29rYWhlYWQgPSB7XHJcblx0ICAgICAgICAgICAgdHlwZTogMiAvKiBFT0YgKi8sXHJcblx0ICAgICAgICAgICAgdmFsdWU6ICcnLFxyXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgIGxpbmVTdGFydDogMCxcclxuXHQgICAgICAgICAgICBzdGFydDogMCxcclxuXHQgICAgICAgICAgICBlbmQ6IDBcclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICB0aGlzLmhhc0xpbmVUZXJtaW5hdG9yID0gZmFsc2U7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQgPSB7XHJcblx0ICAgICAgICAgICAgaXNNb2R1bGU6IGZhbHNlLFxyXG5cdCAgICAgICAgICAgIGF3YWl0OiBmYWxzZSxcclxuXHQgICAgICAgICAgICBhbGxvd0luOiB0cnVlLFxyXG5cdCAgICAgICAgICAgIGFsbG93U3RyaWN0RGlyZWN0aXZlOiB0cnVlLFxyXG5cdCAgICAgICAgICAgIGFsbG93WWllbGQ6IHRydWUsXHJcblx0ICAgICAgICAgICAgZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yOiBudWxsLFxyXG5cdCAgICAgICAgICAgIGlzQXNzaWdubWVudFRhcmdldDogZmFsc2UsXHJcblx0ICAgICAgICAgICAgaXNCaW5kaW5nRWxlbWVudDogZmFsc2UsXHJcblx0ICAgICAgICAgICAgaW5GdW5jdGlvbkJvZHk6IGZhbHNlLFxyXG5cdCAgICAgICAgICAgIGluSXRlcmF0aW9uOiBmYWxzZSxcclxuXHQgICAgICAgICAgICBpblN3aXRjaDogZmFsc2UsXHJcblx0ICAgICAgICAgICAgbGFiZWxTZXQ6IHt9LFxyXG5cdCAgICAgICAgICAgIHN0cmljdDogZmFsc2VcclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICB0aGlzLnRva2VucyA9IFtdO1xyXG5cdCAgICAgICAgdGhpcy5zdGFydE1hcmtlciA9IHtcclxuXHQgICAgICAgICAgICBpbmRleDogMCxcclxuXHQgICAgICAgICAgICBsaW5lOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICBjb2x1bW46IDBcclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIgPSB7XHJcblx0ICAgICAgICAgICAgaW5kZXg6IDAsXHJcblx0ICAgICAgICAgICAgbGluZTogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgY29sdW1uOiAwXHJcblx0ICAgICAgICB9O1xyXG5cdCAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgIHRoaXMubGFzdE1hcmtlciA9IHtcclxuXHQgICAgICAgICAgICBpbmRleDogdGhpcy5zY2FubmVyLmluZGV4LFxyXG5cdCAgICAgICAgICAgIGxpbmU6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfVxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnRocm93RXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZUZvcm1hdCkge1xyXG5cdCAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xyXG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuXHQgICAgICAgICAgICB2YWx1ZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblx0ICAgICAgICB2YXIgbXNnID0gbWVzc2FnZUZvcm1hdC5yZXBsYWNlKC8lKFxcZCkvZywgZnVuY3Rpb24gKHdob2xlLCBpZHgpIHtcclxuXHQgICAgICAgICAgICBhc3NlcnRfMS5hc3NlcnQoaWR4IDwgYXJncy5sZW5ndGgsICdNZXNzYWdlIHJlZmVyZW5jZSBtdXN0IGJlIGluIHJhbmdlJyk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGFyZ3NbaWR4XTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5sYXN0TWFya2VyLmluZGV4O1xyXG5cdCAgICAgICAgdmFyIGxpbmUgPSB0aGlzLmxhc3RNYXJrZXIubGluZTtcclxuXHQgICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmxhc3RNYXJrZXIuY29sdW1uICsgMTtcclxuXHQgICAgICAgIHRocm93IHRoaXMuZXJyb3JIYW5kbGVyLmNyZWF0ZUVycm9yKGluZGV4LCBsaW5lLCBjb2x1bW4sIG1zZyk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUudG9sZXJhdGVFcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlRm9ybWF0KSB7XHJcblx0ICAgICAgICB2YXIgdmFsdWVzID0gW107XHJcblx0ICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG5cdCAgICAgICAgICAgIHZhbHVlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuXHQgICAgICAgIHZhciBtc2cgPSBtZXNzYWdlRm9ybWF0LnJlcGxhY2UoLyUoXFxkKS9nLCBmdW5jdGlvbiAod2hvbGUsIGlkeCkge1xyXG5cdCAgICAgICAgICAgIGFzc2VydF8xLmFzc2VydChpZHggPCBhcmdzLmxlbmd0aCwgJ01lc3NhZ2UgcmVmZXJlbmNlIG11c3QgYmUgaW4gcmFuZ2UnKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gYXJnc1tpZHhdO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmxhc3RNYXJrZXIuaW5kZXg7XHJcblx0ICAgICAgICB2YXIgbGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMubGFzdE1hcmtlci5jb2x1bW4gKyAxO1xyXG5cdCAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIudG9sZXJhdGVFcnJvcihpbmRleCwgbGluZSwgY29sdW1uLCBtc2cpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBUaHJvdyBhbiBleGNlcHRpb24gYmVjYXVzZSBvZiB0aGUgdG9rZW4uXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUudW5leHBlY3RlZFRva2VuRXJyb3IgPSBmdW5jdGlvbiAodG9rZW4sIG1lc3NhZ2UpIHtcclxuXHQgICAgICAgIHZhciBtc2cgPSBtZXNzYWdlIHx8IG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuO1xyXG5cdCAgICAgICAgdmFyIHZhbHVlO1xyXG5cdCAgICAgICAgaWYgKHRva2VuKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1zZyA9ICh0b2tlbi50eXBlID09PSAyIC8qIEVPRiAqLykgPyBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRFT1MgOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgKHRva2VuLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLykgPyBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRJZGVudGlmaWVyIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAodG9rZW4udHlwZSA9PT0gNiAvKiBOdW1lcmljTGl0ZXJhbCAqLykgPyBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWROdW1iZXIgOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG9rZW4udHlwZSA9PT0gOCAvKiBTdHJpbmdMaXRlcmFsICovKSA/IG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5leHBlY3RlZFN0cmluZyA6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG9rZW4udHlwZSA9PT0gMTAgLyogVGVtcGxhdGUgKi8pID8gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVGVtcGxhdGUgOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gNCAvKiBLZXl3b3JkICovKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzRnV0dXJlUmVzZXJ2ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5leHBlY3RlZFJlc2VydmVkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiB0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhbHVlID0gdG9rZW4udmFsdWU7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICB2YWx1ZSA9ICdJTExFR0FMJztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKCclMCcsIHZhbHVlKTtcclxuXHQgICAgICAgIGlmICh0b2tlbiAmJiB0eXBlb2YgdG9rZW4ubGluZU51bWJlciA9PT0gJ251bWJlcicpIHtcclxuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSB0b2tlbi5zdGFydDtcclxuXHQgICAgICAgICAgICB2YXIgbGluZSA9IHRva2VuLmxpbmVOdW1iZXI7XHJcblx0ICAgICAgICAgICAgdmFyIGxhc3RNYXJrZXJMaW5lU3RhcnQgPSB0aGlzLmxhc3RNYXJrZXIuaW5kZXggLSB0aGlzLmxhc3RNYXJrZXIuY29sdW1uO1xyXG5cdCAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0b2tlbi5zdGFydCAtIGxhc3RNYXJrZXJMaW5lU3RhcnQgKyAxO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9ySGFuZGxlci5jcmVhdGVFcnJvcihpbmRleCwgbGluZSwgY29sdW1uLCBtc2cpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5sYXN0TWFya2VyLmluZGV4O1xyXG5cdCAgICAgICAgICAgIHZhciBsaW5lID0gdGhpcy5sYXN0TWFya2VyLmxpbmU7XHJcblx0ICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMubGFzdE1hcmtlci5jb2x1bW4gKyAxO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9ySGFuZGxlci5jcmVhdGVFcnJvcihpbmRleCwgbGluZSwgY29sdW1uLCBtc2cpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnRocm93VW5leHBlY3RlZFRva2VuID0gZnVuY3Rpb24gKHRva2VuLCBtZXNzYWdlKSB7XHJcblx0ICAgICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWRUb2tlbkVycm9yKHRva2VuLCBtZXNzYWdlKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbiwgbWVzc2FnZSkge1xyXG5cdCAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIudG9sZXJhdGUodGhpcy51bmV4cGVjdGVkVG9rZW5FcnJvcih0b2tlbiwgbWVzc2FnZSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmNvbGxlY3RDb21tZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIGlmICghdGhpcy5jb25maWcuY29tbWVudCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHZhciBjb21tZW50cyA9IHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcclxuXHQgICAgICAgICAgICBpZiAoY29tbWVudHMubGVuZ3RoID4gMCAmJiB0aGlzLmRlbGVnYXRlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWVudHMubGVuZ3RoOyArK2kpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBlID0gY29tbWVudHNbaV07XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHZvaWQgMDtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZS5tdWx0aUxpbmUgPyAnQmxvY2tDb21tZW50JyA6ICdMaW5lQ29tbWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc2Nhbm5lci5zb3VyY2Uuc2xpY2UoZS5zbGljZVswXSwgZS5zbGljZVsxXSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcucmFuZ2UpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJhbmdlID0gZS5yYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5sb2MpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmxvYyA9IGUubG9jO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGFkYXRhID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGUubG9jLnN0YXJ0LmxpbmUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogZS5sb2Muc3RhcnQuY29sdW1uLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGUucmFuZ2VbMF1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZDoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBlLmxvYy5lbmQubGluZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBlLmxvYy5lbmQuY29sdW1uLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGUucmFuZ2VbMV1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZShub2RlLCBtZXRhZGF0YSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIEZyb20gaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gdG8gYW4gZXh0ZXJuYWwgc3RydWN0dXJlXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUuZ2V0VG9rZW5SYXcgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLnNjYW5uZXIuc291cmNlLnNsaWNlKHRva2VuLnN0YXJ0LCB0b2tlbi5lbmQpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmNvbnZlcnRUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG5cdCAgICAgICAgdmFyIHQgPSB7XHJcblx0ICAgICAgICAgICAgdHlwZTogdG9rZW5fMS5Ub2tlbk5hbWVbdG9rZW4udHlwZV0sXHJcblx0ICAgICAgICAgICAgdmFsdWU6IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pXHJcblx0ICAgICAgICB9O1xyXG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLnJhbmdlKSB7XHJcblx0ICAgICAgICAgICAgdC5yYW5nZSA9IFt0b2tlbi5zdGFydCwgdG9rZW4uZW5kXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICh0aGlzLmNvbmZpZy5sb2MpIHtcclxuXHQgICAgICAgICAgICB0LmxvYyA9IHtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMuc3RhcnRNYXJrZXIubGluZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zdGFydE1hcmtlci5jb2x1bW5cclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgZW5kOiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydFxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSA5IC8qIFJlZ3VsYXJFeHByZXNzaW9uICovKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSB0b2tlbi5wYXR0ZXJuO1xyXG5cdCAgICAgICAgICAgIHZhciBmbGFncyA9IHRva2VuLmZsYWdzO1xyXG5cdCAgICAgICAgICAgIHQucmVnZXggPSB7IHBhdHRlcm46IHBhdHRlcm4sIGZsYWdzOiBmbGFncyB9O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHQ7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUubmV4dFRva2VuID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIubGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgdGhpcy5sYXN0TWFya2VyLmNvbHVtbiA9IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7XHJcblx0ICAgICAgICB0aGlzLmNvbGxlY3RDb21tZW50cygpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pbmRleCAhPT0gdGhpcy5zdGFydE1hcmtlci5pbmRleCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuc3RhcnRNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGFydE1hcmtlci5saW5lID0gdGhpcy5zY2FubmVyLmxpbmVOdW1iZXI7XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGFydE1hcmtlci5jb2x1bW4gPSB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIG5leHQgPSB0aGlzLnNjYW5uZXIubGV4KCk7XHJcblx0ICAgICAgICB0aGlzLmhhc0xpbmVUZXJtaW5hdG9yID0gKHRva2VuLmxpbmVOdW1iZXIgIT09IG5leHQubGluZU51bWJlcik7XHJcblx0ICAgICAgICBpZiAobmV4dCAmJiB0aGlzLmNvbnRleHQuc3RyaWN0ICYmIG5leHQudHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQobmV4dC52YWx1ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgbmV4dC50eXBlID0gNCAvKiBLZXl3b3JkICovO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMubG9va2FoZWFkID0gbmV4dDtcclxuXHQgICAgICAgIGlmICh0aGlzLmNvbmZpZy50b2tlbnMgJiYgbmV4dC50eXBlICE9PSAyIC8qIEVPRiAqLykge1xyXG5cdCAgICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2godGhpcy5jb252ZXJ0VG9rZW4obmV4dCkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRva2VuO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLm5leHRSZWdleFRva2VuID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdGhpcy5jb2xsZWN0Q29tbWVudHMoKTtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMuc2Nhbm5lci5zY2FuUmVnRXhwKCk7XHJcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcudG9rZW5zKSB7XHJcblx0ICAgICAgICAgICAgLy8gUG9wIHRoZSBwcmV2aW91cyB0b2tlbiwgJy8nIG9yICcvPSdcclxuXHQgICAgICAgICAgICAvLyBUaGlzIGlzIGFkZGVkIGZyb20gdGhlIGxvb2thaGVhZCB0b2tlbi5cclxuXHQgICAgICAgICAgICB0aGlzLnRva2Vucy5wb3AoKTtcclxuXHQgICAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHRoaXMuY29udmVydFRva2VuKHRva2VuKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvLyBQcmltZSB0aGUgbmV4dCBsb29rYWhlYWQuXHJcblx0ICAgICAgICB0aGlzLmxvb2thaGVhZCA9IHRva2VuO1xyXG5cdCAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgIHJldHVybiB0b2tlbjtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5jcmVhdGVOb2RlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICBpbmRleDogdGhpcy5zdGFydE1hcmtlci5pbmRleCxcclxuXHQgICAgICAgICAgICBsaW5lOiB0aGlzLnN0YXJ0TWFya2VyLmxpbmUsXHJcblx0ICAgICAgICAgICAgY29sdW1uOiB0aGlzLnN0YXJ0TWFya2VyLmNvbHVtblxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5zdGFydE5vZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuXHQgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgaW5kZXg6IHRva2VuLnN0YXJ0LFxyXG5cdCAgICAgICAgICAgIGxpbmU6IHRva2VuLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgY29sdW1uOiB0b2tlbi5zdGFydCAtIHRva2VuLmxpbmVTdGFydFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5maW5hbGl6ZSA9IGZ1bmN0aW9uIChtYXJrZXIsIG5vZGUpIHtcclxuXHQgICAgICAgIGlmICh0aGlzLmNvbmZpZy5yYW5nZSkge1xyXG5cdCAgICAgICAgICAgIG5vZGUucmFuZ2UgPSBbbWFya2VyLmluZGV4LCB0aGlzLmxhc3RNYXJrZXIuaW5kZXhdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLmxvYykge1xyXG5cdCAgICAgICAgICAgIG5vZGUubG9jID0ge1xyXG5cdCAgICAgICAgICAgICAgICBzdGFydDoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGluZTogbWFya2VyLmxpbmUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb2x1bW46IG1hcmtlci5jb2x1bW4sXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIGVuZDoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5sYXN0TWFya2VyLmxpbmUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMubGFzdE1hcmtlci5jb2x1bW5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNvdXJjZSkge1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLmxvYy5zb3VyY2UgPSB0aGlzLmNvbmZpZy5zb3VyY2U7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGUpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWV0YWRhdGEgPSB7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsaW5lOiBtYXJrZXIubGluZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogbWFya2VyLmNvbHVtbixcclxuXHQgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbWFya2VyLmluZGV4XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIGVuZDoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5sYXN0TWFya2VyLmxpbmUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMubGFzdE1hcmtlci5jb2x1bW4sXHJcblx0ICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMubGFzdE1hcmtlci5pbmRleFxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB0aGlzLmRlbGVnYXRlKG5vZGUsIG1ldGFkYXRhKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBFeHBlY3QgdGhlIG5leHQgdG9rZW4gdG8gbWF0Y2ggdGhlIHNwZWNpZmllZCBwdW5jdHVhdG9yLlxyXG5cdCAgICAvLyBJZiBub3QsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5leHBlY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gNyAvKiBQdW5jdHVhdG9yICovIHx8IHRva2VuLnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odG9rZW4pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBRdWlldGx5IGV4cGVjdCBhIGNvbW1hIHdoZW4gaW4gdG9sZXJhbnQgbW9kZSwgb3RoZXJ3aXNlIGRlbGVnYXRlcyB0byBleHBlY3QoKS5cclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5leHBlY3RDb21tYVNlcGFyYXRvciA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIGlmICh0aGlzLmNvbmZpZy50b2xlcmFudCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSA3IC8qIFB1bmN0dWF0b3IgKi8gJiYgdG9rZW4udmFsdWUgPT09ICcsJykge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSA3IC8qIFB1bmN0dWF0b3IgKi8gJiYgdG9rZW4udmFsdWUgPT09ICc7Jykge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odG9rZW4sIG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnLCcpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBFeHBlY3QgdGhlIG5leHQgdG9rZW4gdG8gbWF0Y2ggdGhlIHNwZWNpZmllZCBrZXl3b3JkLlxyXG5cdCAgICAvLyBJZiBub3QsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5leHBlY3RLZXl3b3JkID0gZnVuY3Rpb24gKGtleXdvcmQpIHtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gNCAvKiBLZXl3b3JkICovIHx8IHRva2VuLnZhbHVlICE9PSBrZXl3b3JkKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIFJldHVybiB0cnVlIGlmIHRoZSBuZXh0IHRva2VuIG1hdGNoZXMgdGhlIHNwZWNpZmllZCBwdW5jdHVhdG9yLlxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5sb29rYWhlYWQudHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIHRoaXMubG9va2FoZWFkLnZhbHVlID09PSB2YWx1ZTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlIG5leHQgdG9rZW4gbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGtleXdvcmRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5tYXRjaEtleXdvcmQgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDQgLyogS2V5d29yZCAqLyAmJiB0aGlzLmxvb2thaGVhZC52YWx1ZSA9PT0ga2V5d29yZDtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlIG5leHQgdG9rZW4gbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGNvbnRleHR1YWwga2V5d29yZFxyXG5cdCAgICAvLyAod2hlcmUgYW4gaWRlbnRpZmllciBpcyBzb21ldGltZXMgYSBrZXl3b3JkIGRlcGVuZGluZyBvbiB0aGUgY29udGV4dClcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5tYXRjaENvbnRleHR1YWxLZXl3b3JkID0gZnVuY3Rpb24gKGtleXdvcmQpIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgdGhpcy5sb29rYWhlYWQudmFsdWUgPT09IGtleXdvcmQ7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIFJldHVybiB0cnVlIGlmIHRoZSBuZXh0IHRva2VuIGlzIGFuIGFzc2lnbm1lbnQgb3BlcmF0b3JcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5tYXRjaEFzc2lnbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlICE9PSA3IC8qIFB1bmN0dWF0b3IgKi8pIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgb3AgPSB0aGlzLmxvb2thaGVhZC52YWx1ZTtcclxuXHQgICAgICAgIHJldHVybiBvcCA9PT0gJz0nIHx8XHJcblx0ICAgICAgICAgICAgb3AgPT09ICcqPScgfHxcclxuXHQgICAgICAgICAgICBvcCA9PT0gJyoqPScgfHxcclxuXHQgICAgICAgICAgICBvcCA9PT0gJy89JyB8fFxyXG5cdCAgICAgICAgICAgIG9wID09PSAnJT0nIHx8XHJcblx0ICAgICAgICAgICAgb3AgPT09ICcrPScgfHxcclxuXHQgICAgICAgICAgICBvcCA9PT0gJy09JyB8fFxyXG5cdCAgICAgICAgICAgIG9wID09PSAnPDw9JyB8fFxyXG5cdCAgICAgICAgICAgIG9wID09PSAnPj49JyB8fFxyXG5cdCAgICAgICAgICAgIG9wID09PSAnPj4+PScgfHxcclxuXHQgICAgICAgICAgICBvcCA9PT0gJyY9JyB8fFxyXG5cdCAgICAgICAgICAgIG9wID09PSAnXj0nIHx8XHJcblx0ICAgICAgICAgICAgb3AgPT09ICd8PSc7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIENvdmVyIGdyYW1tYXIgc3VwcG9ydC5cclxuXHQgICAgLy9cclxuXHQgICAgLy8gV2hlbiBhbiBhc3NpZ25tZW50IGV4cHJlc3Npb24gcG9zaXRpb24gc3RhcnRzIHdpdGggYW4gbGVmdCBwYXJlbnRoZXNpcywgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIHR5cGVcclxuXHQgICAgLy8gb2YgdGhlIHN5bnRheCBpcyB0byBiZSBkZWZlcnJlZCBhcmJpdHJhcmlseSBsb25nIHVudGlsIHRoZSBlbmQgb2YgdGhlIHBhcmVudGhlc2VzIHBhaXIgKHBsdXMgYSBsb29rYWhlYWQpXHJcblx0ICAgIC8vIG9yIHRoZSBmaXJzdCBjb21tYS4gVGhpcyBzaXR1YXRpb24gYWxzbyBkZWZlcnMgdGhlIGRldGVybWluYXRpb24gb2YgYWxsIHRoZSBleHByZXNzaW9ucyBuZXN0ZWQgaW4gdGhlIHBhaXIuXHJcblx0ICAgIC8vXHJcblx0ICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBwcm9kdWN0aW9ucyB0aGF0IGNhbiBiZSBwYXJzZWQgaW4gYSBwYXJlbnRoZXNlcyBwYWlyIHRoYXQgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZFxyXG5cdCAgICAvLyBhZnRlciB0aGUgb3V0ZXJtb3N0IHBhaXIgaXMgY2xvc2VkLiBUaGV5IGFyZTpcclxuXHQgICAgLy9cclxuXHQgICAgLy8gICAxLiBBc3NpZ25tZW50RXhwcmVzc2lvblxyXG5cdCAgICAvLyAgIDIuIEJpbmRpbmdFbGVtZW50c1xyXG5cdCAgICAvLyAgIDMuIEFzc2lnbm1lbnRUYXJnZXRzXHJcblx0ICAgIC8vXHJcblx0ICAgIC8vIEluIG9yZGVyIHRvIGF2b2lkIGV4cG9uZW50aWFsIGJhY2t0cmFja2luZywgd2UgdXNlIHR3byBmbGFncyB0byBkZW5vdGUgaWYgdGhlIHByb2R1Y3Rpb24gY2FuIGJlXHJcblx0ICAgIC8vIGJpbmRpbmcgZWxlbWVudCBvciBhc3NpZ25tZW50IHRhcmdldC5cclxuXHQgICAgLy9cclxuXHQgICAgLy8gVGhlIHRocmVlIHByb2R1Y3Rpb25zIGhhdmUgdGhlIHJlbGF0aW9uc2hpcDpcclxuXHQgICAgLy9cclxuXHQgICAgLy8gICBCaW5kaW5nRWxlbWVudHMg4oqGIEFzc2lnbm1lbnRUYXJnZXRzIOKKhiBBc3NpZ25tZW50RXhwcmVzc2lvblxyXG5cdCAgICAvL1xyXG5cdCAgICAvLyB3aXRoIGEgc2luZ2xlIGV4Y2VwdGlvbiB0aGF0IENvdmVySW5pdGlhbGl6ZWROYW1lIHdoZW4gdXNlZCBkaXJlY3RseSBpbiBhbiBFeHByZXNzaW9uLCBnZW5lcmF0ZXNcclxuXHQgICAgLy8gYW4gZWFybHkgZXJyb3IuIFRoZXJlZm9yZSwgd2UgbmVlZCB0aGUgdGhpcmQgc3RhdGUsIGZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciwgdG8gdHJhY2sgdGhlXHJcblx0ICAgIC8vIGZpcnN0IHVzYWdlIG9mIENvdmVySW5pdGlhbGl6ZWROYW1lIGFuZCByZXBvcnQgaXQgd2hlbiB3ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHBhcmVudGhlc2VzIHBhaXIuXHJcblx0ICAgIC8vXHJcblx0ICAgIC8vIGlzb2xhdGVDb3ZlckdyYW1tYXIgZnVuY3Rpb24gcnVucyB0aGUgZ2l2ZW4gcGFyc2VyIGZ1bmN0aW9uIHdpdGggYSBuZXcgY292ZXIgZ3JhbW1hciBjb250ZXh0LCBhbmQgaXQgZG9lcyBub3RcclxuXHQgICAgLy8gZWZmZWN0IHRoZSBjdXJyZW50IGZsYWdzLiBUaGlzIG1lYW5zIHRoZSBwcm9kdWN0aW9uIHRoZSBwYXJzZXIgcGFyc2VzIGlzIG9ubHkgdXNlZCBhcyBhbiBleHByZXNzaW9uLiBUaGVyZWZvcmVcclxuXHQgICAgLy8gdGhlIENvdmVySW5pdGlhbGl6ZWROYW1lIGNoZWNrIGlzIGNvbmR1Y3RlZC5cclxuXHQgICAgLy9cclxuXHQgICAgLy8gaW5oZXJpdENvdmVyR3JhbW1hciBmdW5jdGlvbiBydW5zIHRoZSBnaXZlbiBwYXJzZSBmdW5jdGlvbiB3aXRoIGEgbmV3IGNvdmVyIGdyYW1tYXIgY29udGV4dCwgYW5kIGl0IHByb3BhZ2F0ZXNcclxuXHQgICAgLy8gdGhlIGZsYWdzIG91dHNpZGUgb2YgdGhlIHBhcnNlci4gVGhpcyBtZWFucyB0aGUgcHJvZHVjdGlvbiB0aGUgcGFyc2VyIHBhcnNlcyBpcyB1c2VkIGFzIGEgcGFydCBvZiBhIHBvdGVudGlhbFxyXG5cdCAgICAvLyBwYXR0ZXJuLiBUaGUgQ292ZXJJbml0aWFsaXplZE5hbWUgY2hlY2sgaXMgZGVmZXJyZWQuXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUuaXNvbGF0ZUNvdmVyR3JhbW1hciA9IGZ1bmN0aW9uIChwYXJzZUZ1bmN0aW9uKSB7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNJc0JpbmRpbmdFbGVtZW50ID0gdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNJc0Fzc2lnbm1lbnRUYXJnZXQgPSB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0O1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzRmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yID0gdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcjtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gdHJ1ZTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSB0cnVlO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciA9IG51bGw7XHJcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VGdW5jdGlvbi5jYWxsKHRoaXMpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgIT09IG51bGwpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBwcmV2aW91c0lzQmluZGluZ0VsZW1lbnQ7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gcHJldmlvdXNJc0Fzc2lnbm1lbnRUYXJnZXQ7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yID0gcHJldmlvdXNGaXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I7XHJcblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmluaGVyaXRDb3ZlckdyYW1tYXIgPSBmdW5jdGlvbiAocGFyc2VGdW5jdGlvbikge1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzSXNCaW5kaW5nRWxlbWVudCA9IHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50O1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzSXNBc3NpZ25tZW50VGFyZ2V0ID0gdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldDtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c0ZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciA9IHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IHRydWU7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gdHJ1ZTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSBudWxsO1xyXG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlRnVuY3Rpb24uY2FsbCh0aGlzKTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgJiYgcHJldmlvdXNJc0JpbmRpbmdFbGVtZW50O1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgJiYgcHJldmlvdXNJc0Fzc2lnbm1lbnRUYXJnZXQ7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yID0gcHJldmlvdXNGaXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgfHwgdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcjtcclxuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUuY29uc3VtZVNlbWljb2xvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCc7JykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAoIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8gJiYgIXRoaXMubWF0Y2goJ30nKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5sYXN0TWFya2VyLmluZGV4ID0gdGhpcy5zdGFydE1hcmtlci5pbmRleDtcclxuXHQgICAgICAgICAgICB0aGlzLmxhc3RNYXJrZXIubGluZSA9IHRoaXMuc3RhcnRNYXJrZXIubGluZTtcclxuXHQgICAgICAgICAgICB0aGlzLmxhc3RNYXJrZXIuY29sdW1uID0gdGhpcy5zdGFydE1hcmtlci5jb2x1bW47XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByaW1hcnktZXhwcmVzc2lvblxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlUHJpbWFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIGV4cHI7XHJcblx0ICAgICAgICB2YXIgdG9rZW4sIHJhdztcclxuXHQgICAgICAgIHN3aXRjaCAodGhpcy5sb29rYWhlYWQudHlwZSkge1xyXG5cdCAgICAgICAgICAgIGNhc2UgMyAvKiBJZGVudGlmaWVyICovOlxyXG5cdCAgICAgICAgICAgICAgICBpZiAoKHRoaXMuY29udGV4dC5pc01vZHVsZSB8fCB0aGlzLmNvbnRleHQuYXdhaXQpICYmIHRoaXMubG9va2FoZWFkLnZhbHVlID09PSAnYXdhaXQnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBleHByID0gdGhpcy5tYXRjaEFzeW5jRnVuY3Rpb24oKSA/IHRoaXMucGFyc2VGdW5jdGlvbkV4cHJlc3Npb24oKSA6IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSWRlbnRpZmllcih0aGlzLm5leHRUb2tlbigpLnZhbHVlKSk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgNiAvKiBOdW1lcmljTGl0ZXJhbCAqLzpcclxuXHQgICAgICAgICAgICBjYXNlIDggLyogU3RyaW5nTGl0ZXJhbCAqLzpcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgdGhpcy5sb29rYWhlYWQub2N0YWwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQsIG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0T2N0YWxMaXRlcmFsKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkxpdGVyYWwodG9rZW4udmFsdWUsIHJhdykpO1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlIDEgLyogQm9vbGVhbkxpdGVyYWwgKi86XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICByYXcgPSB0aGlzLmdldFRva2VuUmF3KHRva2VuKTtcclxuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuTGl0ZXJhbCh0b2tlbi52YWx1ZSA9PT0gJ3RydWUnLCByYXcpKTtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSA1IC8qIE51bGxMaXRlcmFsICovOlxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkxpdGVyYWwobnVsbCwgcmF3KSk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgMTAgLyogVGVtcGxhdGUgKi86XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlVGVtcGxhdGVMaXRlcmFsKCk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgNyAvKiBQdW5jdHVhdG9yICovOlxyXG5cdCAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMubG9va2FoZWFkLnZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICcoJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUdyb3VwRXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdbJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHByID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VBcnJheUluaXRpYWxpemVyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3snOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZU9iamVjdEluaXRpYWxpemVyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJy8nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnLz0nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5pbmRleCA9IHRoaXMuc3RhcnRNYXJrZXIuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLm5leHRSZWdleFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuUmVnZXhMaXRlcmFsKHRva2VuLnJlZ2V4LCByYXcsIHRva2VuLnBhdHRlcm4sIHRva2VuLmZsYWdzKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgNCAvKiBLZXl3b3JkICovOlxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5zdHJpY3QgJiYgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgJiYgdGhpcy5tYXRjaEtleXdvcmQoJ3lpZWxkJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmICghdGhpcy5jb250ZXh0LnN0cmljdCAmJiB0aGlzLm1hdGNoS2V5d29yZCgnbGV0JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLklkZW50aWZpZXIodGhpcy5uZXh0VG9rZW4oKS52YWx1ZSkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnZnVuY3Rpb24nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlRnVuY3Rpb25FeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoS2V5d29yZCgndGhpcycpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5UaGlzRXhwcmVzc2lvbigpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdjbGFzcycpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMucGFyc2VDbGFzc0V4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LWluaXRpYWxpemVyXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VTcHJlYWRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcuLi4nKTtcclxuXHQgICAgICAgIHZhciBhcmcgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlNwcmVhZEVsZW1lbnQoYXJnKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBcnJheUluaXRpYWxpemVyID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBlbGVtZW50cyA9IFtdO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ1snKTtcclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnXScpKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJywnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKG51bGwpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoKCcuLi4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMucGFyc2VTcHJlYWRFbGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnXScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJywnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnXScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnLCcpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ10nKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkFycmF5RXhwcmVzc2lvbihlbGVtZW50cykpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QtaW5pdGlhbGl6ZXJcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVByb3BlcnR5TWV0aG9kID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c1N0cmljdCA9IHRoaXMuY29udGV4dC5zdHJpY3Q7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1N0cmljdERpcmVjdGl2ZSA9IHRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZSA9IHBhcmFtcy5zaW1wbGU7XHJcblx0ICAgICAgICB2YXIgYm9keSA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cyk7XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBwYXJhbXMuZmlyc3RSZXN0cmljdGVkKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihwYXJhbXMuZmlyc3RSZXN0cmljdGVkLCBwYXJhbXMubWVzc2FnZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBwYXJhbXMuc3RyaWN0ZWQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHBhcmFtcy5zdHJpY3RlZCwgcGFyYW1zLm1lc3NhZ2UpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LnN0cmljdCA9IHByZXZpb3VzU3RyaWN0O1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gcHJldmlvdXNBbGxvd1N0cmljdERpcmVjdGl2ZTtcclxuXHQgICAgICAgIHJldHVybiBib2R5O1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBpc0dlbmVyYXRvciA9IGZhbHNlO1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93WWllbGQgPSB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gZmFsc2U7XHJcblx0ICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKTtcclxuXHQgICAgICAgIHZhciBtZXRob2QgPSB0aGlzLnBhcnNlUHJvcGVydHlNZXRob2QocGFyYW1zKTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gcHJldmlvdXNBbGxvd1lpZWxkO1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRnVuY3Rpb25FeHByZXNzaW9uKG51bGwsIHBhcmFtcy5wYXJhbXMsIG1ldGhvZCwgaXNHZW5lcmF0b3IpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVByb3BlcnR5TWV0aG9kQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1lpZWxkID0gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNBd2FpdCA9IHRoaXMuY29udGV4dC5hd2FpdDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gZmFsc2U7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYXdhaXQgPSB0cnVlO1xyXG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCk7XHJcblx0ICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kKHBhcmFtcyk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IHByZXZpb3VzQXdhaXQ7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5Bc3luY0Z1bmN0aW9uRXhwcmVzc2lvbihudWxsLCBwYXJhbXMucGFyYW1zLCBtZXRob2QpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU9iamVjdFByb3BlcnR5S2V5ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICB2YXIga2V5O1xyXG5cdCAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XHJcblx0ICAgICAgICAgICAgY2FzZSA4IC8qIFN0cmluZ0xpdGVyYWwgKi86XHJcblx0ICAgICAgICAgICAgY2FzZSA2IC8qIE51bWVyaWNMaXRlcmFsICovOlxyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiB0b2tlbi5vY3RhbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RPY3RhbExpdGVyYWwpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciByYXcgPSB0aGlzLmdldFRva2VuUmF3KHRva2VuKTtcclxuXHQgICAgICAgICAgICAgICAga2V5ID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5MaXRlcmFsKHRva2VuLnZhbHVlLCByYXcpKTtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSAzIC8qIElkZW50aWZpZXIgKi86XHJcblx0ICAgICAgICAgICAgY2FzZSAxIC8qIEJvb2xlYW5MaXRlcmFsICovOlxyXG5cdCAgICAgICAgICAgIGNhc2UgNSAvKiBOdWxsTGl0ZXJhbCAqLzpcclxuXHQgICAgICAgICAgICBjYXNlIDQgLyogS2V5d29yZCAqLzpcclxuXHQgICAgICAgICAgICAgICAga2V5ID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JZGVudGlmaWVyKHRva2VuLnZhbHVlKSk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgNyAvKiBQdW5jdHVhdG9yICovOlxyXG5cdCAgICAgICAgICAgICAgICBpZiAodG9rZW4udmFsdWUgPT09ICdbJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnXScpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAga2V5ID0gdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4ga2V5O1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmlzUHJvcGVydHlLZXkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG5cdCAgICAgICAgcmV0dXJuIChrZXkudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIgJiYga2V5Lm5hbWUgPT09IHZhbHVlKSB8fFxyXG5cdCAgICAgICAgICAgIChrZXkudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LkxpdGVyYWwgJiYga2V5LnZhbHVlID09PSB2YWx1ZSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VPYmplY3RQcm9wZXJ0eSA9IGZ1bmN0aW9uIChoYXNQcm90bykge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgdmFyIGtpbmQ7XHJcblx0ICAgICAgICB2YXIga2V5ID0gbnVsbDtcclxuXHQgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XHJcblx0ICAgICAgICB2YXIgY29tcHV0ZWQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBtZXRob2QgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBzaG9ydGhhbmQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBpc0FzeW5jID0gZmFsc2U7XHJcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGlkID0gdG9rZW4udmFsdWU7XHJcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICBjb21wdXRlZCA9IHRoaXMubWF0Y2goJ1snKTtcclxuXHQgICAgICAgICAgICBpc0FzeW5jID0gIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IgJiYgKGlkID09PSAnYXN5bmMnKSAmJlxyXG5cdCAgICAgICAgICAgICAgICAhdGhpcy5tYXRjaCgnOicpICYmICF0aGlzLm1hdGNoKCcoJykgJiYgIXRoaXMubWF0Y2goJyonKTtcclxuXHQgICAgICAgICAgICBrZXkgPSBpc0FzeW5jID8gdGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCkgOiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLklkZW50aWZpZXIoaWQpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJyonKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBjb21wdXRlZCA9IHRoaXMubWF0Y2goJ1snKTtcclxuXHQgICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBsb29rYWhlYWRQcm9wZXJ0eUtleSA9IHRoaXMucXVhbGlmaWVkUHJvcGVydHlOYW1lKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgIWlzQXN5bmMgJiYgdG9rZW4udmFsdWUgPT09ICdnZXQnICYmIGxvb2thaGVhZFByb3BlcnR5S2V5KSB7XHJcblx0ICAgICAgICAgICAga2luZCA9ICdnZXQnO1xyXG5cdCAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xyXG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlR2V0dGVyTWV0aG9kKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgIWlzQXN5bmMgJiYgdG9rZW4udmFsdWUgPT09ICdzZXQnICYmIGxvb2thaGVhZFByb3BlcnR5S2V5KSB7XHJcblx0ICAgICAgICAgICAga2luZCA9ICdzZXQnO1xyXG5cdCAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xyXG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xyXG5cdCAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZVNldHRlck1ldGhvZCgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIHRva2VuLnZhbHVlID09PSAnKicgJiYgbG9va2FoZWFkUHJvcGVydHlLZXkpIHtcclxuXHQgICAgICAgICAgICBraW5kID0gJ2luaXQnO1xyXG5cdCAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xyXG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xyXG5cdCAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZUdlbmVyYXRvck1ldGhvZCgpO1xyXG5cdCAgICAgICAgICAgIG1ldGhvZCA9IHRydWU7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBpZiAoIWtleSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAga2luZCA9ICdpbml0JztcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnOicpICYmICFpc0FzeW5jKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghY29tcHV0ZWQgJiYgdGhpcy5pc1Byb3BlcnR5S2V5KGtleSwgJ19fcHJvdG9fXycpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaGFzUHJvdG8udmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5EdXBsaWNhdGVQcm90b1Byb3BlcnR5KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGhhc1Byb3RvLnZhbHVlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoKCcoJykpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSBpc0FzeW5jID8gdGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kQXN5bmNGdW5jdGlvbigpIDogdGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kRnVuY3Rpb24oKTtcclxuXHQgICAgICAgICAgICAgICAgbWV0aG9kID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSWRlbnRpZmllcih0b2tlbi52YWx1ZSkpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnPScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2hvcnRoYW5kID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbml0ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXNzaWdubWVudFBhdHRlcm4oaWQsIGluaXQpKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNob3J0aGFuZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGlkO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlByb3BlcnR5KGtpbmQsIGtleSwgY29tcHV0ZWQsIHZhbHVlLCBtZXRob2QsIHNob3J0aGFuZCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlT2JqZWN0SW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcclxuXHQgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gW107XHJcblx0ICAgICAgICB2YXIgaGFzUHJvdG8gPSB7IHZhbHVlOiBmYWxzZSB9O1xyXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLm1hdGNoKCd9JykpIHtcclxuXHQgICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2godGhpcy5wYXJzZU9iamVjdFByb3BlcnR5KGhhc1Byb3RvKSk7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCd9JykpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3RDb21tYVNlcGFyYXRvcigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCd9Jyk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5PYmplY3RFeHByZXNzaW9uKHByb3BlcnRpZXMpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbHNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRlbXBsYXRlSGVhZCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIGFzc2VydF8xLmFzc2VydCh0aGlzLmxvb2thaGVhZC5oZWFkLCAnVGVtcGxhdGUgbGl0ZXJhbCBtdXN0IHN0YXJ0IHdpdGggYSB0ZW1wbGF0ZSBoZWFkJyk7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgIHZhciByYXcgPSB0b2tlbi52YWx1ZTtcclxuXHQgICAgICAgIHZhciBjb29rZWQgPSB0b2tlbi5jb29rZWQ7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5UZW1wbGF0ZUVsZW1lbnQoeyByYXc6IHJhdywgY29va2VkOiBjb29rZWQgfSwgdG9rZW4udGFpbCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVGVtcGxhdGVFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgIT09IDEwIC8qIFRlbXBsYXRlICovKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICB2YXIgcmF3ID0gdG9rZW4udmFsdWU7XHJcblx0ICAgICAgICB2YXIgY29va2VkID0gdG9rZW4uY29va2VkO1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVGVtcGxhdGVFbGVtZW50KHsgcmF3OiByYXcsIGNvb2tlZDogY29va2VkIH0sIHRva2VuLnRhaWwpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRlbXBsYXRlTGl0ZXJhbCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcclxuXHQgICAgICAgIHZhciBxdWFzaXMgPSBbXTtcclxuXHQgICAgICAgIHZhciBxdWFzaSA9IHRoaXMucGFyc2VUZW1wbGF0ZUhlYWQoKTtcclxuXHQgICAgICAgIHF1YXNpcy5wdXNoKHF1YXNpKTtcclxuXHQgICAgICAgIHdoaWxlICghcXVhc2kudGFpbCkge1xyXG5cdCAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2godGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XHJcblx0ICAgICAgICAgICAgcXVhc2kgPSB0aGlzLnBhcnNlVGVtcGxhdGVFbGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgcXVhc2lzLnB1c2gocXVhc2kpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVGVtcGxhdGVMaXRlcmFsKHF1YXNpcywgZXhwcmVzc2lvbnMpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ3JvdXBpbmctb3BlcmF0b3JcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4gPSBmdW5jdGlvbiAoZXhwcikge1xyXG5cdCAgICAgICAgc3dpdGNoIChleHByLnR5cGUpIHtcclxuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyOlxyXG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4Lk1lbWJlckV4cHJlc3Npb246XHJcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguUmVzdEVsZW1lbnQ6XHJcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguQXNzaWdubWVudFBhdHRlcm46XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4LlNwcmVhZEVsZW1lbnQ6XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIudHlwZSA9IHN5bnRheF8xLlN5bnRheC5SZXN0RWxlbWVudDtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZXhwci5hcmd1bWVudCk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4LkFycmF5RXhwcmVzc2lvbjpcclxuXHQgICAgICAgICAgICAgICAgZXhwci50eXBlID0gc3ludGF4XzEuU3ludGF4LkFycmF5UGF0dGVybjtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByLmVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZXhwci5lbGVtZW50c1tpXSAhPT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGV4cHIuZWxlbWVudHNbaV0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4Lk9iamVjdEV4cHJlc3Npb246XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIudHlwZSA9IHN5bnRheF8xLlN5bnRheC5PYmplY3RQYXR0ZXJuO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHIucHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZXhwci5wcm9wZXJ0aWVzW2ldLnZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcclxuXHQgICAgICAgICAgICAgICAgZXhwci50eXBlID0gc3ludGF4XzEuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuO1xyXG5cdCAgICAgICAgICAgICAgICBkZWxldGUgZXhwci5vcGVyYXRvcjtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZXhwci5sZWZ0KTtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgLy8gQWxsb3cgb3RoZXIgbm9kZSB0eXBlIGZvciB0b2xlcmFudCBwYXJzaW5nLlxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUdyb3VwRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBleHByO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCcpJykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnPT4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnPT4nKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZXhwciA9IHtcclxuXHQgICAgICAgICAgICAgICAgdHlwZTogQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcixcclxuXHQgICAgICAgICAgICAgICAgcGFyYW1zOiBbXSxcclxuXHQgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlXHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydFRva2VuID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcuLi4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICBleHByID0gdGhpcy5wYXJzZVJlc3RFbGVtZW50KHBhcmFtcyk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnPT4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJz0+Jyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZXhwciA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXIsXHJcblx0ICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFtleHByXSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGFycm93ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnLCcpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goZXhwcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJywnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnKScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwcmVzc2lvbnMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGV4cHJlc3Npb25zW2ldKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJvdyA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBleHByZXNzaW9ucyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoKCcuLi4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKHRoaXMucGFyc2VSZXN0RWxlbWVudChwYXJhbXMpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCc9PicpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnPT4nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHJlc3Npb25zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihleHByZXNzaW9uc1tpXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3cgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogZXhwcmVzc2lvbnMsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2VcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2godGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbikpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyb3cpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFhcnJvdykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5TZXF1ZW5jZUV4cHJlc3Npb24oZXhwcmVzc2lvbnMpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIWFycm93KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJz0+JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhwci50eXBlID09PSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllciAmJiBleHByLm5hbWUgPT09ICd5aWVsZCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3cgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogW2V4cHJdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXJyb3cpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cHIudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByLmV4cHJlc3Npb25zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZXhwci5leHByZXNzaW9uc1tpXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihleHByKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IChleHByLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5TZXF1ZW5jZUV4cHJlc3Npb24gPyBleHByLmV4cHJlc3Npb25zIDogW2V4cHJdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtZXRlcnMsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2VcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWxlZnQtaGFuZC1zaWRlLWV4cHJlc3Npb25zXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBcmd1bWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKCcpO1xyXG5cdCAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpKSB7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGV4cHIgPSB0aGlzLm1hdGNoKCcuLi4nKSA/IHRoaXMucGFyc2VTcHJlYWRFbGVtZW50KCkgOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgICAgIGFyZ3MucHVzaChleHByKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJyknKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3RDb21tYVNlcGFyYXRvcigpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnKScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XHJcblx0ICAgICAgICByZXR1cm4gYXJncztcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5pc0lkZW50aWZpZXJOYW1lID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcblx0ICAgICAgICByZXR1cm4gdG9rZW4udHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovIHx8XHJcblx0ICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gNCAvKiBLZXl3b3JkICovIHx8XHJcblx0ICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gMSAvKiBCb29sZWFuTGl0ZXJhbCAqLyB8fFxyXG5cdCAgICAgICAgICAgIHRva2VuLnR5cGUgPT09IDUgLyogTnVsbExpdGVyYWwgKi87XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VJZGVudGlmaWVyTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgaWYgKCF0aGlzLmlzSWRlbnRpZmllck5hbWUodG9rZW4pKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JZGVudGlmaWVyKHRva2VuLnZhbHVlKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VOZXdFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBpZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO1xyXG5cdCAgICAgICAgYXNzZXJ0XzEuYXNzZXJ0KGlkLm5hbWUgPT09ICduZXcnLCAnTmV3IGV4cHJlc3Npb24gbXVzdCBzdGFydCB3aXRoIGBuZXdgJyk7XHJcblx0ICAgICAgICB2YXIgZXhwcjtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCcuJykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgdGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5ICYmIHRoaXMubG9va2FoZWFkLnZhbHVlID09PSAndGFyZ2V0Jykge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcclxuXHQgICAgICAgICAgICAgICAgZXhwciA9IG5ldyBOb2RlLk1ldGFQcm9wZXJ0eShpZCwgcHJvcGVydHkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNhbGxlZSA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlTGVmdEhhbmRTaWRlRXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLm1hdGNoKCcoJykgPyB0aGlzLnBhcnNlQXJndW1lbnRzKCkgOiBbXTtcclxuXHQgICAgICAgICAgICBleHByID0gbmV3IE5vZGUuTmV3RXhwcmVzc2lvbihjYWxsZWUsIGFyZ3MpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgZXhwcik7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBc3luY0FyZ3VtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIGFyZyA9IHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciA9IG51bGw7XHJcblx0ICAgICAgICByZXR1cm4gYXJnO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQXN5bmNBcmd1bWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKCcpO1xyXG5cdCAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpKSB7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGV4cHIgPSB0aGlzLm1hdGNoKCcuLi4nKSA/IHRoaXMucGFyc2VTcHJlYWRFbGVtZW50KCkgOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3luY0FyZ3VtZW50KTtcclxuXHQgICAgICAgICAgICAgICAgYXJncy5wdXNoKGV4cHIpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnKScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdENvbW1hU2VwYXJhdG9yKCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcpJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcclxuXHQgICAgICAgIHJldHVybiBhcmdzO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlTGVmdEhhbmRTaWRlRXhwcmVzc2lvbkFsbG93Q2FsbCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBzdGFydFRva2VuID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICB2YXIgbWF5YmVBc3luYyA9IHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXN5bmMnKTtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93SW4gPSB0aGlzLmNvbnRleHQuYWxsb3dJbjtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gdHJ1ZTtcclxuXHQgICAgICAgIHZhciBleHByO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdzdXBlcicpICYmIHRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSkge1xyXG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKGV4cHIsIG5ldyBOb2RlLlN1cGVyKCkpO1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKCcpICYmICF0aGlzLm1hdGNoKCcuJykgJiYgIXRoaXMubWF0Y2goJ1snKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBleHByID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMubWF0Y2hLZXl3b3JkKCduZXcnKSA/IHRoaXMucGFyc2VOZXdFeHByZXNzaW9uIDogdGhpcy5wYXJzZVByaW1hcnlFeHByZXNzaW9uKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJy4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJy4nKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5TdGF0aWNNZW1iZXJFeHByZXNzaW9uKGV4cHIsIHByb3BlcnR5KSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJygnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgYXN5bmNBcnJvdyA9IG1heWJlQXN5bmMgJiYgKHN0YXJ0VG9rZW4ubGluZU51bWJlciA9PT0gdGhpcy5sb29rYWhlYWQubGluZU51bWJlcik7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhc3luY0Fycm93ID8gdGhpcy5wYXJzZUFzeW5jQXJndW1lbnRzKCkgOiB0aGlzLnBhcnNlQXJndW1lbnRzKCk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5DYWxsRXhwcmVzc2lvbihleHByLCBhcmdzKSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChhc3luY0Fycm93ICYmIHRoaXMubWF0Y2goJz0+JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGFyZ3NbaV0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZXhwciA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogYXJncyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoKCdbJykpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCdbJyk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCddJyk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5Db21wdXRlZE1lbWJlckV4cHJlc3Npb24oZXhwciwgcHJvcGVydHkpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gMTAgLyogVGVtcGxhdGUgKi8gJiYgdGhpcy5sb29rYWhlYWQuaGVhZCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcXVhc2kgPSB0aGlzLnBhcnNlVGVtcGxhdGVMaXRlcmFsKCk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24oZXhwciwgcXVhc2kpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xyXG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VTdXBlciA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3N1cGVyJyk7XHJcblx0ICAgICAgICBpZiAoIXRoaXMubWF0Y2goJ1snKSAmJiAhdGhpcy5tYXRjaCgnLicpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5TdXBlcigpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBhc3NlcnRfMS5hc3NlcnQodGhpcy5jb250ZXh0LmFsbG93SW4sICdjYWxsZWUgb2YgbmV3IGV4cHJlc3Npb24gYWx3YXlzIGFsbG93IGluIGtleXdvcmQuJyk7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgIHZhciBleHByID0gKHRoaXMubWF0Y2hLZXl3b3JkKCdzdXBlcicpICYmIHRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSkgPyB0aGlzLnBhcnNlU3VwZXIoKSA6XHJcblx0ICAgICAgICAgICAgdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMubWF0Y2hLZXl3b3JkKCduZXcnKSA/IHRoaXMucGFyc2VOZXdFeHByZXNzaW9uIDogdGhpcy5wYXJzZVByaW1hcnlFeHByZXNzaW9uKTtcclxuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJ1snKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJ1snKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHByZXNzaW9uKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJ10nKTtcclxuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uKGV4cHIsIHByb3BlcnR5KSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJy4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJy4nKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlN0YXRpY01lbWJlckV4cHJlc3Npb24oZXhwciwgcHJvcGVydHkpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gMTAgLyogVGVtcGxhdGUgKi8gJiYgdGhpcy5sb29rYWhlYWQuaGVhZCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcXVhc2kgPSB0aGlzLnBhcnNlVGVtcGxhdGVMaXRlcmFsKCk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihleHByLCBxdWFzaSkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXVwZGF0ZS1leHByZXNzaW9uc1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVXBkYXRlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBleHByO1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCcrKycpIHx8IHRoaXMubWF0Y2goJy0tJykpIHtcclxuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pO1xyXG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKTtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBleHByLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyICYmIHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGV4cHIubmFtZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0TEhTUHJlZml4KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLkludmFsaWRMSFNJbkFzc2lnbm1lbnQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgcHJlZml4ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5VcGRhdGVFeHByZXNzaW9uKHRva2VuLnZhbHVlLCBleHByLCBwcmVmaXgpKTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb25BbGxvd0NhbGwpO1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5oYXNMaW5lVGVybWluYXRvciAmJiB0aGlzLmxvb2thaGVhZC50eXBlID09PSA3IC8qIFB1bmN0dWF0b3IgKi8pIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJysrJykgfHwgdGhpcy5tYXRjaCgnLS0nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgZXhwci50eXBlID09PSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllciAmJiB0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChleHByLm5hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0TEhTUG9zdGZpeCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkTEhTSW5Bc3NpZ25tZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgb3BlcmF0b3IgPSB0aGlzLm5leHRUb2tlbigpLnZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHByZWZpeCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoc3RhcnRUb2tlbiksIG5ldyBOb2RlLlVwZGF0ZUV4cHJlc3Npb24ob3BlcmF0b3IsIGV4cHIsIHByZWZpeCkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXVuYXJ5LW9wZXJhdG9yc1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQXdhaXRFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICB2YXIgYXJndW1lbnQgPSB0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5Bd2FpdEV4cHJlc3Npb24oYXJndW1lbnQpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVuYXJ5RXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBleHByO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJysnKSB8fCB0aGlzLm1hdGNoKCctJykgfHwgdGhpcy5tYXRjaCgnficpIHx8IHRoaXMubWF0Y2goJyEnKSB8fFxyXG5cdCAgICAgICAgICAgIHRoaXMubWF0Y2hLZXl3b3JkKCdkZWxldGUnKSB8fCB0aGlzLm1hdGNoS2V5d29yZCgndm9pZCcpIHx8IHRoaXMubWF0Y2hLZXl3b3JkKCd0eXBlb2YnKSkge1xyXG5cdCAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUodGhpcy5sb29rYWhlYWQpO1xyXG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKTtcclxuXHQgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5VbmFyeUV4cHJlc3Npb24odG9rZW4udmFsdWUsIGV4cHIpKTtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBleHByLm9wZXJhdG9yID09PSAnZGVsZXRlJyAmJiBleHByLmFyZ3VtZW50LnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdERlbGV0ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5jb250ZXh0LmF3YWl0ICYmIHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXdhaXQnKSkge1xyXG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlQXdhaXRFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBleHByID0gdGhpcy5wYXJzZVVwZGF0ZUV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBleHByO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgIHZhciBleHByID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VVbmFyeUV4cHJlc3Npb24pO1xyXG5cdCAgICAgICAgaWYgKGV4cHIudHlwZSAhPT0gc3ludGF4XzEuU3ludGF4LlVuYXJ5RXhwcmVzc2lvbiAmJiB0aGlzLm1hdGNoKCcqKicpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICB2YXIgbGVmdCA9IGV4cHI7XHJcblx0ICAgICAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24pO1xyXG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5CaW5hcnlFeHByZXNzaW9uKCcqKicsIGxlZnQsIHJpZ2h0KSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZXhwcjtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZXhwLW9wZXJhdG9yXHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW11bHRpcGxpY2F0aXZlLW9wZXJhdG9yc1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZGRpdGl2ZS1vcGVyYXRvcnNcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYml0d2lzZS1zaGlmdC1vcGVyYXRvcnNcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVsYXRpb25hbC1vcGVyYXRvcnNcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZXF1YWxpdHktb3BlcmF0b3JzXHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWJpbmFyeS1iaXR3aXNlLW9wZXJhdG9yc1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1iaW5hcnktbG9naWNhbC1vcGVyYXRvcnNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5iaW5hcnlQcmVjZWRlbmNlID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcblx0ICAgICAgICB2YXIgb3AgPSB0b2tlbi52YWx1ZTtcclxuXHQgICAgICAgIHZhciBwcmVjZWRlbmNlO1xyXG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLykge1xyXG5cdCAgICAgICAgICAgIHByZWNlZGVuY2UgPSB0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZVtvcF0gfHwgMDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IDQgLyogS2V5d29yZCAqLykge1xyXG5cdCAgICAgICAgICAgIHByZWNlZGVuY2UgPSAob3AgPT09ICdpbnN0YW5jZW9mJyB8fCAodGhpcy5jb250ZXh0LmFsbG93SW4gJiYgb3AgPT09ICdpbicpKSA/IDcgOiAwO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgcHJlY2VkZW5jZSA9IDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gcHJlY2VkZW5jZTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUJpbmFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgc3RhcnRUb2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgdmFyIGV4cHIgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbik7XHJcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgIHZhciBwcmVjID0gdGhpcy5iaW5hcnlQcmVjZWRlbmNlKHRva2VuKTtcclxuXHQgICAgICAgIGlmIChwcmVjID4gMCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBbc3RhcnRUb2tlbiwgdGhpcy5sb29rYWhlYWRdO1xyXG5cdCAgICAgICAgICAgIHZhciBsZWZ0ID0gZXhwcjtcclxuXHQgICAgICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgdmFyIHN0YWNrID0gW2xlZnQsIHRva2VuLnZhbHVlLCByaWdodF07XHJcblx0ICAgICAgICAgICAgdmFyIHByZWNlZGVuY2VzID0gW3ByZWNdO1xyXG5cdCAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHByZWMgPSB0aGlzLmJpbmFyeVByZWNlZGVuY2UodGhpcy5sb29rYWhlYWQpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAocHJlYyA8PSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvLyBSZWR1Y2U6IG1ha2UgYSBiaW5hcnkgZXhwcmVzc2lvbiBmcm9tIHRoZSB0aHJlZSB0b3Btb3N0IGVudHJpZXMuXHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICgoc3RhY2subGVuZ3RoID4gMikgJiYgKHByZWMgPD0gcHJlY2VkZW5jZXNbcHJlY2VkZW5jZXMubGVuZ3RoIC0gMV0pKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByaWdodCA9IHN0YWNrLnBvcCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG9wZXJhdG9yID0gc3RhY2sucG9wKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmVjZWRlbmNlcy5wb3AoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBzdGFjay5wb3AoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1hcmtlcnMucG9wKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKG1hcmtlcnNbbWFya2Vycy5sZW5ndGggLSAxXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQmluYXJ5RXhwcmVzc2lvbihvcGVyYXRvciwgbGVmdCwgcmlnaHQpKSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgLy8gU2hpZnQuXHJcblx0ICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5uZXh0VG9rZW4oKS52YWx1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIHByZWNlZGVuY2VzLnB1c2gocHJlYyk7XHJcblx0ICAgICAgICAgICAgICAgIG1hcmtlcnMucHVzaCh0aGlzLmxvb2thaGVhZCk7XHJcblx0ICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24pKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy8gRmluYWwgcmVkdWNlIHRvIGNsZWFuLXVwIHRoZSBzdGFjay5cclxuXHQgICAgICAgICAgICB2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7XHJcblx0ICAgICAgICAgICAgZXhwciA9IHN0YWNrW2ldO1xyXG5cdCAgICAgICAgICAgIG1hcmtlcnMucG9wKCk7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKGkgPiAxKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUobWFya2Vycy5wb3AoKSk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBvcGVyYXRvciA9IHN0YWNrW2kgLSAxXTtcclxuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQmluYXJ5RXhwcmVzc2lvbihvcGVyYXRvciwgc3RhY2tbaSAtIDJdLCBleHByKSk7XHJcblx0ICAgICAgICAgICAgICAgIGkgLT0gMjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZXhwcjtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY29uZGl0aW9uYWwtb3BlcmF0b3JcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBzdGFydFRva2VuID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICB2YXIgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQmluYXJ5RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnPycpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0luID0gdGhpcy5jb250ZXh0LmFsbG93SW47XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIHZhciBjb25zZXF1ZW50ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSBwcmV2aW91c0FsbG93SW47XHJcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3QoJzonKTtcclxuXHQgICAgICAgICAgICB2YXIgYWx0ZXJuYXRlID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoc3RhcnRUb2tlbiksIG5ldyBOb2RlLkNvbmRpdGlvbmFsRXhwcmVzc2lvbihleHByLCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpKTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBleHByO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hc3NpZ25tZW50LW9wZXJhdG9yc1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmNoZWNrUGF0dGVyblBhcmFtID0gZnVuY3Rpb24gKG9wdGlvbnMsIHBhcmFtKSB7XHJcblx0ICAgICAgICBzd2l0Y2ggKHBhcmFtLnR5cGUpIHtcclxuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyOlxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlUGFyYW0ob3B0aW9ucywgcGFyYW0sIHBhcmFtLm5hbWUpO1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5SZXN0RWxlbWVudDpcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jaGVja1BhdHRlcm5QYXJhbShvcHRpb25zLCBwYXJhbS5hcmd1bWVudCk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuOlxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUGF0dGVyblBhcmFtKG9wdGlvbnMsIHBhcmFtLmxlZnQpO1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5BcnJheVBhdHRlcm46XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW0uZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbS5lbGVtZW50c1tpXSAhPT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuUGFyYW0ob3B0aW9ucywgcGFyYW0uZWxlbWVudHNbaV0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4Lk9iamVjdFBhdHRlcm46XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW0ucHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1BhdHRlcm5QYXJhbShvcHRpb25zLCBwYXJhbS5wcm9wZXJ0aWVzW2ldLnZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIG9wdGlvbnMuc2ltcGxlID0gb3B0aW9ucy5zaW1wbGUgJiYgKHBhcmFtIGluc3RhbmNlb2YgTm9kZS5JZGVudGlmaWVyKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5yZWludGVycHJldEFzQ292ZXJGb3JtYWxzTGlzdCA9IGZ1bmN0aW9uIChleHByKSB7XHJcblx0ICAgICAgICB2YXIgcGFyYW1zID0gW2V4cHJdO1xyXG5cdCAgICAgICAgdmFyIG9wdGlvbnM7XHJcblx0ICAgICAgICB2YXIgYXN5bmNBcnJvdyA9IGZhbHNlO1xyXG5cdCAgICAgICAgc3dpdGNoIChleHByLnR5cGUpIHtcclxuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyOlxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlIEFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXI6XHJcblx0ICAgICAgICAgICAgICAgIHBhcmFtcyA9IGV4cHIucGFyYW1zO1xyXG5cdCAgICAgICAgICAgICAgICBhc3luY0Fycm93ID0gZXhwci5hc3luYztcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBvcHRpb25zID0ge1xyXG5cdCAgICAgICAgICAgIHNpbXBsZTogdHJ1ZSxcclxuXHQgICAgICAgICAgICBwYXJhbVNldDoge31cclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7ICsraSkge1xyXG5cdCAgICAgICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1tpXTtcclxuXHQgICAgICAgICAgICBpZiAocGFyYW0udHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChwYXJhbS5yaWdodC50eXBlID09PSBzeW50YXhfMS5TeW50YXguWWllbGRFeHByZXNzaW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW0ucmlnaHQuYXJndW1lbnQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHBhcmFtLnJpZ2h0LnR5cGUgPSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllcjtcclxuXHQgICAgICAgICAgICAgICAgICAgIHBhcmFtLnJpZ2h0Lm5hbWUgPSAneWllbGQnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFtLnJpZ2h0LmFyZ3VtZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFtLnJpZ2h0LmRlbGVnYXRlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGFzeW5jQXJyb3cgJiYgcGFyYW0udHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIgJiYgcGFyYW0ubmFtZSA9PT0gJ2F3YWl0Jykge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5jaGVja1BhdHRlcm5QYXJhbShvcHRpb25zLCBwYXJhbSk7XHJcblx0ICAgICAgICAgICAgcGFyYW1zW2ldID0gcGFyYW07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCB8fCAhdGhpcy5jb250ZXh0LmFsbG93WWllbGQpIHtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7ICsraSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbaV07XHJcblx0ICAgICAgICAgICAgICAgIGlmIChwYXJhbS50eXBlID09PSBzeW50YXhfMS5TeW50YXguWWllbGRFeHByZXNzaW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UGFyYW1EdXBlKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5jb250ZXh0LnN0cmljdCA/IG9wdGlvbnMuc3RyaWN0ZWQgOiBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZDtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuLCBvcHRpb25zLm1lc3NhZ2UpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICBzaW1wbGU6IG9wdGlvbnMuc2ltcGxlLFxyXG5cdCAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxyXG5cdCAgICAgICAgICAgIHN0cmljdGVkOiBvcHRpb25zLnN0cmljdGVkLFxyXG5cdCAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZDogb3B0aW9ucy5maXJzdFJlc3RyaWN0ZWQsXHJcblx0ICAgICAgICAgICAgbWVzc2FnZTogb3B0aW9ucy5tZXNzYWdlXHJcblx0ICAgICAgICB9O1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgZXhwcjtcclxuXHQgICAgICAgIGlmICghdGhpcy5jb250ZXh0LmFsbG93WWllbGQgJiYgdGhpcy5tYXRjaEtleXdvcmQoJ3lpZWxkJykpIHtcclxuXHQgICAgICAgICAgICBleHByID0gdGhpcy5wYXJzZVlpZWxkRXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgICAgICB2YXIgdG9rZW4gPSBzdGFydFRva2VuO1xyXG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLyAmJiAodG9rZW4ubGluZU51bWJlciA9PT0gdGhpcy5sb29rYWhlYWQubGluZU51bWJlcikgJiYgdG9rZW4udmFsdWUgPT09ICdhc3luYycpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLyB8fCB0aGlzLm1hdGNoS2V5d29yZCgneWllbGQnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IHRoaXMucGFyc2VQcmltYXJ5RXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oYXJnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFthcmddLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlXHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChleHByLnR5cGUgPT09IEFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXIgfHwgdGhpcy5tYXRjaCgnPT4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJvdy1mdW5jdGlvbi1kZWZpbml0aW9uc1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBpc0FzeW5jID0gZXhwci5hc3luYztcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLnJlaW50ZXJwcmV0QXNDb3ZlckZvcm1hbHNMaXN0KGV4cHIpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobGlzdCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzU3RyaWN0ID0gdGhpcy5jb250ZXh0LnN0cmljdDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c0FsbG93U3RyaWN0RGlyZWN0aXZlID0gdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gbGlzdC5zaW1wbGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1lpZWxkID0gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNBd2FpdCA9IHRoaXMuY29udGV4dC5hd2FpdDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IGlzQXN5bmM7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJz0+Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IHZvaWQgMDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCd7JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0luID0gdGhpcy5jb250ZXh0LmFsbG93SW47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLnBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBib2R5LnR5cGUgIT09IHN5bnRheF8xLlN5bnRheC5CbG9ja1N0YXRlbWVudDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGxpc3QuZmlyc3RSZXN0cmljdGVkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihsaXN0LmZpcnN0UmVzdHJpY3RlZCwgbGlzdC5tZXNzYWdlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGxpc3Quc3RyaWN0ZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGxpc3Quc3RyaWN0ZWQsIGxpc3QubWVzc2FnZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBleHByID0gaXNBc3luYyA/IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXN5bmNBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbihsaXN0LnBhcmFtcywgYm9keSwgZXhwcmVzc2lvbikpIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkFycm93RnVuY3Rpb25FeHByZXNzaW9uKGxpc3QucGFyYW1zLCBib2R5LCBleHByZXNzaW9uKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmUgPSBwcmV2aW91c0FsbG93U3RyaWN0RGlyZWN0aXZlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBwcmV2aW91c0FsbG93WWllbGQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYXdhaXQgPSBwcmV2aW91c0F3YWl0O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaEFzc2lnbigpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkTEhTSW5Bc3NpZ25tZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGV4cHIudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBleHByO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChpZC5uYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdExIU0Fzc2lnbm1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChpZC5uYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCc9JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGV4cHIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG9wZXJhdG9yID0gdG9rZW4udmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5Bc3NpZ25tZW50RXhwcmVzc2lvbihvcGVyYXRvciwgZXhwciwgcmlnaHQpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNvbW1hLW9wZXJhdG9yXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgIHZhciBleHByID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnLCcpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGV4cHJlc3Npb25zID0gW107XHJcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHByKTtcclxuXHQgICAgICAgICAgICB3aGlsZSAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcsJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2godGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbikpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKSwgbmV3IE5vZGUuU2VxdWVuY2VFeHByZXNzaW9uKGV4cHJlc3Npb25zKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZXhwcjtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYmxvY2tcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVN0YXRlbWVudExpc3RJdGVtID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXRlbWVudDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSB0cnVlO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSB0cnVlO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDQgLyogS2V5d29yZCAqLykge1xyXG5cdCAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sb29rYWhlYWQudmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnZXhwb3J0JzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0LmlzTW9kdWxlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCwgbWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsRXhwb3J0RGVjbGFyYXRpb24pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUV4cG9ydERlY2xhcmF0aW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnaW1wb3J0JzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0LmlzTW9kdWxlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCwgbWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb24pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUltcG9ydERlY2xhcmF0aW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnY29uc3QnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUxleGljYWxEZWNsYXJhdGlvbih7IGluRm9yOiBmYWxzZSB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2NsYXNzJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VDbGFzc0RlY2xhcmF0aW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnbGV0JzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMuaXNMZXhpY2FsRGVjbGFyYXRpb24oKSA/IHRoaXMucGFyc2VMZXhpY2FsRGVjbGFyYXRpb24oeyBpbkZvcjogZmFsc2UgfSkgOiB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBzdGF0ZW1lbnQ7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VCbG9jayA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgneycpO1xyXG5cdCAgICAgICAgdmFyIGJsb2NrID0gW107XHJcblx0ICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCd9JykpIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGJsb2NrLnB1c2godGhpcy5wYXJzZVN0YXRlbWVudExpc3RJdGVtKCkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ30nKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkJsb2NrU3RhdGVtZW50KGJsb2NrKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWxldC1hbmQtY29uc3QtZGVjbGFyYXRpb25zXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VMZXhpY2FsQmluZGluZyA9IGZ1bmN0aW9uIChraW5kLCBvcHRpb25zKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG5cdCAgICAgICAgdmFyIGlkID0gdGhpcy5wYXJzZVBhdHRlcm4ocGFyYW1zLCBraW5kKTtcclxuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGlkLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGlkLm5hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFZhck5hbWUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBpbml0ID0gbnVsbDtcclxuXHQgICAgICAgIGlmIChraW5kID09PSAnY29uc3QnKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoS2V5d29yZCgnaW4nKSAmJiAhdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdvZicpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCc9JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5EZWNsYXJhdGlvbk1pc3NpbmdJbml0aWFsaXplciwgJ2NvbnN0Jyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIGlmICgoIW9wdGlvbnMuaW5Gb3IgJiYgaWQudHlwZSAhPT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIpIHx8IHRoaXMubWF0Y2goJz0nKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc9Jyk7XHJcblx0ICAgICAgICAgICAgaW5pdCA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVmFyaWFibGVEZWNsYXJhdG9yKGlkLCBpbml0KSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VCaW5kaW5nTGlzdCA9IGZ1bmN0aW9uIChraW5kLCBvcHRpb25zKSB7XHJcblx0ICAgICAgICB2YXIgbGlzdCA9IFt0aGlzLnBhcnNlTGV4aWNhbEJpbmRpbmcoa2luZCwgb3B0aW9ucyldO1xyXG5cdCAgICAgICAgd2hpbGUgKHRoaXMubWF0Y2goJywnKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgbGlzdC5wdXNoKHRoaXMucGFyc2VMZXhpY2FsQmluZGluZyhraW5kLCBvcHRpb25zKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gbGlzdDtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5pc0xleGljYWxEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc2Nhbm5lci5zYXZlU3RhdGUoKTtcclxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcclxuXHQgICAgICAgIHZhciBuZXh0ID0gdGhpcy5zY2FubmVyLmxleCgpO1xyXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnJlc3RvcmVTdGF0ZShzdGF0ZSk7XHJcblx0ICAgICAgICByZXR1cm4gKG5leHQudHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB8fFxyXG5cdCAgICAgICAgICAgIChuZXh0LnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLyAmJiBuZXh0LnZhbHVlID09PSAnWycpIHx8XHJcblx0ICAgICAgICAgICAgKG5leHQudHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIG5leHQudmFsdWUgPT09ICd7JykgfHxcclxuXHQgICAgICAgICAgICAobmV4dC50eXBlID09PSA0IC8qIEtleXdvcmQgKi8gJiYgbmV4dC52YWx1ZSA9PT0gJ2xldCcpIHx8XHJcblx0ICAgICAgICAgICAgKG5leHQudHlwZSA9PT0gNCAvKiBLZXl3b3JkICovICYmIG5leHQudmFsdWUgPT09ICd5aWVsZCcpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlTGV4aWNhbERlY2xhcmF0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIga2luZCA9IHRoaXMubmV4dFRva2VuKCkudmFsdWU7XHJcblx0ICAgICAgICBhc3NlcnRfMS5hc3NlcnQoa2luZCA9PT0gJ2xldCcgfHwga2luZCA9PT0gJ2NvbnN0JywgJ0xleGljYWwgZGVjbGFyYXRpb24gbXVzdCBiZSBlaXRoZXIgbGV0IG9yIGNvbnN0Jyk7XHJcblx0ICAgICAgICB2YXIgZGVjbGFyYXRpb25zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KGtpbmQsIG9wdGlvbnMpO1xyXG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywga2luZCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kZXN0cnVjdHVyaW5nLWJpbmRpbmctcGF0dGVybnNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUJpbmRpbmdSZXN0RWxlbWVudCA9IGZ1bmN0aW9uIChwYXJhbXMsIGtpbmQpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnLi4uJyk7XHJcblx0ICAgICAgICB2YXIgYXJnID0gdGhpcy5wYXJzZVBhdHRlcm4ocGFyYW1zLCBraW5kKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlJlc3RFbGVtZW50KGFyZykpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQXJyYXlQYXR0ZXJuID0gZnVuY3Rpb24gKHBhcmFtcywga2luZCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCdbJyk7XHJcblx0ICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnXScpKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJywnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKG51bGwpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJy4uLicpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHRoaXMucGFyc2VCaW5kaW5nUmVzdEVsZW1lbnQocGFyYW1zLCBraW5kKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy5wYXJzZVBhdHRlcm5XaXRoRGVmYXVsdChwYXJhbXMsIGtpbmQpKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJ10nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJywnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCddJyk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5BcnJheVBhdHRlcm4oZWxlbWVudHMpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVByb3BlcnR5UGF0dGVybiA9IGZ1bmN0aW9uIChwYXJhbXMsIGtpbmQpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgY29tcHV0ZWQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBzaG9ydGhhbmQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBtZXRob2QgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBrZXk7XHJcblx0ICAgICAgICB2YXIgdmFsdWU7XHJcblx0ICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGtleVRva2VuID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICAgICAga2V5ID0gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgICAgIHZhciBpbml0ID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JZGVudGlmaWVyKGtleVRva2VuLnZhbHVlKSk7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJz0nKSkge1xyXG5cdCAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChrZXlUb2tlbik7XHJcblx0ICAgICAgICAgICAgICAgIHNob3J0aGFuZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBleHByID0gdGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShrZXlUb2tlbiksIG5ldyBOb2RlLkFzc2lnbm1lbnRQYXR0ZXJuKGluaXQsIGV4cHIpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMubWF0Y2goJzonKSkge1xyXG5cdCAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChrZXlUb2tlbik7XHJcblx0ICAgICAgICAgICAgICAgIHNob3J0aGFuZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gaW5pdDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc6Jyk7XHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZVBhdHRlcm5XaXRoRGVmYXVsdChwYXJhbXMsIGtpbmQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xyXG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc6Jyk7XHJcblx0ICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlUGF0dGVybldpdGhEZWZhdWx0KHBhcmFtcywga2luZCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5Qcm9wZXJ0eSgnaW5pdCcsIGtleSwgY29tcHV0ZWQsIHZhbHVlLCBtZXRob2QsIHNob3J0aGFuZCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlT2JqZWN0UGF0dGVybiA9IGZ1bmN0aW9uIChwYXJhbXMsIGtpbmQpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnfScpKSB7XHJcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5wdXNoKHRoaXMucGFyc2VQcm9wZXJ0eVBhdHRlcm4ocGFyYW1zLCBraW5kKSk7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCd9JykpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJywnKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnfScpO1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuT2JqZWN0UGF0dGVybihwcm9wZXJ0aWVzKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VQYXR0ZXJuID0gZnVuY3Rpb24gKHBhcmFtcywga2luZCkge1xyXG5cdCAgICAgICAgdmFyIHBhdHRlcm47XHJcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnWycpKSB7XHJcblx0ICAgICAgICAgICAgcGF0dGVybiA9IHRoaXMucGFyc2VBcnJheVBhdHRlcm4ocGFyYW1zLCBraW5kKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJ3snKSkge1xyXG5cdCAgICAgICAgICAgIHBhdHRlcm4gPSB0aGlzLnBhcnNlT2JqZWN0UGF0dGVybihwYXJhbXMsIGtpbmQpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdsZXQnKSAmJiAoa2luZCA9PT0gJ2NvbnN0JyB8fCBraW5kID09PSAnbGV0JykpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCwgbWVzc2FnZXNfMS5NZXNzYWdlcy5MZXRJbkxleGljYWxCaW5kaW5nKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcGFyYW1zLnB1c2godGhpcy5sb29rYWhlYWQpO1xyXG5cdCAgICAgICAgICAgIHBhdHRlcm4gPSB0aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKGtpbmQpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHBhdHRlcm47XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQgPSBmdW5jdGlvbiAocGFyYW1zLCBraW5kKSB7XHJcblx0ICAgICAgICB2YXIgc3RhcnRUb2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgdmFyIHBhdHRlcm4gPSB0aGlzLnBhcnNlUGF0dGVybihwYXJhbXMsIGtpbmQpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJz0nKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dZaWVsZCA9IHRoaXMuY29udGV4dC5hbGxvd1lpZWxkO1xyXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcclxuXHQgICAgICAgICAgICBwYXR0ZXJuID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKSwgbmV3IE5vZGUuQXNzaWdubWVudFBhdHRlcm4ocGF0dGVybiwgcmlnaHQpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBwYXR0ZXJuO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy12YXJpYWJsZS1zdGF0ZW1lbnRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVZhcmlhYmxlSWRlbnRpZmllciA9IGZ1bmN0aW9uIChraW5kKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSA0IC8qIEtleXdvcmQgKi8gJiYgdG9rZW4udmFsdWUgPT09ICd5aWVsZCcpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlICE9PSAzIC8qIElkZW50aWZpZXIgKi8pIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiB0b2tlbi50eXBlID09PSA0IC8qIEtleXdvcmQgKi8gJiYgdGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZCh0b2tlbi52YWx1ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgfHwgdG9rZW4udmFsdWUgIT09ICdsZXQnIHx8IGtpbmQgIT09ICd2YXInKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2UgaWYgKCh0aGlzLmNvbnRleHQuaXNNb2R1bGUgfHwgdGhpcy5jb250ZXh0LmF3YWl0KSAmJiB0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgdG9rZW4udmFsdWUgPT09ICdhd2FpdCcpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLklkZW50aWZpZXIodG9rZW4udmFsdWUpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVZhcmlhYmxlRGVjbGFyYXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBwYXJhbXMgPSBbXTtcclxuXHQgICAgICAgIHZhciBpZCA9IHRoaXMucGFyc2VQYXR0ZXJuKHBhcmFtcywgJ3ZhcicpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgaWQudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoaWQubmFtZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0VmFyTmFtZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGluaXQgPSBudWxsO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJz0nKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgaW5pdCA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAoaWQudHlwZSAhPT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIgJiYgIW9wdGlvbnMuaW5Gb3IpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnPScpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVmFyaWFibGVEZWNsYXJhdG9yKGlkLCBpbml0KSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0ICAgICAgICB2YXIgb3B0ID0geyBpbkZvcjogb3B0aW9ucy5pbkZvciB9O1xyXG5cdCAgICAgICAgdmFyIGxpc3QgPSBbXTtcclxuXHQgICAgICAgIGxpc3QucHVzaCh0aGlzLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbihvcHQpKTtcclxuXHQgICAgICAgIHdoaWxlICh0aGlzLm1hdGNoKCcsJykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIGxpc3QucHVzaCh0aGlzLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbihvcHQpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBsaXN0O1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVmFyaWFibGVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCd2YXInKTtcclxuXHQgICAgICAgIHZhciBkZWNsYXJhdGlvbnMgPSB0aGlzLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QoeyBpbkZvcjogZmFsc2UgfSk7XHJcblx0ICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlZhcmlhYmxlRGVjbGFyYXRpb24oZGVjbGFyYXRpb25zLCAndmFyJykpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lbXB0eS1zdGF0ZW1lbnRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUVtcHR5U3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCc7Jyk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5FbXB0eVN0YXRlbWVudCgpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZXhwcmVzc2lvbi1zdGF0ZW1lbnRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5FeHByZXNzaW9uU3RhdGVtZW50KGV4cHIpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaWYtc3RhdGVtZW50XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VJZkNsYXVzZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHRoaXMubWF0Y2hLZXl3b3JkKCdmdW5jdGlvbicpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0RnVuY3Rpb24pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTdGF0ZW1lbnQoKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUlmU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBjb25zZXF1ZW50O1xyXG5cdCAgICAgICAgdmFyIGFsdGVybmF0ZSA9IG51bGw7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2lmJyk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKCcpO1xyXG5cdCAgICAgICAgdmFyIHRlc3QgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykgJiYgdGhpcy5jb25maWcudG9sZXJhbnQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xyXG5cdCAgICAgICAgICAgIGNvbnNlcXVlbnQgPSB0aGlzLmZpbmFsaXplKHRoaXMuY3JlYXRlTm9kZSgpLCBuZXcgTm9kZS5FbXB0eVN0YXRlbWVudCgpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XHJcblx0ICAgICAgICAgICAgY29uc2VxdWVudCA9IHRoaXMucGFyc2VJZkNsYXVzZSgpO1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnZWxzZScpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgIGFsdGVybmF0ZSA9IHRoaXMucGFyc2VJZkNsYXVzZSgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLklmU3RhdGVtZW50KHRlc3QsIGNvbnNlcXVlbnQsIGFsdGVybmF0ZSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kby13aGlsZS1zdGF0ZW1lbnRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZURvV2hpbGVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdkbycpO1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzSW5JdGVyYXRpb24gPSB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb247XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb24gPSB0cnVlO1xyXG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb24gPSBwcmV2aW91c0luSXRlcmF0aW9uO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCd3aGlsZScpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcclxuXHQgICAgICAgIHZhciB0ZXN0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpICYmIHRoaXMuY29uZmlnLnRvbGVyYW50KSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJzsnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkRvV2hpbGVTdGF0ZW1lbnQoYm9keSwgdGVzdCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy13aGlsZS1zdGF0ZW1lbnRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVdoaWxlU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBib2R5O1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCd3aGlsZScpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcclxuXHQgICAgICAgIHZhciB0ZXN0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpICYmIHRoaXMuY29uZmlnLnRvbGVyYW50KSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtcclxuXHQgICAgICAgICAgICBib2R5ID0gdGhpcy5maW5hbGl6ZSh0aGlzLmNyZWF0ZU5vZGUoKSwgbmV3IE5vZGUuRW1wdHlTdGF0ZW1lbnQoKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xyXG5cdCAgICAgICAgICAgIHZhciBwcmV2aW91c0luSXRlcmF0aW9uID0gdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uO1xyXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiA9IHRydWU7XHJcblx0ICAgICAgICAgICAgYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb24gPSBwcmV2aW91c0luSXRlcmF0aW9uO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuV2hpbGVTdGF0ZW1lbnQodGVzdCwgYm9keSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1mb3Itc3RhdGVtZW50XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZvci1pbi1hbmQtZm9yLW9mLXN0YXRlbWVudHNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZvclN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBpbml0ID0gbnVsbDtcclxuXHQgICAgICAgIHZhciB0ZXN0ID0gbnVsbDtcclxuXHQgICAgICAgIHZhciB1cGRhdGUgPSBudWxsO1xyXG5cdCAgICAgICAgdmFyIGZvckluID0gdHJ1ZTtcclxuXHQgICAgICAgIHZhciBsZWZ0LCByaWdodDtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2ZvcicpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCc7JykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCd2YXInKSkge1xyXG5cdCAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c0FsbG93SW4gPSB0aGlzLmNvbnRleHQuYWxsb3dJbjtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGRlY2xhcmF0aW9ucyA9IHRoaXMucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCh7IGluRm9yOiB0cnVlIH0pO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dJbiA9IHByZXZpb3VzQWxsb3dJbjtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgJiYgdGhpcy5tYXRjaEtleXdvcmQoJ2luJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBkZWNsID0gZGVjbGFyYXRpb25zWzBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2wuaW5pdCAmJiAoZGVjbC5pZC50eXBlID09PSBzeW50YXhfMS5TeW50YXguQXJyYXlQYXR0ZXJuIHx8IGRlY2wuaWQudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4Lk9iamVjdFBhdHRlcm4gfHwgdGhpcy5jb250ZXh0LnN0cmljdCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5Gb3JJbk9mTG9vcEluaXRpYWxpemVyLCAnZm9yLWluJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5maW5hbGl6ZShpbml0LCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywgJ3ZhcicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGluaXQgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgJiYgZGVjbGFyYXRpb25zWzBdLmluaXQgPT09IG51bGwgJiYgdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdvZicpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5maW5hbGl6ZShpbml0LCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywgJ3ZhcicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvckluID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5maW5hbGl6ZShpbml0LCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywgJ3ZhcicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc7Jyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2NvbnN0JykgfHwgdGhpcy5tYXRjaEtleXdvcmQoJ2xldCcpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGluaXQgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGtpbmQgPSB0aGlzLm5leHRUb2tlbigpLnZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5zdHJpY3QgJiYgdGhpcy5sb29rYWhlYWQudmFsdWUgPT09ICdpbicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGluaXQgPSB0aGlzLmZpbmFsaXplKGluaXQsIG5ldyBOb2RlLklkZW50aWZpZXIoa2luZCkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpbml0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0luID0gdGhpcy5jb250ZXh0LmFsbG93SW47XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dJbiA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2xhcmF0aW9ucyA9IHRoaXMucGFyc2VCaW5kaW5nTGlzdChraW5kLCB7IGluRm9yOiB0cnVlIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSBwcmV2aW91c0FsbG93SW47XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMSAmJiBkZWNsYXJhdGlvbnNbMF0uaW5pdCA9PT0gbnVsbCAmJiB0aGlzLm1hdGNoS2V5d29yZCgnaW4nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluaXQgPSB0aGlzLmZpbmFsaXplKGluaXQsIG5ldyBOb2RlLlZhcmlhYmxlRGVjbGFyYXRpb24oZGVjbGFyYXRpb25zLCBraW5kKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkZWNsYXJhdGlvbnMubGVuZ3RoID09PSAxICYmIGRlY2xhcmF0aW9uc1swXS5pbml0ID09PSBudWxsICYmIHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnb2YnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluaXQgPSB0aGlzLmZpbmFsaXplKGluaXQsIG5ldyBOb2RlLlZhcmlhYmxlRGVjbGFyYXRpb24oZGVjbGFyYXRpb25zLCBraW5kKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluaXQgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvckluID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5maW5hbGl6ZShpbml0LCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywga2luZCkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaW5pdFN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dJbiA9IHRoaXMuY29udGV4dC5hbGxvd0luO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dJbiA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2luJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCB8fCBpbml0LnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5Bc3NpZ25tZW50RXhwcmVzc2lvbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLkludmFsaWRMSFNJbkZvckluKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihpbml0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpbml0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdvZicpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgfHwgaW5pdC50eXBlID09PSBzeW50YXhfMS5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb24pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkTEhTSW5Gb3JMb29wKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihpbml0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpbml0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGluaXQgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9ySW4gPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcsJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdFNlcSA9IFtpbml0XTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5tYXRjaCgnLCcpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRTZXEucHVzaCh0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluaXQgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKGluaXRTdGFydFRva2VuKSwgbmV3IE5vZGUuU2VxdWVuY2VFeHByZXNzaW9uKGluaXRTZXEpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc7Jyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodHlwZW9mIGxlZnQgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCc7JykpIHtcclxuXHQgICAgICAgICAgICAgICAgdGVzdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc7Jyk7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykpIHtcclxuXHQgICAgICAgICAgICAgICAgdXBkYXRlID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgYm9keTtcclxuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpICYmIHRoaXMuY29uZmlnLnRvbGVyYW50KSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtcclxuXHQgICAgICAgICAgICBib2R5ID0gdGhpcy5maW5hbGl6ZSh0aGlzLmNyZWF0ZU5vZGUoKSwgbmV3IE5vZGUuRW1wdHlTdGF0ZW1lbnQoKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xyXG5cdCAgICAgICAgICAgIHZhciBwcmV2aW91c0luSXRlcmF0aW9uID0gdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uO1xyXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiA9IHRydWU7XHJcblx0ICAgICAgICAgICAgYm9keSA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlU3RhdGVtZW50KTtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb24gPSBwcmV2aW91c0luSXRlcmF0aW9uO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpID9cclxuXHQgICAgICAgICAgICB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZvclN0YXRlbWVudChpbml0LCB0ZXN0LCB1cGRhdGUsIGJvZHkpKSA6XHJcblx0ICAgICAgICAgICAgZm9ySW4gPyB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZvckluU3RhdGVtZW50KGxlZnQsIHJpZ2h0LCBib2R5KSkgOlxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZvck9mU3RhdGVtZW50KGxlZnQsIHJpZ2h0LCBib2R5KSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNvbnRpbnVlLXN0YXRlbWVudFxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ29udGludWVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdjb250aW51ZScpO1xyXG5cdCAgICAgICAgdmFyIGxhYmVsID0gbnVsbDtcclxuXHQgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcclxuXHQgICAgICAgICAgICB2YXIgaWQgPSB0aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XHJcblx0ICAgICAgICAgICAgbGFiZWwgPSBpZDtcclxuXHQgICAgICAgICAgICB2YXIga2V5ID0gJyQnICsgaWQubmFtZTtcclxuXHQgICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNvbnRleHQubGFiZWxTZXQsIGtleSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5rbm93bkxhYmVsLCBpZC5uYW1lKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcclxuXHQgICAgICAgIGlmIChsYWJlbCA9PT0gbnVsbCAmJiAhdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuSWxsZWdhbENvbnRpbnVlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkNvbnRpbnVlU3RhdGVtZW50KGxhYmVsKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWJyZWFrLXN0YXRlbWVudFxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQnJlYWtTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdicmVhaycpO1xyXG5cdCAgICAgICAgdmFyIGxhYmVsID0gbnVsbDtcclxuXHQgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcclxuXHQgICAgICAgICAgICB2YXIgaWQgPSB0aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XHJcblx0ICAgICAgICAgICAgdmFyIGtleSA9ICckJyArIGlkLm5hbWU7XHJcblx0ICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb250ZXh0LmxhYmVsU2V0LCBrZXkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlVua25vd25MYWJlbCwgaWQubmFtZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGxhYmVsID0gaWQ7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcclxuXHQgICAgICAgIGlmIChsYWJlbCA9PT0gbnVsbCAmJiAhdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uICYmICF0aGlzLmNvbnRleHQuaW5Td2l0Y2gpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsQnJlYWspO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQnJlYWtTdGF0ZW1lbnQobGFiZWwpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmV0dXJuLXN0YXRlbWVudFxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlUmV0dXJuU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsUmV0dXJuKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3JldHVybicpO1xyXG5cdCAgICAgICAgdmFyIGhhc0FyZ3VtZW50ID0gIXRoaXMubWF0Y2goJzsnKSAmJiAhdGhpcy5tYXRjaCgnfScpICYmXHJcblx0ICAgICAgICAgICAgIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IgJiYgdGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi87XHJcblx0ICAgICAgICB2YXIgYXJndW1lbnQgPSBoYXNBcmd1bWVudCA/IHRoaXMucGFyc2VFeHByZXNzaW9uKCkgOiBudWxsO1xyXG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5SZXR1cm5TdGF0ZW1lbnQoYXJndW1lbnQpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtd2l0aC1zdGF0ZW1lbnRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVdpdGhTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdE1vZGVXaXRoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgYm9keTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnd2l0aCcpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcclxuXHQgICAgICAgIHZhciBvYmplY3QgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykgJiYgdGhpcy5jb25maWcudG9sZXJhbnQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xyXG5cdCAgICAgICAgICAgIGJvZHkgPSB0aGlzLmZpbmFsaXplKHRoaXMuY3JlYXRlTm9kZSgpLCBuZXcgTm9kZS5FbXB0eVN0YXRlbWVudCgpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XHJcblx0ICAgICAgICAgICAgYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLldpdGhTdGF0ZW1lbnQob2JqZWN0LCBib2R5KSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN3aXRjaC1zdGF0ZW1lbnRcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVN3aXRjaENhc2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIHRlc3Q7XHJcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2RlZmF1bHQnKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgdGVzdCA9IG51bGw7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2Nhc2UnKTtcclxuXHQgICAgICAgICAgICB0ZXN0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCc6Jyk7XHJcblx0ICAgICAgICB2YXIgY29uc2VxdWVudCA9IFtdO1xyXG5cdCAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnfScpIHx8IHRoaXMubWF0Y2hLZXl3b3JkKCdkZWZhdWx0JykgfHwgdGhpcy5tYXRjaEtleXdvcmQoJ2Nhc2UnKSkge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgY29uc2VxdWVudC5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlN3aXRjaENhc2UodGVzdCwgY29uc2VxdWVudCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU3dpdGNoU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnc3dpdGNoJyk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKCcpO1xyXG5cdCAgICAgICAgdmFyIGRpc2NyaW1pbmFudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzSW5Td2l0Y2ggPSB0aGlzLmNvbnRleHQuaW5Td2l0Y2g7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaW5Td2l0Y2ggPSB0cnVlO1xyXG5cdCAgICAgICAgdmFyIGNhc2VzID0gW107XHJcblx0ICAgICAgICB2YXIgZGVmYXVsdEZvdW5kID0gZmFsc2U7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgneycpO1xyXG5cdCAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnfScpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgY2xhdXNlID0gdGhpcy5wYXJzZVN3aXRjaENhc2UoKTtcclxuXHQgICAgICAgICAgICBpZiAoY2xhdXNlLnRlc3QgPT09IG51bGwpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRGb3VuZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuTXVsdGlwbGVEZWZhdWx0c0luU3dpdGNoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0Rm91bmQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBjYXNlcy5wdXNoKGNsYXVzZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnfScpO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluU3dpdGNoID0gcHJldmlvdXNJblN3aXRjaDtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlN3aXRjaFN0YXRlbWVudChkaXNjcmltaW5hbnQsIGNhc2VzKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWxhYmVsbGVkLXN0YXRlbWVudHNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUxhYmVsbGVkU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgIHZhciBzdGF0ZW1lbnQ7XHJcblx0ICAgICAgICBpZiAoKGV4cHIudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIpICYmIHRoaXMubWF0Y2goJzonKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgdmFyIGlkID0gZXhwcjtcclxuXHQgICAgICAgICAgICB2YXIga2V5ID0gJyQnICsgaWQubmFtZTtcclxuXHQgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29udGV4dC5sYWJlbFNldCwga2V5KSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5SZWRlY2xhcmF0aW9uLCAnTGFiZWwnLCBpZC5uYW1lKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxhYmVsU2V0W2tleV0gPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIHZhciBib2R5ID0gdm9pZCAwO1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnY2xhc3MnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICAgICAgYm9keSA9IHRoaXMucGFyc2VDbGFzc0RlY2xhcmF0aW9uKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdmdW5jdGlvbicpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbigpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVjbGFyYXRpb24uZ2VuZXJhdG9yKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLkdlbmVyYXRvckluTGVnYWN5Q29udGV4dCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgYm9keSA9IGRlY2xhcmF0aW9uO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC5sYWJlbFNldFtrZXldO1xyXG5cdCAgICAgICAgICAgIHN0YXRlbWVudCA9IG5ldyBOb2RlLkxhYmVsZWRTdGF0ZW1lbnQoaWQsIGJvZHkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICAgICAgc3RhdGVtZW50ID0gbmV3IE5vZGUuRXhwcmVzc2lvblN0YXRlbWVudChleHByKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIHN0YXRlbWVudCk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRocm93LXN0YXRlbWVudFxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVGhyb3dTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0aHJvdycpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5OZXdsaW5lQWZ0ZXJUaHJvdyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgYXJndW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xyXG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5UaHJvd1N0YXRlbWVudChhcmd1bWVudCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10cnktc3RhdGVtZW50XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VDYXRjaENsYXVzZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2NhdGNoJyk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKCcpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJyknKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG5cdCAgICAgICAgdmFyIHBhcmFtID0gdGhpcy5wYXJzZVBhdHRlcm4ocGFyYW1zKTtcclxuXHQgICAgICAgIHZhciBwYXJhbU1hcCA9IHt9O1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICB2YXIga2V5ID0gJyQnICsgcGFyYW1zW2ldLnZhbHVlO1xyXG5cdCAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyYW1NYXAsIGtleSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuRHVwbGljYXRlQmluZGluZywgcGFyYW1zW2ldLnZhbHVlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcGFyYW1NYXBba2V5XSA9IHRydWU7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBwYXJhbS50eXBlID09PSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllcikge1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChwYXJhbS5uYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RDYXRjaFZhcmlhYmxlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xyXG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLnBhcnNlQmxvY2soKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkNhdGNoQ2xhdXNlKHBhcmFtLCBib2R5KSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VGaW5hbGx5Q2xhdXNlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdmaW5hbGx5Jyk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUJsb2NrKCk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VUcnlTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0cnknKTtcclxuXHQgICAgICAgIHZhciBibG9jayA9IHRoaXMucGFyc2VCbG9jaygpO1xyXG5cdCAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLm1hdGNoS2V5d29yZCgnY2F0Y2gnKSA/IHRoaXMucGFyc2VDYXRjaENsYXVzZSgpIDogbnVsbDtcclxuXHQgICAgICAgIHZhciBmaW5hbGl6ZXIgPSB0aGlzLm1hdGNoS2V5d29yZCgnZmluYWxseScpID8gdGhpcy5wYXJzZUZpbmFsbHlDbGF1c2UoKSA6IG51bGw7XHJcblx0ICAgICAgICBpZiAoIWhhbmRsZXIgJiYgIWZpbmFsaXplcikge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLk5vQ2F0Y2hPckZpbmFsbHkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVHJ5U3RhdGVtZW50KGJsb2NrLCBoYW5kbGVyLCBmaW5hbGl6ZXIpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGVidWdnZXItc3RhdGVtZW50XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VEZWJ1Z2dlclN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2RlYnVnZ2VyJyk7XHJcblx0ICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkRlYnVnZ2VyU3RhdGVtZW50KCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXN0YXRlbWVudHMtYW5kLWRlY2xhcmF0aW9uc1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXRlbWVudDtcclxuXHQgICAgICAgIHN3aXRjaCAodGhpcy5sb29rYWhlYWQudHlwZSkge1xyXG5cdCAgICAgICAgICAgIGNhc2UgMSAvKiBCb29sZWFuTGl0ZXJhbCAqLzpcclxuXHQgICAgICAgICAgICBjYXNlIDUgLyogTnVsbExpdGVyYWwgKi86XHJcblx0ICAgICAgICAgICAgY2FzZSA2IC8qIE51bWVyaWNMaXRlcmFsICovOlxyXG5cdCAgICAgICAgICAgIGNhc2UgOCAvKiBTdHJpbmdMaXRlcmFsICovOlxyXG5cdCAgICAgICAgICAgIGNhc2UgMTAgLyogVGVtcGxhdGUgKi86XHJcblx0ICAgICAgICAgICAgY2FzZSA5IC8qIFJlZ3VsYXJFeHByZXNzaW9uICovOlxyXG5cdCAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlIDcgLyogUHVuY3R1YXRvciAqLzpcclxuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5sb29rYWhlYWQudmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ3snKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlQmxvY2soKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gJygnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSAnOycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VFbXB0eVN0YXRlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlIDMgLyogSWRlbnRpZmllciAqLzpcclxuXHQgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5tYXRjaEFzeW5jRnVuY3Rpb24oKSA/IHRoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCkgOiB0aGlzLnBhcnNlTGFiZWxsZWRTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSA0IC8qIEtleXdvcmQgKi86XHJcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sb29rYWhlYWQudmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JyZWFrJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlQnJlYWtTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnRpbnVlJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlQ29udGludWVTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlYnVnZ2VyJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RvJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRG9XaGlsZVN0YXRlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9yJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRm9yU3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lmJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlSWZTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JldHVybic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZVJldHVyblN0YXRlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3dpdGNoJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlU3dpdGNoU3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd0aHJvdyc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZVRocm93U3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd0cnknOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VUcnlTdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Zhcic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZVZhcmlhYmxlU3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd3aGlsZSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZVdoaWxlU3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd3aXRoJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlV2l0aFN0YXRlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHN0YXRlbWVudDtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24tZGVmaW5pdGlvbnNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZ1bmN0aW9uU291cmNlRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcclxuXHQgICAgICAgIHZhciBib2R5ID0gdGhpcy5wYXJzZURpcmVjdGl2ZVByb2xvZ3VlcygpO1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzTGFiZWxTZXQgPSB0aGlzLmNvbnRleHQubGFiZWxTZXQ7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNJbkl0ZXJhdGlvbiA9IHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbjtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c0luU3dpdGNoID0gdGhpcy5jb250ZXh0LmluU3dpdGNoO1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzSW5GdW5jdGlvbkJvZHkgPSB0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQubGFiZWxTZXQgPSB7fTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluU3dpdGNoID0gZmFsc2U7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkgPSB0cnVlO1xyXG5cdCAgICAgICAgd2hpbGUgKHRoaXMubG9va2FoZWFkLnR5cGUgIT09IDIgLyogRU9GICovKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJ30nKSkge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgYm9keS5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCd9Jyk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQubGFiZWxTZXQgPSBwcmV2aW91c0xhYmVsU2V0O1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uID0gcHJldmlvdXNJbkl0ZXJhdGlvbjtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5pblN3aXRjaCA9IHByZXZpb3VzSW5Td2l0Y2g7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkgPSBwcmV2aW91c0luRnVuY3Rpb25Cb2R5O1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQmxvY2tTdGF0ZW1lbnQoYm9keSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnZhbGlkYXRlUGFyYW0gPSBmdW5jdGlvbiAob3B0aW9ucywgcGFyYW0sIG5hbWUpIHtcclxuXHQgICAgICAgIHZhciBrZXkgPSAnJCcgKyBuYW1lO1xyXG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQobmFtZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgb3B0aW9ucy5zdHJpY3RlZCA9IHBhcmFtO1xyXG5cdCAgICAgICAgICAgICAgICBvcHRpb25zLm1lc3NhZ2UgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFBhcmFtTmFtZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLnBhcmFtU2V0LCBrZXkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0ZWQgPSBwYXJhbTtcclxuXHQgICAgICAgICAgICAgICAgb3B0aW9ucy5tZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RQYXJhbUR1cGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAoIW9wdGlvbnMuZmlyc3RSZXN0cmljdGVkKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKG5hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlyc3RSZXN0cmljdGVkID0gcGFyYW07XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UGFyYW1OYW1lO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKG5hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlyc3RSZXN0cmljdGVkID0gcGFyYW07XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucy5wYXJhbVNldCwga2V5KSkge1xyXG5cdCAgICAgICAgICAgICAgICBvcHRpb25zLnN0cmljdGVkID0gcGFyYW07XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UGFyYW1EdXBlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcblx0ICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdCAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRpb25zLnBhcmFtU2V0LCBrZXksIHsgdmFsdWU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBvcHRpb25zLnBhcmFtU2V0W2tleV0gPSB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlUmVzdEVsZW1lbnQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJy4uLicpO1xyXG5cdCAgICAgICAgdmFyIGFyZyA9IHRoaXMucGFyc2VQYXR0ZXJuKHBhcmFtcyk7XHJcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnPScpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuRGVmYXVsdFJlc3RQYXJhbWV0ZXIpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5QYXJhbWV0ZXJBZnRlclJlc3RQYXJhbWV0ZXIpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuUmVzdEVsZW1lbnQoYXJnKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VGb3JtYWxQYXJhbWV0ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG5cdCAgICAgICAgdmFyIHBhcmFtID0gdGhpcy5tYXRjaCgnLi4uJykgPyB0aGlzLnBhcnNlUmVzdEVsZW1lbnQocGFyYW1zKSA6IHRoaXMucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQocGFyYW1zKTtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVBhcmFtKG9wdGlvbnMsIHBhcmFtc1tpXSwgcGFyYW1zW2ldLnZhbHVlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIG9wdGlvbnMuc2ltcGxlID0gb3B0aW9ucy5zaW1wbGUgJiYgKHBhcmFtIGluc3RhbmNlb2YgTm9kZS5JZGVudGlmaWVyKTtcclxuXHQgICAgICAgIG9wdGlvbnMucGFyYW1zLnB1c2gocGFyYW0pO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRm9ybWFsUGFyYW1ldGVycyA9IGZ1bmN0aW9uIChmaXJzdFJlc3RyaWN0ZWQpIHtcclxuXHQgICAgICAgIHZhciBvcHRpb25zO1xyXG5cdCAgICAgICAgb3B0aW9ucyA9IHtcclxuXHQgICAgICAgICAgICBzaW1wbGU6IHRydWUsXHJcblx0ICAgICAgICAgICAgcGFyYW1zOiBbXSxcclxuXHQgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQ6IGZpcnN0UmVzdHJpY3RlZFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcoJyk7XHJcblx0ICAgICAgICBpZiAoIXRoaXMubWF0Y2goJyknKSkge1xyXG5cdCAgICAgICAgICAgIG9wdGlvbnMucGFyYW1TZXQgPSB7fTtcclxuXHQgICAgICAgICAgICB3aGlsZSAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcihvcHRpb25zKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJyknKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJywnKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJyknKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICBzaW1wbGU6IG9wdGlvbnMuc2ltcGxlLFxyXG5cdCAgICAgICAgICAgIHBhcmFtczogb3B0aW9ucy5wYXJhbXMsXHJcblx0ICAgICAgICAgICAgc3RyaWN0ZWQ6IG9wdGlvbnMuc3RyaWN0ZWQsXHJcblx0ICAgICAgICAgICAgZmlyc3RSZXN0cmljdGVkOiBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCxcclxuXHQgICAgICAgICAgICBtZXNzYWdlOiBvcHRpb25zLm1lc3NhZ2VcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUubWF0Y2hBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG1hdGNoID0gdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdhc3luYycpO1xyXG5cdCAgICAgICAgaWYgKG1hdGNoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zY2FubmVyLnNhdmVTdGF0ZSgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcclxuXHQgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMuc2Nhbm5lci5sZXgoKTtcclxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIucmVzdG9yZVN0YXRlKHN0YXRlKTtcclxuXHQgICAgICAgICAgICBtYXRjaCA9IChzdGF0ZS5saW5lTnVtYmVyID09PSBuZXh0LmxpbmVOdW1iZXIpICYmIChuZXh0LnR5cGUgPT09IDQgLyogS2V5d29yZCAqLykgJiYgKG5leHQudmFsdWUgPT09ICdmdW5jdGlvbicpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIG1hdGNoO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChpZGVudGlmaWVySXNPcHRpb25hbCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBpc0FzeW5jID0gdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdhc3luYycpO1xyXG5cdCAgICAgICAgaWYgKGlzQXN5bmMpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdmdW5jdGlvbicpO1xyXG5cdCAgICAgICAgdmFyIGlzR2VuZXJhdG9yID0gaXNBc3luYyA/IGZhbHNlIDogdGhpcy5tYXRjaCgnKicpO1xyXG5cdCAgICAgICAgaWYgKGlzR2VuZXJhdG9yKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBtZXNzYWdlO1xyXG5cdCAgICAgICAgdmFyIGlkID0gbnVsbDtcclxuXHQgICAgICAgIHZhciBmaXJzdFJlc3RyaWN0ZWQgPSBudWxsO1xyXG5cdCAgICAgICAgaWYgKCFpZGVudGlmaWVySXNPcHRpb25hbCB8fCAhdGhpcy5tYXRjaCgnKCcpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbk5hbWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQodG9rZW4udmFsdWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSB0b2tlbjtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZmlyc3RSZXN0cmljdGVkID0gdG9rZW47XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQ7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0F3YWl0ID0gdGhpcy5jb250ZXh0LmF3YWl0O1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dZaWVsZCA9IHRoaXMuY29udGV4dC5hbGxvd1lpZWxkO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmF3YWl0ID0gaXNBc3luYztcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gIWlzR2VuZXJhdG9yO1xyXG5cdCAgICAgICAgdmFyIGZvcm1hbFBhcmFtZXRlcnMgPSB0aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVycyhmaXJzdFJlc3RyaWN0ZWQpO1xyXG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IGZvcm1hbFBhcmFtZXRlcnMucGFyYW1zO1xyXG5cdCAgICAgICAgdmFyIHN0cmljdGVkID0gZm9ybWFsUGFyYW1ldGVycy5zdHJpY3RlZDtcclxuXHQgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IGZvcm1hbFBhcmFtZXRlcnMuZmlyc3RSZXN0cmljdGVkO1xyXG5cdCAgICAgICAgaWYgKGZvcm1hbFBhcmFtZXRlcnMubWVzc2FnZSkge1xyXG5cdCAgICAgICAgICAgIG1lc3NhZ2UgPSBmb3JtYWxQYXJhbWV0ZXJzLm1lc3NhZ2U7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNTdHJpY3QgPSB0aGlzLmNvbnRleHQuc3RyaWN0O1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dTdHJpY3REaXJlY3RpdmUgPSB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmUgPSBmb3JtYWxQYXJhbWV0ZXJzLnNpbXBsZTtcclxuXHQgICAgICAgIHZhciBib2R5ID0gdGhpcy5wYXJzZUZ1bmN0aW9uU291cmNlRWxlbWVudHMoKTtcclxuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGZpcnN0UmVzdHJpY3RlZCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oZmlyc3RSZXN0cmljdGVkLCBtZXNzYWdlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHN0cmljdGVkKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihzdHJpY3RlZCwgbWVzc2FnZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmUgPSBwcmV2aW91c0FsbG93U3RyaWN0RGlyZWN0aXZlO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmF3YWl0ID0gcHJldmlvdXNBbGxvd0F3YWl0O1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBwcmV2aW91c0FsbG93WWllbGQ7XHJcblx0ICAgICAgICByZXR1cm4gaXNBc3luYyA/IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uKGlkLCBwYXJhbXMsIGJvZHkpKSA6XHJcblx0ICAgICAgICAgICAgdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5GdW5jdGlvbkRlY2xhcmF0aW9uKGlkLCBwYXJhbXMsIGJvZHksIGlzR2VuZXJhdG9yKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VGdW5jdGlvbkV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIGlzQXN5bmMgPSB0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzeW5jJyk7XHJcblx0ICAgICAgICBpZiAoaXNBc3luYykge1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2Z1bmN0aW9uJyk7XHJcblx0ICAgICAgICB2YXIgaXNHZW5lcmF0b3IgPSBpc0FzeW5jID8gZmFsc2UgOiB0aGlzLm1hdGNoKCcqJyk7XHJcblx0ICAgICAgICBpZiAoaXNHZW5lcmF0b3IpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIG1lc3NhZ2U7XHJcblx0ICAgICAgICB2YXIgaWQgPSBudWxsO1xyXG5cdCAgICAgICAgdmFyIGZpcnN0UmVzdHJpY3RlZDtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93QXdhaXQgPSB0aGlzLmNvbnRleHQuYXdhaXQ7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1lpZWxkID0gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYXdhaXQgPSBpc0FzeW5jO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSAhaXNHZW5lcmF0b3I7XHJcblx0ICAgICAgICBpZiAoIXRoaXMubWF0Y2goJygnKSkge1xyXG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgICAgIGlkID0gKCF0aGlzLmNvbnRleHQuc3RyaWN0ICYmICFpc0dlbmVyYXRvciAmJiB0aGlzLm1hdGNoS2V5d29yZCgneWllbGQnKSkgPyB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKSA6IHRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQodG9rZW4udmFsdWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZCh0b2tlbi52YWx1ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IHRva2VuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0RnVuY3Rpb25OYW1lO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQodG9rZW4udmFsdWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSB0b2tlbjtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBmb3JtYWxQYXJhbWV0ZXJzID0gdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoZmlyc3RSZXN0cmljdGVkKTtcclxuXHQgICAgICAgIHZhciBwYXJhbXMgPSBmb3JtYWxQYXJhbWV0ZXJzLnBhcmFtcztcclxuXHQgICAgICAgIHZhciBzdHJpY3RlZCA9IGZvcm1hbFBhcmFtZXRlcnMuc3RyaWN0ZWQ7XHJcblx0ICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSBmb3JtYWxQYXJhbWV0ZXJzLmZpcnN0UmVzdHJpY3RlZDtcclxuXHQgICAgICAgIGlmIChmb3JtYWxQYXJhbWV0ZXJzLm1lc3NhZ2UpIHtcclxuXHQgICAgICAgICAgICBtZXNzYWdlID0gZm9ybWFsUGFyYW1ldGVycy5tZXNzYWdlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzU3RyaWN0ID0gdGhpcy5jb250ZXh0LnN0cmljdDtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93U3RyaWN0RGlyZWN0aXZlID0gdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gZm9ybWFsUGFyYW1ldGVycy5zaW1wbGU7XHJcblx0ICAgICAgICB2YXIgYm9keSA9IHRoaXMucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCk7XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBmaXJzdFJlc3RyaWN0ZWQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKGZpcnN0UmVzdHJpY3RlZCwgbWVzc2FnZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBzdHJpY3RlZCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oc3RyaWN0ZWQsIG1lc3NhZ2UpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LnN0cmljdCA9IHByZXZpb3VzU3RyaWN0O1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gcHJldmlvdXNBbGxvd1N0cmljdERpcmVjdGl2ZTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IHByZXZpb3VzQWxsb3dBd2FpdDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gcHJldmlvdXNBbGxvd1lpZWxkO1xyXG5cdCAgICAgICAgcmV0dXJuIGlzQXN5bmMgPyB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkFzeW5jRnVuY3Rpb25FeHByZXNzaW9uKGlkLCBwYXJhbXMsIGJvZHkpKSA6XHJcblx0ICAgICAgICAgICAgdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5GdW5jdGlvbkV4cHJlc3Npb24oaWQsIHBhcmFtcywgYm9keSwgaXNHZW5lcmF0b3IpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGlyZWN0aXZlLXByb2xvZ3Vlcy1hbmQtdGhlLXVzZS1zdHJpY3QtZGlyZWN0aXZlXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VEaXJlY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XHJcblx0ICAgICAgICB2YXIgZGlyZWN0aXZlID0gKGV4cHIudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LkxpdGVyYWwpID8gdGhpcy5nZXRUb2tlblJhdyh0b2tlbikuc2xpY2UoMSwgLTEpIDogbnVsbDtcclxuXHQgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgZGlyZWN0aXZlID8gbmV3IE5vZGUuRGlyZWN0aXZlKGV4cHIsIGRpcmVjdGl2ZSkgOiBuZXcgTm9kZS5FeHByZXNzaW9uU3RhdGVtZW50KGV4cHIpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZURpcmVjdGl2ZVByb2xvZ3VlcyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBmaXJzdFJlc3RyaWN0ZWQgPSBudWxsO1xyXG5cdCAgICAgICAgdmFyIGJvZHkgPSBbXTtcclxuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XHJcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IDggLyogU3RyaW5nTGl0ZXJhbCAqLykge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIHN0YXRlbWVudCA9IHRoaXMucGFyc2VEaXJlY3RpdmUoKTtcclxuXHQgICAgICAgICAgICBib2R5LnB1c2goc3RhdGVtZW50KTtcclxuXHQgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gc3RhdGVtZW50LmRpcmVjdGl2ZTtcclxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGRpcmVjdGl2ZSAhPT0gJ3N0cmluZycpIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChkaXJlY3RpdmUgPT09ICd1c2Ugc3RyaWN0Jykge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGZpcnN0UmVzdHJpY3RlZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihmaXJzdFJlc3RyaWN0ZWQsIG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0T2N0YWxMaXRlcmFsKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsTGFuZ3VhZ2VNb2RlRGlyZWN0aXZlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFmaXJzdFJlc3RyaWN0ZWQgJiYgdG9rZW4ub2N0YWwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IHRva2VuO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGJvZHk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW1ldGhvZC1kZWZpbml0aW9uc1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnF1YWxpZmllZFByb3BlcnR5TmFtZSA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG5cdCAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XHJcblx0ICAgICAgICAgICAgY2FzZSAzIC8qIElkZW50aWZpZXIgKi86XHJcblx0ICAgICAgICAgICAgY2FzZSA4IC8qIFN0cmluZ0xpdGVyYWwgKi86XHJcblx0ICAgICAgICAgICAgY2FzZSAxIC8qIEJvb2xlYW5MaXRlcmFsICovOlxyXG5cdCAgICAgICAgICAgIGNhc2UgNSAvKiBOdWxsTGl0ZXJhbCAqLzpcclxuXHQgICAgICAgICAgICBjYXNlIDYgLyogTnVtZXJpY0xpdGVyYWwgKi86XHJcblx0ICAgICAgICAgICAgY2FzZSA0IC8qIEtleXdvcmQgKi86XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgIGNhc2UgNyAvKiBQdW5jdHVhdG9yICovOlxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW4udmFsdWUgPT09ICdbJztcclxuXHQgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUdldHRlck1ldGhvZCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgaXNHZW5lcmF0b3IgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93WWllbGQgPSB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gZmFsc2U7XHJcblx0ICAgICAgICB2YXIgZm9ybWFsUGFyYW1ldGVycyA9IHRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCk7XHJcblx0ICAgICAgICBpZiAoZm9ybWFsUGFyYW1ldGVycy5wYXJhbXMubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLkJhZEdldHRlckFyaXR5KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBtZXRob2QgPSB0aGlzLnBhcnNlUHJvcGVydHlNZXRob2QoZm9ybWFsUGFyYW1ldGVycyk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZ1bmN0aW9uRXhwcmVzc2lvbihudWxsLCBmb3JtYWxQYXJhbWV0ZXJzLnBhcmFtcywgbWV0aG9kLCBpc0dlbmVyYXRvcikpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU2V0dGVyTWV0aG9kID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBpc0dlbmVyYXRvciA9IGZhbHNlO1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dZaWVsZCA9IHRoaXMuY29udGV4dC5hbGxvd1lpZWxkO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBmb3JtYWxQYXJhbWV0ZXJzID0gdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKTtcclxuXHQgICAgICAgIGlmIChmb3JtYWxQYXJhbWV0ZXJzLnBhcmFtcy5sZW5ndGggIT09IDEpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5CYWRTZXR0ZXJBcml0eSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIGlmIChmb3JtYWxQYXJhbWV0ZXJzLnBhcmFtc1swXSBpbnN0YW5jZW9mIE5vZGUuUmVzdEVsZW1lbnQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5CYWRTZXR0ZXJSZXN0UGFyYW1ldGVyKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBtZXRob2QgPSB0aGlzLnBhcnNlUHJvcGVydHlNZXRob2QoZm9ybWFsUGFyYW1ldGVycyk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZ1bmN0aW9uRXhwcmVzc2lvbihudWxsLCBmb3JtYWxQYXJhbWV0ZXJzLnBhcmFtcywgbWV0aG9kLCBpc0dlbmVyYXRvcikpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlR2VuZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBpc0dlbmVyYXRvciA9IHRydWU7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1lpZWxkID0gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHRydWU7XHJcblx0ICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gZmFsc2U7XHJcblx0ICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kKHBhcmFtcyk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZ1bmN0aW9uRXhwcmVzc2lvbihudWxsLCBwYXJhbXMucGFyYW1zLCBtZXRob2QsIGlzR2VuZXJhdG9yKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdlbmVyYXRvci1mdW5jdGlvbi1kZWZpbml0aW9uc1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmlzU3RhcnRPZkV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0cnVlO1xyXG5cdCAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5sb29rYWhlYWQudmFsdWU7XHJcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMubG9va2FoZWFkLnR5cGUpIHtcclxuXHQgICAgICAgICAgICBjYXNlIDcgLyogUHVuY3R1YXRvciAqLzpcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSAodmFsdWUgPT09ICdbJykgfHwgKHZhbHVlID09PSAnKCcpIHx8ICh2YWx1ZSA9PT0gJ3snKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgKHZhbHVlID09PSAnKycpIHx8ICh2YWx1ZSA9PT0gJy0nKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgKHZhbHVlID09PSAnIScpIHx8ICh2YWx1ZSA9PT0gJ34nKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgKHZhbHVlID09PSAnKysnKSB8fCAodmFsdWUgPT09ICctLScpIHx8XHJcblx0ICAgICAgICAgICAgICAgICAgICAodmFsdWUgPT09ICcvJykgfHwgKHZhbHVlID09PSAnLz0nKTsgLy8gcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWxcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSA0IC8qIEtleXdvcmQgKi86XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gKHZhbHVlID09PSAnY2xhc3MnKSB8fCAodmFsdWUgPT09ICdkZWxldGUnKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgKHZhbHVlID09PSAnZnVuY3Rpb24nKSB8fCAodmFsdWUgPT09ICdsZXQnKSB8fCAodmFsdWUgPT09ICduZXcnKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgKHZhbHVlID09PSAnc3VwZXInKSB8fCAodmFsdWUgPT09ICd0aGlzJykgfHwgKHZhbHVlID09PSAndHlwZW9mJykgfHxcclxuXHQgICAgICAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gJ3ZvaWQnKSB8fCAodmFsdWUgPT09ICd5aWVsZCcpO1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBzdGFydDtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVlpZWxkRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3lpZWxkJyk7XHJcblx0ICAgICAgICB2YXIgYXJndW1lbnQgPSBudWxsO1xyXG5cdCAgICAgICAgdmFyIGRlbGVnYXRlID0gZmFsc2U7XHJcblx0ICAgICAgICBpZiAoIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcclxuXHQgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1lpZWxkID0gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICBkZWxlZ2F0ZSA9IHRoaXMubWF0Y2goJyonKTtcclxuXHQgICAgICAgICAgICBpZiAoZGVsZWdhdGUpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgYXJndW1lbnQgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc1N0YXJ0T2ZFeHByZXNzaW9uKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgYXJndW1lbnQgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBwcmV2aW91c0FsbG93WWllbGQ7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5ZaWVsZEV4cHJlc3Npb24oYXJndW1lbnQsIGRlbGVnYXRlKSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNsYXNzLWRlZmluaXRpb25zXHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VDbGFzc0VsZW1lbnQgPSBmdW5jdGlvbiAoaGFzQ29uc3RydWN0b3IpIHtcclxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBraW5kID0gJyc7XHJcblx0ICAgICAgICB2YXIga2V5ID0gbnVsbDtcclxuXHQgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XHJcblx0ICAgICAgICB2YXIgY29tcHV0ZWQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBtZXRob2QgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBpc1N0YXRpYyA9IGZhbHNlO1xyXG5cdCAgICAgICAgdmFyIGlzQXN5bmMgPSBmYWxzZTtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCcqJykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgY29tcHV0ZWQgPSB0aGlzLm1hdGNoKCdbJyk7XHJcblx0ICAgICAgICAgICAga2V5ID0gdGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XHJcblx0ICAgICAgICAgICAgdmFyIGlkID0ga2V5O1xyXG5cdCAgICAgICAgICAgIGlmIChpZC5uYW1lID09PSAnc3RhdGljJyAmJiAodGhpcy5xdWFsaWZpZWRQcm9wZXJ0eU5hbWUodGhpcy5sb29rYWhlYWQpIHx8IHRoaXMubWF0Y2goJyonKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcclxuXHQgICAgICAgICAgICAgICAgaXNTdGF0aWMgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICBjb21wdXRlZCA9IHRoaXMubWF0Y2goJ1snKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJyonKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmICgodG9rZW4udHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSAmJiAhdGhpcy5oYXNMaW5lVGVybWluYXRvciAmJiAodG9rZW4udmFsdWUgPT09ICdhc3luYycpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwdW5jdHVhdG9yID0gdGhpcy5sb29rYWhlYWQudmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChwdW5jdHVhdG9yICE9PSAnOicgJiYgcHVuY3R1YXRvciAhPT0gJygnICYmIHB1bmN0dWF0b3IgIT09ICcqJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXNBc3luYyA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gdGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAnZ2V0JyB8fCB0b2tlbi52YWx1ZSA9PT0gJ3NldCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnY29uc3RydWN0b3InKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odG9rZW4sIG1lc3NhZ2VzXzEuTWVzc2FnZXMuQ29uc3RydWN0b3JJc0FzeW5jKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgbG9va2FoZWFkUHJvcGVydHlLZXkgPSB0aGlzLnF1YWxpZmllZFByb3BlcnR5TmFtZSh0aGlzLmxvb2thaGVhZCk7XHJcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAnZ2V0JyAmJiBsb29rYWhlYWRQcm9wZXJ0eUtleSkge1xyXG5cdCAgICAgICAgICAgICAgICBraW5kID0gJ2dldCc7XHJcblx0ICAgICAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xyXG5cdCAgICAgICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlR2V0dGVyTWV0aG9kKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnc2V0JyAmJiBsb29rYWhlYWRQcm9wZXJ0eUtleSkge1xyXG5cdCAgICAgICAgICAgICAgICBraW5kID0gJ3NldCc7XHJcblx0ICAgICAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xyXG5cdCAgICAgICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcclxuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlU2V0dGVyTWV0aG9kKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIHRva2VuLnZhbHVlID09PSAnKicgJiYgbG9va2FoZWFkUHJvcGVydHlLZXkpIHtcclxuXHQgICAgICAgICAgICBraW5kID0gJ2luaXQnO1xyXG5cdCAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xyXG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xyXG5cdCAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZUdlbmVyYXRvck1ldGhvZCgpO1xyXG5cdCAgICAgICAgICAgIG1ldGhvZCA9IHRydWU7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIWtpbmQgJiYga2V5ICYmIHRoaXMubWF0Y2goJygnKSkge1xyXG5cdCAgICAgICAgICAgIGtpbmQgPSAnaW5pdCc7XHJcblx0ICAgICAgICAgICAgdmFsdWUgPSBpc0FzeW5jID8gdGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kQXN5bmNGdW5jdGlvbigpIDogdGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kRnVuY3Rpb24oKTtcclxuXHQgICAgICAgICAgICBtZXRob2QgPSB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKCFraW5kKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoa2luZCA9PT0gJ2luaXQnKSB7XHJcblx0ICAgICAgICAgICAga2luZCA9ICdtZXRob2QnO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKCFjb21wdXRlZCkge1xyXG5cdCAgICAgICAgICAgIGlmIChpc1N0YXRpYyAmJiB0aGlzLmlzUHJvcGVydHlLZXkoa2V5LCAncHJvdG90eXBlJykpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdGF0aWNQcm90b3R5cGUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoIWlzU3RhdGljICYmIHRoaXMuaXNQcm9wZXJ0eUtleShrZXksICdjb25zdHJ1Y3RvcicpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChraW5kICE9PSAnbWV0aG9kJyB8fCAhbWV0aG9kIHx8ICh2YWx1ZSAmJiB2YWx1ZS5nZW5lcmF0b3IpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLkNvbnN0cnVjdG9yU3BlY2lhbE1ldGhvZCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKGhhc0NvbnN0cnVjdG9yLnZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLkR1cGxpY2F0ZUNvbnN0cnVjdG9yKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGhhc0NvbnN0cnVjdG9yLnZhbHVlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBraW5kID0gJ2NvbnN0cnVjdG9yJztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5NZXRob2REZWZpbml0aW9uKGtleSwgY29tcHV0ZWQsIHZhbHVlLCBraW5kLCBpc1N0YXRpYykpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2xhc3NFbGVtZW50TGlzdCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBib2R5ID0gW107XHJcblx0ICAgICAgICB2YXIgaGFzQ29uc3RydWN0b3IgPSB7IHZhbHVlOiBmYWxzZSB9O1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnfScpKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJzsnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgYm9keS5wdXNoKHRoaXMucGFyc2VDbGFzc0VsZW1lbnQoaGFzQ29uc3RydWN0b3IpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnfScpO1xyXG5cdCAgICAgICAgcmV0dXJuIGJvZHk7XHJcblx0ICAgIH07XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VDbGFzc0JvZHkgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIGVsZW1lbnRMaXN0ID0gdGhpcy5wYXJzZUNsYXNzRWxlbWVudExpc3QoKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkNsYXNzQm9keShlbGVtZW50TGlzdCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2xhc3NEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChpZGVudGlmaWVySXNPcHRpb25hbCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c1N0cmljdCA9IHRoaXMuY29udGV4dC5zdHJpY3Q7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gdHJ1ZTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnY2xhc3MnKTtcclxuXHQgICAgICAgIHZhciBpZCA9IChpZGVudGlmaWVySXNPcHRpb25hbCAmJiAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMyAvKiBJZGVudGlmaWVyICovKSkgPyBudWxsIDogdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgdmFyIHN1cGVyQ2xhc3MgPSBudWxsO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdleHRlbmRzJykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIHN1cGVyQ2xhc3MgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb25BbGxvd0NhbGwpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGNsYXNzQm9keSA9IHRoaXMucGFyc2VDbGFzc0JvZHkoKTtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5zdHJpY3QgPSBwcmV2aW91c1N0cmljdDtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkNsYXNzRGVjbGFyYXRpb24oaWQsIHN1cGVyQ2xhc3MsIGNsYXNzQm9keSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2xhc3NFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBwcmV2aW91c1N0cmljdCA9IHRoaXMuY29udGV4dC5zdHJpY3Q7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gdHJ1ZTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnY2xhc3MnKTtcclxuXHQgICAgICAgIHZhciBpZCA9ICh0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8pID8gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpIDogbnVsbDtcclxuXHQgICAgICAgIHZhciBzdXBlckNsYXNzID0gbnVsbDtcclxuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnZXh0ZW5kcycpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICBzdXBlckNsYXNzID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBjbGFzc0JvZHkgPSB0aGlzLnBhcnNlQ2xhc3NCb2R5KCk7XHJcblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5DbGFzc0V4cHJlc3Npb24oaWQsIHN1cGVyQ2xhc3MsIGNsYXNzQm9keSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zY3JpcHRzXHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW1vZHVsZXNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU1vZHVsZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5zdHJpY3QgPSB0cnVlO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzTW9kdWxlID0gdHJ1ZTtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgYm9keSA9IHRoaXMucGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXMoKTtcclxuXHQgICAgICAgIHdoaWxlICh0aGlzLmxvb2thaGVhZC50eXBlICE9PSAyIC8qIEVPRiAqLykge1xyXG5cdCAgICAgICAgICAgIGJvZHkucHVzaCh0aGlzLnBhcnNlU3RhdGVtZW50TGlzdEl0ZW0oKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5Nb2R1bGUoYm9keSkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU2NyaXB0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBib2R5ID0gdGhpcy5wYXJzZURpcmVjdGl2ZVByb2xvZ3VlcygpO1xyXG5cdCAgICAgICAgd2hpbGUgKHRoaXMubG9va2FoZWFkLnR5cGUgIT09IDIgLyogRU9GICovKSB7XHJcblx0ICAgICAgICAgICAgYm9keS5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlNjcmlwdChib2R5KSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWltcG9ydHNcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU1vZHVsZVNwZWNpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gOCAvKiBTdHJpbmdMaXRlcmFsICovKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuSW52YWxpZE1vZHVsZVNwZWNpZmllcik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgdmFyIHJhdyA9IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pO1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuTGl0ZXJhbCh0b2tlbi52YWx1ZSwgcmF3KSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGltcG9ydCB7PGZvbyBhcyBiYXI+fSAuLi47XHJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VJbXBvcnRTcGVjaWZpZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdmFyIGltcG9ydGVkO1xyXG5cdCAgICAgICAgdmFyIGxvY2FsO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLykge1xyXG5cdCAgICAgICAgICAgIGltcG9ydGVkID0gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgICAgIGxvY2FsID0gaW1wb3J0ZWQ7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXMnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICBsb2NhbCA9IHRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBpbXBvcnRlZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO1xyXG5cdCAgICAgICAgICAgIGxvY2FsID0gaW1wb3J0ZWQ7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXMnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICBsb2NhbCA9IHRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSW1wb3J0U3BlY2lmaWVyKGxvY2FsLCBpbXBvcnRlZCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyB7Zm9vLCBiYXIgYXMgYmFzfVxyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlTmFtZWRJbXBvcnRzID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcclxuXHQgICAgICAgIHZhciBzcGVjaWZpZXJzID0gW107XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMubWF0Y2goJ30nKSkge1xyXG5cdCAgICAgICAgICAgIHNwZWNpZmllcnMucHVzaCh0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVyKCkpO1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnfScpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcsJyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ30nKTtcclxuXHQgICAgICAgIHJldHVybiBzcGVjaWZpZXJzO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBpbXBvcnQgPGZvbz4gLi4uO1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlSW1wb3J0RGVmYXVsdFNwZWNpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB2YXIgbG9jYWwgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkltcG9ydERlZmF1bHRTcGVjaWZpZXIobG9jYWwpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaW1wb3J0IDwqIGFzIGZvbz4gLi4uO1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcqJyk7XHJcblx0ICAgICAgICBpZiAoIXRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXMnKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLk5vQXNBZnRlckltcG9ydE5hbWVzcGFjZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgdmFyIGxvY2FsID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIobG9jYWwpKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUltcG9ydERlY2xhcmF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLklsbGVnYWxJbXBvcnREZWNsYXJhdGlvbik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpbXBvcnQnKTtcclxuXHQgICAgICAgIHZhciBzcmM7XHJcblx0ICAgICAgICB2YXIgc3BlY2lmaWVycyA9IFtdO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDggLyogU3RyaW5nTGl0ZXJhbCAqLykge1xyXG5cdCAgICAgICAgICAgIC8vIGltcG9ydCAnZm9vJztcclxuXHQgICAgICAgICAgICBzcmMgPSB0aGlzLnBhcnNlTW9kdWxlU3BlY2lmaWVyKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgneycpKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8vIGltcG9ydCB7YmFyfVxyXG5cdCAgICAgICAgICAgICAgICBzcGVjaWZpZXJzID0gc3BlY2lmaWVycy5jb25jYXQodGhpcy5wYXJzZU5hbWVkSW1wb3J0cygpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaCgnKicpKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8vIGltcG9ydCAqIGFzIGZvb1xyXG5cdCAgICAgICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2godGhpcy5wYXJzZUltcG9ydE5hbWVzcGFjZVNwZWNpZmllcigpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0lkZW50aWZpZXJOYW1lKHRoaXMubG9va2FoZWFkKSAmJiAhdGhpcy5tYXRjaEtleXdvcmQoJ2RlZmF1bHQnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBpbXBvcnQgZm9vXHJcblx0ICAgICAgICAgICAgICAgIHNwZWNpZmllcnMucHVzaCh0aGlzLnBhcnNlSW1wb3J0RGVmYXVsdFNwZWNpZmllcigpKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJywnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcqJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbXBvcnQgZm9vLCAqIGFzIGZvb1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpZmllcnMucHVzaCh0aGlzLnBhcnNlSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyKCkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaCgneycpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0IGZvbywge2Jhcn1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZpZXJzID0gc3BlY2lmaWVycy5jb25jYXQodGhpcy5wYXJzZU5hbWVkSW1wb3J0cygpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnZnJvbScpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5sb29rYWhlYWQudmFsdWUgPyBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiA6IG1lc3NhZ2VzXzEuTWVzc2FnZXMuTWlzc2luZ0Zyb21DbGF1c2U7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlLCB0aGlzLmxvb2thaGVhZC52YWx1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgc3JjID0gdGhpcy5wYXJzZU1vZHVsZVNwZWNpZmllcigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JbXBvcnREZWNsYXJhdGlvbihzcGVjaWZpZXJzLCBzcmMpKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZXhwb3J0c1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRXhwb3J0U3BlY2lmaWVyID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcclxuXHQgICAgICAgIHZhciBsb2NhbCA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO1xyXG5cdCAgICAgICAgdmFyIGV4cG9ydGVkID0gbG9jYWw7XHJcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdhcycpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcclxuXHQgICAgICAgICAgICBleHBvcnRlZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0U3BlY2lmaWVyKGxvY2FsLCBleHBvcnRlZCkpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRXhwb3J0RGVjbGFyYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5KSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuSWxsZWdhbEV4cG9ydERlY2xhcmF0aW9uKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XHJcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4cG9ydCcpO1xyXG5cdCAgICAgICAgdmFyIGV4cG9ydERlY2xhcmF0aW9uO1xyXG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdkZWZhdWx0JykpIHtcclxuXHQgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCAuLi5cclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnZnVuY3Rpb24nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb28gKCkge31cclxuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge31cclxuXHQgICAgICAgICAgICAgICAgdmFyIGRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24odHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cG9ydERlY2xhcmF0aW9uID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb24oZGVjbGFyYXRpb24pKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2NsYXNzJykpIHtcclxuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgZm9vIHt9XHJcblx0ICAgICAgICAgICAgICAgIHZhciBkZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VDbGFzc0RlY2xhcmF0aW9uKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXN5bmMnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmICgpIHt9XHJcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICgpIHt9XHJcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCBkZWZhdWx0IGFzeW5jIHggPT4geFxyXG5cdCAgICAgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb24gPSB0aGlzLm1hdGNoQXN5bmNGdW5jdGlvbigpID8gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24odHJ1ZSkgOiB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICAgICAgZXhwb3J0RGVjbGFyYXRpb24gPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbihkZWNsYXJhdGlvbikpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnZnJvbScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sIHRoaXMubG9va2FoZWFkLnZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCB7fTtcclxuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgW107XHJcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCBkZWZhdWx0ICgxICsgMik7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBkZWNsYXJhdGlvbiA9IHRoaXMubWF0Y2goJ3snKSA/IHRoaXMucGFyc2VPYmplY3RJbml0aWFsaXplcigpIDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2goJ1snKSA/IHRoaXMucGFyc2VBcnJheUluaXRpYWxpemVyKCkgOiB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICAgICAgICAgIGV4cG9ydERlY2xhcmF0aW9uID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb24oZGVjbGFyYXRpb24pKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoKCcqJykpIHtcclxuXHQgICAgICAgICAgICAvLyBleHBvcnQgKiBmcm9tICdmb28nO1xyXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2Zyb20nKSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMubG9va2FoZWFkLnZhbHVlID8gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4gOiBtZXNzYWdlc18xLk1lc3NhZ2VzLk1pc3NpbmdGcm9tQ2xhdXNlO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgdGhpcy5sb29rYWhlYWQudmFsdWUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnBhcnNlTW9kdWxlU3BlY2lmaWVyKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XHJcblx0ICAgICAgICAgICAgZXhwb3J0RGVjbGFyYXRpb24gPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkV4cG9ydEFsbERlY2xhcmF0aW9uKHNyYykpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gNCAvKiBLZXl3b3JkICovKSB7XHJcblx0ICAgICAgICAgICAgLy8gZXhwb3J0IHZhciBmID0gMTtcclxuXHQgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb24gPSB2b2lkIDA7XHJcblx0ICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxvb2thaGVhZC52YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdsZXQnOlxyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdjb25zdCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VMZXhpY2FsRGVjbGFyYXRpb24oeyBpbkZvcjogZmFsc2UgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAndmFyJzpcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnY2xhc3MnOlxyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZXhwb3J0RGVjbGFyYXRpb24gPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24oZGVjbGFyYXRpb24sIFtdLCBudWxsKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoQXN5bmNGdW5jdGlvbigpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKTtcclxuXHQgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0TmFtZWREZWNsYXJhdGlvbihkZWNsYXJhdGlvbiwgW10sIG51bGwpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHZhciBzcGVjaWZpZXJzID0gW107XHJcblx0ICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG51bGw7XHJcblx0ICAgICAgICAgICAgdmFyIGlzRXhwb3J0RnJvbUlkZW50aWZpZXIgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgneycpO1xyXG5cdCAgICAgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnfScpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlzRXhwb3J0RnJvbUlkZW50aWZpZXIgPSBpc0V4cG9ydEZyb21JZGVudGlmaWVyIHx8IHRoaXMubWF0Y2hLZXl3b3JkKCdkZWZhdWx0Jyk7XHJcblx0ICAgICAgICAgICAgICAgIHNwZWNpZmllcnMucHVzaCh0aGlzLnBhcnNlRXhwb3J0U3BlY2lmaWVyKCkpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJ30nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJywnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnfScpO1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2Zyb20nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQge2RlZmF1bHR9IGZyb20gJ2Zvbyc7XHJcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCB7Zm9vfSBmcm9tICdmb28nO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICBzb3VyY2UgPSB0aGlzLnBhcnNlTW9kdWxlU3BlY2lmaWVyKCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmIChpc0V4cG9ydEZyb21JZGVudGlmaWVyKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCB7ZGVmYXVsdH07IC8vIG1pc3NpbmcgZnJvbUNsYXVzZVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMubG9va2FoZWFkLnZhbHVlID8gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4gOiBtZXNzYWdlc18xLk1lc3NhZ2VzLk1pc3NpbmdGcm9tQ2xhdXNlO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgdGhpcy5sb29rYWhlYWQudmFsdWUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IHtmb299O1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZXhwb3J0RGVjbGFyYXRpb24gPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24obnVsbCwgc3BlY2lmaWVycywgc291cmNlKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZXhwb3J0RGVjbGFyYXRpb247XHJcblx0ICAgIH07XHJcblx0ICAgIHJldHVybiBQYXJzZXI7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlBhcnNlciA9IFBhcnNlcjtcclxuXG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHQvLyBFbnN1cmUgdGhlIGNvbmRpdGlvbiBpcyB0cnVlLCBvdGhlcndpc2UgdGhyb3cgYW4gZXJyb3IuXHJcblx0Ly8gVGhpcyBpcyBvbmx5IHRvIGhhdmUgYSBiZXR0ZXIgY29udHJhY3Qgc2VtYW50aWMsIGkuZS4gYW5vdGhlciBzYWZldHkgbmV0XHJcblx0Ly8gdG8gY2F0Y2ggYSBsb2dpYyBlcnJvci4gVGhlIGNvbmRpdGlvbiBzaGFsbCBiZSBmdWxmaWxsZWQgaW4gbm9ybWFsIGNhc2UuXHJcblx0Ly8gRG8gTk9UIHVzZSB0aGlzIHRvIGVuZm9yY2UgYSBjZXJ0YWluIGNvbmRpdGlvbiBvbiBhbnkgdXNlciBpbnB1dC5cclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0ZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuXHQgICAgaWYgKCFjb25kaXRpb24pIHtcclxuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignQVNTRVJUOiAnICsgbWVzc2FnZSk7XHJcblx0ICAgIH1cclxuXHR9XHJcblx0ZXhwb3J0cy5hc3NlcnQgPSBhc3NlcnQ7XHJcblxuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdC8qIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlICovXHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdHZhciBFcnJvckhhbmRsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBFcnJvckhhbmRsZXIoKSB7XHJcblx0ICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xyXG5cdCAgICAgICAgdGhpcy50b2xlcmFudCA9IGZhbHNlO1xyXG5cdCAgICB9XHJcblx0ICAgIEVycm9ySGFuZGxlci5wcm90b3R5cGUucmVjb3JkRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHQgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyb3IpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLnRvbGVyYXRlID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcblx0ICAgICAgICBpZiAodGhpcy50b2xlcmFudCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMucmVjb3JkRXJyb3IoZXJyb3IpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIEVycm9ySGFuZGxlci5wcm90b3R5cGUuY29uc3RydWN0RXJyb3IgPSBmdW5jdGlvbiAobXNnLCBjb2x1bW4pIHtcclxuXHQgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtc2cpO1xyXG5cdCAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGNhdGNoIChiYXNlKSB7XHJcblx0ICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuXHQgICAgICAgICAgICBpZiAoT2JqZWN0LmNyZWF0ZSAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcclxuXHQgICAgICAgICAgICAgICAgZXJyb3IgPSBPYmplY3QuY3JlYXRlKGJhc2UpO1xyXG5cdCAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdjb2x1bW4nLCB7IHZhbHVlOiBjb2x1bW4gfSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgICAgICAgIHJldHVybiBlcnJvcjtcclxuXHQgICAgfTtcclxuXHQgICAgRXJyb3JIYW5kbGVyLnByb3RvdHlwZS5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChpbmRleCwgbGluZSwgY29sLCBkZXNjcmlwdGlvbikge1xyXG5cdCAgICAgICAgdmFyIG1zZyA9ICdMaW5lICcgKyBsaW5lICsgJzogJyArIGRlc2NyaXB0aW9uO1xyXG5cdCAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jb25zdHJ1Y3RFcnJvcihtc2csIGNvbCk7XHJcblx0ICAgICAgICBlcnJvci5pbmRleCA9IGluZGV4O1xyXG5cdCAgICAgICAgZXJyb3IubGluZU51bWJlciA9IGxpbmU7XHJcblx0ICAgICAgICBlcnJvci5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG5cdCAgICAgICAgcmV0dXJuIGVycm9yO1xyXG5cdCAgICB9O1xyXG5cdCAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLnRocm93RXJyb3IgPSBmdW5jdGlvbiAoaW5kZXgsIGxpbmUsIGNvbCwgZGVzY3JpcHRpb24pIHtcclxuXHQgICAgICAgIHRocm93IHRoaXMuY3JlYXRlRXJyb3IoaW5kZXgsIGxpbmUsIGNvbCwgZGVzY3JpcHRpb24pO1xyXG5cdCAgICB9O1xyXG5cdCAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLnRvbGVyYXRlRXJyb3IgPSBmdW5jdGlvbiAoaW5kZXgsIGxpbmUsIGNvbCwgZGVzY3JpcHRpb24pIHtcclxuXHQgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoaW5kZXgsIGxpbmUsIGNvbCwgZGVzY3JpcHRpb24pO1xyXG5cdCAgICAgICAgaWYgKHRoaXMudG9sZXJhbnQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnJlY29yZEVycm9yKGVycm9yKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICByZXR1cm4gRXJyb3JIYW5kbGVyO1xyXG5cdH0oKSk7XHJcblx0ZXhwb3J0cy5FcnJvckhhbmRsZXIgPSBFcnJvckhhbmRsZXI7XHJcblxuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHQvLyBFcnJvciBtZXNzYWdlcyBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFY4LlxyXG5cdGV4cG9ydHMuTWVzc2FnZXMgPSB7XHJcblx0ICAgIEJhZEdldHRlckFyaXR5OiAnR2V0dGVyIG11c3Qgbm90IGhhdmUgYW55IGZvcm1hbCBwYXJhbWV0ZXJzJyxcclxuXHQgICAgQmFkU2V0dGVyQXJpdHk6ICdTZXR0ZXIgbXVzdCBoYXZlIGV4YWN0bHkgb25lIGZvcm1hbCBwYXJhbWV0ZXInLFxyXG5cdCAgICBCYWRTZXR0ZXJSZXN0UGFyYW1ldGVyOiAnU2V0dGVyIGZ1bmN0aW9uIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgcmVzdCBwYXJhbWV0ZXInLFxyXG5cdCAgICBDb25zdHJ1Y3RvcklzQXN5bmM6ICdDbGFzcyBjb25zdHJ1Y3RvciBtYXkgbm90IGJlIGFuIGFzeW5jIG1ldGhvZCcsXHJcblx0ICAgIENvbnN0cnVjdG9yU3BlY2lhbE1ldGhvZDogJ0NsYXNzIGNvbnN0cnVjdG9yIG1heSBub3QgYmUgYW4gYWNjZXNzb3InLFxyXG5cdCAgICBEZWNsYXJhdGlvbk1pc3NpbmdJbml0aWFsaXplcjogJ01pc3NpbmcgaW5pdGlhbGl6ZXIgaW4gJTAgZGVjbGFyYXRpb24nLFxyXG5cdCAgICBEZWZhdWx0UmVzdFBhcmFtZXRlcjogJ1VuZXhwZWN0ZWQgdG9rZW4gPScsXHJcblx0ICAgIER1cGxpY2F0ZUJpbmRpbmc6ICdEdXBsaWNhdGUgYmluZGluZyAlMCcsXHJcblx0ICAgIER1cGxpY2F0ZUNvbnN0cnVjdG9yOiAnQSBjbGFzcyBtYXkgb25seSBoYXZlIG9uZSBjb25zdHJ1Y3RvcicsXHJcblx0ICAgIER1cGxpY2F0ZVByb3RvUHJvcGVydHk6ICdEdXBsaWNhdGUgX19wcm90b19fIGZpZWxkcyBhcmUgbm90IGFsbG93ZWQgaW4gb2JqZWN0IGxpdGVyYWxzJyxcclxuXHQgICAgRm9ySW5PZkxvb3BJbml0aWFsaXplcjogJyUwIGxvb3AgdmFyaWFibGUgZGVjbGFyYXRpb24gbWF5IG5vdCBoYXZlIGFuIGluaXRpYWxpemVyJyxcclxuXHQgICAgR2VuZXJhdG9ySW5MZWdhY3lDb250ZXh0OiAnR2VuZXJhdG9yIGRlY2xhcmF0aW9ucyBhcmUgbm90IGFsbG93ZWQgaW4gbGVnYWN5IGNvbnRleHRzJyxcclxuXHQgICAgSWxsZWdhbEJyZWFrOiAnSWxsZWdhbCBicmVhayBzdGF0ZW1lbnQnLFxyXG5cdCAgICBJbGxlZ2FsQ29udGludWU6ICdJbGxlZ2FsIGNvbnRpbnVlIHN0YXRlbWVudCcsXHJcblx0ICAgIElsbGVnYWxFeHBvcnREZWNsYXJhdGlvbjogJ1VuZXhwZWN0ZWQgdG9rZW4nLFxyXG5cdCAgICBJbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb246ICdVbmV4cGVjdGVkIHRva2VuJyxcclxuXHQgICAgSWxsZWdhbExhbmd1YWdlTW9kZURpcmVjdGl2ZTogJ0lsbGVnYWwgXFwndXNlIHN0cmljdFxcJyBkaXJlY3RpdmUgaW4gZnVuY3Rpb24gd2l0aCBub24tc2ltcGxlIHBhcmFtZXRlciBsaXN0JyxcclxuXHQgICAgSWxsZWdhbFJldHVybjogJ0lsbGVnYWwgcmV0dXJuIHN0YXRlbWVudCcsXHJcblx0ICAgIEludmFsaWRFc2NhcGVkUmVzZXJ2ZWRXb3JkOiAnS2V5d29yZCBtdXN0IG5vdCBjb250YWluIGVzY2FwZWQgY2hhcmFjdGVycycsXHJcblx0ICAgIEludmFsaWRIZXhFc2NhcGVTZXF1ZW5jZTogJ0ludmFsaWQgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlJyxcclxuXHQgICAgSW52YWxpZExIU0luQXNzaWdubWVudDogJ0ludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gYXNzaWdubWVudCcsXHJcblx0ICAgIEludmFsaWRMSFNJbkZvckluOiAnSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiBmb3ItaW4nLFxyXG5cdCAgICBJbnZhbGlkTEhTSW5Gb3JMb29wOiAnSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiBmb3ItbG9vcCcsXHJcblx0ICAgIEludmFsaWRNb2R1bGVTcGVjaWZpZXI6ICdVbmV4cGVjdGVkIHRva2VuJyxcclxuXHQgICAgSW52YWxpZFJlZ0V4cDogJ0ludmFsaWQgcmVndWxhciBleHByZXNzaW9uJyxcclxuXHQgICAgTGV0SW5MZXhpY2FsQmluZGluZzogJ2xldCBpcyBkaXNhbGxvd2VkIGFzIGEgbGV4aWNhbGx5IGJvdW5kIG5hbWUnLFxyXG5cdCAgICBNaXNzaW5nRnJvbUNsYXVzZTogJ1VuZXhwZWN0ZWQgdG9rZW4nLFxyXG5cdCAgICBNdWx0aXBsZURlZmF1bHRzSW5Td2l0Y2g6ICdNb3JlIHRoYW4gb25lIGRlZmF1bHQgY2xhdXNlIGluIHN3aXRjaCBzdGF0ZW1lbnQnLFxyXG5cdCAgICBOZXdsaW5lQWZ0ZXJUaHJvdzogJ0lsbGVnYWwgbmV3bGluZSBhZnRlciB0aHJvdycsXHJcblx0ICAgIE5vQXNBZnRlckltcG9ydE5hbWVzcGFjZTogJ1VuZXhwZWN0ZWQgdG9rZW4nLFxyXG5cdCAgICBOb0NhdGNoT3JGaW5hbGx5OiAnTWlzc2luZyBjYXRjaCBvciBmaW5hbGx5IGFmdGVyIHRyeScsXHJcblx0ICAgIFBhcmFtZXRlckFmdGVyUmVzdFBhcmFtZXRlcjogJ1Jlc3QgcGFyYW1ldGVyIG11c3QgYmUgbGFzdCBmb3JtYWwgcGFyYW1ldGVyJyxcclxuXHQgICAgUmVkZWNsYXJhdGlvbjogJyUwIFxcJyUxXFwnIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWQnLFxyXG5cdCAgICBTdGF0aWNQcm90b3R5cGU6ICdDbGFzc2VzIG1heSBub3QgaGF2ZSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgcHJvdG90eXBlJyxcclxuXHQgICAgU3RyaWN0Q2F0Y2hWYXJpYWJsZTogJ0NhdGNoIHZhcmlhYmxlIG1heSBub3QgYmUgZXZhbCBvciBhcmd1bWVudHMgaW4gc3RyaWN0IG1vZGUnLFxyXG5cdCAgICBTdHJpY3REZWxldGU6ICdEZWxldGUgb2YgYW4gdW5xdWFsaWZpZWQgaWRlbnRpZmllciBpbiBzdHJpY3QgbW9kZS4nLFxyXG5cdCAgICBTdHJpY3RGdW5jdGlvbjogJ0luIHN0cmljdCBtb2RlIGNvZGUsIGZ1bmN0aW9ucyBjYW4gb25seSBiZSBkZWNsYXJlZCBhdCB0b3AgbGV2ZWwgb3IgaW5zaWRlIGEgYmxvY2snLFxyXG5cdCAgICBTdHJpY3RGdW5jdGlvbk5hbWU6ICdGdW5jdGlvbiBuYW1lIG1heSBub3QgYmUgZXZhbCBvciBhcmd1bWVudHMgaW4gc3RyaWN0IG1vZGUnLFxyXG5cdCAgICBTdHJpY3RMSFNBc3NpZ25tZW50OiAnQXNzaWdubWVudCB0byBldmFsIG9yIGFyZ3VtZW50cyBpcyBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZScsXHJcblx0ICAgIFN0cmljdExIU1Bvc3RmaXg6ICdQb3N0Zml4IGluY3JlbWVudC9kZWNyZW1lbnQgbWF5IG5vdCBoYXZlIGV2YWwgb3IgYXJndW1lbnRzIG9wZXJhbmQgaW4gc3RyaWN0IG1vZGUnLFxyXG5cdCAgICBTdHJpY3RMSFNQcmVmaXg6ICdQcmVmaXggaW5jcmVtZW50L2RlY3JlbWVudCBtYXkgbm90IGhhdmUgZXZhbCBvciBhcmd1bWVudHMgb3BlcmFuZCBpbiBzdHJpY3QgbW9kZScsXHJcblx0ICAgIFN0cmljdE1vZGVXaXRoOiAnU3RyaWN0IG1vZGUgY29kZSBtYXkgbm90IGluY2x1ZGUgYSB3aXRoIHN0YXRlbWVudCcsXHJcblx0ICAgIFN0cmljdE9jdGFsTGl0ZXJhbDogJ09jdGFsIGxpdGVyYWxzIGFyZSBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZS4nLFxyXG5cdCAgICBTdHJpY3RQYXJhbUR1cGU6ICdTdHJpY3QgbW9kZSBmdW5jdGlvbiBtYXkgbm90IGhhdmUgZHVwbGljYXRlIHBhcmFtZXRlciBuYW1lcycsXHJcblx0ICAgIFN0cmljdFBhcmFtTmFtZTogJ1BhcmFtZXRlciBuYW1lIGV2YWwgb3IgYXJndW1lbnRzIGlzIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlJyxcclxuXHQgICAgU3RyaWN0UmVzZXJ2ZWRXb3JkOiAnVXNlIG9mIGZ1dHVyZSByZXNlcnZlZCB3b3JkIGluIHN0cmljdCBtb2RlJyxcclxuXHQgICAgU3RyaWN0VmFyTmFtZTogJ1ZhcmlhYmxlIG5hbWUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZScsXHJcblx0ICAgIFRlbXBsYXRlT2N0YWxMaXRlcmFsOiAnT2N0YWwgbGl0ZXJhbHMgYXJlIG5vdCBhbGxvd2VkIGluIHRlbXBsYXRlIHN0cmluZ3MuJyxcclxuXHQgICAgVW5leHBlY3RlZEVPUzogJ1VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0JyxcclxuXHQgICAgVW5leHBlY3RlZElkZW50aWZpZXI6ICdVbmV4cGVjdGVkIGlkZW50aWZpZXInLFxyXG5cdCAgICBVbmV4cGVjdGVkTnVtYmVyOiAnVW5leHBlY3RlZCBudW1iZXInLFxyXG5cdCAgICBVbmV4cGVjdGVkUmVzZXJ2ZWQ6ICdVbmV4cGVjdGVkIHJlc2VydmVkIHdvcmQnLFxyXG5cdCAgICBVbmV4cGVjdGVkU3RyaW5nOiAnVW5leHBlY3RlZCBzdHJpbmcnLFxyXG5cdCAgICBVbmV4cGVjdGVkVGVtcGxhdGU6ICdVbmV4cGVjdGVkIHF1YXNpICUwJyxcclxuXHQgICAgVW5leHBlY3RlZFRva2VuOiAnVW5leHBlY3RlZCB0b2tlbiAlMCcsXHJcblx0ICAgIFVuZXhwZWN0ZWRUb2tlbklsbGVnYWw6ICdVbmV4cGVjdGVkIHRva2VuIElMTEVHQUwnLFxyXG5cdCAgICBVbmtub3duTGFiZWw6ICdVbmRlZmluZWQgbGFiZWwgXFwnJTBcXCcnLFxyXG5cdCAgICBVbnRlcm1pbmF0ZWRSZWdFeHA6ICdJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbjogbWlzc2luZyAvJ1xyXG5cdH07XHJcblxuXG4vKioqLyB9LFxuLyogMTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHR2YXIgYXNzZXJ0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xyXG5cdHZhciBjaGFyYWN0ZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcblx0dmFyIG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcclxuXHRmdW5jdGlvbiBoZXhWYWx1ZShjaCkge1xyXG5cdCAgICByZXR1cm4gJzAxMjM0NTY3ODlhYmNkZWYnLmluZGV4T2YoY2gudG9Mb3dlckNhc2UoKSk7XHJcblx0fVxyXG5cdGZ1bmN0aW9uIG9jdGFsVmFsdWUoY2gpIHtcclxuXHQgICAgcmV0dXJuICcwMTIzNDU2NycuaW5kZXhPZihjaCk7XHJcblx0fVxyXG5cdHZhciBTY2FubmVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gU2Nhbm5lcihjb2RlLCBoYW5kbGVyKSB7XHJcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IGNvZGU7XHJcblx0ICAgICAgICB0aGlzLmVycm9ySGFuZGxlciA9IGhhbmRsZXI7XHJcblx0ICAgICAgICB0aGlzLnRyYWNrQ29tbWVudCA9IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy5sZW5ndGggPSBjb2RlLmxlbmd0aDtcclxuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xyXG5cdCAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gKGNvZGUubGVuZ3RoID4gMCkgPyAxIDogMDtcclxuXHQgICAgICAgIHRoaXMubGluZVN0YXJ0ID0gMDtcclxuXHQgICAgICAgIHRoaXMuY3VybHlTdGFjayA9IFtdO1xyXG5cdCAgICB9XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNhdmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXHJcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5saW5lU3RhcnRcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnJlc3RvcmVTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xyXG5cdCAgICAgICAgdGhpcy5pbmRleCA9IHN0YXRlLmluZGV4O1xyXG5cdCAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gc3RhdGUubGluZU51bWJlcjtcclxuXHQgICAgICAgIHRoaXMubGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5lb2YgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5pbmRleCA+PSB0aGlzLmxlbmd0aDtcclxuXHQgICAgfTtcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUudGhyb3dVbmV4cGVjdGVkVG9rZW4gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG5cdCAgICAgICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkgeyBtZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW5JbGxlZ2FsOyB9XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5lcnJvckhhbmRsZXIudGhyb3dFcnJvcih0aGlzLmluZGV4LCB0aGlzLmxpbmVOdW1iZXIsIHRoaXMuaW5kZXggLSB0aGlzLmxpbmVTdGFydCArIDEsIG1lc3NhZ2UpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbiA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcblx0ICAgICAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7IG1lc3NhZ2UgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbklsbGVnYWw7IH1cclxuXHQgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyLnRvbGVyYXRlRXJyb3IodGhpcy5pbmRleCwgdGhpcy5saW5lTnVtYmVyLCB0aGlzLmluZGV4IC0gdGhpcy5saW5lU3RhcnQgKyAxLCBtZXNzYWdlKTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY29tbWVudHNcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2tpcFNpbmdsZUxpbmVDb21tZW50ID0gZnVuY3Rpb24gKG9mZnNldCkge1xyXG5cdCAgICAgICAgdmFyIGNvbW1lbnRzID0gW107XHJcblx0ICAgICAgICB2YXIgc3RhcnQsIGxvYztcclxuXHQgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgIGNvbW1lbnRzID0gW107XHJcblx0ICAgICAgICAgICAgc3RhcnQgPSB0aGlzLmluZGV4IC0gb2Zmc2V0O1xyXG5cdCAgICAgICAgICAgIGxvYyA9IHtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5pbmRleCAtIHRoaXMubGluZVN0YXJ0IC0gb2Zmc2V0XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIGVuZDoge31cclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcclxuXHQgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGNoKSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja0NvbW1lbnQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxvYy5lbmQgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5pbmRleCAtIHRoaXMubGluZVN0YXJ0IC0gMVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aUxpbmU6IGZhbHNlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlOiBbc3RhcnQgKyBvZmZzZXQsIHRoaXMuaW5kZXggLSAxXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCB0aGlzLmluZGV4IC0gMV0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiBsb2NcclxuXHQgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb21tZW50cy5wdXNoKGVudHJ5KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09IDEzICYmIHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkgPT09IDEwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmxpbmVOdW1iZXI7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1lbnRzO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgIGxvYy5lbmQgPSB7XHJcblx0ICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmluZGV4IC0gdGhpcy5saW5lU3RhcnRcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIHZhciBlbnRyeSA9IHtcclxuXHQgICAgICAgICAgICAgICAgbXVsdGlMaW5lOiBmYWxzZSxcclxuXHQgICAgICAgICAgICAgICAgc2xpY2U6IFtzdGFydCArIG9mZnNldCwgdGhpcy5pbmRleF0sXHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIHRoaXMuaW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICBsb2M6IGxvY1xyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgY29tbWVudHMucHVzaChlbnRyeSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gY29tbWVudHM7XHJcblx0ICAgIH07XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNraXBNdWx0aUxpbmVDb21tZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIGNvbW1lbnRzID0gW107XHJcblx0ICAgICAgICB2YXIgc3RhcnQsIGxvYztcclxuXHQgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgIGNvbW1lbnRzID0gW107XHJcblx0ICAgICAgICAgICAgc3RhcnQgPSB0aGlzLmluZGV4IC0gMjtcclxuXHQgICAgICAgICAgICBsb2MgPSB7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuaW5kZXggLSB0aGlzLmxpbmVTdGFydCAtIDJcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgZW5kOiB7fVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKCkpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO1xyXG5cdCAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihjaCkpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAweDBEICYmIHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCArIDEpID09PSAweDBBKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmxpbmVOdW1iZXI7XHJcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmIChjaCA9PT0gMHgyQSkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBCbG9jayBjb21tZW50IGVuZHMgd2l0aCAnKi8nLlxyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4ICsgMSkgPT09IDB4MkYpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gMjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYy5lbmQgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmluZGV4IC0gdGhpcy5saW5lU3RhcnRcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlMaW5lOiB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZTogW3N0YXJ0ICsgMiwgdGhpcy5pbmRleCAtIDJdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCB0aGlzLmluZGV4XSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiBsb2NcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzLnB1c2goZW50cnkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1lbnRzO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvLyBSYW4gb2ZmIHRoZSBlbmQgb2YgdGhlIGZpbGUgLSB0aGUgd2hvbGUgdGhpbmcgaXMgYSBjb21tZW50XHJcblx0ICAgICAgICBpZiAodGhpcy50cmFja0NvbW1lbnQpIHtcclxuXHQgICAgICAgICAgICBsb2MuZW5kID0ge1xyXG5cdCAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5pbmRleCAtIHRoaXMubGluZVN0YXJ0XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB2YXIgZW50cnkgPSB7XHJcblx0ICAgICAgICAgICAgICAgIG11bHRpTGluZTogdHJ1ZSxcclxuXHQgICAgICAgICAgICAgICAgc2xpY2U6IFtzdGFydCArIDIsIHRoaXMuaW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCB0aGlzLmluZGV4XSxcclxuXHQgICAgICAgICAgICAgICAgbG9jOiBsb2NcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIGNvbW1lbnRzLnB1c2goZW50cnkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgcmV0dXJuIGNvbW1lbnRzO1xyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuQ29tbWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgY29tbWVudHM7XHJcblx0ICAgICAgICBpZiAodGhpcy50cmFja0NvbW1lbnQpIHtcclxuXHQgICAgICAgICAgICBjb21tZW50cyA9IFtdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gKHRoaXMuaW5kZXggPT09IDApO1xyXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcclxuXHQgICAgICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzV2hpdGVTcGFjZShjaCkpIHtcclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihjaCkpIHtcclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09IDB4MEQgJiYgdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSA9PT0gMHgwQSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09IDB4MkYpIHtcclxuXHQgICAgICAgICAgICAgICAgY2ggPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXggKyAxKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAweDJGKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDI7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWVudCA9IHRoaXMuc2tpcFNpbmdsZUxpbmVDb21tZW50KDIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMgPSBjb21tZW50cy5jb25jYXQoY29tbWVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09IDB4MkEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gMjtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjb21tZW50ID0gdGhpcy5za2lwTXVsdGlMaW5lQ29tbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMgPSBjb21tZW50cy5jb25jYXQoY29tbWVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmIChzdGFydCAmJiBjaCA9PT0gMHgyRCkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBVKzAwM0UgaXMgJz4nXHJcblx0ICAgICAgICAgICAgICAgIGlmICgodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4ICsgMSkgPT09IDB4MkQpICYmICh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXggKyAyKSA9PT0gMHgzRSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vICctLT4nIGlzIGEgc2luZ2xlLWxpbmUgY29tbWVudFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCArPSAzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnQgPSB0aGlzLnNraXBTaW5nbGVMaW5lQ29tbWVudCgzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gY29tbWVudHMuY29uY2F0KGNvbW1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09IDB4M0MpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlLnNsaWNlKHRoaXMuaW5kZXggKyAxLCB0aGlzLmluZGV4ICsgNCkgPT09ICchLS0nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7IC8vIGA8IS0tYFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnQgPSB0aGlzLnNraXBTaW5nbGVMaW5lQ29tbWVudCg0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gY29tbWVudHMuY29uY2F0KGNvbW1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBjb21tZW50cztcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnV0dXJlLXJlc2VydmVkLXdvcmRzXHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLmlzRnV0dXJlUmVzZXJ2ZWRXb3JkID0gZnVuY3Rpb24gKGlkKSB7XHJcblx0ICAgICAgICBzd2l0Y2ggKGlkKSB7XHJcblx0ICAgICAgICAgICAgY2FzZSAnZW51bSc6XHJcblx0ICAgICAgICAgICAgY2FzZSAnZXhwb3J0JzpcclxuXHQgICAgICAgICAgICBjYXNlICdpbXBvcnQnOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ3N1cGVyJzpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQgPSBmdW5jdGlvbiAoaWQpIHtcclxuXHQgICAgICAgIHN3aXRjaCAoaWQpIHtcclxuXHQgICAgICAgICAgICBjYXNlICdpbXBsZW1lbnRzJzpcclxuXHQgICAgICAgICAgICBjYXNlICdpbnRlcmZhY2UnOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ3BhY2thZ2UnOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ3ByaXZhdGUnOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ3Byb3RlY3RlZCc6XHJcblx0ICAgICAgICAgICAgY2FzZSAncHVibGljJzpcclxuXHQgICAgICAgICAgICBjYXNlICdzdGF0aWMnOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ3lpZWxkJzpcclxuXHQgICAgICAgICAgICBjYXNlICdsZXQnOlxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLmlzUmVzdHJpY3RlZFdvcmQgPSBmdW5jdGlvbiAoaWQpIHtcclxuXHQgICAgICAgIHJldHVybiBpZCA9PT0gJ2V2YWwnIHx8IGlkID09PSAnYXJndW1lbnRzJztcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMta2V5d29yZHNcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuaXNLZXl3b3JkID0gZnVuY3Rpb24gKGlkKSB7XHJcblx0ICAgICAgICBzd2l0Y2ggKGlkLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgIGNhc2UgMjpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ2lmJykgfHwgKGlkID09PSAnaW4nKSB8fCAoaWQgPT09ICdkbycpO1xyXG5cdCAgICAgICAgICAgIGNhc2UgMzpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ3ZhcicpIHx8IChpZCA9PT0gJ2ZvcicpIHx8IChpZCA9PT0gJ25ldycpIHx8XHJcblx0ICAgICAgICAgICAgICAgICAgICAoaWQgPT09ICd0cnknKSB8fCAoaWQgPT09ICdsZXQnKTtcclxuXHQgICAgICAgICAgICBjYXNlIDQ6XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICd0aGlzJykgfHwgKGlkID09PSAnZWxzZScpIHx8IChpZCA9PT0gJ2Nhc2UnKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgKGlkID09PSAndm9pZCcpIHx8IChpZCA9PT0gJ3dpdGgnKSB8fCAoaWQgPT09ICdlbnVtJyk7XHJcblx0ICAgICAgICAgICAgY2FzZSA1OlxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gKGlkID09PSAnd2hpbGUnKSB8fCAoaWQgPT09ICdicmVhaycpIHx8IChpZCA9PT0gJ2NhdGNoJykgfHxcclxuXHQgICAgICAgICAgICAgICAgICAgIChpZCA9PT0gJ3Rocm93JykgfHwgKGlkID09PSAnY29uc3QnKSB8fCAoaWQgPT09ICd5aWVsZCcpIHx8XHJcblx0ICAgICAgICAgICAgICAgICAgICAoaWQgPT09ICdjbGFzcycpIHx8IChpZCA9PT0gJ3N1cGVyJyk7XHJcblx0ICAgICAgICAgICAgY2FzZSA2OlxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gKGlkID09PSAncmV0dXJuJykgfHwgKGlkID09PSAndHlwZW9mJykgfHwgKGlkID09PSAnZGVsZXRlJykgfHxcclxuXHQgICAgICAgICAgICAgICAgICAgIChpZCA9PT0gJ3N3aXRjaCcpIHx8IChpZCA9PT0gJ2V4cG9ydCcpIHx8IChpZCA9PT0gJ2ltcG9ydCcpO1xyXG5cdCAgICAgICAgICAgIGNhc2UgNzpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ2RlZmF1bHQnKSB8fCAoaWQgPT09ICdmaW5hbGx5JykgfHwgKGlkID09PSAnZXh0ZW5kcycpO1xyXG5cdCAgICAgICAgICAgIGNhc2UgODpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ2Z1bmN0aW9uJykgfHwgKGlkID09PSAnY29udGludWUnKSB8fCAoaWQgPT09ICdkZWJ1Z2dlcicpO1xyXG5cdCAgICAgICAgICAgIGNhc2UgMTA6XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdpbnN0YW5jZW9mJyk7XHJcblx0ICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5jb2RlUG9pbnRBdCA9IGZ1bmN0aW9uIChpKSB7XHJcblx0ICAgICAgICB2YXIgY3AgPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KGkpO1xyXG5cdCAgICAgICAgaWYgKGNwID49IDB4RDgwMCAmJiBjcCA8PSAweERCRkYpIHtcclxuXHQgICAgICAgICAgICB2YXIgc2Vjb25kID0gdGhpcy5zb3VyY2UuY2hhckNvZGVBdChpICsgMSk7XHJcblx0ICAgICAgICAgICAgaWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZmlyc3QgPSBjcDtcclxuXHQgICAgICAgICAgICAgICAgY3AgPSAoZmlyc3QgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBjcDtcclxuXHQgICAgfTtcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhbkhleEVzY2FwZSA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcclxuXHQgICAgICAgIHZhciBsZW4gPSAocHJlZml4ID09PSAndScpID8gNCA6IDI7XHJcblx0ICAgICAgICB2YXIgY29kZSA9IDA7XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmVvZigpICYmIGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0hleERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICogMTYgKyBoZXhWYWx1ZSh0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xyXG5cdCAgICAgICAgdmFyIGNvZGUgPSAwO1xyXG5cdCAgICAgICAgLy8gQXQgbGVhc3QsIG9uZSBoZXggZGlnaXQgaXMgcmVxdWlyZWQuXHJcblx0ICAgICAgICBpZiAoY2ggPT09ICd9Jykge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xyXG5cdCAgICAgICAgICAgIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcclxuXHQgICAgICAgICAgICBpZiAoIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0hleERpZ2l0KGNoLmNoYXJDb2RlQXQoMCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBjb2RlID0gY29kZSAqIDE2ICsgaGV4VmFsdWUoY2gpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGNvZGUgPiAweDEwRkZGRiB8fCBjaCAhPT0gJ30nKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5mcm9tQ29kZVBvaW50KGNvZGUpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5nZXRJZGVudGlmaWVyID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleCsrO1xyXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcclxuXHQgICAgICAgICAgICBpZiAoY2ggPT09IDB4NUMpIHtcclxuXHQgICAgICAgICAgICAgICAgLy8gQmxhY2tzbGFzaCAoVSswMDVDKSBtYXJrcyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZS5cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wbGV4SWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIGlmIChjaCA+PSAweEQ4MDAgJiYgY2ggPCAweERGRkYpIHtcclxuXHQgICAgICAgICAgICAgICAgLy8gTmVlZCB0byBoYW5kbGUgc3Vycm9nYXRlIHBhaXJzLlxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBsZXhJZGVudGlmaWVyKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydChjaCkpIHtcclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KTtcclxuXHQgICAgfTtcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuZ2V0Q29tcGxleElkZW50aWZpZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgY3AgPSB0aGlzLmNvZGVQb2ludEF0KHRoaXMuaW5kZXgpO1xyXG5cdCAgICAgICAgdmFyIGlkID0gY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmZyb21Db2RlUG9pbnQoY3ApO1xyXG5cdCAgICAgICAgdGhpcy5pbmRleCArPSBpZC5sZW5ndGg7XHJcblx0ICAgICAgICAvLyAnXFx1JyAoVSswMDVDLCBVKzAwNzUpIGRlbm90ZXMgYW4gZXNjYXBlZCBjaGFyYWN0ZXIuXHJcblx0ICAgICAgICB2YXIgY2g7XHJcblx0ICAgICAgICBpZiAoY3AgPT09IDB4NUMpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSAhPT0gMHg3NSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5zb3VyY2VbdGhpcy5pbmRleF0gPT09ICd7Jykge1xyXG5cdCAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIGNoID0gdGhpcy5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgY2ggPSB0aGlzLnNjYW5IZXhFc2NhcGUoJ3UnKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSBudWxsIHx8IGNoID09PSAnXFxcXCcgfHwgIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydChjaC5jaGFyQ29kZUF0KDApKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlkID0gY2g7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKCkpIHtcclxuXHQgICAgICAgICAgICBjcCA9IHRoaXMuY29kZVBvaW50QXQodGhpcy5pbmRleCk7XHJcblx0ICAgICAgICAgICAgaWYgKCFjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydChjcCkpIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGNoID0gY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmZyb21Db2RlUG9pbnQoY3ApO1xyXG5cdCAgICAgICAgICAgIGlkICs9IGNoO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gY2gubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgIC8vICdcXHUnIChVKzAwNUMsIFUrMDA3NSkgZGVub3RlcyBhbiBlc2NhcGVkIGNoYXJhY3Rlci5cclxuXHQgICAgICAgICAgICBpZiAoY3AgPT09IDB4NUMpIHtcclxuXHQgICAgICAgICAgICAgICAgaWQgPSBpZC5zdWJzdHIoMCwgaWQubGVuZ3RoIC0gMSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpICE9PSAweDc1KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zb3VyY2VbdGhpcy5pbmRleF0gPT09ICd7Jykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLnNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlKCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuc2NhbkhleEVzY2FwZSgndScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSBudWxsIHx8IGNoID09PSAnXFxcXCcgfHwgIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KGNoLmNoYXJDb2RlQXQoMCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlkICs9IGNoO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBpZDtcclxuXHQgICAgfTtcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUub2N0YWxUb0RlY2ltYWwgPSBmdW5jdGlvbiAoY2gpIHtcclxuXHQgICAgICAgIC8vIFxcMCBpcyBub3Qgb2N0YWwgZXNjYXBlIHNlcXVlbmNlXHJcblx0ICAgICAgICB2YXIgb2N0YWwgPSAoY2ggIT09ICcwJyk7XHJcblx0ICAgICAgICB2YXIgY29kZSA9IG9jdGFsVmFsdWUoY2gpO1xyXG5cdCAgICAgICAgaWYgKCF0aGlzLmVvZigpICYmIGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcclxuXHQgICAgICAgICAgICBvY3RhbCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgY29kZSA9IGNvZGUgKiA4ICsgb2N0YWxWYWx1ZSh0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKTtcclxuXHQgICAgICAgICAgICAvLyAzIGRpZ2l0cyBhcmUgb25seSBhbGxvd2VkIHdoZW4gc3RyaW5nIHN0YXJ0c1xyXG5cdCAgICAgICAgICAgIC8vIHdpdGggMCwgMSwgMiwgM1xyXG5cdCAgICAgICAgICAgIGlmICgnMDEyMycuaW5kZXhPZihjaCkgPj0gMCAmJiAhdGhpcy5lb2YoKSAmJiBjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNPY3RhbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICogOCArIG9jdGFsVmFsdWUodGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICBjb2RlOiBjb2RlLFxyXG5cdCAgICAgICAgICAgIG9jdGFsOiBvY3RhbFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbmFtZXMtYW5kLWtleXdvcmRzXHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5JZGVudGlmaWVyID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHR5cGU7XHJcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgLy8gQmFja3NsYXNoIChVKzAwNUMpIHN0YXJ0cyBhbiBlc2NhcGVkIGNoYXJhY3Rlci5cclxuXHQgICAgICAgIHZhciBpZCA9ICh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHN0YXJ0KSA9PT0gMHg1QykgPyB0aGlzLmdldENvbXBsZXhJZGVudGlmaWVyKCkgOiB0aGlzLmdldElkZW50aWZpZXIoKTtcclxuXHQgICAgICAgIC8vIFRoZXJlIGlzIG5vIGtleXdvcmQgb3IgbGl0ZXJhbCB3aXRoIG9ubHkgb25lIGNoYXJhY3Rlci5cclxuXHQgICAgICAgIC8vIFRodXMsIGl0IG11c3QgYmUgYW4gaWRlbnRpZmllci5cclxuXHQgICAgICAgIGlmIChpZC5sZW5ndGggPT09IDEpIHtcclxuXHQgICAgICAgICAgICB0eXBlID0gMyAvKiBJZGVudGlmaWVyICovO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5pc0tleXdvcmQoaWQpKSB7XHJcblx0ICAgICAgICAgICAgdHlwZSA9IDQgLyogS2V5d29yZCAqLztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2UgaWYgKGlkID09PSAnbnVsbCcpIHtcclxuXHQgICAgICAgICAgICB0eXBlID0gNSAvKiBOdWxsTGl0ZXJhbCAqLztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2UgaWYgKGlkID09PSAndHJ1ZScgfHwgaWQgPT09ICdmYWxzZScpIHtcclxuXHQgICAgICAgICAgICB0eXBlID0gMSAvKiBCb29sZWFuTGl0ZXJhbCAqLztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHR5cGUgPSAzIC8qIElkZW50aWZpZXIgKi87XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodHlwZSAhPT0gMyAvKiBJZGVudGlmaWVyICovICYmIChzdGFydCArIGlkLmxlbmd0aCAhPT0gdGhpcy5pbmRleCkpIHtcclxuXHQgICAgICAgICAgICB2YXIgcmVzdG9yZSA9IHRoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xyXG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkRXNjYXBlZFJlc2VydmVkV29yZCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCA9IHJlc3RvcmU7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcblx0ICAgICAgICAgICAgdmFsdWU6IGlkLFxyXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxyXG5cdCAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuaW5kZXhcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXB1bmN0dWF0b3JzXHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5QdW5jdHVhdG9yID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcclxuXHQgICAgICAgIC8vIENoZWNrIGZvciBtb3N0IGNvbW1vbiBzaW5nbGUtY2hhcmFjdGVyIHB1bmN0dWF0b3JzLlxyXG5cdCAgICAgICAgdmFyIHN0ciA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xyXG5cdCAgICAgICAgc3dpdGNoIChzdHIpIHtcclxuXHQgICAgICAgICAgICBjYXNlICcoJzpcclxuXHQgICAgICAgICAgICBjYXNlICd7JzpcclxuXHQgICAgICAgICAgICAgICAgaWYgKHN0ciA9PT0gJ3snKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cmx5U3RhY2sucHVzaCgneycpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSAnLic6XHJcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAnLicgJiYgdGhpcy5zb3VyY2VbdGhpcy5pbmRleCArIDFdID09PSAnLicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNwcmVhZCBvcGVyYXRvcjogLi4uXHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdHIgPSAnLi4uJztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlICd9JzpcclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmN1cmx5U3RhY2sucG9wKCk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgJyknOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJzsnOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJywnOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ1snOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ10nOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJzonOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJz8nOlxyXG5cdCAgICAgICAgICAgIGNhc2UgJ34nOlxyXG5cdCAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgIC8vIDQtY2hhcmFjdGVyIHB1bmN0dWF0b3IuXHJcblx0ICAgICAgICAgICAgICAgIHN0ciA9IHRoaXMuc291cmNlLnN1YnN0cih0aGlzLmluZGV4LCA0KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHN0ciA9PT0gJz4+Pj0nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyAzLWNoYXJhY3RlciBwdW5jdHVhdG9ycy5cclxuXHQgICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgMyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RyID09PSAnPT09JyB8fCBzdHIgPT09ICchPT0nIHx8IHN0ciA9PT0gJz4+PicgfHxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPT09ICc8PD0nIHx8IHN0ciA9PT0gJz4+PScgfHwgc3RyID09PSAnKio9Jykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gMztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDItY2hhcmFjdGVyIHB1bmN0dWF0b3JzLlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgMik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ciA9PT0gJyYmJyB8fCBzdHIgPT09ICd8fCcgfHwgc3RyID09PSAnPT0nIHx8IHN0ciA9PT0gJyE9JyB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPT09ICcrPScgfHwgc3RyID09PSAnLT0nIHx8IHN0ciA9PT0gJyo9JyB8fCBzdHIgPT09ICcvPScgfHxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID09PSAnKysnIHx8IHN0ciA9PT0gJy0tJyB8fCBzdHIgPT09ICc8PCcgfHwgc3RyID09PSAnPj4nIHx8XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9PT0gJyY9JyB8fCBzdHIgPT09ICd8PScgfHwgc3RyID09PSAnXj0nIHx8IHN0ciA9PT0gJyU9JyB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPT09ICc8PScgfHwgc3RyID09PSAnPj0nIHx8IHN0ciA9PT0gJz0+JyB8fCBzdHIgPT09ICcqKicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCArPSAyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMS1jaGFyYWN0ZXIgcHVuY3R1YXRvcnMuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJzw+PSErLSolJnxeLycuaW5kZXhPZihzdHIpID49IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IHN0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICB0eXBlOiA3IC8qIFB1bmN0dWF0b3IgKi8sXHJcblx0ICAgICAgICAgICAgdmFsdWU6IHN0cixcclxuXHQgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcclxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXHJcblx0ICAgICAgICAgICAgZW5kOiB0aGlzLmluZGV4XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1saXRlcmFscy1udW1lcmljLWxpdGVyYWxzXHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5IZXhMaXRlcmFsID0gZnVuY3Rpb24gKHN0YXJ0KSB7XHJcblx0ICAgICAgICB2YXIgbnVtID0gJyc7XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKCkpIHtcclxuXHQgICAgICAgICAgICBpZiAoIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0hleERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBudW0gKz0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChudW0ubGVuZ3RoID09PSAwKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgdHlwZTogNiAvKiBOdW1lcmljTGl0ZXJhbCAqLyxcclxuXHQgICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoJzB4JyArIG51bSwgMTYpLFxyXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxyXG5cdCAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuaW5kZXhcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5CaW5hcnlMaXRlcmFsID0gZnVuY3Rpb24gKHN0YXJ0KSB7XHJcblx0ICAgICAgICB2YXIgbnVtID0gJyc7XHJcblx0ICAgICAgICB2YXIgY2g7XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKCkpIHtcclxuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xyXG5cdCAgICAgICAgICAgIGlmIChjaCAhPT0gJzAnICYmIGNoICE9PSAnMScpIHtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG51bSArPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKG51bS5sZW5ndGggPT09IDApIHtcclxuXHQgICAgICAgICAgICAvLyBvbmx5IDBiIG9yIDBCXHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKCF0aGlzLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgY2ggPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO1xyXG5cdCAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydChjaCkgfHwgY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KGNoKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICB0eXBlOiA2IC8qIE51bWVyaWNMaXRlcmFsICovLFxyXG5cdCAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChudW0sIDIpLFxyXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxyXG5cdCAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuaW5kZXhcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5PY3RhbExpdGVyYWwgPSBmdW5jdGlvbiAocHJlZml4LCBzdGFydCkge1xyXG5cdCAgICAgICAgdmFyIG51bSA9ICcnO1xyXG5cdCAgICAgICAgdmFyIG9jdGFsID0gZmFsc2U7XHJcblx0ICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChwcmVmaXguY2hhckNvZGVBdCgwKSkpIHtcclxuXHQgICAgICAgICAgICBvY3RhbCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgbnVtID0gJzAnICsgdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xyXG5cdCAgICAgICAgICAgIGlmICghY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSkge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgbnVtICs9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIW9jdGFsICYmIG51bS5sZW5ndGggPT09IDApIHtcclxuXHQgICAgICAgICAgICAvLyBvbmx5IDBvIG9yIDBPXHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSB8fCBjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgIHR5cGU6IDYgLyogTnVtZXJpY0xpdGVyYWwgKi8sXHJcblx0ICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KG51bSwgOCksXHJcblx0ICAgICAgICAgICAgb2N0YWw6IG9jdGFsLFxyXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxyXG5cdCAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuaW5kZXhcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLmlzSW1wbGljaXRPY3RhbExpdGVyYWwgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAvLyBJbXBsaWNpdCBvY3RhbCwgdW5sZXNzIHRoZXJlIGlzIGEgbm9uLW9jdGFsIGRpZ2l0LlxyXG5cdCAgICAgICAgLy8gKEFubmV4IEIuMS4xIG9uIE51bWVyaWMgTGl0ZXJhbHMpXHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5pbmRleCArIDE7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2VbaV07XHJcblx0ICAgICAgICAgICAgaWYgKGNoID09PSAnOCcgfHwgY2ggPT09ICc5Jykge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmICghY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgfTtcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2Nhbk51bWVyaWNMaXRlcmFsID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcclxuXHQgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3N0YXJ0XTtcclxuXHQgICAgICAgIGFzc2VydF8xLmFzc2VydChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQoY2guY2hhckNvZGVBdCgwKSkgfHwgKGNoID09PSAnLicpLCAnTnVtZXJpYyBsaXRlcmFsIG11c3Qgc3RhcnQgd2l0aCBhIGRlY2ltYWwgZGlnaXQgb3IgYSBkZWNpbWFsIHBvaW50Jyk7XHJcblx0ICAgICAgICB2YXIgbnVtID0gJyc7XHJcblx0ICAgICAgICBpZiAoY2ggIT09ICcuJykge1xyXG5cdCAgICAgICAgICAgIG51bSA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XHJcblx0ICAgICAgICAgICAgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4XTtcclxuXHQgICAgICAgICAgICAvLyBIZXggbnVtYmVyIHN0YXJ0cyB3aXRoICcweCcuXHJcblx0ICAgICAgICAgICAgLy8gT2N0YWwgbnVtYmVyIHN0YXJ0cyB3aXRoICcwJy5cclxuXHQgICAgICAgICAgICAvLyBPY3RhbCBudW1iZXIgaW4gRVM2IHN0YXJ0cyB3aXRoICcwbycuXHJcblx0ICAgICAgICAgICAgLy8gQmluYXJ5IG51bWJlciBpbiBFUzYgc3RhcnRzIHdpdGggJzBiJy5cclxuXHQgICAgICAgICAgICBpZiAobnVtID09PSAnMCcpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAneCcgfHwgY2ggPT09ICdYJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbkhleExpdGVyYWwoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ2InIHx8IGNoID09PSAnQicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5CaW5hcnlMaXRlcmFsKHN0YXJ0KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdvJyB8fCBjaCA9PT0gJ08nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuT2N0YWxMaXRlcmFsKGNoLCBzdGFydCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKGNoICYmIGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQoY2guY2hhckNvZGVBdCgwKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW1wbGljaXRPY3RhbExpdGVyYWwoKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5PY3RhbExpdGVyYWwoY2gsIHN0YXJ0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB3aGlsZSAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG51bSArPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGNoID09PSAnLicpIHtcclxuXHQgICAgICAgICAgICBudW0gKz0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcclxuXHQgICAgICAgICAgICB3aGlsZSAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG51bSArPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGNoID09PSAnZScgfHwgY2ggPT09ICdFJykge1xyXG5cdCAgICAgICAgICAgIG51bSArPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleF07XHJcblx0ICAgICAgICAgICAgaWYgKGNoID09PSAnKycgfHwgY2ggPT09ICctJykge1xyXG5cdCAgICAgICAgICAgICAgICBudW0gKz0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSkge1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBudW0gKz0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgIHR5cGU6IDYgLyogTnVtZXJpY0xpdGVyYWwgKi8sXHJcblx0ICAgICAgICAgICAgdmFsdWU6IHBhcnNlRmxvYXQobnVtKSxcclxuXHQgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcclxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXHJcblx0ICAgICAgICAgICAgZW5kOiB0aGlzLmluZGV4XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1saXRlcmFscy1zdHJpbmctbGl0ZXJhbHNcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhblN0cmluZ0xpdGVyYWwgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgdmFyIHF1b3RlID0gdGhpcy5zb3VyY2Vbc3RhcnRdO1xyXG5cdCAgICAgICAgYXNzZXJ0XzEuYXNzZXJ0KChxdW90ZSA9PT0gJ1xcJycgfHwgcXVvdGUgPT09ICdcIicpLCAnU3RyaW5nIGxpdGVyYWwgbXVzdCBzdGFydHMgd2l0aCBhIHF1b3RlJyk7XHJcblx0ICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICB2YXIgb2N0YWwgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBzdHIgPSAnJztcclxuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xyXG5cdCAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XHJcblx0ICAgICAgICAgICAgaWYgKGNoID09PSBxdW90ZSkge1xyXG5cdCAgICAgICAgICAgICAgICBxdW90ZSA9ICcnO1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xyXG5cdCAgICAgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XHJcblx0ICAgICAgICAgICAgICAgIGlmICghY2ggfHwgIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGNoLmNoYXJDb2RlQXQoMCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZVt0aGlzLmluZGV4XSA9PT0gJ3snKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gdGhpcy5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuZXNjYXBlZF8xID0gdGhpcy5zY2FuSGV4RXNjYXBlKGNoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmVzY2FwZWRfMSA9PT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSB1bmVzY2FwZWRfMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd4JzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuZXNjYXBlZCA9IHRoaXMuc2NhbkhleEVzY2FwZShjaCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmVzY2FwZWQgPT09IG51bGwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkSGV4RXNjYXBlU2VxdWVuY2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSB1bmVzY2FwZWQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcbic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3InOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xccic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcdCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcYic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcZic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xceDBCJztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnOCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnOSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBjaDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ggJiYgY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9jdFRvRGVjID0gdGhpcy5vY3RhbFRvRGVjaW1hbChjaCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvY3RhbCA9IG9jdFRvRGVjLm9jdGFsIHx8IG9jdGFsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUob2N0VG9EZWMuY29kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMubGluZU51bWJlcjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgdGhpcy5zb3VyY2VbdGhpcy5pbmRleF0gPT09ICdcXG4nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGNoLmNoYXJDb2RlQXQoMCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgc3RyICs9IGNoO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChxdW90ZSAhPT0gJycpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICB0eXBlOiA4IC8qIFN0cmluZ0xpdGVyYWwgKi8sXHJcblx0ICAgICAgICAgICAgdmFsdWU6IHN0cixcclxuXHQgICAgICAgICAgICBvY3RhbDogb2N0YWwsXHJcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5saW5lU3RhcnQsXHJcblx0ICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxyXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHNcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhblRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIGNvb2tlZCA9ICcnO1xyXG5cdCAgICAgICAgdmFyIHRlcm1pbmF0ZWQgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XHJcblx0ICAgICAgICB2YXIgaGVhZCA9ICh0aGlzLnNvdXJjZVtzdGFydF0gPT09ICdgJyk7XHJcblx0ICAgICAgICB2YXIgdGFpbCA9IGZhbHNlO1xyXG5cdCAgICAgICAgdmFyIHJhd09mZnNldCA9IDI7XHJcblx0ICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKCkpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gJ2AnKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJhd09mZnNldCA9IDE7XHJcblx0ICAgICAgICAgICAgICAgIHRhaWwgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB0ZXJtaW5hdGVkID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAnJCcpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAneycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VybHlTdGFjay5wdXNoKCckeycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGVybWluYXRlZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBjb29rZWQgKz0gY2g7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAnXFxcXCcpIHtcclxuXHQgICAgICAgICAgICAgICAgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGNoLmNoYXJDb2RlQXQoMCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSAnXFxuJztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSAnXFxyJztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSAnXFx0JztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZVt0aGlzLmluZGV4XSA9PT0gJ3snKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gdGhpcy5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3RvcmUgPSB0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuZXNjYXBlZF8yID0gdGhpcy5zY2FuSGV4RXNjYXBlKGNoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmVzY2FwZWRfMiAhPT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSB1bmVzY2FwZWRfMjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSByZXN0b3JlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSBjaDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd4JzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuZXNjYXBlZCA9IHRoaXMuc2NhbkhleEVzY2FwZShjaCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmVzY2FwZWQgPT09IG51bGwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkSGV4RXNjYXBlU2VxdWVuY2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSB1bmVzY2FwZWQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcYic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcZic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcdic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJzAnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWxsZWdhbDogXFwwMSBcXDAyIGFuZCBzbyBvblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5UZW1wbGF0ZU9jdGFsTGl0ZXJhbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcMCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWxsZWdhbDogXFwxIFxcMlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihtZXNzYWdlc18xLk1lc3NhZ2VzLlRlbXBsYXRlT2N0YWxMaXRlcmFsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSBjaDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICsrdGhpcy5saW5lTnVtYmVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiB0aGlzLnNvdXJjZVt0aGlzLmluZGV4XSA9PT0gJ1xcbicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmxpbmVOdW1iZXI7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgdGhpcy5zb3VyY2VbdGhpcy5pbmRleF0gPT09ICdcXG4nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcbic7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBjb29rZWQgKz0gY2g7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKCFoZWFkKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5jdXJseVN0YWNrLnBvcCgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICB0eXBlOiAxMCAvKiBUZW1wbGF0ZSAqLyxcclxuXHQgICAgICAgICAgICB2YWx1ZTogdGhpcy5zb3VyY2Uuc2xpY2Uoc3RhcnQgKyAxLCB0aGlzLmluZGV4IC0gcmF3T2Zmc2V0KSxcclxuXHQgICAgICAgICAgICBjb29rZWQ6IGNvb2tlZCxcclxuXHQgICAgICAgICAgICBoZWFkOiBoZWFkLFxyXG5cdCAgICAgICAgICAgIHRhaWw6IHRhaWwsXHJcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5saW5lU3RhcnQsXHJcblx0ICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxyXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGl0ZXJhbHMtcmVndWxhci1leHByZXNzaW9uLWxpdGVyYWxzXHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnRlc3RSZWdFeHAgPSBmdW5jdGlvbiAocGF0dGVybiwgZmxhZ3MpIHtcclxuXHQgICAgICAgIC8vIFRoZSBCTVAgY2hhcmFjdGVyIHRvIHVzZSBhcyBhIHJlcGxhY2VtZW50IGZvciBhc3RyYWwgc3ltYm9scyB3aGVuXHJcblx0ICAgICAgICAvLyB0cmFuc2xhdGluZyBhbiBFUzYgXCJ1XCItZmxhZ2dlZCBwYXR0ZXJuIHRvIGFuIEVTNS1jb21wYXRpYmxlXHJcblx0ICAgICAgICAvLyBhcHByb3hpbWF0aW9uLlxyXG5cdCAgICAgICAgLy8gTm90ZTogcmVwbGFjaW5nIHdpdGggJ1xcdUZGRkYnIGVuYWJsZXMgZmFsc2UgcG9zaXRpdmVzIGluIHVubGlrZWx5XHJcblx0ICAgICAgICAvLyBzY2VuYXJpb3MuIEZvciBleGFtcGxlLCBgW1xcdXsxMDQ0Zn0tXFx1ezEwNDQwfV1gIGlzIGFuIGludmFsaWRcclxuXHQgICAgICAgIC8vIHBhdHRlcm4gdGhhdCB3b3VsZCBub3QgYmUgZGV0ZWN0ZWQgYnkgdGhpcyBzdWJzdGl0dXRpb24uXHJcblx0ICAgICAgICB2YXIgYXN0cmFsU3Vic3RpdHV0ZSA9ICdcXHVGRkZGJztcclxuXHQgICAgICAgIHZhciB0bXAgPSBwYXR0ZXJuO1xyXG5cdCAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cdCAgICAgICAgaWYgKGZsYWdzLmluZGV4T2YoJ3UnKSA+PSAwKSB7XHJcblx0ICAgICAgICAgICAgdG1wID0gdG1wXHJcblx0ICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcdVxceyhbMC05YS1mQS1GXSspXFx9fFxcXFx1KFthLWZBLUYwLTldezR9KS9nLCBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gcGFyc2VJbnQoJDEgfHwgJDIsIDE2KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4MTBGRkZGKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzZWxmLnRocm93VW5leHBlY3RlZFRva2VuKG1lc3NhZ2VzXzEuTWVzc2FnZXMuSW52YWxpZFJlZ0V4cCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA8PSAweEZGRkYpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGFzdHJhbFN1YnN0aXR1dGU7XHJcblx0ICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZywgYXN0cmFsU3Vic3RpdHV0ZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvLyBGaXJzdCwgZGV0ZWN0IGludmFsaWQgcmVndWxhciBleHByZXNzaW9ucy5cclxuXHQgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgUmVnRXhwKHRtcCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkUmVnRXhwKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8vIFJldHVybiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QgZm9yIHRoaXMgcGF0dGVybi1mbGFnIHBhaXIsIG9yXHJcblx0ICAgICAgICAvLyBgbnVsbGAgaW4gY2FzZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IHN1cHBvcnQgdGhlIGZsYWdzIGl0XHJcblx0ICAgICAgICAvLyB1c2VzLlxyXG5cdCAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChwYXR0ZXJuLCBmbGFncyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XHJcblx0ICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhblJlZ0V4cEJvZHkgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4XTtcclxuXHQgICAgICAgIGFzc2VydF8xLmFzc2VydChjaCA9PT0gJy8nLCAnUmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwgbXVzdCBzdGFydCB3aXRoIGEgc2xhc2gnKTtcclxuXHQgICAgICAgIHZhciBzdHIgPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgdmFyIGNsYXNzTWFya2VyID0gZmFsc2U7XHJcblx0ICAgICAgICB2YXIgdGVybWluYXRlZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xyXG5cdCAgICAgICAgICAgIHN0ciArPSBjaDtcclxuXHQgICAgICAgICAgICBpZiAoY2ggPT09ICdcXFxcJykge1xyXG5cdCAgICAgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XHJcblx0ICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWxpdGVyYWxzLXJlZ3VsYXItZXhwcmVzc2lvbi1saXRlcmFsc1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5VbnRlcm1pbmF0ZWRSZWdFeHApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHN0ciArPSBjaDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihtZXNzYWdlc18xLk1lc3NhZ2VzLlVudGVybWluYXRlZFJlZ0V4cCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNsYXNzTWFya2VyKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ10nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc01hcmtlciA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICcvJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGVybWluYXRlZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1snKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc01hcmtlciA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIXRlcm1pbmF0ZWQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW50ZXJtaW5hdGVkUmVnRXhwKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8vIEV4Y2x1ZGUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guXHJcblx0ICAgICAgICByZXR1cm4gc3RyLnN1YnN0cigxLCBzdHIubGVuZ3RoIC0gMik7XHJcblx0ICAgIH07XHJcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5SZWdFeHBGbGFncyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBzdHIgPSAnJztcclxuXHQgICAgICAgIHZhciBmbGFncyA9ICcnO1xyXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleF07XHJcblx0ICAgICAgICAgICAgaWYgKCFjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydChjaC5jaGFyQ29kZUF0KDApKSkge1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcXFwnICYmICF0aGlzLmVvZigpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleF07XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdG9yZSA9IHRoaXMuaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2hhciA9IHRoaXMuc2NhbkhleEVzY2FwZSgndScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgIT09IG51bGwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmbGFncyArPSBjaGFyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoc3RyICs9ICdcXFxcdSc7IHJlc3RvcmUgPCB0aGlzLmluZGV4OyArK3Jlc3RvcmUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHRoaXMuc291cmNlW3Jlc3RvcmVdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSByZXN0b3JlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzICs9ICd1JztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFx1JztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGZsYWdzICs9IGNoO1xyXG5cdCAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGZsYWdzO1xyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuUmVnRXhwID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcclxuXHQgICAgICAgIHZhciBwYXR0ZXJuID0gdGhpcy5zY2FuUmVnRXhwQm9keSgpO1xyXG5cdCAgICAgICAgdmFyIGZsYWdzID0gdGhpcy5zY2FuUmVnRXhwRmxhZ3MoKTtcclxuXHQgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudGVzdFJlZ0V4cChwYXR0ZXJuLCBmbGFncyk7XHJcblx0ICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgIHR5cGU6IDkgLyogUmVndWxhckV4cHJlc3Npb24gKi8sXHJcblx0ICAgICAgICAgICAgdmFsdWU6ICcnLFxyXG5cdCAgICAgICAgICAgIHBhdHRlcm46IHBhdHRlcm4sXHJcblx0ICAgICAgICAgICAgZmxhZ3M6IGZsYWdzLFxyXG5cdCAgICAgICAgICAgIHJlZ2V4OiB2YWx1ZSxcclxuXHQgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXHJcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcclxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXHJcblx0ICAgICAgICAgICAgZW5kOiB0aGlzLmluZGV4XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICB9O1xyXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5sZXggPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBpZiAodGhpcy5lb2YoKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIHR5cGU6IDIgLyogRU9GICovLFxyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogJycsXHJcblx0ICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuaW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgY3AgPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO1xyXG5cdCAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydChjcCkpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuSWRlbnRpZmllcigpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy8gVmVyeSBjb21tb246ICggYW5kICkgYW5kIDtcclxuXHQgICAgICAgIGlmIChjcCA9PT0gMHgyOCB8fCBjcCA9PT0gMHgyOSB8fCBjcCA9PT0gMHgzQikge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5QdW5jdHVhdG9yKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvLyBTdHJpbmcgbGl0ZXJhbCBzdGFydHMgd2l0aCBzaW5nbGUgcXVvdGUgKFUrMDAyNykgb3IgZG91YmxlIHF1b3RlIChVKzAwMjIpLlxyXG5cdCAgICAgICAgaWYgKGNwID09PSAweDI3IHx8IGNwID09PSAweDIyKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhblN0cmluZ0xpdGVyYWwoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8vIERvdCAoLikgVSswMDJFIGNhbiBhbHNvIHN0YXJ0IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLCBoZW5jZSB0aGUgbmVlZFxyXG5cdCAgICAgICAgLy8gdG8gY2hlY2sgdGhlIG5leHQgY2hhcmFjdGVyLlxyXG5cdCAgICAgICAgaWYgKGNwID09PSAweDJFKSB7XHJcblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXggKyAxKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nhbk51bWVyaWNMaXRlcmFsKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5QdW5jdHVhdG9yKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KGNwKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5OdW1lcmljTGl0ZXJhbCgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy8gVGVtcGxhdGUgbGl0ZXJhbHMgc3RhcnQgd2l0aCBgIChVKzAwNjApIGZvciB0ZW1wbGF0ZSBoZWFkXHJcblx0ICAgICAgICAvLyBvciB9IChVKzAwN0QpIGZvciB0ZW1wbGF0ZSBtaWRkbGUgb3IgdGVtcGxhdGUgdGFpbC5cclxuXHQgICAgICAgIGlmIChjcCA9PT0gMHg2MCB8fCAoY3AgPT09IDB4N0QgJiYgdGhpcy5jdXJseVN0YWNrW3RoaXMuY3VybHlTdGFjay5sZW5ndGggLSAxXSA9PT0gJyR7JykpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuVGVtcGxhdGUoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8vIFBvc3NpYmxlIGlkZW50aWZpZXIgc3RhcnQgaW4gYSBzdXJyb2dhdGUgcGFpci5cclxuXHQgICAgICAgIGlmIChjcCA+PSAweEQ4MDAgJiYgY3AgPCAweERGRkYpIHtcclxuXHQgICAgICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KHRoaXMuY29kZVBvaW50QXQodGhpcy5pbmRleCkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5JZGVudGlmaWVyKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc2NhblB1bmN0dWF0b3IoKTtcclxuXHQgICAgfTtcclxuXHQgICAgcmV0dXJuIFNjYW5uZXI7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlNjYW5uZXIgPSBTY2FubmVyO1xyXG5cblxuLyoqKi8gfSxcbi8qIDEzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0ZXhwb3J0cy5Ub2tlbk5hbWUgPSB7fTtcclxuXHRleHBvcnRzLlRva2VuTmFtZVsxIC8qIEJvb2xlYW5MaXRlcmFsICovXSA9ICdCb29sZWFuJztcclxuXHRleHBvcnRzLlRva2VuTmFtZVsyIC8qIEVPRiAqL10gPSAnPGVuZD4nO1xyXG5cdGV4cG9ydHMuVG9rZW5OYW1lWzMgLyogSWRlbnRpZmllciAqL10gPSAnSWRlbnRpZmllcic7XHJcblx0ZXhwb3J0cy5Ub2tlbk5hbWVbNCAvKiBLZXl3b3JkICovXSA9ICdLZXl3b3JkJztcclxuXHRleHBvcnRzLlRva2VuTmFtZVs1IC8qIE51bGxMaXRlcmFsICovXSA9ICdOdWxsJztcclxuXHRleHBvcnRzLlRva2VuTmFtZVs2IC8qIE51bWVyaWNMaXRlcmFsICovXSA9ICdOdW1lcmljJztcclxuXHRleHBvcnRzLlRva2VuTmFtZVs3IC8qIFB1bmN0dWF0b3IgKi9dID0gJ1B1bmN0dWF0b3InO1xyXG5cdGV4cG9ydHMuVG9rZW5OYW1lWzggLyogU3RyaW5nTGl0ZXJhbCAqL10gPSAnU3RyaW5nJztcclxuXHRleHBvcnRzLlRva2VuTmFtZVs5IC8qIFJlZ3VsYXJFeHByZXNzaW9uICovXSA9ICdSZWd1bGFyRXhwcmVzc2lvbic7XHJcblx0ZXhwb3J0cy5Ub2tlbk5hbWVbMTAgLyogVGVtcGxhdGUgKi9dID0gJ1RlbXBsYXRlJztcclxuXG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0Ly8gR2VuZXJhdGVkIGJ5IGdlbmVyYXRlLXhodG1sLWVudGl0aWVzLmpzLiBETyBOT1QgTU9ESUZZIVxyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHRleHBvcnRzLlhIVE1MRW50aXRpZXMgPSB7XHJcblx0ICAgIHF1b3Q6ICdcXHUwMDIyJyxcclxuXHQgICAgYW1wOiAnXFx1MDAyNicsXHJcblx0ICAgIGFwb3M6ICdcXHUwMDI3JyxcclxuXHQgICAgZ3Q6ICdcXHUwMDNFJyxcclxuXHQgICAgbmJzcDogJ1xcdTAwQTAnLFxyXG5cdCAgICBpZXhjbDogJ1xcdTAwQTEnLFxyXG5cdCAgICBjZW50OiAnXFx1MDBBMicsXHJcblx0ICAgIHBvdW5kOiAnXFx1MDBBMycsXHJcblx0ICAgIGN1cnJlbjogJ1xcdTAwQTQnLFxyXG5cdCAgICB5ZW46ICdcXHUwMEE1JyxcclxuXHQgICAgYnJ2YmFyOiAnXFx1MDBBNicsXHJcblx0ICAgIHNlY3Q6ICdcXHUwMEE3JyxcclxuXHQgICAgdW1sOiAnXFx1MDBBOCcsXHJcblx0ICAgIGNvcHk6ICdcXHUwMEE5JyxcclxuXHQgICAgb3JkZjogJ1xcdTAwQUEnLFxyXG5cdCAgICBsYXF1bzogJ1xcdTAwQUInLFxyXG5cdCAgICBub3Q6ICdcXHUwMEFDJyxcclxuXHQgICAgc2h5OiAnXFx1MDBBRCcsXHJcblx0ICAgIHJlZzogJ1xcdTAwQUUnLFxyXG5cdCAgICBtYWNyOiAnXFx1MDBBRicsXHJcblx0ICAgIGRlZzogJ1xcdTAwQjAnLFxyXG5cdCAgICBwbHVzbW46ICdcXHUwMEIxJyxcclxuXHQgICAgc3VwMjogJ1xcdTAwQjInLFxyXG5cdCAgICBzdXAzOiAnXFx1MDBCMycsXHJcblx0ICAgIGFjdXRlOiAnXFx1MDBCNCcsXHJcblx0ICAgIG1pY3JvOiAnXFx1MDBCNScsXHJcblx0ICAgIHBhcmE6ICdcXHUwMEI2JyxcclxuXHQgICAgbWlkZG90OiAnXFx1MDBCNycsXHJcblx0ICAgIGNlZGlsOiAnXFx1MDBCOCcsXHJcblx0ICAgIHN1cDE6ICdcXHUwMEI5JyxcclxuXHQgICAgb3JkbTogJ1xcdTAwQkEnLFxyXG5cdCAgICByYXF1bzogJ1xcdTAwQkInLFxyXG5cdCAgICBmcmFjMTQ6ICdcXHUwMEJDJyxcclxuXHQgICAgZnJhYzEyOiAnXFx1MDBCRCcsXHJcblx0ICAgIGZyYWMzNDogJ1xcdTAwQkUnLFxyXG5cdCAgICBpcXVlc3Q6ICdcXHUwMEJGJyxcclxuXHQgICAgQWdyYXZlOiAnXFx1MDBDMCcsXHJcblx0ICAgIEFhY3V0ZTogJ1xcdTAwQzEnLFxyXG5cdCAgICBBY2lyYzogJ1xcdTAwQzInLFxyXG5cdCAgICBBdGlsZGU6ICdcXHUwMEMzJyxcclxuXHQgICAgQXVtbDogJ1xcdTAwQzQnLFxyXG5cdCAgICBBcmluZzogJ1xcdTAwQzUnLFxyXG5cdCAgICBBRWxpZzogJ1xcdTAwQzYnLFxyXG5cdCAgICBDY2VkaWw6ICdcXHUwMEM3JyxcclxuXHQgICAgRWdyYXZlOiAnXFx1MDBDOCcsXHJcblx0ICAgIEVhY3V0ZTogJ1xcdTAwQzknLFxyXG5cdCAgICBFY2lyYzogJ1xcdTAwQ0EnLFxyXG5cdCAgICBFdW1sOiAnXFx1MDBDQicsXHJcblx0ICAgIElncmF2ZTogJ1xcdTAwQ0MnLFxyXG5cdCAgICBJYWN1dGU6ICdcXHUwMENEJyxcclxuXHQgICAgSWNpcmM6ICdcXHUwMENFJyxcclxuXHQgICAgSXVtbDogJ1xcdTAwQ0YnLFxyXG5cdCAgICBFVEg6ICdcXHUwMEQwJyxcclxuXHQgICAgTnRpbGRlOiAnXFx1MDBEMScsXHJcblx0ICAgIE9ncmF2ZTogJ1xcdTAwRDInLFxyXG5cdCAgICBPYWN1dGU6ICdcXHUwMEQzJyxcclxuXHQgICAgT2NpcmM6ICdcXHUwMEQ0JyxcclxuXHQgICAgT3RpbGRlOiAnXFx1MDBENScsXHJcblx0ICAgIE91bWw6ICdcXHUwMEQ2JyxcclxuXHQgICAgdGltZXM6ICdcXHUwMEQ3JyxcclxuXHQgICAgT3NsYXNoOiAnXFx1MDBEOCcsXHJcblx0ICAgIFVncmF2ZTogJ1xcdTAwRDknLFxyXG5cdCAgICBVYWN1dGU6ICdcXHUwMERBJyxcclxuXHQgICAgVWNpcmM6ICdcXHUwMERCJyxcclxuXHQgICAgVXVtbDogJ1xcdTAwREMnLFxyXG5cdCAgICBZYWN1dGU6ICdcXHUwMEREJyxcclxuXHQgICAgVEhPUk46ICdcXHUwMERFJyxcclxuXHQgICAgc3psaWc6ICdcXHUwMERGJyxcclxuXHQgICAgYWdyYXZlOiAnXFx1MDBFMCcsXHJcblx0ICAgIGFhY3V0ZTogJ1xcdTAwRTEnLFxyXG5cdCAgICBhY2lyYzogJ1xcdTAwRTInLFxyXG5cdCAgICBhdGlsZGU6ICdcXHUwMEUzJyxcclxuXHQgICAgYXVtbDogJ1xcdTAwRTQnLFxyXG5cdCAgICBhcmluZzogJ1xcdTAwRTUnLFxyXG5cdCAgICBhZWxpZzogJ1xcdTAwRTYnLFxyXG5cdCAgICBjY2VkaWw6ICdcXHUwMEU3JyxcclxuXHQgICAgZWdyYXZlOiAnXFx1MDBFOCcsXHJcblx0ICAgIGVhY3V0ZTogJ1xcdTAwRTknLFxyXG5cdCAgICBlY2lyYzogJ1xcdTAwRUEnLFxyXG5cdCAgICBldW1sOiAnXFx1MDBFQicsXHJcblx0ICAgIGlncmF2ZTogJ1xcdTAwRUMnLFxyXG5cdCAgICBpYWN1dGU6ICdcXHUwMEVEJyxcclxuXHQgICAgaWNpcmM6ICdcXHUwMEVFJyxcclxuXHQgICAgaXVtbDogJ1xcdTAwRUYnLFxyXG5cdCAgICBldGg6ICdcXHUwMEYwJyxcclxuXHQgICAgbnRpbGRlOiAnXFx1MDBGMScsXHJcblx0ICAgIG9ncmF2ZTogJ1xcdTAwRjInLFxyXG5cdCAgICBvYWN1dGU6ICdcXHUwMEYzJyxcclxuXHQgICAgb2NpcmM6ICdcXHUwMEY0JyxcclxuXHQgICAgb3RpbGRlOiAnXFx1MDBGNScsXHJcblx0ICAgIG91bWw6ICdcXHUwMEY2JyxcclxuXHQgICAgZGl2aWRlOiAnXFx1MDBGNycsXHJcblx0ICAgIG9zbGFzaDogJ1xcdTAwRjgnLFxyXG5cdCAgICB1Z3JhdmU6ICdcXHUwMEY5JyxcclxuXHQgICAgdWFjdXRlOiAnXFx1MDBGQScsXHJcblx0ICAgIHVjaXJjOiAnXFx1MDBGQicsXHJcblx0ICAgIHV1bWw6ICdcXHUwMEZDJyxcclxuXHQgICAgeWFjdXRlOiAnXFx1MDBGRCcsXHJcblx0ICAgIHRob3JuOiAnXFx1MDBGRScsXHJcblx0ICAgIHl1bWw6ICdcXHUwMEZGJyxcclxuXHQgICAgT0VsaWc6ICdcXHUwMTUyJyxcclxuXHQgICAgb2VsaWc6ICdcXHUwMTUzJyxcclxuXHQgICAgU2Nhcm9uOiAnXFx1MDE2MCcsXHJcblx0ICAgIHNjYXJvbjogJ1xcdTAxNjEnLFxyXG5cdCAgICBZdW1sOiAnXFx1MDE3OCcsXHJcblx0ICAgIGZub2Y6ICdcXHUwMTkyJyxcclxuXHQgICAgY2lyYzogJ1xcdTAyQzYnLFxyXG5cdCAgICB0aWxkZTogJ1xcdTAyREMnLFxyXG5cdCAgICBBbHBoYTogJ1xcdTAzOTEnLFxyXG5cdCAgICBCZXRhOiAnXFx1MDM5MicsXHJcblx0ICAgIEdhbW1hOiAnXFx1MDM5MycsXHJcblx0ICAgIERlbHRhOiAnXFx1MDM5NCcsXHJcblx0ICAgIEVwc2lsb246ICdcXHUwMzk1JyxcclxuXHQgICAgWmV0YTogJ1xcdTAzOTYnLFxyXG5cdCAgICBFdGE6ICdcXHUwMzk3JyxcclxuXHQgICAgVGhldGE6ICdcXHUwMzk4JyxcclxuXHQgICAgSW90YTogJ1xcdTAzOTknLFxyXG5cdCAgICBLYXBwYTogJ1xcdTAzOUEnLFxyXG5cdCAgICBMYW1iZGE6ICdcXHUwMzlCJyxcclxuXHQgICAgTXU6ICdcXHUwMzlDJyxcclxuXHQgICAgTnU6ICdcXHUwMzlEJyxcclxuXHQgICAgWGk6ICdcXHUwMzlFJyxcclxuXHQgICAgT21pY3JvbjogJ1xcdTAzOUYnLFxyXG5cdCAgICBQaTogJ1xcdTAzQTAnLFxyXG5cdCAgICBSaG86ICdcXHUwM0ExJyxcclxuXHQgICAgU2lnbWE6ICdcXHUwM0EzJyxcclxuXHQgICAgVGF1OiAnXFx1MDNBNCcsXHJcblx0ICAgIFVwc2lsb246ICdcXHUwM0E1JyxcclxuXHQgICAgUGhpOiAnXFx1MDNBNicsXHJcblx0ICAgIENoaTogJ1xcdTAzQTcnLFxyXG5cdCAgICBQc2k6ICdcXHUwM0E4JyxcclxuXHQgICAgT21lZ2E6ICdcXHUwM0E5JyxcclxuXHQgICAgYWxwaGE6ICdcXHUwM0IxJyxcclxuXHQgICAgYmV0YTogJ1xcdTAzQjInLFxyXG5cdCAgICBnYW1tYTogJ1xcdTAzQjMnLFxyXG5cdCAgICBkZWx0YTogJ1xcdTAzQjQnLFxyXG5cdCAgICBlcHNpbG9uOiAnXFx1MDNCNScsXHJcblx0ICAgIHpldGE6ICdcXHUwM0I2JyxcclxuXHQgICAgZXRhOiAnXFx1MDNCNycsXHJcblx0ICAgIHRoZXRhOiAnXFx1MDNCOCcsXHJcblx0ICAgIGlvdGE6ICdcXHUwM0I5JyxcclxuXHQgICAga2FwcGE6ICdcXHUwM0JBJyxcclxuXHQgICAgbGFtYmRhOiAnXFx1MDNCQicsXHJcblx0ICAgIG11OiAnXFx1MDNCQycsXHJcblx0ICAgIG51OiAnXFx1MDNCRCcsXHJcblx0ICAgIHhpOiAnXFx1MDNCRScsXHJcblx0ICAgIG9taWNyb246ICdcXHUwM0JGJyxcclxuXHQgICAgcGk6ICdcXHUwM0MwJyxcclxuXHQgICAgcmhvOiAnXFx1MDNDMScsXHJcblx0ICAgIHNpZ21hZjogJ1xcdTAzQzInLFxyXG5cdCAgICBzaWdtYTogJ1xcdTAzQzMnLFxyXG5cdCAgICB0YXU6ICdcXHUwM0M0JyxcclxuXHQgICAgdXBzaWxvbjogJ1xcdTAzQzUnLFxyXG5cdCAgICBwaGk6ICdcXHUwM0M2JyxcclxuXHQgICAgY2hpOiAnXFx1MDNDNycsXHJcblx0ICAgIHBzaTogJ1xcdTAzQzgnLFxyXG5cdCAgICBvbWVnYTogJ1xcdTAzQzknLFxyXG5cdCAgICB0aGV0YXN5bTogJ1xcdTAzRDEnLFxyXG5cdCAgICB1cHNpaDogJ1xcdTAzRDInLFxyXG5cdCAgICBwaXY6ICdcXHUwM0Q2JyxcclxuXHQgICAgZW5zcDogJ1xcdTIwMDInLFxyXG5cdCAgICBlbXNwOiAnXFx1MjAwMycsXHJcblx0ICAgIHRoaW5zcDogJ1xcdTIwMDknLFxyXG5cdCAgICB6d25qOiAnXFx1MjAwQycsXHJcblx0ICAgIHp3ajogJ1xcdTIwMEQnLFxyXG5cdCAgICBscm06ICdcXHUyMDBFJyxcclxuXHQgICAgcmxtOiAnXFx1MjAwRicsXHJcblx0ICAgIG5kYXNoOiAnXFx1MjAxMycsXHJcblx0ICAgIG1kYXNoOiAnXFx1MjAxNCcsXHJcblx0ICAgIGxzcXVvOiAnXFx1MjAxOCcsXHJcblx0ICAgIHJzcXVvOiAnXFx1MjAxOScsXHJcblx0ICAgIHNicXVvOiAnXFx1MjAxQScsXHJcblx0ICAgIGxkcXVvOiAnXFx1MjAxQycsXHJcblx0ICAgIHJkcXVvOiAnXFx1MjAxRCcsXHJcblx0ICAgIGJkcXVvOiAnXFx1MjAxRScsXHJcblx0ICAgIGRhZ2dlcjogJ1xcdTIwMjAnLFxyXG5cdCAgICBEYWdnZXI6ICdcXHUyMDIxJyxcclxuXHQgICAgYnVsbDogJ1xcdTIwMjInLFxyXG5cdCAgICBoZWxsaXA6ICdcXHUyMDI2JyxcclxuXHQgICAgcGVybWlsOiAnXFx1MjAzMCcsXHJcblx0ICAgIHByaW1lOiAnXFx1MjAzMicsXHJcblx0ICAgIFByaW1lOiAnXFx1MjAzMycsXHJcblx0ICAgIGxzYXF1bzogJ1xcdTIwMzknLFxyXG5cdCAgICByc2FxdW86ICdcXHUyMDNBJyxcclxuXHQgICAgb2xpbmU6ICdcXHUyMDNFJyxcclxuXHQgICAgZnJhc2w6ICdcXHUyMDQ0JyxcclxuXHQgICAgZXVybzogJ1xcdTIwQUMnLFxyXG5cdCAgICBpbWFnZTogJ1xcdTIxMTEnLFxyXG5cdCAgICB3ZWllcnA6ICdcXHUyMTE4JyxcclxuXHQgICAgcmVhbDogJ1xcdTIxMUMnLFxyXG5cdCAgICB0cmFkZTogJ1xcdTIxMjInLFxyXG5cdCAgICBhbGVmc3ltOiAnXFx1MjEzNScsXHJcblx0ICAgIGxhcnI6ICdcXHUyMTkwJyxcclxuXHQgICAgdWFycjogJ1xcdTIxOTEnLFxyXG5cdCAgICByYXJyOiAnXFx1MjE5MicsXHJcblx0ICAgIGRhcnI6ICdcXHUyMTkzJyxcclxuXHQgICAgaGFycjogJ1xcdTIxOTQnLFxyXG5cdCAgICBjcmFycjogJ1xcdTIxQjUnLFxyXG5cdCAgICBsQXJyOiAnXFx1MjFEMCcsXHJcblx0ICAgIHVBcnI6ICdcXHUyMUQxJyxcclxuXHQgICAgckFycjogJ1xcdTIxRDInLFxyXG5cdCAgICBkQXJyOiAnXFx1MjFEMycsXHJcblx0ICAgIGhBcnI6ICdcXHUyMUQ0JyxcclxuXHQgICAgZm9yYWxsOiAnXFx1MjIwMCcsXHJcblx0ICAgIHBhcnQ6ICdcXHUyMjAyJyxcclxuXHQgICAgZXhpc3Q6ICdcXHUyMjAzJyxcclxuXHQgICAgZW1wdHk6ICdcXHUyMjA1JyxcclxuXHQgICAgbmFibGE6ICdcXHUyMjA3JyxcclxuXHQgICAgaXNpbjogJ1xcdTIyMDgnLFxyXG5cdCAgICBub3RpbjogJ1xcdTIyMDknLFxyXG5cdCAgICBuaTogJ1xcdTIyMEInLFxyXG5cdCAgICBwcm9kOiAnXFx1MjIwRicsXHJcblx0ICAgIHN1bTogJ1xcdTIyMTEnLFxyXG5cdCAgICBtaW51czogJ1xcdTIyMTInLFxyXG5cdCAgICBsb3dhc3Q6ICdcXHUyMjE3JyxcclxuXHQgICAgcmFkaWM6ICdcXHUyMjFBJyxcclxuXHQgICAgcHJvcDogJ1xcdTIyMUQnLFxyXG5cdCAgICBpbmZpbjogJ1xcdTIyMUUnLFxyXG5cdCAgICBhbmc6ICdcXHUyMjIwJyxcclxuXHQgICAgYW5kOiAnXFx1MjIyNycsXHJcblx0ICAgIG9yOiAnXFx1MjIyOCcsXHJcblx0ICAgIGNhcDogJ1xcdTIyMjknLFxyXG5cdCAgICBjdXA6ICdcXHUyMjJBJyxcclxuXHQgICAgaW50OiAnXFx1MjIyQicsXHJcblx0ICAgIHRoZXJlNDogJ1xcdTIyMzQnLFxyXG5cdCAgICBzaW06ICdcXHUyMjNDJyxcclxuXHQgICAgY29uZzogJ1xcdTIyNDUnLFxyXG5cdCAgICBhc3ltcDogJ1xcdTIyNDgnLFxyXG5cdCAgICBuZTogJ1xcdTIyNjAnLFxyXG5cdCAgICBlcXVpdjogJ1xcdTIyNjEnLFxyXG5cdCAgICBsZTogJ1xcdTIyNjQnLFxyXG5cdCAgICBnZTogJ1xcdTIyNjUnLFxyXG5cdCAgICBzdWI6ICdcXHUyMjgyJyxcclxuXHQgICAgc3VwOiAnXFx1MjI4MycsXHJcblx0ICAgIG5zdWI6ICdcXHUyMjg0JyxcclxuXHQgICAgc3ViZTogJ1xcdTIyODYnLFxyXG5cdCAgICBzdXBlOiAnXFx1MjI4NycsXHJcblx0ICAgIG9wbHVzOiAnXFx1MjI5NScsXHJcblx0ICAgIG90aW1lczogJ1xcdTIyOTcnLFxyXG5cdCAgICBwZXJwOiAnXFx1MjJBNScsXHJcblx0ICAgIHNkb3Q6ICdcXHUyMkM1JyxcclxuXHQgICAgbGNlaWw6ICdcXHUyMzA4JyxcclxuXHQgICAgcmNlaWw6ICdcXHUyMzA5JyxcclxuXHQgICAgbGZsb29yOiAnXFx1MjMwQScsXHJcblx0ICAgIHJmbG9vcjogJ1xcdTIzMEInLFxyXG5cdCAgICBsb3o6ICdcXHUyNUNBJyxcclxuXHQgICAgc3BhZGVzOiAnXFx1MjY2MCcsXHJcblx0ICAgIGNsdWJzOiAnXFx1MjY2MycsXHJcblx0ICAgIGhlYXJ0czogJ1xcdTI2NjUnLFxyXG5cdCAgICBkaWFtczogJ1xcdTI2NjYnLFxyXG5cdCAgICBsYW5nOiAnXFx1MjdFOCcsXHJcblx0ICAgIHJhbmc6ICdcXHUyN0U5J1xyXG5cdH07XHJcblxuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHR2YXIgZXJyb3JfaGFuZGxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XHJcblx0dmFyIHNjYW5uZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xyXG5cdHZhciB0b2tlbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XHJcblx0dmFyIFJlYWRlciA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFJlYWRlcigpIHtcclxuXHQgICAgICAgIHRoaXMudmFsdWVzID0gW107XHJcblx0ICAgICAgICB0aGlzLmN1cmx5ID0gdGhpcy5wYXJlbiA9IC0xO1xyXG5cdCAgICB9XHJcblx0ICAgIC8vIEEgZnVuY3Rpb24gZm9sbG93aW5nIG9uZSBvZiB0aG9zZSB0b2tlbnMgaXMgYW4gZXhwcmVzc2lvbi5cclxuXHQgICAgUmVhZGVyLnByb3RvdHlwZS5iZWZvcmVGdW5jdGlvbkV4cHJlc3Npb24gPSBmdW5jdGlvbiAodCkge1xyXG5cdCAgICAgICAgcmV0dXJuIFsnKCcsICd7JywgJ1snLCAnaW4nLCAndHlwZW9mJywgJ2luc3RhbmNlb2YnLCAnbmV3JyxcclxuXHQgICAgICAgICAgICAncmV0dXJuJywgJ2Nhc2UnLCAnZGVsZXRlJywgJ3Rocm93JywgJ3ZvaWQnLFxyXG5cdCAgICAgICAgICAgIC8vIGFzc2lnbm1lbnQgb3BlcmF0b3JzXHJcblx0ICAgICAgICAgICAgJz0nLCAnKz0nLCAnLT0nLCAnKj0nLCAnKio9JywgJy89JywgJyU9JywgJzw8PScsICc+Pj0nLCAnPj4+PScsXHJcblx0ICAgICAgICAgICAgJyY9JywgJ3w9JywgJ149JywgJywnLFxyXG5cdCAgICAgICAgICAgIC8vIGJpbmFyeS91bmFyeSBvcGVyYXRvcnNcclxuXHQgICAgICAgICAgICAnKycsICctJywgJyonLCAnKionLCAnLycsICclJywgJysrJywgJy0tJywgJzw8JywgJz4+JywgJz4+PicsICcmJyxcclxuXHQgICAgICAgICAgICAnfCcsICdeJywgJyEnLCAnficsICcmJicsICd8fCcsICc/JywgJzonLCAnPT09JywgJz09JywgJz49JyxcclxuXHQgICAgICAgICAgICAnPD0nLCAnPCcsICc+JywgJyE9JywgJyE9PSddLmluZGV4T2YodCkgPj0gMDtcclxuXHQgICAgfTtcclxuXHQgICAgLy8gRGV0ZXJtaW5lIGlmIGZvcndhcmQgc2xhc2ggKC8pIGlzIGFuIG9wZXJhdG9yIG9yIHBhcnQgb2YgYSByZWd1bGFyIGV4cHJlc3Npb25cclxuXHQgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc3dlZXQuanMvd2lraS9kZXNpZ25cclxuXHQgICAgUmVhZGVyLnByb3RvdHlwZS5pc1JlZ2V4U3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgcHJldmlvdXMgPSB0aGlzLnZhbHVlc1t0aGlzLnZhbHVlcy5sZW5ndGggLSAxXTtcclxuXHQgICAgICAgIHZhciByZWdleCA9IChwcmV2aW91cyAhPT0gbnVsbCk7XHJcblx0ICAgICAgICBzd2l0Y2ggKHByZXZpb3VzKSB7XHJcblx0ICAgICAgICAgICAgY2FzZSAndGhpcyc6XHJcblx0ICAgICAgICAgICAgY2FzZSAnXSc6XHJcblx0ICAgICAgICAgICAgICAgIHJlZ2V4ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgJyknOlxyXG5cdCAgICAgICAgICAgICAgICB2YXIga2V5d29yZCA9IHRoaXMudmFsdWVzW3RoaXMucGFyZW4gLSAxXTtcclxuXHQgICAgICAgICAgICAgICAgcmVnZXggPSAoa2V5d29yZCA9PT0gJ2lmJyB8fCBrZXl3b3JkID09PSAnd2hpbGUnIHx8IGtleXdvcmQgPT09ICdmb3InIHx8IGtleXdvcmQgPT09ICd3aXRoJyk7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgJ30nOlxyXG5cdCAgICAgICAgICAgICAgICAvLyBEaXZpZGluZyBhIGZ1bmN0aW9uIGJ5IGFueXRoaW5nIG1ha2VzIGxpdHRsZSBzZW5zZSxcclxuXHQgICAgICAgICAgICAgICAgLy8gYnV0IHdlIGhhdmUgdG8gY2hlY2sgZm9yIHRoYXQuXHJcblx0ICAgICAgICAgICAgICAgIHJlZ2V4ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc1t0aGlzLmN1cmx5IC0gM10gPT09ICdmdW5jdGlvbicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vIEFub255bW91cyBmdW5jdGlvbiwgZS5nLiBmdW5jdGlvbigpe30gLzQyXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2sgPSB0aGlzLnZhbHVlc1t0aGlzLmN1cmx5IC0gNF07XHJcblx0ICAgICAgICAgICAgICAgICAgICByZWdleCA9IGNoZWNrID8gIXRoaXMuYmVmb3JlRnVuY3Rpb25FeHByZXNzaW9uKGNoZWNrKSA6IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudmFsdWVzW3RoaXMuY3VybHkgLSA0XSA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTmFtZWQgZnVuY3Rpb24sIGUuZy4gZnVuY3Rpb24gZigpe30gLzQyL1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrID0gdGhpcy52YWx1ZXNbdGhpcy5jdXJseSAtIDVdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmVnZXggPSBjaGVjayA/ICF0aGlzLmJlZm9yZUZ1bmN0aW9uRXhwcmVzc2lvbihjaGVjaykgOiB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHJlZ2V4O1xyXG5cdCAgICB9O1xyXG5cdCAgICBSZWFkZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSA3IC8qIFB1bmN0dWF0b3IgKi8gfHwgdG9rZW4udHlwZSA9PT0gNCAvKiBLZXl3b3JkICovKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAneycpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jdXJseSA9IHRoaXMudmFsdWVzLmxlbmd0aDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udmFsdWUgPT09ICcoJykge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnBhcmVuID0gdGhpcy52YWx1ZXMubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKHRva2VuLnZhbHVlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHRoaXMudmFsdWVzLnB1c2gobnVsbCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHJldHVybiBSZWFkZXI7XHJcblx0fSgpKTtcclxuXHR2YXIgVG9rZW5pemVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgZnVuY3Rpb24gVG9rZW5pemVyKGNvZGUsIGNvbmZpZykge1xyXG5cdCAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIgPSBuZXcgZXJyb3JfaGFuZGxlcl8xLkVycm9ySGFuZGxlcigpO1xyXG5cdCAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIudG9sZXJhbnQgPSBjb25maWcgPyAodHlwZW9mIGNvbmZpZy50b2xlcmFudCA9PT0gJ2Jvb2xlYW4nICYmIGNvbmZpZy50b2xlcmFudCkgOiBmYWxzZTtcclxuXHQgICAgICAgIHRoaXMuc2Nhbm5lciA9IG5ldyBzY2FubmVyXzEuU2Nhbm5lcihjb2RlLCB0aGlzLmVycm9ySGFuZGxlcik7XHJcblx0ICAgICAgICB0aGlzLnNjYW5uZXIudHJhY2tDb21tZW50ID0gY29uZmlnID8gKHR5cGVvZiBjb25maWcuY29tbWVudCA9PT0gJ2Jvb2xlYW4nICYmIGNvbmZpZy5jb21tZW50KSA6IGZhbHNlO1xyXG5cdCAgICAgICAgdGhpcy50cmFja1JhbmdlID0gY29uZmlnID8gKHR5cGVvZiBjb25maWcucmFuZ2UgPT09ICdib29sZWFuJyAmJiBjb25maWcucmFuZ2UpIDogZmFsc2U7XHJcblx0ICAgICAgICB0aGlzLnRyYWNrTG9jID0gY29uZmlnID8gKHR5cGVvZiBjb25maWcubG9jID09PSAnYm9vbGVhbicgJiYgY29uZmlnLmxvYykgOiBmYWxzZTtcclxuXHQgICAgICAgIHRoaXMuYnVmZmVyID0gW107XHJcblx0ICAgICAgICB0aGlzLnJlYWRlciA9IG5ldyBSZWFkZXIoKTtcclxuXHQgICAgfVxyXG5cdCAgICBUb2tlbml6ZXIucHJvdG90eXBlLmVycm9ycyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmVycm9ySGFuZGxlci5lcnJvcnM7XHJcblx0ICAgIH07XHJcblx0ICAgIFRva2VuaXplci5wcm90b3R5cGUuZ2V0TmV4dFRva2VuID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xyXG5cdCAgICAgICAgICAgIHZhciBjb21tZW50cyA9IHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLnRyYWNrQ29tbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbW1lbnRzLmxlbmd0aDsgKytpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGNvbW1lbnRzW2ldO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZShlLnNsaWNlWzBdLCBlLnNsaWNlWzFdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjb21tZW50ID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGUubXVsdGlMaW5lID8gJ0Jsb2NrQ29tbWVudCcgOiAnTGluZUNvbW1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrUmFuZ2UpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50LnJhbmdlID0gZS5yYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrTG9jKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudC5sb2MgPSBlLmxvYztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2goY29tbWVudCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLnNjYW5uZXIuZW9mKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxvYyA9IHZvaWQgMDtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tMb2MpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxvYyA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHt9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciBzdGFydFJlZ2V4ID0gKHRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4XSA9PT0gJy8nKSAmJiB0aGlzLnJlYWRlci5pc1JlZ2V4U3RhcnQoKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gc3RhcnRSZWdleCA/IHRoaXMuc2Nhbm5lci5zY2FuUmVnRXhwKCkgOiB0aGlzLnNjYW5uZXIubGV4KCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMucmVhZGVyLnB1c2godG9rZW4pO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlOiB0b2tlbl8xLlRva2VuTmFtZVt0b2tlbi50eXBlXSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNjYW5uZXIuc291cmNlLnNsaWNlKHRva2VuLnN0YXJ0LCB0b2tlbi5lbmQpXHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrUmFuZ2UpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVudHJ5LnJhbmdlID0gW3Rva2VuLnN0YXJ0LCB0b2tlbi5lbmRdO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrTG9jKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsb2MuZW5kID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydFxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVudHJ5LmxvYyA9IGxvYztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gOSAvKiBSZWd1bGFyRXhwcmVzc2lvbiAqLykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSB0b2tlbi5wYXR0ZXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdzID0gdG9rZW4uZmxhZ3M7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbnRyeS5yZWdleCA9IHsgcGF0dGVybjogcGF0dGVybiwgZmxhZ3M6IGZsYWdzIH07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaChlbnRyeSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNoaWZ0KCk7XHJcblx0ICAgIH07XHJcblx0ICAgIHJldHVybiBUb2tlbml6ZXI7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLlRva2VuaXplciA9IFRva2VuaXplcjtcclxuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pXG59KTtcbjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBlc3ByaW1hO1xuXG4vLyBCcm93c2VyaWZpZWQgdmVyc2lvbiBkb2VzIG5vdCBoYXZlIGVzcHJpbWFcbi8vXG4vLyAxLiBGb3Igbm9kZS5qcyBqdXN0IHJlcXVpcmUgbW9kdWxlIGFzIGRlcHNcbi8vIDIuIEZvciBicm93c2VyIHRyeSB0byByZXF1aXJlIG11ZHVsZSB2aWEgZXh0ZXJuYWwgQU1EIHN5c3RlbS5cbi8vICAgIElmIG5vdCBmb3VuZCAtIHRyeSB0byBmYWxsYmFjayB0byB3aW5kb3cuZXNwcmltYS4gSWYgbm90XG4vLyAgICBmb3VuZCB0b28gLSB0aGVuIGZhaWwgdG8gcGFyc2UuXG4vL1xudHJ5IHtcbiAgLy8gd29ya2Fyb3VuZCB0byBleGNsdWRlIHBhY2thZ2UgZnJvbSBicm93c2VyaWZ5IGxpc3QuXG4gIHZhciBfcmVxdWlyZSA9IHJlcXVpcmU7XG4gIGVzcHJpbWEgPSBfcmVxdWlyZSgnZXNwcmltYScpO1xufSBjYXRjaCAoXykge1xuICAvKmdsb2JhbCB3aW5kb3cgKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBlc3ByaW1hID0gd2luZG93LmVzcHJpbWE7XG59XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlSmF2YXNjcmlwdEZ1bmN0aW9uKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB0cnkge1xuICAgIHZhciBzb3VyY2UgPSAnKCcgKyBkYXRhICsgJyknLFxuICAgICAgICBhc3QgICAgPSBlc3ByaW1hLnBhcnNlKHNvdXJjZSwgeyByYW5nZTogdHJ1ZSB9KTtcblxuICAgIGlmIChhc3QudHlwZSAgICAgICAgICAgICAgICAgICAgIT09ICdQcm9ncmFtJyAgICAgICAgICAgICB8fFxuICAgICAgICBhc3QuYm9keS5sZW5ndGggICAgICAgICAgICAgIT09IDEgICAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgICBhc3QuYm9keVswXS50eXBlICAgICAgICAgICAgIT09ICdFeHByZXNzaW9uU3RhdGVtZW50JyB8fFxuICAgICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgIT09ICdGdW5jdGlvbkV4cHJlc3Npb24nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RKYXZhc2NyaXB0RnVuY3Rpb24oZGF0YSkge1xuICAvKmpzbGludCBldmlsOnRydWUqL1xuXG4gIHZhciBzb3VyY2UgPSAnKCcgKyBkYXRhICsgJyknLFxuICAgICAgYXN0ICAgID0gZXNwcmltYS5wYXJzZShzb3VyY2UsIHsgcmFuZ2U6IHRydWUgfSksXG4gICAgICBwYXJhbXMgPSBbXSxcbiAgICAgIGJvZHk7XG5cbiAgaWYgKGFzdC50eXBlICAgICAgICAgICAgICAgICAgICAhPT0gJ1Byb2dyYW0nICAgICAgICAgICAgIHx8XG4gICAgICBhc3QuYm9keS5sZW5ndGggICAgICAgICAgICAgIT09IDEgICAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgYXN0LmJvZHlbMF0udHlwZSAgICAgICAgICAgICE9PSAnRXhwcmVzc2lvblN0YXRlbWVudCcgfHxcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSAhPT0gJ0Z1bmN0aW9uRXhwcmVzc2lvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXNvbHZlIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBhc3QuYm9keVswXS5leHByZXNzaW9uLnBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHBhcmFtcy5wdXNoKHBhcmFtLm5hbWUpO1xuICB9KTtcblxuICBib2R5ID0gYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi5ib2R5LnJhbmdlO1xuXG4gIC8vIEVzcHJpbWEncyByYW5nZXMgaW5jbHVkZSB0aGUgZmlyc3QgJ3snIGFuZCB0aGUgbGFzdCAnfScgY2hhcmFjdGVycyBvblxuICAvLyBmdW5jdGlvbiBleHByZXNzaW9ucy4gU28gY3V0IHRoZW0gb3V0LlxuICAvKmVzbGludC1kaXNhYmxlIG5vLW5ldy1mdW5jKi9cbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihwYXJhbXMsIHNvdXJjZS5zbGljZShib2R5WzBdICsgMSwgYm9keVsxXSAtIDEpKTtcbn1cblxuZnVuY3Rpb24gcmVwcmVzZW50SmF2YXNjcmlwdEZ1bmN0aW9uKG9iamVjdCAvKiwgc3R5bGUqLykge1xuICByZXR1cm4gb2JqZWN0LnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6anMvZnVuY3Rpb24nLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlSmF2YXNjcmlwdEZ1bmN0aW9uLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdEphdmFzY3JpcHRGdW5jdGlvbixcbiAgcHJlZGljYXRlOiBpc0Z1bmN0aW9uLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudEphdmFzY3JpcHRGdW5jdGlvblxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlSmF2YXNjcmlwdFJlZ0V4cChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciByZWdleHAgPSBkYXRhLFxuICAgICAgdGFpbCAgID0gL1xcLyhbZ2ltXSopJC8uZXhlYyhkYXRhKSxcbiAgICAgIG1vZGlmaWVycyA9ICcnO1xuXG4gIC8vIGlmIHJlZ2V4cCBzdGFydHMgd2l0aCAnLycgaXQgY2FuIGhhdmUgbW9kaWZpZXJzIGFuZCBtdXN0IGJlIHByb3Blcmx5IGNsb3NlZFxuICAvLyBgL2Zvby9naW1gIC0gbW9kaWZpZXJzIHRhaWwgY2FuIGJlIG1heGltdW0gMyBjaGFyc1xuICBpZiAocmVnZXhwWzBdID09PSAnLycpIHtcbiAgICBpZiAodGFpbCkgbW9kaWZpZXJzID0gdGFpbFsxXTtcblxuICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID4gMykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGlmIGV4cHJlc3Npb24gc3RhcnRzIHdpdGggLywgaXMgc2hvdWxkIGJlIHByb3Blcmx5IHRlcm1pbmF0ZWRcbiAgICBpZiAocmVnZXhwW3JlZ2V4cC5sZW5ndGggLSBtb2RpZmllcnMubGVuZ3RoIC0gMV0gIT09ICcvJykgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdEphdmFzY3JpcHRSZWdFeHAoZGF0YSkge1xuICB2YXIgcmVnZXhwID0gZGF0YSxcbiAgICAgIHRhaWwgICA9IC9cXC8oW2dpbV0qKSQvLmV4ZWMoZGF0YSksXG4gICAgICBtb2RpZmllcnMgPSAnJztcblxuICAvLyBgL2Zvby9naW1gIC0gdGFpbCBjYW4gYmUgbWF4aW11bSA0IGNoYXJzXG4gIGlmIChyZWdleHBbMF0gPT09ICcvJykge1xuICAgIGlmICh0YWlsKSBtb2RpZmllcnMgPSB0YWlsWzFdO1xuICAgIHJlZ2V4cCA9IHJlZ2V4cC5zbGljZSgxLCByZWdleHAubGVuZ3RoIC0gbW9kaWZpZXJzLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXhwLCBtb2RpZmllcnMpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwKG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJy8nICsgb2JqZWN0LnNvdXJjZSArICcvJztcblxuICBpZiAob2JqZWN0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKG9iamVjdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmIChvYmplY3QuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6anMvcmVnZXhwJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZUphdmFzY3JpcHRSZWdFeHAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cCxcbiAgcHJlZGljYXRlOiBpc1JlZ0V4cCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdFVuZGVmaW5lZCgpIHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQqL1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmpzL3VuZGVmaW5lZCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQsXG4gIHByZWRpY2F0ZTogaXNVbmRlZmluZWQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50SmF2YXNjcmlwdFVuZGVmaW5lZFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxTZXQoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIGtleSwgb2JqZWN0ID0gZGF0YTtcblxuICBmb3IgKGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICBpZiAob2JqZWN0W2tleV0gIT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbFNldChkYXRhKSB7XG4gIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpzZXQnLCB7XG4gIGtpbmQ6ICdtYXBwaW5nJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxTZXQsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFNldFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoX3RvU3RyaW5nLmNhbGwocGFpcikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHJldHVybiBmYWxzZTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sUGFpcnMoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFBhaXJzLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxQYWlyc1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfdG9TdHJpbmcgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE9tYXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG9iamVjdEtleXMgPSBbXSwgaW5kZXgsIGxlbmd0aCwgcGFpciwgcGFpcktleSwgcGFpckhhc0tleSxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAgcGFpckhhc0tleSA9IGZhbHNlO1xuXG4gICAgaWYgKF90b1N0cmluZy5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChwYWlyLCBwYWlyS2V5KSkge1xuICAgICAgICBpZiAoIXBhaXJIYXNLZXkpIHBhaXJIYXNLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvYmplY3RLZXlzLmluZGV4T2YocGFpcktleSkgPT09IC0xKSBvYmplY3RLZXlzLnB1c2gocGFpcktleSk7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE9tYXAoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxPbWFwLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxPbWFwXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTsiLCIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cbnZhciBOb2RlQnVmZmVyO1xuXG50cnkge1xuICAvLyBBIHRyaWNrIGZvciBicm93c2VyaWZpZWQgdmVyc2lvbiwgdG8gbm90IGluY2x1ZGUgYEJ1ZmZlcmAgc2hpbVxuICB2YXIgX3JlcXVpcmUgPSByZXF1aXJlO1xuICBOb2RlQnVmZmVyID0gX3JlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbn0gY2F0Y2ggKF9fKSB7fVxuXG52YXIgVHlwZSAgICAgICA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuXG4vLyBbIDY0LCA2NSwgNjYgXSAtPiBbIHBhZGRpbmcsIENSLCBMRiBdXG52YXIgQkFTRTY0X01BUCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcblxccic7XG5cblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCaW5hcnkoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBjb2RlLCBpZHgsIGJpdGxlbiA9IDAsIG1heCA9IGRhdGEubGVuZ3RoLCBtYXAgPSBCQVNFNjRfTUFQO1xuXG4gIC8vIENvbnZlcnQgb25lIGJ5IG9uZS5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgY29kZSA9IG1hcC5pbmRleE9mKGRhdGEuY2hhckF0KGlkeCkpO1xuXG4gICAgLy8gU2tpcCBDUi9MRlxuICAgIGlmIChjb2RlID4gNjQpIGNvbnRpbnVlO1xuXG4gICAgLy8gRmFpbCBvbiBpbGxlZ2FsIGNoYXJhY3RlcnNcbiAgICBpZiAoY29kZSA8IDApIHJldHVybiBmYWxzZTtcblxuICAgIGJpdGxlbiArPSA2O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgYXJlIGFueSBiaXRzIGxlZnQsIHNvdXJjZSB3YXMgY29ycnVwdGVkXG4gIHJldHVybiAoYml0bGVuICUgOCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCaW5hcnkoZGF0YSkge1xuICB2YXIgaWR4LCB0YWlsYml0cyxcbiAgICAgIGlucHV0ID0gZGF0YS5yZXBsYWNlKC9bXFxyXFxuPV0vZywgJycpLCAvLyByZW1vdmUgQ1IvTEYgJiBwYWRkaW5nIHRvIHNpbXBsaWZ5IHNjYW5cbiAgICAgIG1heCA9IGlucHV0Lmxlbmd0aCxcbiAgICAgIG1hcCA9IEJBU0U2NF9NQVAsXG4gICAgICBiaXRzID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIC8vIENvbGxlY3QgYnkgNio0IGJpdHMgKDMgYnl0ZXMpXG5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgaWYgKChpZHggJSA0ID09PSAwKSAmJiBpZHgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gOCkgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKGJpdHMgJiAweEZGKTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgNikgfCBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaWR4KSk7XG4gIH1cblxuICAvLyBEdW1wIHRhaWxcblxuICB0YWlsYml0cyA9IChtYXggJSA0KSAqIDY7XG5cbiAgaWYgKHRhaWxiaXRzID09PSAwKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMTYpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gOCkgJiAweEZGKTtcbiAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDE4KSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMTApICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMikgJiAweEZGKTtcbiAgfSBlbHNlIGlmICh0YWlsYml0cyA9PT0gMTIpIHtcbiAgICByZXN1bHQucHVzaCgoYml0cyA+PiA0KSAmIDB4RkYpO1xuICB9XG5cbiAgLy8gV3JhcCBpbnRvIEJ1ZmZlciBmb3IgTm9kZUpTIGFuZCBsZWF2ZSBBcnJheSBmb3IgYnJvd3NlclxuICBpZiAoTm9kZUJ1ZmZlcikge1xuICAgIC8vIFN1cHBvcnQgbm9kZSA2LisgQnVmZmVyIEFQSSB3aGVuIGF2YWlsYWJsZVxuICAgIHJldHVybiBOb2RlQnVmZmVyLmZyb20gPyBOb2RlQnVmZmVyLmZyb20ocmVzdWx0KSA6IG5ldyBOb2RlQnVmZmVyKHJlc3VsdCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqZWN0KSB7XG4gIHJldHVybiBOb2RlQnVmZmVyICYmIE5vZGVCdWZmZXIuaXNCdWZmZXIob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCaW5hcnksXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJpbmFyeSxcbiAgcHJlZGljYXRlOiBpc0JpbmFyeSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sQmluYXJ5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sTWVyZ2UoZGF0YSkge1xuICByZXR1cm4gZGF0YSA9PT0gJzw8JyB8fCBkYXRhID09PSBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZScsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTWVyZ2Vcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIFlBTUxfREFURV9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldKSQnKTsgICAgICAgICAgICAgICAgICAgLy8gWzNdIGRheVxuXG52YXIgWUFNTF9USU1FU1RBTVBfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ14oWzAtOV1bMC05XVswLTldWzAtOV0pJyAgICAgICAgICArIC8vIFsxXSB5ZWFyXG4gICctKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgKyAvLyBbMl0gbW9udGhcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFszXSBkYXlcbiAgJyg/OltUdF18WyBcXFxcdF0rKScgICAgICAgICAgICAgICAgICsgLy8gLi4uXG4gICcoWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNF0gaG91clxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzVdIG1pbnV0ZVxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzZdIHNlY29uZFxuICAnKD86XFxcXC4oWzAtOV0qKSk/JyAgICAgICAgICAgICAgICAgKyAvLyBbN10gZnJhY3Rpb25cbiAgJyg/OlsgXFxcXHRdKihafChbLStdKShbMC05XVswLTldPyknICsgLy8gWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91clxuICAnKD86OihbMC05XVswLTldKSk/KSk/JCcpOyAgICAgICAgICAgLy8gWzExXSB0el9taW51dGVcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoWUFNTF9EQVRFX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgdmFyIG1hdGNoLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24gPSAwLFxuICAgICAgZGVsdGEgPSBudWxsLCB0el9ob3VyLCB0el9taW51dGUsIGRhdGU7XG5cbiAgbWF0Y2ggPSBZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgbWF0Y2ggPSBZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKTtcblxuICBpZiAobWF0Y2ggPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignRGF0ZSByZXNvbHZlIGVycm9yJyk7XG5cbiAgLy8gbWF0Y2g6IFsxXSB5ZWFyIFsyXSBtb250aCBbM10gZGF5XG5cbiAgeWVhciA9ICsobWF0Y2hbMV0pO1xuICBtb250aCA9ICsobWF0Y2hbMl0pIC0gMTsgLy8gSlMgbW9udGggc3RhcnRzIHdpdGggMFxuICBkYXkgPSArKG1hdGNoWzNdKTtcblxuICBpZiAoIW1hdGNoWzRdKSB7IC8vIG5vIGhvdXJcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSkpO1xuICB9XG5cbiAgLy8gbWF0Y2g6IFs0XSBob3VyIFs1XSBtaW51dGUgWzZdIHNlY29uZCBbN10gZnJhY3Rpb25cblxuICBob3VyID0gKyhtYXRjaFs0XSk7XG4gIG1pbnV0ZSA9ICsobWF0Y2hbNV0pO1xuICBzZWNvbmQgPSArKG1hdGNoWzZdKTtcblxuICBpZiAobWF0Y2hbN10pIHtcbiAgICBmcmFjdGlvbiA9IG1hdGNoWzddLnNsaWNlKDAsIDMpO1xuICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCAzKSB7IC8vIG1pbGxpLXNlY29uZHNcbiAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICB9XG4gICAgZnJhY3Rpb24gPSArZnJhY3Rpb247XG4gIH1cblxuICAvLyBtYXRjaDogWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91ciBbMTFdIHR6X21pbnV0ZVxuXG4gIGlmIChtYXRjaFs5XSkge1xuICAgIHR6X2hvdXIgPSArKG1hdGNoWzEwXSk7XG4gICAgdHpfbWludXRlID0gKyhtYXRjaFsxMV0gfHwgMCk7XG4gICAgZGVsdGEgPSAodHpfaG91ciAqIDYwICsgdHpfbWludXRlKSAqIDYwMDAwOyAvLyBkZWx0YSBpbiBtaWxpLXNlY29uZHNcbiAgICBpZiAobWF0Y2hbOV0gPT09ICctJykgZGVsdGEgPSAtZGVsdGE7XG4gIH1cblxuICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uKSk7XG5cbiAgaWYgKGRlbHRhKSBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSBkZWx0YSk7XG5cbiAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxUaW1lc3RhbXAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHJldHVybiBvYmplY3QudG9JU09TdHJpbmcoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxUaW1lc3RhbXAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFRpbWVzdGFtcCxcbiAgaW5zdGFuY2VPZjogRGF0ZSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sVGltZXN0YW1wXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIFR5cGUgICA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIFlBTUxfRkxPQVRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoXG4gIC8vIDIuNWU0LCAyLjUgYW5kIGludGVnZXJzXG4gICdeKD86Wy0rXT8oPzowfFsxLTldWzAtOV9dKikoPzpcXFxcLlswLTlfXSopPyg/OltlRV1bLStdP1swLTldKyk/JyArXG4gIC8vIC4yZTQsIC4yXG4gIC8vIHNwZWNpYWwgY2FzZSwgc2VlbXMgbm90IGZyb20gc3BlY1xuICAnfFxcXFwuWzAtOV9dKyg/OltlRV1bLStdP1swLTldKyk/JyArXG4gIC8vIDIwOjU5XG4gICd8Wy0rXT9bMC05XVswLTlfXSooPzo6WzAtNV0/WzAtOV0pK1xcXFwuWzAtOV9dKicgK1xuICAvLyAuaW5mXG4gICd8Wy0rXT9cXFxcLig/OmluZnxJbmZ8SU5GKScgK1xuICAvLyAubmFuXG4gICd8XFxcXC4oPzpuYW58TmFOfE5BTikpJCcpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEZsb2F0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoIVlBTUxfRkxPQVRfUEFUVEVSTi50ZXN0KGRhdGEpIHx8XG4gICAgICAvLyBRdWljayBoYWNrIHRvIG5vdCBhbGxvdyBpbnRlZ2VycyBlbmQgd2l0aCBgX2BcbiAgICAgIC8vIFByb2JhYmx5IHNob3VsZCB1cGRhdGUgcmVnZXhwICYgY2hlY2sgc3BlZWRcbiAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAxXSA9PT0gJ18nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxGbG9hdChkYXRhKSB7XG4gIHZhciB2YWx1ZSwgc2lnbiwgYmFzZSwgZGlnaXRzO1xuXG4gIHZhbHVlICA9IGRhdGEucmVwbGFjZSgvXy9nLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgc2lnbiAgID0gdmFsdWVbMF0gPT09ICctJyA/IC0xIDogMTtcbiAgZGlnaXRzID0gW107XG5cbiAgaWYgKCcrLScuaW5kZXhPZih2YWx1ZVswXSkgPj0gMCkge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcuaW5mJykge1xuICAgIHJldHVybiAoc2lnbiA9PT0gMSkgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJy5uYW4nKSB7XG4gICAgcmV0dXJuIE5hTjtcblxuICB9IGVsc2UgaWYgKHZhbHVlLmluZGV4T2YoJzonKSA+PSAwKSB7XG4gICAgdmFsdWUuc3BsaXQoJzonKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICBkaWdpdHMudW5zaGlmdChwYXJzZUZsb2F0KHYsIDEwKSk7XG4gICAgfSk7XG5cbiAgICB2YWx1ZSA9IDAuMDtcbiAgICBiYXNlID0gMTtcblxuICAgIGRpZ2l0cy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICB2YWx1ZSArPSBkICogYmFzZTtcbiAgICAgIGJhc2UgKj0gNjA7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2lnbiAqIHZhbHVlO1xuXG4gIH1cbiAgcmV0dXJuIHNpZ24gKiBwYXJzZUZsb2F0KHZhbHVlLCAxMCk7XG59XG5cblxudmFyIFNDSUVOVElGSUNfV0lUSE9VVF9ET1QgPSAvXlstK10/WzAtOV0rZS87XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxGbG9hdChvYmplY3QsIHN0eWxlKSB7XG4gIHZhciByZXM7XG5cbiAgaWYgKGlzTmFOKG9iamVjdCkpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy5uYW4nO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICcuTkFOJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLk5hTic7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICcuaW5mJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLklORic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy5JbmYnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IG9iamVjdCkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLS5pbmYnO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICctLklORic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy0uSW5mJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpIHtcbiAgICByZXR1cm4gJy0wLjAnO1xuICB9XG5cbiAgcmVzID0gb2JqZWN0LnRvU3RyaW5nKDEwKTtcblxuICAvLyBKUyBzdHJpbmdpZmllciBjYW4gYnVpbGQgc2NpZW50aWZpYyBmb3JtYXQgd2l0aG91dCBkb3RzOiA1ZS0xMDAsXG4gIC8vIHdoaWxlIFlBTUwgcmVxdXJlcyBkb3Q6IDUuZS0xMDAuIEZpeCBpdCB3aXRoIHNpbXBsZSBoYWNrXG5cbiAgcmV0dXJuIFNDSUVOVElGSUNfV0lUSE9VVF9ET1QudGVzdChyZXMpID8gcmVzLnJlcGxhY2UoJ2UnLCAnLmUnKSA6IHJlcztcbn1cblxuZnVuY3Rpb24gaXNGbG9hdChvYmplY3QpIHtcbiAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpICYmXG4gICAgICAgICAob2JqZWN0ICUgMSAhPT0gMCB8fCBjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxGbG9hdCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sRmxvYXQsXG4gIHByZWRpY2F0ZTogaXNGbG9hdCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sRmxvYXQsXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgVHlwZSAgID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiBpc0hleENvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpIHx8XG4gICAgICAgICAoKDB4NDEvKiBBICovIDw9IGMpICYmIChjIDw9IDB4NDYvKiBGICovKSkgfHxcbiAgICAgICAgICgoMHg2MS8qIGEgKi8gPD0gYykgJiYgKGMgPD0gMHg2Ni8qIGYgKi8pKTtcbn1cblxuZnVuY3Rpb24gaXNPY3RDb2RlKGMpIHtcbiAgcmV0dXJuICgoMHgzMC8qIDAgKi8gPD0gYykgJiYgKGMgPD0gMHgzNy8qIDcgKi8pKTtcbn1cblxuZnVuY3Rpb24gaXNEZWNDb2RlKGMpIHtcbiAgcmV0dXJuICgoMHgzMC8qIDAgKi8gPD0gYykgJiYgKGMgPD0gMHgzOS8qIDkgKi8pKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxJbnRlZ2VyKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGgsXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBoYXNEaWdpdHMgPSBmYWxzZSxcbiAgICAgIGNoO1xuXG4gIGlmICghbWF4KSByZXR1cm4gZmFsc2U7XG5cbiAgY2ggPSBkYXRhW2luZGV4XTtcblxuICAvLyBzaWduXG4gIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpIHtcbiAgICBjaCA9IGRhdGFbKytpbmRleF07XG4gIH1cblxuICBpZiAoY2ggPT09ICcwJykge1xuICAgIC8vIDBcbiAgICBpZiAoaW5kZXggKyAxID09PSBtYXgpIHJldHVybiB0cnVlO1xuICAgIGNoID0gZGF0YVsrK2luZGV4XTtcblxuICAgIC8vIGJhc2UgMiwgYmFzZSA4LCBiYXNlIDE2XG5cbiAgICBpZiAoY2ggPT09ICdiJykge1xuICAgICAgLy8gYmFzZSAyXG4gICAgICBpbmRleCsrO1xuXG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY2ggIT09ICcwJyAmJiBjaCAhPT0gJzEnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzRGlnaXRzICYmIGNoICE9PSAnXyc7XG4gICAgfVxuXG5cbiAgICBpZiAoY2ggPT09ICd4Jykge1xuICAgICAgLy8gYmFzZSAxNlxuICAgICAgaW5kZXgrKztcblxuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFpc0hleENvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG5cbiAgICAvLyBiYXNlIDhcbiAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICBpZiAoIWlzT2N0Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICB9XG5cbiAgLy8gYmFzZSAxMCAoZXhjZXB0IDApIG9yIGJhc2UgNjBcblxuICAvLyB2YWx1ZSBzaG91bGQgbm90IHN0YXJ0IHdpdGggYF9gO1xuICBpZiAoY2ggPT09ICdfJykgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgIGlmIChjaCA9PT0gJzonKSBicmVhaztcbiAgICBpZiAoIWlzRGVjQ29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICB9XG5cbiAgLy8gU2hvdWxkIGhhdmUgZGlnaXRzIGFuZCBzaG91bGQgbm90IGVuZCB3aXRoIGBfYFxuICBpZiAoIWhhc0RpZ2l0cyB8fCBjaCA9PT0gJ18nKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gaWYgIWJhc2U2MCAtIGRvbmU7XG4gIGlmIChjaCAhPT0gJzonKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBiYXNlNjAgYWxtb3N0IG5vdCB1c2VkLCBubyBuZWVkcyB0byBvcHRpbWl6ZVxuICByZXR1cm4gL14oOlswLTVdP1swLTldKSskLy50ZXN0KGRhdGEuc2xpY2UoaW5kZXgpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbEludGVnZXIoZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLCBzaWduID0gMSwgY2gsIGJhc2UsIGRpZ2l0cyA9IFtdO1xuXG4gIGlmICh2YWx1ZS5pbmRleE9mKCdfJykgIT09IC0xKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9fL2csICcnKTtcbiAgfVxuXG4gIGNoID0gdmFsdWVbMF07XG5cbiAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykge1xuICAgIGlmIChjaCA9PT0gJy0nKSBzaWduID0gLTE7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgICBjaCA9IHZhbHVlWzBdO1xuICB9XG5cbiAgaWYgKHZhbHVlID09PSAnMCcpIHJldHVybiAwO1xuXG4gIGlmIChjaCA9PT0gJzAnKSB7XG4gICAgaWYgKHZhbHVlWzFdID09PSAnYicpIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIDIpO1xuICAgIGlmICh2YWx1ZVsxXSA9PT0gJ3gnKSByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLCAxNik7XG4gICAgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZSwgOCk7XG4gIH1cblxuICBpZiAodmFsdWUuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgIHZhbHVlLnNwbGl0KCc6JykuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgZGlnaXRzLnVuc2hpZnQocGFyc2VJbnQodiwgMTApKTtcbiAgICB9KTtcblxuICAgIHZhbHVlID0gMDtcbiAgICBiYXNlID0gMTtcblxuICAgIGRpZ2l0cy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICB2YWx1ZSArPSAoZCAqIGJhc2UpO1xuICAgICAgYmFzZSAqPSA2MDtcbiAgICB9KTtcblxuICAgIHJldHVybiBzaWduICogdmFsdWU7XG5cbiAgfVxuXG4gIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUsIDEwKTtcbn1cblxuZnVuY3Rpb24gaXNJbnRlZ2VyKG9iamVjdCkge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiZcbiAgICAgICAgIChvYmplY3QgJSAxID09PSAwICYmICFjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sSW50ZWdlcixcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sSW50ZWdlcixcbiAgcHJlZGljYXRlOiBpc0ludGVnZXIsXG4gIHJlcHJlc2VudDoge1xuICAgIGJpbmFyeTogICAgICBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiAnMGInICsgb2JqZWN0LnRvU3RyaW5nKDIpOyB9LFxuICAgIG9jdGFsOiAgICAgICBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiAnMCcgICsgb2JqZWN0LnRvU3RyaW5nKDgpOyB9LFxuICAgIGRlY2ltYWw6ICAgICBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiAgICAgICAgb2JqZWN0LnRvU3RyaW5nKDEwKTsgfSxcbiAgICBoZXhhZGVjaW1hbDogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gJzB4JyArIG9iamVjdC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdkZWNpbWFsJyxcbiAgc3R5bGVBbGlhc2VzOiB7XG4gICAgYmluYXJ5OiAgICAgIFsgMiwgICdiaW4nIF0sXG4gICAgb2N0YWw6ICAgICAgIFsgOCwgICdvY3QnIF0sXG4gICAgZGVjaW1hbDogICAgIFsgMTAsICdkZWMnIF0sXG4gICAgaGV4YWRlY2ltYWw6IFsgMTYsICdoZXgnIF1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEJvb2xlYW4oZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcblxuICByZXR1cm4gKG1heCA9PT0gNCAmJiAoZGF0YSA9PT0gJ3RydWUnIHx8IGRhdGEgPT09ICdUcnVlJyB8fCBkYXRhID09PSAnVFJVRScpKSB8fFxuICAgICAgICAgKG1heCA9PT0gNSAmJiAoZGF0YSA9PT0gJ2ZhbHNlJyB8fCBkYXRhID09PSAnRmFsc2UnIHx8IGRhdGEgPT09ICdGQUxTRScpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbEJvb2xlYW4oZGF0YSkge1xuICByZXR1cm4gZGF0YSA9PT0gJ3RydWUnIHx8XG4gICAgICAgICBkYXRhID09PSAnVHJ1ZScgfHxcbiAgICAgICAgIGRhdGEgPT09ICdUUlVFJztcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEJvb2xlYW5dJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sQm9vbGVhbixcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sQm9vbGVhbixcbiAgcHJlZGljYXRlOiBpc0Jvb2xlYW4sXG4gIHJlcHJlc2VudDoge1xuICAgIGxvd2VyY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ3RydWUnIDogJ2ZhbHNlJzsgfSxcbiAgICB1cHBlcmNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICdUUlVFJyA6ICdGQUxTRSc7IH0sXG4gICAgY2FtZWxjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAnVHJ1ZScgOiAnRmFsc2UnOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxOdWxsKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcblxuICByZXR1cm4gKG1heCA9PT0gMSAmJiBkYXRhID09PSAnficpIHx8XG4gICAgICAgICAobWF4ID09PSA0ICYmIChkYXRhID09PSAnbnVsbCcgfHwgZGF0YSA9PT0gJ051bGwnIHx8IGRhdGEgPT09ICdOVUxMJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTnVsbCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sTnVsbCxcbiAgcHJlZGljYXRlOiBpc051bGwsXG4gIHJlcHJlc2VudDoge1xuICAgIGNhbm9uaWNhbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ34nOyAgICB9LFxuICAgIGxvd2VyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ251bGwnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ05VTEwnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ051bGwnOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWFwJywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307IH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2VxJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdOyB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogJyc7IH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5cbmZ1bmN0aW9uIE1hcmsobmFtZSwgYnVmZmVyLCBwb3NpdGlvbiwgbGluZSwgY29sdW1uKSB7XG4gIHRoaXMubmFtZSAgICAgPSBuYW1lO1xuICB0aGlzLmJ1ZmZlciAgID0gYnVmZmVyO1xuICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gIHRoaXMubGluZSAgICAgPSBsaW5lO1xuICB0aGlzLmNvbHVtbiAgID0gY29sdW1uO1xufVxuXG5cbk1hcmsucHJvdG90eXBlLmdldFNuaXBwZXQgPSBmdW5jdGlvbiBnZXRTbmlwcGV0KGluZGVudCwgbWF4TGVuZ3RoKSB7XG4gIHZhciBoZWFkLCBzdGFydCwgdGFpbCwgZW5kLCBzbmlwcGV0O1xuXG4gIGlmICghdGhpcy5idWZmZXIpIHJldHVybiBudWxsO1xuXG4gIGluZGVudCA9IGluZGVudCB8fCA0O1xuICBtYXhMZW5ndGggPSBtYXhMZW5ndGggfHwgNzU7XG5cbiAgaGVhZCA9ICcnO1xuICBzdGFydCA9IHRoaXMucG9zaXRpb247XG5cbiAgd2hpbGUgKHN0YXJ0ID4gMCAmJiAnXFx4MDBcXHJcXG5cXHg4NVxcdTIwMjhcXHUyMDI5Jy5pbmRleE9mKHRoaXMuYnVmZmVyLmNoYXJBdChzdGFydCAtIDEpKSA9PT0gLTEpIHtcbiAgICBzdGFydCAtPSAxO1xuICAgIGlmICh0aGlzLnBvc2l0aW9uIC0gc3RhcnQgPiAobWF4TGVuZ3RoIC8gMiAtIDEpKSB7XG4gICAgICBoZWFkID0gJyAuLi4gJztcbiAgICAgIHN0YXJ0ICs9IDU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0YWlsID0gJyc7XG4gIGVuZCA9IHRoaXMucG9zaXRpb247XG5cbiAgd2hpbGUgKGVuZCA8IHRoaXMuYnVmZmVyLmxlbmd0aCAmJiAnXFx4MDBcXHJcXG5cXHg4NVxcdTIwMjhcXHUyMDI5Jy5pbmRleE9mKHRoaXMuYnVmZmVyLmNoYXJBdChlbmQpKSA9PT0gLTEpIHtcbiAgICBlbmQgKz0gMTtcbiAgICBpZiAoZW5kIC0gdGhpcy5wb3NpdGlvbiA+IChtYXhMZW5ndGggLyAyIC0gMSkpIHtcbiAgICAgIHRhaWwgPSAnIC4uLiAnO1xuICAgICAgZW5kIC09IDU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzbmlwcGV0ID0gdGhpcy5idWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgcmV0dXJuIGNvbW1vbi5yZXBlYXQoJyAnLCBpbmRlbnQpICsgaGVhZCArIHNuaXBwZXQgKyB0YWlsICsgJ1xcbicgK1xuICAgICAgICAgY29tbW9uLnJlcGVhdCgnICcsIGluZGVudCArIHRoaXMucG9zaXRpb24gLSBzdGFydCArIGhlYWQubGVuZ3RoKSArICdeJztcbn07XG5cblxuTWFyay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhjb21wYWN0KSB7XG4gIHZhciBzbmlwcGV0LCB3aGVyZSA9ICcnO1xuXG4gIGlmICh0aGlzLm5hbWUpIHtcbiAgICB3aGVyZSArPSAnaW4gXCInICsgdGhpcy5uYW1lICsgJ1wiICc7XG4gIH1cblxuICB3aGVyZSArPSAnYXQgbGluZSAnICsgKHRoaXMubGluZSArIDEpICsgJywgY29sdW1uICcgKyAodGhpcy5jb2x1bW4gKyAxKTtcblxuICBpZiAoIWNvbXBhY3QpIHtcbiAgICBzbmlwcGV0ID0gdGhpcy5nZXRTbmlwcGV0KCk7XG5cbiAgICBpZiAoc25pcHBldCkge1xuICAgICAgd2hlcmUgKz0gJzpcXG4nICsgc25pcHBldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd2hlcmU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWFyaztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuLG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cblxudmFyIGNvbW1vbiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIFlBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xudmFyIE1hcmsgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL21hcmsnKTtcbnZhciBERUZBVUxUX1NBRkVfU0NIRU1BID0gcmVxdWlyZSgnLi9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG52YXIgREVGQVVMVF9GVUxMX1NDSEVNQSA9IHJlcXVpcmUoJy4vc2NoZW1hL2RlZmF1bHRfZnVsbCcpO1xuXG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5cbnZhciBDT05URVhUX0ZMT1dfSU4gICA9IDE7XG52YXIgQ09OVEVYVF9GTE9XX09VVCAgPSAyO1xudmFyIENPTlRFWFRfQkxPQ0tfSU4gID0gMztcbnZhciBDT05URVhUX0JMT0NLX09VVCA9IDQ7XG5cblxudmFyIENIT01QSU5HX0NMSVAgID0gMTtcbnZhciBDSE9NUElOR19TVFJJUCA9IDI7XG52YXIgQ0hPTVBJTkdfS0VFUCAgPSAzO1xuXG5cbnZhciBQQVRURVJOX05PTl9QUklOVEFCTEUgICAgICAgICA9IC9bXFx4MDAtXFx4MDhcXHgwQlxceDBDXFx4MEUtXFx4MUZcXHg3Ri1cXHg4NFxceDg2LVxceDlGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcbnZhciBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUyA9IC9bXFx4ODVcXHUyMDI4XFx1MjAyOV0vO1xudmFyIFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTICAgICAgID0gL1ssXFxbXFxdXFx7XFx9XS87XG52YXIgUEFUVEVSTl9UQUdfSEFORExFICAgICAgICAgICAgPSAvXig/OiF8ISF8IVthLXpcXC1dKyEpJC9pO1xudmFyIFBBVFRFUk5fVEFHX1VSSSAgICAgICAgICAgICAgID0gL14oPzohfFteLFxcW1xcXVxce1xcfV0pKD86JVswLTlhLWZdezJ9fFswLTlhLXpcXC0jO1xcL1xcPzpAJj1cXCtcXCQsX1xcLiF+XFwqJ1xcKFxcKVxcW1xcXV0pKiQvaTtcblxuXG5mdW5jdGlvbiBpc19FT0woYykge1xuICByZXR1cm4gKGMgPT09IDB4MEEvKiBMRiAqLykgfHwgKGMgPT09IDB4MEQvKiBDUiAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX1dISVRFX1NQQUNFKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fCAoYyA9PT0gMHgyMC8qIFNwYWNlICovKTtcbn1cblxuZnVuY3Rpb24gaXNfV1NfT1JfRU9MKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fFxuICAgICAgICAgKGMgPT09IDB4MjAvKiBTcGFjZSAqLykgfHxcbiAgICAgICAgIChjID09PSAweDBBLyogTEYgKi8pIHx8XG4gICAgICAgICAoYyA9PT0gMHgwRC8qIENSICovKTtcbn1cblxuZnVuY3Rpb24gaXNfRkxPV19JTkRJQ0FUT1IoYykge1xuICByZXR1cm4gYyA9PT0gMHgyQy8qICwgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4NUIvKiBbICovIHx8XG4gICAgICAgICBjID09PSAweDVELyogXSAqLyB8fFxuICAgICAgICAgYyA9PT0gMHg3Qi8qIHsgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4N0QvKiB9ICovO1xufVxuXG5mdW5jdGlvbiBmcm9tSGV4Q29kZShjKSB7XG4gIHZhciBsYztcblxuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG4gIGxjID0gYyB8IDB4MjA7XG5cbiAgaWYgKCgweDYxLyogYSAqLyA8PSBsYykgJiYgKGxjIDw9IDB4NjYvKiBmICovKSkge1xuICAgIHJldHVybiBsYyAtIDB4NjEgKyAxMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlZEhleExlbihjKSB7XG4gIGlmIChjID09PSAweDc4LyogeCAqLykgeyByZXR1cm4gMjsgfVxuICBpZiAoYyA9PT0gMHg3NS8qIHUgKi8pIHsgcmV0dXJuIDQ7IH1cbiAgaWYgKGMgPT09IDB4NTUvKiBVICovKSB7IHJldHVybiA4OyB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBmcm9tRGVjaW1hbENvZGUoYykge1xuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRXNjYXBlU2VxdWVuY2UoYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBpbmRlbnQgKi9cbiAgcmV0dXJuIChjID09PSAweDMwLyogMCAqLykgPyAnXFx4MDAnIDpcbiAgICAgICAgKGMgPT09IDB4NjEvKiBhICovKSA/ICdcXHgwNycgOlxuICAgICAgICAoYyA9PT0gMHg2Mi8qIGIgKi8pID8gJ1xceDA4JyA6XG4gICAgICAgIChjID09PSAweDc0LyogdCAqLykgPyAnXFx4MDknIDpcbiAgICAgICAgKGMgPT09IDB4MDkvKiBUYWIgKi8pID8gJ1xceDA5JyA6XG4gICAgICAgIChjID09PSAweDZFLyogbiAqLykgPyAnXFx4MEEnIDpcbiAgICAgICAgKGMgPT09IDB4NzYvKiB2ICovKSA/ICdcXHgwQicgOlxuICAgICAgICAoYyA9PT0gMHg2Ni8qIGYgKi8pID8gJ1xceDBDJyA6XG4gICAgICAgIChjID09PSAweDcyLyogciAqLykgPyAnXFx4MEQnIDpcbiAgICAgICAgKGMgPT09IDB4NjUvKiBlICovKSA/ICdcXHgxQicgOlxuICAgICAgICAoYyA9PT0gMHgyMC8qIFNwYWNlICovKSA/ICcgJyA6XG4gICAgICAgIChjID09PSAweDIyLyogXCIgKi8pID8gJ1xceDIyJyA6XG4gICAgICAgIChjID09PSAweDJGLyogLyAqLykgPyAnLycgOlxuICAgICAgICAoYyA9PT0gMHg1Qy8qIFxcICovKSA/ICdcXHg1QycgOlxuICAgICAgICAoYyA9PT0gMHg0RS8qIE4gKi8pID8gJ1xceDg1JyA6XG4gICAgICAgIChjID09PSAweDVGLyogXyAqLykgPyAnXFx4QTAnIDpcbiAgICAgICAgKGMgPT09IDB4NEMvKiBMICovKSA/ICdcXHUyMDI4JyA6XG4gICAgICAgIChjID09PSAweDUwLyogUCAqLykgPyAnXFx1MjAyOScgOiAnJztcbn1cblxuZnVuY3Rpb24gY2hhckZyb21Db2RlcG9pbnQoYykge1xuICBpZiAoYyA8PSAweEZGRkYpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgfVxuICAvLyBFbmNvZGUgVVRGLTE2IHN1cnJvZ2F0ZSBwYWlyXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiNDb2RlX3BvaW50c19VLjJCMDEwMDAwX3RvX1UuMkIxMEZGRkZcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgKChjIC0gMHgwMTAwMDApID4+IDEwKSArIDB4RDgwMCxcbiAgICAoKGMgLSAweDAxMDAwMCkgJiAweDAzRkYpICsgMHhEQzAwXG4gICk7XG59XG5cbnZhciBzaW1wbGVFc2NhcGVDaGVjayA9IG5ldyBBcnJheSgyNTYpOyAvLyBpbnRlZ2VyLCBmb3IgZmFzdCBhY2Nlc3NcbnZhciBzaW1wbGVFc2NhcGVNYXAgPSBuZXcgQXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgc2ltcGxlRXNjYXBlQ2hlY2tbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKSA/IDEgOiAwO1xuICBzaW1wbGVFc2NhcGVNYXBbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKTtcbn1cblxuXG5mdW5jdGlvbiBTdGF0ZShpbnB1dCwgb3B0aW9ucykge1xuICB0aGlzLmlucHV0ID0gaW5wdXQ7XG5cbiAgdGhpcy5maWxlbmFtZSAgPSBvcHRpb25zWydmaWxlbmFtZSddICB8fCBudWxsO1xuICB0aGlzLnNjaGVtYSAgICA9IG9wdGlvbnNbJ3NjaGVtYSddICAgIHx8IERFRkFVTFRfRlVMTF9TQ0hFTUE7XG4gIHRoaXMub25XYXJuaW5nID0gb3B0aW9uc1snb25XYXJuaW5nJ10gfHwgbnVsbDtcbiAgdGhpcy5sZWdhY3kgICAgPSBvcHRpb25zWydsZWdhY3knXSAgICB8fCBmYWxzZTtcbiAgdGhpcy5qc29uICAgICAgPSBvcHRpb25zWydqc29uJ10gICAgICB8fCBmYWxzZTtcbiAgdGhpcy5saXN0ZW5lciAgPSBvcHRpb25zWydsaXN0ZW5lciddICB8fCBudWxsO1xuXG4gIHRoaXMuaW1wbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQ7XG4gIHRoaXMudHlwZU1hcCAgICAgICA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkVHlwZU1hcDtcblxuICB0aGlzLmxlbmd0aCAgICAgPSBpbnB1dC5sZW5ndGg7XG4gIHRoaXMucG9zaXRpb24gICA9IDA7XG4gIHRoaXMubGluZSAgICAgICA9IDA7XG4gIHRoaXMubGluZVN0YXJ0ICA9IDA7XG4gIHRoaXMubGluZUluZGVudCA9IDA7XG5cbiAgdGhpcy5kb2N1bWVudHMgPSBbXTtcblxuICAvKlxuICB0aGlzLnZlcnNpb247XG4gIHRoaXMuY2hlY2tMaW5lQnJlYWtzO1xuICB0aGlzLnRhZ01hcDtcbiAgdGhpcy5hbmNob3JNYXA7XG4gIHRoaXMudGFnO1xuICB0aGlzLmFuY2hvcjtcbiAgdGhpcy5raW5kO1xuICB0aGlzLnJlc3VsdDsqL1xuXG59XG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSkge1xuICByZXR1cm4gbmV3IFlBTUxFeGNlcHRpb24oXG4gICAgbWVzc2FnZSxcbiAgICBuZXcgTWFyayhzdGF0ZS5maWxlbmFtZSwgc3RhdGUuaW5wdXQsIHN0YXRlLnBvc2l0aW9uLCBzdGF0ZS5saW5lLCAoc3RhdGUucG9zaXRpb24gLSBzdGF0ZS5saW5lU3RhcnQpKSk7XG59XG5cbmZ1bmN0aW9uIHRocm93RXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgdGhyb3cgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHRocm93V2FybmluZyhzdGF0ZSwgbWVzc2FnZSkge1xuICBpZiAoc3RhdGUub25XYXJuaW5nKSB7XG4gICAgc3RhdGUub25XYXJuaW5nLmNhbGwobnVsbCwgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSkpO1xuICB9XG59XG5cblxudmFyIGRpcmVjdGl2ZUhhbmRsZXJzID0ge1xuXG4gIFlBTUw6IGZ1bmN0aW9uIGhhbmRsZVlhbWxEaXJlY3RpdmUoc3RhdGUsIG5hbWUsIGFyZ3MpIHtcblxuICAgIHZhciBtYXRjaCwgbWFqb3IsIG1pbm9yO1xuXG4gICAgaWYgKHN0YXRlLnZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiAlWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdZQU1MIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgbWF0Y2ggPSAvXihbMC05XSspXFwuKFswLTldKykkLy5leGVjKGFyZ3NbMF0pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCBhcmd1bWVudCBvZiB0aGUgWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBtYWpvciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgbWlub3IgPSBwYXJzZUludChtYXRjaFsyXSwgMTApO1xuXG4gICAgaWYgKG1ham9yICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnQnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS52ZXJzaW9uID0gYXJnc1swXTtcbiAgICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSAobWlub3IgPCAyKTtcblxuICAgIGlmIChtaW5vciAhPT0gMSAmJiBtaW5vciAhPT0gMikge1xuICAgICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAndW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudCcpO1xuICAgIH1cbiAgfSxcblxuICBUQUc6IGZ1bmN0aW9uIGhhbmRsZVRhZ0RpcmVjdGl2ZShzdGF0ZSwgbmFtZSwgYXJncykge1xuXG4gICAgdmFyIGhhbmRsZSwgcHJlZml4O1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnVEFHIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgdHdvIGFyZ3VtZW50cycpO1xuICAgIH1cblxuICAgIGhhbmRsZSA9IGFyZ3NbMF07XG4gICAgcHJlZml4ID0gYXJnc1sxXTtcblxuICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QoaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgdGFnIGhhbmRsZSAoZmlyc3QgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLnRhZ01hcCwgaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RoZXJlIGlzIGEgcHJldmlvdXNseSBkZWNsYXJlZCBzdWZmaXggZm9yIFwiJyArIGhhbmRsZSArICdcIiB0YWcgaGFuZGxlJyk7XG4gICAgfVxuXG4gICAgaWYgKCFQQVRURVJOX1RBR19VUkkudGVzdChwcmVmaXgpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCB0YWcgcHJlZml4IChzZWNvbmQgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgc3RhdGUudGFnTWFwW2hhbmRsZV0gPSBwcmVmaXg7XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gY2FwdHVyZVNlZ21lbnQoc3RhdGUsIHN0YXJ0LCBlbmQsIGNoZWNrSnNvbikge1xuICB2YXIgX3Bvc2l0aW9uLCBfbGVuZ3RoLCBfY2hhcmFjdGVyLCBfcmVzdWx0O1xuXG4gIGlmIChzdGFydCA8IGVuZCkge1xuICAgIF9yZXN1bHQgPSBzdGF0ZS5pbnB1dC5zbGljZShzdGFydCwgZW5kKTtcblxuICAgIGlmIChjaGVja0pzb24pIHtcbiAgICAgIGZvciAoX3Bvc2l0aW9uID0gMCwgX2xlbmd0aCA9IF9yZXN1bHQubGVuZ3RoOyBfcG9zaXRpb24gPCBfbGVuZ3RoOyBfcG9zaXRpb24gKz0gMSkge1xuICAgICAgICBfY2hhcmFjdGVyID0gX3Jlc3VsdC5jaGFyQ29kZUF0KF9wb3NpdGlvbik7XG4gICAgICAgIGlmICghKF9jaGFyYWN0ZXIgPT09IDB4MDkgfHxcbiAgICAgICAgICAgICAgKDB4MjAgPD0gX2NoYXJhY3RlciAmJiBfY2hhcmFjdGVyIDw9IDB4MTBGRkZGKSkpIHtcbiAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZXhwZWN0ZWQgdmFsaWQgSlNPTiBjaGFyYWN0ZXInKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoUEFUVEVSTl9OT05fUFJJTlRBQkxFLnRlc3QoX3Jlc3VsdCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0aGUgc3RyZWFtIGNvbnRhaW5zIG5vbi1wcmludGFibGUgY2hhcmFjdGVycycpO1xuICAgIH1cblxuICAgIHN0YXRlLnJlc3VsdCArPSBfcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFwcGluZ3Moc3RhdGUsIGRlc3RpbmF0aW9uLCBzb3VyY2UsIG92ZXJyaWRhYmxlS2V5cykge1xuICB2YXIgc291cmNlS2V5cywga2V5LCBpbmRleCwgcXVhbnRpdHk7XG5cbiAgaWYgKCFjb21tb24uaXNPYmplY3Qoc291cmNlKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW5ub3QgbWVyZ2UgbWFwcGluZ3M7IHRoZSBwcm92aWRlZCBzb3VyY2Ugb2JqZWN0IGlzIHVuYWNjZXB0YWJsZScpO1xuICB9XG5cbiAgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgZm9yIChpbmRleCA9IDAsIHF1YW50aXR5ID0gc291cmNlS2V5cy5sZW5ndGg7IGluZGV4IDwgcXVhbnRpdHk7IGluZGV4ICs9IDEpIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2luZGV4XTtcblxuICAgIGlmICghX2hhc093blByb3BlcnR5LmNhbGwoZGVzdGluYXRpb24sIGtleSkpIHtcbiAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIG92ZXJyaWRhYmxlS2V5c1trZXldID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIHZhbHVlTm9kZSwgc3RhcnRMaW5lLCBzdGFydFBvcykge1xuICB2YXIgaW5kZXgsIHF1YW50aXR5O1xuXG4gIGtleU5vZGUgPSBTdHJpbmcoa2V5Tm9kZSk7XG5cbiAgaWYgKF9yZXN1bHQgPT09IG51bGwpIHtcbiAgICBfcmVzdWx0ID0ge307XG4gIH1cblxuICBpZiAoa2V5VGFnID09PSAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVOb2RlKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIHF1YW50aXR5ID0gdmFsdWVOb2RlLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgICAgICBtZXJnZU1hcHBpbmdzKHN0YXRlLCBfcmVzdWx0LCB2YWx1ZU5vZGVbaW5kZXhdLCBvdmVycmlkYWJsZUtleXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXJnZU1hcHBpbmdzKHN0YXRlLCBfcmVzdWx0LCB2YWx1ZU5vZGUsIG92ZXJyaWRhYmxlS2V5cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghc3RhdGUuanNvbiAmJlxuICAgICAgICAhX2hhc093blByb3BlcnR5LmNhbGwob3ZlcnJpZGFibGVLZXlzLCBrZXlOb2RlKSAmJlxuICAgICAgICBfaGFzT3duUHJvcGVydHkuY2FsbChfcmVzdWx0LCBrZXlOb2RlKSkge1xuICAgICAgc3RhdGUubGluZSA9IHN0YXJ0TGluZSB8fCBzdGF0ZS5saW5lO1xuICAgICAgc3RhdGUucG9zaXRpb24gPSBzdGFydFBvcyB8fCBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGVkIG1hcHBpbmcga2V5Jyk7XG4gICAgfVxuICAgIF9yZXN1bHRba2V5Tm9kZV0gPSB2YWx1ZU5vZGU7XG4gICAgZGVsZXRlIG92ZXJyaWRhYmxlS2V5c1trZXlOb2RlXTtcbiAgfVxuXG4gIHJldHVybiBfcmVzdWx0O1xufVxuXG5mdW5jdGlvbiByZWFkTGluZUJyZWFrKHN0YXRlKSB7XG4gIHZhciBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHgwQS8qIExGICovKSB7XG4gICAgc3RhdGUucG9zaXRpb24rKztcbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgwRC8qIENSICovKSB7XG4gICAgc3RhdGUucG9zaXRpb24rKztcbiAgICBpZiAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MEEvKiBMRiAqLykge1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2EgbGluZSBicmVhayBpcyBleHBlY3RlZCcpO1xuICB9XG5cbiAgc3RhdGUubGluZSArPSAxO1xuICBzdGF0ZS5saW5lU3RhcnQgPSBzdGF0ZS5wb3NpdGlvbjtcbn1cblxuZnVuY3Rpb24gc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgYWxsb3dDb21tZW50cywgY2hlY2tJbmRlbnQpIHtcbiAgdmFyIGxpbmVCcmVha3MgPSAwLFxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93Q29tbWVudHMgJiYgY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH0gd2hpbGUgKGNoICE9PSAweDBBLyogTEYgKi8gJiYgY2ggIT09IDB4MEQvKiBDUiAqLyAmJiBjaCAhPT0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIHJlYWRMaW5lQnJlYWsoc3RhdGUpO1xuXG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgICAgbGluZUJyZWFrcysrO1xuICAgICAgc3RhdGUubGluZUluZGVudCA9IDA7XG5cbiAgICAgIHdoaWxlIChjaCA9PT0gMHgyMC8qIFNwYWNlICovKSB7XG4gICAgICAgIHN0YXRlLmxpbmVJbmRlbnQrKztcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoY2hlY2tJbmRlbnQgIT09IC0xICYmIGxpbmVCcmVha3MgIT09IDAgJiYgc3RhdGUubGluZUluZGVudCA8IGNoZWNrSW5kZW50KSB7XG4gICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAnZGVmaWNpZW50IGluZGVudGF0aW9uJyk7XG4gIH1cblxuICByZXR1cm4gbGluZUJyZWFrcztcbn1cblxuZnVuY3Rpb24gdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbixcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuXG4gIC8vIENvbmRpdGlvbiBzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0IGlzIHRlc3RlZFxuICAvLyBpbiBwYXJlbnQgb24gZWFjaCBjYWxsLCBmb3IgZWZmaWNpZW5jeS4gTm8gbmVlZHMgdG8gdGVzdCBoZXJlIGFnYWluLlxuICBpZiAoKGNoID09PSAweDJELyogLSAqLyB8fCBjaCA9PT0gMHgyRS8qIC4gKi8pICYmXG4gICAgICBjaCA9PT0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24gKyAxKSAmJlxuICAgICAgY2ggPT09IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uICsgMikpIHtcblxuICAgIF9wb3NpdGlvbiArPSAzO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IDAgfHwgaXNfV1NfT1JfRU9MKGNoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBjb3VudCkge1xuICBpZiAoY291bnQgPT09IDEpIHtcbiAgICBzdGF0ZS5yZXN1bHQgKz0gJyAnO1xuICB9IGVsc2UgaWYgKGNvdW50ID4gMSkge1xuICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBjb3VudCAtIDEpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gcmVhZFBsYWluU2NhbGFyKHN0YXRlLCBub2RlSW5kZW50LCB3aXRoaW5GbG93Q29sbGVjdGlvbikge1xuICB2YXIgcHJlY2VkaW5nLFxuICAgICAgZm9sbG93aW5nLFxuICAgICAgY2FwdHVyZVN0YXJ0LFxuICAgICAgY2FwdHVyZUVuZCxcbiAgICAgIGhhc1BlbmRpbmdDb250ZW50LFxuICAgICAgX2xpbmUsXG4gICAgICBfbGluZVN0YXJ0LFxuICAgICAgX2xpbmVJbmRlbnQsXG4gICAgICBfa2luZCA9IHN0YXRlLmtpbmQsXG4gICAgICBfcmVzdWx0ID0gc3RhdGUucmVzdWx0LFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoaXNfV1NfT1JfRU9MKGNoKSAgICAgIHx8XG4gICAgICBpc19GTE9XX0lORElDQVRPUihjaCkgfHxcbiAgICAgIGNoID09PSAweDIzLyogIyAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjYvKiAmICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyQS8qICogKi8gICAgfHxcbiAgICAgIGNoID09PSAweDIxLyogISAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4N0MvKiB8ICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgzRS8qID4gKi8gICAgfHxcbiAgICAgIGNoID09PSAweDI3LyogJyAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjIvKiBcIiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjUvKiAlICovICAgIHx8XG4gICAgICBjaCA9PT0gMHg0MC8qIEAgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDYwLyogYCAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChjaCA9PT0gMHgzRi8qID8gKi8gfHwgY2ggPT09IDB4MkQvKiAtICovKSB7XG4gICAgZm9sbG93aW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpO1xuXG4gICAgaWYgKGlzX1dTX09SX0VPTChmb2xsb3dpbmcpIHx8XG4gICAgICAgIHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGZvbGxvd2luZykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gIGhhc1BlbmRpbmdDb250ZW50ID0gZmFsc2U7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgaWYgKGNoID09PSAweDNBLyogOiAqLykge1xuICAgICAgZm9sbG93aW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpO1xuXG4gICAgICBpZiAoaXNfV1NfT1JfRU9MKGZvbGxvd2luZykgfHxcbiAgICAgICAgICB3aXRoaW5GbG93Q29sbGVjdGlvbiAmJiBpc19GTE9XX0lORElDQVRPUihmb2xsb3dpbmcpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgIHByZWNlZGluZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gLSAxKTtcblxuICAgICAgaWYgKGlzX1dTX09SX0VPTChwcmVjZWRpbmcpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICgoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpKSB8fFxuICAgICAgICAgICAgICAgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgICBicmVhaztcblxuICAgIH0gZWxzZSBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgX2xpbmUgPSBzdGF0ZS5saW5lO1xuICAgICAgX2xpbmVTdGFydCA9IHN0YXRlLmxpbmVTdGFydDtcbiAgICAgIF9saW5lSW5kZW50ID0gc3RhdGUubGluZUluZGVudDtcbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCAtMSk7XG5cbiAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID49IG5vZGVJbmRlbnQpIHtcbiAgICAgICAgaGFzUGVuZGluZ0NvbnRlbnQgPSB0cnVlO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uID0gY2FwdHVyZUVuZDtcbiAgICAgICAgc3RhdGUubGluZSA9IF9saW5lO1xuICAgICAgICBzdGF0ZS5saW5lU3RhcnQgPSBfbGluZVN0YXJ0O1xuICAgICAgICBzdGF0ZS5saW5lSW5kZW50ID0gX2xpbmVJbmRlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYXNQZW5kaW5nQ29udGVudCkge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgY2FwdHVyZUVuZCwgZmFsc2UpO1xuICAgICAgd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgc3RhdGUubGluZSAtIF9saW5lKTtcbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIGhhc1BlbmRpbmdDb250ZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbiArIDE7XG4gICAgfVxuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG5cbiAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgY2FwdHVyZUVuZCwgZmFsc2UpO1xuXG4gIGlmIChzdGF0ZS5yZXN1bHQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSBfa2luZDtcbiAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZWFkU2luZ2xlUXVvdGVkU2NhbGFyKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBjaCxcbiAgICAgIGNhcHR1cmVTdGFydCwgY2FwdHVyZUVuZDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyNy8qICcgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuICBzdGF0ZS5wb3NpdGlvbisrO1xuICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKChjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pKSAhPT0gMCkge1xuICAgIGlmIChjaCA9PT0gMHgyNy8qICcgKi8pIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIHN0YXRlLnBvc2l0aW9uLCB0cnVlKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgaWYgKGNoID09PSAweDI3LyogJyAqLykge1xuICAgICAgICBjYXB0dXJlU3RhcnQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIHRydWUpO1xuICAgICAgd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpKTtcbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIH0gZWxzZSBpZiAoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIGRvY3VtZW50IHdpdGhpbiBhIHNpbmdsZSBxdW90ZWQgc2NhbGFyJyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBzaW5nbGUgcXVvdGVkIHNjYWxhcicpO1xufVxuXG5mdW5jdGlvbiByZWFkRG91YmxlUXVvdGVkU2NhbGFyKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBjYXB0dXJlU3RhcnQsXG4gICAgICBjYXB0dXJlRW5kLFxuICAgICAgaGV4TGVuZ3RoLFxuICAgICAgaGV4UmVzdWx0LFxuICAgICAgdG1wLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjIvKiBcIiAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG4gIHN0YXRlLnBvc2l0aW9uKys7XG4gIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICB3aGlsZSAoKGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikpICE9PSAwKSB7XG4gICAgaWYgKGNoID09PSAweDIyLyogXCIgKi8pIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIHN0YXRlLnBvc2l0aW9uLCB0cnVlKTtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4NUMvKiBcXCAqLykge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIHRydWUpO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgbm9kZUluZGVudCk7XG5cbiAgICAgICAgLy8gVE9ETzogcmV3b3JrIHRvIGlubGluZSBmbiB3aXRoIG5vIHR5cGUgY2FzdD9cbiAgICAgIH0gZWxzZSBpZiAoY2ggPCAyNTYgJiYgc2ltcGxlRXNjYXBlQ2hlY2tbY2hdKSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBzaW1wbGVFc2NhcGVNYXBbY2hdO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuXG4gICAgICB9IGVsc2UgaWYgKCh0bXAgPSBlc2NhcGVkSGV4TGVuKGNoKSkgPiAwKSB7XG4gICAgICAgIGhleExlbmd0aCA9IHRtcDtcbiAgICAgICAgaGV4UmVzdWx0ID0gMDtcblxuICAgICAgICBmb3IgKDsgaGV4TGVuZ3RoID4gMDsgaGV4TGVuZ3RoLS0pIHtcbiAgICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgICBpZiAoKHRtcCA9IGZyb21IZXhDb2RlKGNoKSkgPj0gMCkge1xuICAgICAgICAgICAgaGV4UmVzdWx0ID0gKGhleFJlc3VsdCA8PCA0KSArIHRtcDtcblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZXhwZWN0ZWQgaGV4YWRlY2ltYWwgY2hhcmFjdGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNoYXJGcm9tQ29kZXBvaW50KGhleFJlc3VsdCk7XG5cbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3Vua25vd24gZXNjYXBlIHNlcXVlbmNlJyk7XG4gICAgICB9XG5cbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIH0gZWxzZSBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgY2FwdHVyZUVuZCwgdHJ1ZSk7XG4gICAgICB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgbm9kZUluZGVudCkpO1xuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgZG91YmxlIHF1b3RlZCBzY2FsYXInKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIGRvdWJsZSBxdW90ZWQgc2NhbGFyJyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRGbG93Q29sbGVjdGlvbihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgcmVhZE5leHQgPSB0cnVlLFxuICAgICAgX2xpbmUsXG4gICAgICBfdGFnICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIF9yZXN1bHQsXG4gICAgICBfYW5jaG9yICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIHRlcm1pbmF0b3IsXG4gICAgICBpc1BhaXIsXG4gICAgICBpc0V4cGxpY2l0UGFpcixcbiAgICAgIGlzTWFwcGluZyxcbiAgICAgIG92ZXJyaWRhYmxlS2V5cyA9IHt9LFxuICAgICAga2V5Tm9kZSxcbiAgICAgIGtleVRhZyxcbiAgICAgIHZhbHVlTm9kZSxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDVCLyogWyAqLykge1xuICAgIHRlcm1pbmF0b3IgPSAweDVEOy8qIF0gKi9cbiAgICBpc01hcHBpbmcgPSBmYWxzZTtcbiAgICBfcmVzdWx0ID0gW107XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4N0IvKiB7ICovKSB7XG4gICAgdGVybWluYXRvciA9IDB4N0Q7LyogfSAqL1xuICAgIGlzTWFwcGluZyA9IHRydWU7XG4gICAgX3Jlc3VsdCA9IHt9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSB0ZXJtaW5hdG9yKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICBzdGF0ZS5raW5kID0gaXNNYXBwaW5nID8gJ21hcHBpbmcnIDogJ3NlcXVlbmNlJztcbiAgICAgIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFyZWFkTmV4dCkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ21pc3NlZCBjb21tYSBiZXR3ZWVuIGZsb3cgY29sbGVjdGlvbiBlbnRyaWVzJyk7XG4gICAgfVxuXG4gICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgaXNQYWlyID0gaXNFeHBsaWNpdFBhaXIgPSBmYWxzZTtcblxuICAgIGlmIChjaCA9PT0gMHgzRi8qID8gKi8pIHtcbiAgICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgaWYgKGlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG4gICAgICAgIGlzUGFpciA9IGlzRXhwbGljaXRQYWlyID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2xpbmUgPSBzdGF0ZS5saW5lO1xuICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoKGlzRXhwbGljaXRQYWlyIHx8IHN0YXRlLmxpbmUgPT09IF9saW5lKSAmJiBjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGlzUGFpciA9IHRydWU7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcbiAgICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICAgIHZhbHVlTm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgICBpZiAoaXNNYXBwaW5nKSB7XG4gICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlKTtcbiAgICB9IGVsc2UgaWYgKGlzUGFpcikge1xuICAgICAgX3Jlc3VsdC5wdXNoKHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIG51bGwsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3Jlc3VsdC5wdXNoKGtleU5vZGUpO1xuICAgIH1cblxuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gMHgyQy8qICwgKi8pIHtcbiAgICAgIHJlYWROZXh0ID0gdHJ1ZTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVhZE5leHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBmbG93IGNvbGxlY3Rpb24nKTtcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2NrU2NhbGFyKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBjYXB0dXJlU3RhcnQsXG4gICAgICBmb2xkaW5nLFxuICAgICAgY2hvbXBpbmcgICAgICAgPSBDSE9NUElOR19DTElQLFxuICAgICAgZGlkUmVhZENvbnRlbnQgPSBmYWxzZSxcbiAgICAgIGRldGVjdGVkSW5kZW50ID0gZmFsc2UsXG4gICAgICB0ZXh0SW5kZW50ICAgICA9IG5vZGVJbmRlbnQsXG4gICAgICBlbXB0eUxpbmVzICAgICA9IDAsXG4gICAgICBhdE1vcmVJbmRlbnRlZCA9IGZhbHNlLFxuICAgICAgdG1wLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggPT09IDB4N0MvKiB8ICovKSB7XG4gICAgZm9sZGluZyA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKGNoID09PSAweDNFLyogPiAqLykge1xuICAgIGZvbGRpbmcgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSAweDJCLyogKyAqLyB8fCBjaCA9PT0gMHgyRC8qIC0gKi8pIHtcbiAgICAgIGlmIChDSE9NUElOR19DTElQID09PSBjaG9tcGluZykge1xuICAgICAgICBjaG9tcGluZyA9IChjaCA9PT0gMHgyQi8qICsgKi8pID8gQ0hPTVBJTkdfS0VFUCA6IENIT01QSU5HX1NUUklQO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3JlcGVhdCBvZiBhIGNob21waW5nIG1vZGUgaWRlbnRpZmllcicpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICgodG1wID0gZnJvbURlY2ltYWxDb2RlKGNoKSkgPj0gMCkge1xuICAgICAgaWYgKHRtcCA9PT0gMCkge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYmFkIGV4cGxpY2l0IGluZGVudGF0aW9uIHdpZHRoIG9mIGEgYmxvY2sgc2NhbGFyOyBpdCBjYW5ub3QgYmUgbGVzcyB0aGFuIG9uZScpO1xuICAgICAgfSBlbHNlIGlmICghZGV0ZWN0ZWRJbmRlbnQpIHtcbiAgICAgICAgdGV4dEluZGVudCA9IG5vZGVJbmRlbnQgKyB0bXAgLSAxO1xuICAgICAgICBkZXRlY3RlZEluZGVudCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAncmVwZWF0IG9mIGFuIGluZGVudGF0aW9uIHdpZHRoIGlkZW50aWZpZXInKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKTtcblxuICAgIGlmIChjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgICB3aGlsZSAoIWlzX0VPTChjaCkgJiYgKGNoICE9PSAwKSk7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG4gICAgc3RhdGUubGluZUluZGVudCA9IDA7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgd2hpbGUgKCghZGV0ZWN0ZWRJbmRlbnQgfHwgc3RhdGUubGluZUluZGVudCA8IHRleHRJbmRlbnQpICYmXG4gICAgICAgICAgIChjaCA9PT0gMHgyMC8qIFNwYWNlICovKSkge1xuICAgICAgc3RhdGUubGluZUluZGVudCsrO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmICghZGV0ZWN0ZWRJbmRlbnQgJiYgc3RhdGUubGluZUluZGVudCA+IHRleHRJbmRlbnQpIHtcbiAgICAgIHRleHRJbmRlbnQgPSBzdGF0ZS5saW5lSW5kZW50O1xuICAgIH1cblxuICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBlbXB0eUxpbmVzKys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBFbmQgb2YgdGhlIHNjYWxhci5cbiAgICBpZiAoc3RhdGUubGluZUluZGVudCA8IHRleHRJbmRlbnQpIHtcblxuICAgICAgLy8gUGVyZm9ybSB0aGUgY2hvbXBpbmcuXG4gICAgICBpZiAoY2hvbXBpbmcgPT09IENIT01QSU5HX0tFRVApIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hvbXBpbmcgPT09IENIT01QSU5HX0NMSVApIHtcbiAgICAgICAgaWYgKGRpZFJlYWRDb250ZW50KSB7IC8vIGkuZS4gb25seSBpZiB0aGUgc2NhbGFyIGlzIG5vdCBlbXB0eS5cbiAgICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQnJlYWsgdGhpcyBgd2hpbGVgIGN5Y2xlIGFuZCBnbyB0byB0aGUgZnVuY2l0b24ncyBlcGlsb2d1ZS5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIEZvbGRlZCBzdHlsZTogdXNlIGZhbmN5IHJ1bGVzIHRvIGhhbmRsZSBsaW5lIGJyZWFrcy5cbiAgICBpZiAoZm9sZGluZykge1xuXG4gICAgICAvLyBMaW5lcyBzdGFydGluZyB3aXRoIHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMgKG1vcmUtaW5kZW50ZWQgbGluZXMpIGFyZSBub3QgZm9sZGVkLlxuICAgICAgaWYgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICBhdE1vcmVJbmRlbnRlZCA9IHRydWU7XG4gICAgICAgIC8vIGV4Y2VwdCBmb3IgdGhlIGZpcnN0IGNvbnRlbnQgbGluZSAoY2YuIEV4YW1wbGUgOC4xKVxuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZGlkUmVhZENvbnRlbnQgPyAxICsgZW1wdHlMaW5lcyA6IGVtcHR5TGluZXMpO1xuXG4gICAgICAvLyBFbmQgb2YgbW9yZS1pbmRlbnRlZCBibG9jay5cbiAgICAgIH0gZWxzZSBpZiAoYXRNb3JlSW5kZW50ZWQpIHtcbiAgICAgICAgYXRNb3JlSW5kZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGVtcHR5TGluZXMgKyAxKTtcblxuICAgICAgLy8gSnVzdCBvbmUgbGluZSBicmVhayAtIHBlcmNlaXZlIGFzIHRoZSBzYW1lIGxpbmUuXG4gICAgICB9IGVsc2UgaWYgKGVtcHR5TGluZXMgPT09IDApIHtcbiAgICAgICAgaWYgKGRpZFJlYWRDb250ZW50KSB7IC8vIGkuZS4gb25seSBpZiB3ZSBoYXZlIGFscmVhZHkgcmVhZCBzb21lIHNjYWxhciBjb250ZW50LlxuICAgICAgICAgIHN0YXRlLnJlc3VsdCArPSAnICc7XG4gICAgICAgIH1cblxuICAgICAgLy8gU2V2ZXJhbCBsaW5lIGJyZWFrcyAtIHBlcmNlaXZlIGFzIGRpZmZlcmVudCBsaW5lcy5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBlbXB0eUxpbmVzKTtcbiAgICAgIH1cblxuICAgIC8vIExpdGVyYWwgc3R5bGU6IGp1c3QgYWRkIGV4YWN0IG51bWJlciBvZiBsaW5lIGJyZWFrcyBiZXR3ZWVuIGNvbnRlbnQgbGluZXMuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEtlZXAgYWxsIGxpbmUgYnJlYWtzIGV4Y2VwdCB0aGUgaGVhZGVyIGxpbmUgYnJlYWsuXG4gICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZGlkUmVhZENvbnRlbnQgPyAxICsgZW1wdHlMaW5lcyA6IGVtcHR5TGluZXMpO1xuICAgIH1cblxuICAgIGRpZFJlYWRDb250ZW50ID0gdHJ1ZTtcbiAgICBkZXRlY3RlZEluZGVudCA9IHRydWU7XG4gICAgZW1wdHlMaW5lcyA9IDA7XG4gICAgY2FwdHVyZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB3aGlsZSAoIWlzX0VPTChjaCkgJiYgKGNoICE9PSAwKSkge1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIHN0YXRlLnBvc2l0aW9uLCBmYWxzZSk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2NrU2VxdWVuY2Uoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIF9saW5lLFxuICAgICAgX3RhZyAgICAgID0gc3RhdGUudGFnLFxuICAgICAgX2FuY2hvciAgID0gc3RhdGUuYW5jaG9yLFxuICAgICAgX3Jlc3VsdCAgID0gW10sXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICBkZXRlY3RlZCAgPSBmYWxzZSxcbiAgICAgIGNoO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuXG4gICAgaWYgKGNoICE9PSAweDJELyogLSAqLykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZm9sbG93aW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpO1xuXG4gICAgaWYgKCFpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZGV0ZWN0ZWQgPSB0cnVlO1xuICAgIHN0YXRlLnBvc2l0aW9uKys7XG5cbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA8PSBub2RlSW5kZW50KSB7XG4gICAgICAgIF9yZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2xpbmUgPSBzdGF0ZS5saW5lO1xuICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0JMT0NLX0lOLCBmYWxzZSwgdHJ1ZSk7XG4gICAgX3Jlc3VsdC5wdXNoKHN0YXRlLnJlc3VsdCk7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmICgoc3RhdGUubGluZSA9PT0gX2xpbmUgfHwgc3RhdGUubGluZUluZGVudCA+IG5vZGVJbmRlbnQpICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgaW5kZW50YXRpb24gb2YgYSBzZXF1ZW5jZSBlbnRyeScpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IG5vZGVJbmRlbnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZXRlY3RlZCkge1xuICAgIHN0YXRlLnRhZyA9IF90YWc7XG4gICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICBzdGF0ZS5raW5kID0gJ3NlcXVlbmNlJztcbiAgICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2NrTWFwcGluZyhzdGF0ZSwgbm9kZUluZGVudCwgZmxvd0luZGVudCkge1xuICB2YXIgZm9sbG93aW5nLFxuICAgICAgYWxsb3dDb21wYWN0LFxuICAgICAgX2xpbmUsXG4gICAgICBfcG9zLFxuICAgICAgX3RhZyAgICAgICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIF9hbmNob3IgICAgICAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBfcmVzdWx0ICAgICAgID0ge30sXG4gICAgICBvdmVycmlkYWJsZUtleXMgPSB7fSxcbiAgICAgIGtleVRhZyAgICAgICAgPSBudWxsLFxuICAgICAga2V5Tm9kZSAgICAgICA9IG51bGwsXG4gICAgICB2YWx1ZU5vZGUgICAgID0gbnVsbCxcbiAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZSxcbiAgICAgIGRldGVjdGVkICAgICAgPSBmYWxzZSxcbiAgICAgIGNoO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcbiAgICBfbGluZSA9IHN0YXRlLmxpbmU7IC8vIFNhdmUgdGhlIGN1cnJlbnQgbGluZS5cbiAgICBfcG9zID0gc3RhdGUucG9zaXRpb247XG5cbiAgICAvL1xuICAgIC8vIEV4cGxpY2l0IG5vdGF0aW9uIGNhc2UuIFRoZXJlIGFyZSB0d28gc2VwYXJhdGUgYmxvY2tzOlxuICAgIC8vIGZpcnN0IGZvciB0aGUga2V5IChkZW5vdGVkIGJ5IFwiP1wiKSBhbmQgc2Vjb25kIGZvciB0aGUgdmFsdWUgKGRlbm90ZWQgYnkgXCI6XCIpXG4gICAgLy9cbiAgICBpZiAoKGNoID09PSAweDNGLyogPyAqLyB8fCBjaCA9PT0gMHgzQS8qIDogKi8pICYmIGlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgzRi8qID8gKi8pIHtcbiAgICAgICAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCk7XG4gICAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAgICBhbGxvd0NvbXBhY3QgPSB0cnVlO1xuXG4gICAgICB9IGVsc2UgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgLy8gaS5lLiAweDNBLyogOiAqLyA9PT0gY2hhcmFjdGVyIGFmdGVyIHRoZSBleHBsaWNpdCBrZXkuXG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dDb21wYWN0ID0gdHJ1ZTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2luY29tcGxldGUgZXhwbGljaXQgbWFwcGluZyBwYWlyOyBhIGtleSBub2RlIGlzIG1pc3NlZCcpO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICAgICAgY2ggPSBmb2xsb3dpbmc7XG5cbiAgICAvL1xuICAgIC8vIEltcGxpY2l0IG5vdGF0aW9uIGNhc2UuIEZsb3ctc3R5bGUgbm9kZSBhcyB0aGUga2V5IGZpcnN0LCB0aGVuIFwiOlwiLCBhbmQgdGhlIHZhbHVlLlxuICAgIC8vXG4gICAgfSBlbHNlIGlmIChjb21wb3NlTm9kZShzdGF0ZSwgZmxvd0luZGVudCwgQ09OVEVYVF9GTE9XX09VVCwgZmFsc2UsIHRydWUpKSB7XG5cbiAgICAgIGlmIChzdGF0ZS5saW5lID09PSBfbGluZSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2ggPT09IDB4M0EvKiA6ICovKSB7XG4gICAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICAgICAgaWYgKCFpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYSB3aGl0ZXNwYWNlIGNoYXJhY3RlciBpcyBleHBlY3RlZCBhZnRlciB0aGUga2V5LXZhbHVlIHNlcGFyYXRvciB3aXRoaW4gYSBibG9jayBtYXBwaW5nJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCBudWxsKTtcbiAgICAgICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgICAgICAgYWxsb3dDb21wYWN0ID0gZmFsc2U7XG4gICAgICAgICAga2V5VGFnID0gc3RhdGUudGFnO1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkZXRlY3RlZCkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYW4gaW1wbGljaXQgbWFwcGluZyBwYWlyOyBhIGNvbG9uIGlzIG1pc3NlZCcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBLZWVwIHRoZSByZXN1bHQgb2YgYGNvbXBvc2VOb2RlYC5cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYSBibG9jayBtYXBwaW5nIGVudHJ5OyBhIG11bHRpbGluZSBrZXkgbWF5IG5vdCBiZSBhbiBpbXBsaWNpdCBrZXknKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEtlZXAgdGhlIHJlc3VsdCBvZiBgY29tcG9zZU5vZGVgLlxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrOyAvLyBSZWFkaW5nIGlzIGRvbmUuIEdvIHRvIHRoZSBlcGlsb2d1ZS5cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIENvbW1vbiByZWFkaW5nIGNvZGUgZm9yIGJvdGggZXhwbGljaXQgYW5kIGltcGxpY2l0IG5vdGF0aW9ucy5cbiAgICAvL1xuICAgIGlmIChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkge1xuICAgICAgaWYgKGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0JMT0NLX09VVCwgdHJ1ZSwgYWxsb3dDb21wYWN0KSkge1xuICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX3Bvcyk7XG4gICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCAmJiAoY2ggIT09IDApKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYmFkIGluZGVudGF0aW9uIG9mIGEgbWFwcGluZyBlbnRyeScpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IG5vZGVJbmRlbnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vXG4gIC8vIEVwaWxvZ3VlLlxuICAvL1xuXG4gIC8vIFNwZWNpYWwgY2FzZTogbGFzdCBtYXBwaW5nJ3Mgbm9kZSBjb250YWlucyBvbmx5IHRoZSBrZXkgaW4gZXhwbGljaXQgbm90YXRpb24uXG4gIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwpO1xuICB9XG5cbiAgLy8gRXhwb3NlIHRoZSByZXN1bHRpbmcgbWFwcGluZy5cbiAgaWYgKGRldGVjdGVkKSB7XG4gICAgc3RhdGUudGFnID0gX3RhZztcbiAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgIHN0YXRlLmtpbmQgPSAnbWFwcGluZyc7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBkZXRlY3RlZDtcbn1cblxuZnVuY3Rpb24gcmVhZFRhZ1Byb3BlcnR5KHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24sXG4gICAgICBpc1ZlcmJhdGltID0gZmFsc2UsXG4gICAgICBpc05hbWVkICAgID0gZmFsc2UsXG4gICAgICB0YWdIYW5kbGUsXG4gICAgICB0YWdOYW1lLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjEvKiAhICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiBhIHRhZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHgzQy8qIDwgKi8pIHtcbiAgICBpc1ZlcmJhdGltID0gdHJ1ZTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICB0YWdIYW5kbGUgPSAnISEnO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB9IGVsc2Uge1xuICAgIHRhZ0hhbmRsZSA9ICchJztcbiAgfVxuXG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIGlmIChpc1ZlcmJhdGltKSB7XG4gICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgY2ggIT09IDB4M0UvKiA+ICovKTtcblxuICAgIGlmIChzdGF0ZS5wb3NpdGlvbiA8IHN0YXRlLmxlbmd0aCkge1xuICAgICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSB2ZXJiYXRpbSB0YWcnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICAgICAgaWYgKCFpc05hbWVkKSB7XG4gICAgICAgICAgdGFnSGFuZGxlID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uIC0gMSwgc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QodGFnSGFuZGxlKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25hbWVkIHRhZyBoYW5kbGUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNOYW1lZCA9IHRydWU7XG4gICAgICAgICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24gKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGV4Y2xhbWF0aW9uIG1hcmtzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIHRhZ05hbWUgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUy50ZXN0KHRhZ05hbWUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIHN1ZmZpeCBjYW5ub3QgY29udGFpbiBmbG93IGluZGljYXRvciBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRhZ05hbWUgJiYgIVBBVFRFUk5fVEFHX1VSSS50ZXN0KHRhZ05hbWUpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBuYW1lIGNhbm5vdCBjb250YWluIHN1Y2ggY2hhcmFjdGVyczogJyArIHRhZ05hbWUpO1xuICB9XG5cbiAgaWYgKGlzVmVyYmF0aW0pIHtcbiAgICBzdGF0ZS50YWcgPSB0YWdOYW1lO1xuXG4gIH0gZWxzZSBpZiAoX2hhc093blByb3BlcnR5LmNhbGwoc3RhdGUudGFnTWFwLCB0YWdIYW5kbGUpKSB7XG4gICAgc3RhdGUudGFnID0gc3RhdGUudGFnTWFwW3RhZ0hhbmRsZV0gKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSBpZiAodGFnSGFuZGxlID09PSAnIScpIHtcbiAgICBzdGF0ZS50YWcgPSAnIScgKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSBpZiAodGFnSGFuZGxlID09PSAnISEnKSB7XG4gICAgc3RhdGUudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOicgKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZGVjbGFyZWQgdGFnIGhhbmRsZSBcIicgKyB0YWdIYW5kbGUgKyAnXCInKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQW5jaG9yUHJvcGVydHkoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbixcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDI2LyogJiAqLykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRpb24gb2YgYW4gYW5jaG9yIHByb3BlcnR5Jyk7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSAmJiAhaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBfcG9zaXRpb24pIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZSBvZiBhbiBhbmNob3Igbm9kZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGNoYXJhY3RlcicpO1xuICB9XG5cbiAgc3RhdGUuYW5jaG9yID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQWxpYXMoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbiwgYWxpYXMsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyQS8qICogKi8pIHJldHVybiBmYWxzZTtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSAmJiAhaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBfcG9zaXRpb24pIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZSBvZiBhbiBhbGlhcyBub2RlIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyJyk7XG4gIH1cblxuICBhbGlhcyA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmICghc3RhdGUuYW5jaG9yTWFwLmhhc093blByb3BlcnR5KGFsaWFzKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmlkZW50aWZpZWQgYWxpYXMgXCInICsgYWxpYXMgKyAnXCInKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VsdCA9IHN0YXRlLmFuY2hvck1hcFthbGlhc107XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKHN0YXRlLCBwYXJlbnRJbmRlbnQsIG5vZGVDb250ZXh0LCBhbGxvd1RvU2VlaywgYWxsb3dDb21wYWN0KSB7XG4gIHZhciBhbGxvd0Jsb2NrU3R5bGVzLFxuICAgICAgYWxsb3dCbG9ja1NjYWxhcnMsXG4gICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMsXG4gICAgICBpbmRlbnRTdGF0dXMgPSAxLCAvLyAxOiB0aGlzPnBhcmVudCwgMDogdGhpcz1wYXJlbnQsIC0xOiB0aGlzPHBhcmVudFxuICAgICAgYXROZXdMaW5lICA9IGZhbHNlLFxuICAgICAgaGFzQ29udGVudCA9IGZhbHNlLFxuICAgICAgdHlwZUluZGV4LFxuICAgICAgdHlwZVF1YW50aXR5LFxuICAgICAgdHlwZSxcbiAgICAgIGZsb3dJbmRlbnQsXG4gICAgICBibG9ja0luZGVudDtcblxuICBpZiAoc3RhdGUubGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5saXN0ZW5lcignb3BlbicsIHN0YXRlKTtcbiAgfVxuXG4gIHN0YXRlLnRhZyAgICA9IG51bGw7XG4gIHN0YXRlLmFuY2hvciA9IG51bGw7XG4gIHN0YXRlLmtpbmQgICA9IG51bGw7XG4gIHN0YXRlLnJlc3VsdCA9IG51bGw7XG5cbiAgYWxsb3dCbG9ja1N0eWxlcyA9IGFsbG93QmxvY2tTY2FsYXJzID0gYWxsb3dCbG9ja0NvbGxlY3Rpb25zID1cbiAgICBDT05URVhUX0JMT0NLX09VVCA9PT0gbm9kZUNvbnRleHQgfHxcbiAgICBDT05URVhUX0JMT0NLX0lOICA9PT0gbm9kZUNvbnRleHQ7XG5cbiAgaWYgKGFsbG93VG9TZWVrKSB7XG4gICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgYXROZXdMaW5lID0gdHJ1ZTtcblxuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gcGFyZW50SW5kZW50KSB7XG4gICAgICAgIGluZGVudFN0YXR1cyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gLTE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSkge1xuICAgIHdoaWxlIChyZWFkVGFnUHJvcGVydHkoc3RhdGUpIHx8IHJlYWRBbmNob3JQcm9wZXJ0eShzdGF0ZSkpIHtcbiAgICAgIGlmIChza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSkpIHtcbiAgICAgICAgYXROZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gYWxsb3dCbG9ja1N0eWxlcztcblxuICAgICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IHBhcmVudEluZGVudCkge1xuICAgICAgICAgIGluZGVudFN0YXR1cyA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChhbGxvd0Jsb2NrQ29sbGVjdGlvbnMpIHtcbiAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhdE5ld0xpbmUgfHwgYWxsb3dDb21wYWN0O1xuICB9XG5cbiAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSB8fCBDT05URVhUX0JMT0NLX09VVCA9PT0gbm9kZUNvbnRleHQpIHtcbiAgICBpZiAoQ09OVEVYVF9GTE9XX0lOID09PSBub2RlQ29udGV4dCB8fCBDT05URVhUX0ZMT1dfT1VUID09PSBub2RlQ29udGV4dCkge1xuICAgICAgZmxvd0luZGVudCA9IHBhcmVudEluZGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmxvd0luZGVudCA9IHBhcmVudEluZGVudCArIDE7XG4gICAgfVxuXG4gICAgYmxvY2tJbmRlbnQgPSBzdGF0ZS5wb3NpdGlvbiAtIHN0YXRlLmxpbmVTdGFydDtcblxuICAgIGlmIChpbmRlbnRTdGF0dXMgPT09IDEpIHtcbiAgICAgIGlmIChhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgJiZcbiAgICAgICAgICAocmVhZEJsb2NrU2VxdWVuY2Uoc3RhdGUsIGJsb2NrSW5kZW50KSB8fFxuICAgICAgICAgICByZWFkQmxvY2tNYXBwaW5nKHN0YXRlLCBibG9ja0luZGVudCwgZmxvd0luZGVudCkpIHx8XG4gICAgICAgICAgcmVhZEZsb3dDb2xsZWN0aW9uKHN0YXRlLCBmbG93SW5kZW50KSkge1xuICAgICAgICBoYXNDb250ZW50ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgoYWxsb3dCbG9ja1NjYWxhcnMgJiYgcmVhZEJsb2NrU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50KSkgfHxcbiAgICAgICAgICAgIHJlYWRTaW5nbGVRdW90ZWRTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpIHx8XG4gICAgICAgICAgICByZWFkRG91YmxlUXVvdGVkU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50KSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVhZEFsaWFzKHN0YXRlKSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCB8fCBzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdhbGlhcyBub2RlIHNob3VsZCBub3QgaGF2ZSBhbnkgcHJvcGVydGllcycpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKHJlYWRQbGFpblNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCwgQ09OVEVYVF9GTE9XX0lOID09PSBub2RlQ29udGV4dCkpIHtcbiAgICAgICAgICBoYXNDb250ZW50ID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChzdGF0ZS50YWcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXRlLnRhZyA9ICc/JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGluZGVudFN0YXR1cyA9PT0gMCkge1xuICAgICAgLy8gU3BlY2lhbCBjYXNlOiBibG9jayBzZXF1ZW5jZXMgYXJlIGFsbG93ZWQgdG8gaGF2ZSBzYW1lIGluZGVudGF0aW9uIGxldmVsIGFzIHRoZSBwYXJlbnQuXG4gICAgICAvLyBodHRwOi8vd3d3LnlhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNpZDI3OTk3ODRcbiAgICAgIGhhc0NvbnRlbnQgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgJiYgcmVhZEJsb2NrU2VxdWVuY2Uoc3RhdGUsIGJsb2NrSW5kZW50KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gJyEnKSB7XG4gICAgaWYgKHN0YXRlLnRhZyA9PT0gJz8nKSB7XG4gICAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICAgIHR5cGUgPSBzdGF0ZS5pbXBsaWNpdFR5cGVzW3R5cGVJbmRleF07XG5cbiAgICAgICAgLy8gSW1wbGljaXQgcmVzb2x2aW5nIGlzIG5vdCBhbGxvd2VkIGZvciBub24tc2NhbGFyIHR5cGVzLCBhbmQgJz8nXG4gICAgICAgIC8vIG5vbi1zcGVjaWZpYyB0YWcgaXMgb25seSBhc3NpZ25lZCB0byBwbGFpbiBzY2FsYXJzLiBTbywgaXQgaXNuJ3RcbiAgICAgICAgLy8gbmVlZGVkIHRvIGNoZWNrIGZvciAna2luZCcgY29uZm9ybWl0eS5cblxuICAgICAgICBpZiAodHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCkpIHsgLy8gYHN0YXRlLnJlc3VsdGAgdXBkYXRlZCBpbiByZXNvbHZlciBpZiBtYXRjaGVkXG4gICAgICAgICAgc3RhdGUucmVzdWx0ID0gdHlwZS5jb25zdHJ1Y3Qoc3RhdGUucmVzdWx0KTtcbiAgICAgICAgICBzdGF0ZS50YWcgPSB0eXBlLnRhZztcbiAgICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXSwgc3RhdGUudGFnKSkge1xuICAgICAgdHlwZSA9IHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXVtzdGF0ZS50YWddO1xuXG4gICAgICBpZiAoc3RhdGUucmVzdWx0ICE9PSBudWxsICYmIHR5cGUua2luZCAhPT0gc3RhdGUua2luZCkge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITwnICsgc3RhdGUudGFnICsgJz4gdGFnOyBpdCBzaG91bGQgYmUgXCInICsgdHlwZS5raW5kICsgJ1wiLCBub3QgXCInICsgc3RhdGUua2luZCArICdcIicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXR5cGUucmVzb2x2ZShzdGF0ZS5yZXN1bHQpKSB7IC8vIGBzdGF0ZS5yZXN1bHRgIHVwZGF0ZWQgaW4gcmVzb2x2ZXIgaWYgbWF0Y2hlZFxuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnY2Fubm90IHJlc29sdmUgYSBub2RlIHdpdGggITwnICsgc3RhdGUudGFnICsgJz4gZXhwbGljaXQgdGFnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgPSB0eXBlLmNvbnN0cnVjdChzdGF0ZS5yZXN1bHQpO1xuICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3Vua25vd24gdGFnICE8JyArIHN0YXRlLnRhZyArICc+Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLmxpc3RlbmVyICE9PSBudWxsKSB7XG4gICAgc3RhdGUubGlzdGVuZXIoJ2Nsb3NlJywgc3RhdGUpO1xuICB9XG4gIHJldHVybiBzdGF0ZS50YWcgIT09IG51bGwgfHwgIHN0YXRlLmFuY2hvciAhPT0gbnVsbCB8fCBoYXNDb250ZW50O1xufVxuXG5mdW5jdGlvbiByZWFkRG9jdW1lbnQoc3RhdGUpIHtcbiAgdmFyIGRvY3VtZW50U3RhcnQgPSBzdGF0ZS5wb3NpdGlvbixcbiAgICAgIF9wb3NpdGlvbixcbiAgICAgIGRpcmVjdGl2ZU5hbWUsXG4gICAgICBkaXJlY3RpdmVBcmdzLFxuICAgICAgaGFzRGlyZWN0aXZlcyA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgc3RhdGUudmVyc2lvbiA9IG51bGw7XG4gIHN0YXRlLmNoZWNrTGluZUJyZWFrcyA9IHN0YXRlLmxlZ2FjeTtcbiAgc3RhdGUudGFnTWFwID0ge307XG4gIHN0YXRlLmFuY2hvck1hcCA9IHt9O1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiAwIHx8IGNoICE9PSAweDI1LyogJSAqLykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGlyZWN0aXZlTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgIGRpcmVjdGl2ZUFyZ3MgPSBbXTtcblxuICAgIGlmIChkaXJlY3RpdmVOYW1lLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkaXJlY3RpdmUgbmFtZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gb25lIGNoYXJhY3RlciBpbiBsZW5ndGgnKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgICAgIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfRU9MKGNoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNfRU9MKGNoKSkgYnJlYWs7XG5cbiAgICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVBcmdzLnB1c2goc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbikpO1xuICAgIH1cblxuICAgIGlmIChjaCAhPT0gMCkgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG5cbiAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwoZGlyZWN0aXZlSGFuZGxlcnMsIGRpcmVjdGl2ZU5hbWUpKSB7XG4gICAgICBkaXJlY3RpdmVIYW5kbGVyc1tkaXJlY3RpdmVOYW1lXShzdGF0ZSwgZGlyZWN0aXZlTmFtZSwgZGlyZWN0aXZlQXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ3Vua25vd24gZG9jdW1lbnQgZGlyZWN0aXZlIFwiJyArIGRpcmVjdGl2ZU5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH1cblxuICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPT09IDAgJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pICAgICA9PT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKSA9PT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAyKSA9PT0gMHgyRC8qIC0gKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAzO1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICB9IGVsc2UgaWYgKGhhc0RpcmVjdGl2ZXMpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZGlyZWN0aXZlcyBlbmQgbWFyayBpcyBleHBlY3RlZCcpO1xuICB9XG5cbiAgY29tcG9zZU5vZGUoc3RhdGUsIHN0YXRlLmxpbmVJbmRlbnQgLSAxLCBDT05URVhUX0JMT0NLX09VVCwgZmFsc2UsIHRydWUpO1xuICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgaWYgKHN0YXRlLmNoZWNrTGluZUJyZWFrcyAmJlxuICAgICAgUEFUVEVSTl9OT05fQVNDSUlfTElORV9CUkVBS1MudGVzdChzdGF0ZS5pbnB1dC5zbGljZShkb2N1bWVudFN0YXJ0LCBzdGF0ZS5wb3NpdGlvbikpKSB7XG4gICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAnbm9uLUFTQ0lJIGxpbmUgYnJlYWtzIGFyZSBpbnRlcnByZXRlZCBhcyBjb250ZW50Jyk7XG4gIH1cblxuICBzdGF0ZS5kb2N1bWVudHMucHVzaChzdGF0ZS5yZXN1bHQpO1xuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcblxuICAgIGlmIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMHgyRS8qIC4gKi8pIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uICs9IDM7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA8IChzdGF0ZS5sZW5ndGggLSAxKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdlbmQgb2YgdGhlIHN0cmVhbSBvciBhIGRvY3VtZW50IHNlcGFyYXRvciBpcyBleHBlY3RlZCcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaW5wdXQgPSBTdHJpbmcoaW5wdXQpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoaW5wdXQubGVuZ3RoICE9PSAwKSB7XG5cbiAgICAvLyBBZGQgdGFpbGluZyBgXFxuYCBpZiBub3QgZXhpc3RzXG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT09IDB4MEEvKiBMRiAqLyAmJlxuICAgICAgICBpbnB1dC5jaGFyQ29kZUF0KGlucHV0Lmxlbmd0aCAtIDEpICE9PSAweDBELyogQ1IgKi8pIHtcbiAgICAgIGlucHV0ICs9ICdcXG4nO1xuICAgIH1cblxuICAgIC8vIFN0cmlwIEJPTVxuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKGlucHV0LCBvcHRpb25zKTtcblxuICAvLyBVc2UgMCBhcyBzdHJpbmcgdGVybWluYXRvci4gVGhhdCBzaWduaWZpY2FudGx5IHNpbXBsaWZpZXMgYm91bmRzIGNoZWNrLlxuICBzdGF0ZS5pbnB1dCArPSAnXFwwJztcblxuICB3aGlsZSAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgKz0gMTtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBvc2l0aW9uIDwgKHN0YXRlLmxlbmd0aCAtIDEpKSB7XG4gICAgcmVhZERvY3VtZW50KHN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5kb2N1bWVudHM7XG59XG5cblxuZnVuY3Rpb24gbG9hZEFsbChpbnB1dCwgaXRlcmF0b3IsIG9wdGlvbnMpIHtcbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpLCBpbmRleCwgbGVuZ3RoO1xuXG4gIGlmICh0eXBlb2YgaXRlcmF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRzO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGRvY3VtZW50cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgaXRlcmF0b3IoZG9jdW1lbnRzW2luZGV4XSk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBsb2FkKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBkb2N1bWVudHMgPSBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKTtcblxuICBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgbm8tdW5kZWZpbmVkKi9cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRzWzBdO1xuICB9XG4gIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdleHBlY3RlZCBhIHNpbmdsZSBkb2N1bWVudCBpbiB0aGUgc3RyZWFtLCBidXQgZm91bmQgbW9yZScpO1xufVxuXG5cbmZ1bmN0aW9uIHNhZmVMb2FkQWxsKGlucHV0LCBvdXRwdXQsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvdXRwdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBsb2FkQWxsKGlucHV0LCBvdXRwdXQsIGNvbW1vbi5leHRlbmQoeyBzY2hlbWE6IERFRkFVTFRfU0FGRV9TQ0hFTUEgfSwgb3B0aW9ucykpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsb2FkQWxsKGlucHV0LCBjb21tb24uZXh0ZW5kKHsgc2NoZW1hOiBERUZBVUxUX1NBRkVfU0NIRU1BIH0sIG9wdGlvbnMpKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHNhZmVMb2FkKGlucHV0LCBvcHRpb25zKSB7XG4gIHJldHVybiBsb2FkKGlucHV0LCBjb21tb24uZXh0ZW5kKHsgc2NoZW1hOiBERUZBVUxUX1NBRkVfU0NIRU1BIH0sIG9wdGlvbnMpKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5sb2FkQWxsICAgICA9IGxvYWRBbGw7XG5tb2R1bGUuZXhwb3J0cy5sb2FkICAgICAgICA9IGxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZEFsbCA9IHNhZmVMb2FkQWxsO1xubW9kdWxlLmV4cG9ydHMuc2FmZUxvYWQgICAgPSBzYWZlTG9hZDtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgbG9hZGVyID0gcmVxdWlyZSgnLi9qcy15YW1sL2xvYWRlcicpO1xudmFyIGR1bXBlciA9IHJlcXVpcmUoJy4vanMteWFtbC9kdW1wZXInKTtcblxuXG5mdW5jdGlvbiBkZXByZWNhdGVkKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uICcgKyBuYW1lICsgJyBpcyBkZXByZWNhdGVkIGFuZCBjYW5ub3QgYmUgdXNlZC4nKTtcbiAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5UeXBlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3R5cGUnKTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hJyk7XG5tb2R1bGUuZXhwb3J0cy5GQUlMU0FGRV9TQ0hFTUEgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuSlNPTl9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvanNvbicpO1xubW9kdWxlLmV4cG9ydHMuQ09SRV9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvY29yZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9TQUZFX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX0ZVTExfU0NIRU1BID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X2Z1bGwnKTtcbm1vZHVsZS5leHBvcnRzLmxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbm1vZHVsZS5leHBvcnRzLmxvYWRBbGwgICAgICAgICAgICAgPSBsb2FkZXIubG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLnNhZmVMb2FkICAgICAgICAgICAgPSBsb2FkZXIuc2FmZUxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZEFsbCAgICAgICAgID0gbG9hZGVyLnNhZmVMb2FkQWxsO1xubW9kdWxlLmV4cG9ydHMuZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xubW9kdWxlLmV4cG9ydHMuc2FmZUR1bXAgICAgICAgICAgICA9IGR1bXBlci5zYWZlRHVtcDtcbm1vZHVsZS5leHBvcnRzLllBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvZXhjZXB0aW9uJyk7XG5cbi8vIERlcHJlY2F0ZWQgc2NoZW1hIG5hbWVzIGZyb20gSlMtWUFNTCAyLjAueFxubW9kdWxlLmV4cG9ydHMuTUlOSU1BTF9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5TQUZFX1NDSEVNQSAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsJyk7XG5cbi8vIERlcHJlY2F0ZWQgZnVuY3Rpb25zIGZyb20gSlMtWUFNTCAxLngueFxubW9kdWxlLmV4cG9ydHMuc2NhbiAgICAgICAgICAgPSBkZXByZWNhdGVkKCdzY2FuJyk7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZSAgICAgICAgICA9IGRlcHJlY2F0ZWQoJ3BhcnNlJyk7XG5tb2R1bGUuZXhwb3J0cy5jb21wb3NlICAgICAgICA9IGRlcHJlY2F0ZWQoJ2NvbXBvc2UnKTtcbm1vZHVsZS5leHBvcnRzLmFkZENvbnN0cnVjdG9yID0gZGVwcmVjYXRlZCgnYWRkQ29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgeWFtbCA9IHJlcXVpcmUoJy4vbGliL2pzLXlhbWwuanMnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHlhbWw7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc2luZ2xlQ29tbWVudCA9IDE7XG52YXIgbXVsdGlDb21tZW50ID0gMjtcblxuZnVuY3Rpb24gc3RyaXBXaXRob3V0V2hpdGVzcGFjZSgpIHtcblx0cmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBzdHJpcFdpdGhXaGl0ZXNwYWNlKHN0ciwgc3RhcnQsIGVuZCkge1xuXHRyZXR1cm4gc3RyLnNsaWNlKHN0YXJ0LCBlbmQpLnJlcGxhY2UoL1xcUy9nLCAnICcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cblx0dmFyIGN1cnJlbnRDaGFyO1xuXHR2YXIgbmV4dENoYXI7XG5cdHZhciBpbnNpZGVTdHJpbmcgPSBmYWxzZTtcblx0dmFyIGluc2lkZUNvbW1lbnQgPSBmYWxzZTtcblx0dmFyIG9mZnNldCA9IDA7XG5cdHZhciByZXQgPSAnJztcblx0dmFyIHN0cmlwID0gb3B0cy53aGl0ZXNwYWNlID09PSBmYWxzZSA/IHN0cmlwV2l0aG91dFdoaXRlc3BhY2UgOiBzdHJpcFdpdGhXaGl0ZXNwYWNlO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y3VycmVudENoYXIgPSBzdHJbaV07XG5cdFx0bmV4dENoYXIgPSBzdHJbaSArIDFdO1xuXG5cdFx0aWYgKCFpbnNpZGVDb21tZW50ICYmIGN1cnJlbnRDaGFyID09PSAnXCInKSB7XG5cdFx0XHR2YXIgZXNjYXBlZCA9IHN0cltpIC0gMV0gPT09ICdcXFxcJyAmJiBzdHJbaSAtIDJdICE9PSAnXFxcXCc7XG5cdFx0XHRpZiAoIWVzY2FwZWQpIHtcblx0XHRcdFx0aW5zaWRlU3RyaW5nID0gIWluc2lkZVN0cmluZztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaW5zaWRlU3RyaW5nKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoIWluc2lkZUNvbW1lbnQgJiYgY3VycmVudENoYXIgKyBuZXh0Q2hhciA9PT0gJy8vJykge1xuXHRcdFx0cmV0ICs9IHN0ci5zbGljZShvZmZzZXQsIGkpO1xuXHRcdFx0b2Zmc2V0ID0gaTtcblx0XHRcdGluc2lkZUNvbW1lbnQgPSBzaW5nbGVDb21tZW50O1xuXHRcdFx0aSsrO1xuXHRcdH0gZWxzZSBpZiAoaW5zaWRlQ29tbWVudCA9PT0gc2luZ2xlQ29tbWVudCAmJiBjdXJyZW50Q2hhciArIG5leHRDaGFyID09PSAnXFxyXFxuJykge1xuXHRcdFx0aSsrO1xuXHRcdFx0aW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXHRcdFx0cmV0ICs9IHN0cmlwKHN0ciwgb2Zmc2V0LCBpKTtcblx0XHRcdG9mZnNldCA9IGk7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9IGVsc2UgaWYgKGluc2lkZUNvbW1lbnQgPT09IHNpbmdsZUNvbW1lbnQgJiYgY3VycmVudENoYXIgPT09ICdcXG4nKSB7XG5cdFx0XHRpbnNpZGVDb21tZW50ID0gZmFsc2U7XG5cdFx0XHRyZXQgKz0gc3RyaXAoc3RyLCBvZmZzZXQsIGkpO1xuXHRcdFx0b2Zmc2V0ID0gaTtcblx0XHR9IGVsc2UgaWYgKCFpbnNpZGVDb21tZW50ICYmIGN1cnJlbnRDaGFyICsgbmV4dENoYXIgPT09ICcvKicpIHtcblx0XHRcdHJldCArPSBzdHIuc2xpY2Uob2Zmc2V0LCBpKTtcblx0XHRcdG9mZnNldCA9IGk7XG5cdFx0XHRpbnNpZGVDb21tZW50ID0gbXVsdGlDb21tZW50O1xuXHRcdFx0aSsrO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fSBlbHNlIGlmIChpbnNpZGVDb21tZW50ID09PSBtdWx0aUNvbW1lbnQgJiYgY3VycmVudENoYXIgKyBuZXh0Q2hhciA9PT0gJyovJykge1xuXHRcdFx0aSsrO1xuXHRcdFx0aW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXHRcdFx0cmV0ICs9IHN0cmlwKHN0ciwgb2Zmc2V0LCBpICsgMSk7XG5cdFx0XHRvZmZzZXQgPSBpICsgMTtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgKyAoaW5zaWRlQ29tbWVudCA/IHN0cmlwKHN0ci5zdWJzdHIob2Zmc2V0KSkgOiBzdHIuc3Vic3RyKG9mZnNldCkpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGVQYXRoLCBwb3RlbnRpYWxQYXJlbnQpIHtcbiAgICAvLyBGb3IgaW5zaWRlLWRpcmVjdG9yeSBjaGVja2luZywgd2Ugd2FudCB0byBhbGxvdyB0cmFpbGluZyBzbGFzaGVzLCBzbyBub3JtYWxpemUuXG4gICAgdGhlUGF0aCA9IHN0cmlwVHJhaWxpbmdTZXAodGhlUGF0aCk7XG4gICAgcG90ZW50aWFsUGFyZW50ID0gc3RyaXBUcmFpbGluZ1NlcChwb3RlbnRpYWxQYXJlbnQpO1xuXG4gICAgLy8gTm9kZSB0cmVhdHMgb25seSBXaW5kb3dzIGFzIGNhc2UtaW5zZW5zaXRpdmUgaW4gaXRzIHBhdGggbW9kdWxlOyB3ZSBmb2xsb3cgdGhvc2UgY29udmVudGlvbnMuXG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09IFwid2luMzJcIikge1xuICAgICAgICB0aGVQYXRoID0gdGhlUGF0aC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBwb3RlbnRpYWxQYXJlbnQgPSBwb3RlbnRpYWxQYXJlbnQudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhlUGF0aC5sYXN0SW5kZXhPZihwb3RlbnRpYWxQYXJlbnQsIDApID09PSAwICYmXG5cdFx0KFxuXHRcdFx0dGhlUGF0aFtwb3RlbnRpYWxQYXJlbnQubGVuZ3RoXSA9PT0gcGF0aC5zZXAgfHxcblx0XHRcdHRoZVBhdGhbcG90ZW50aWFsUGFyZW50Lmxlbmd0aF0gPT09IHVuZGVmaW5lZFxuXHRcdCk7XG59O1xuXG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2VwKHRoZVBhdGgpIHtcbiAgICBpZiAodGhlUGF0aFt0aGVQYXRoLmxlbmd0aCAtIDFdID09PSBwYXRoLnNlcCkge1xuICAgICAgICByZXR1cm4gdGhlUGF0aC5zbGljZSgwLCAtMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGVQYXRoO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyksXG4gICAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgICBDb25maWdPcHMgPSByZXF1aXJlKCcuL2NvbmZpZy1vcHMnKSxcbiAgICBwYXRoSXNJbnNpZGUgPSByZXF1aXJlKCdwYXRoLWlzLWluc2lkZScpLFxuICAgIHN0cmlwQ29tbWVudHMgPSByZXF1aXJlKCdzdHJpcC1qc29uLWNvbW1lbnRzJyk7XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBDT05GSUdfRklMRVMgPSBbXG4gICAgJy53aXN0cmMueWFtbCcsXG4gICAgJy53aXN0cmMueW1sJyxcbiAgICAnLndpc3RyYy5qc29uJ1xuXTtcblxuLyoqXG4gKiBDb252ZW5pZW5jZSB3cmFwcGVyIGZvciBzeW5jaHJvbm91c2x5IHJlYWRpbmcgZmlsZSBjb250ZW50cy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlUGF0aCBUaGUgZmlsZW5hbWUgdG8gcmVhZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmaWxlIGNvbnRlbnRzLCB3aXRoIHRoZSBCT00gcmVtb3ZlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlYWRGaWxlKGZpbGVQYXRoKSB7XG4gICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKS5yZXBsYWNlKC9eXFx1ZmVmZi8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gc3RyaW5nIHJlcHJlc2VudHMgYSBmaWxlcGF0aCBvciBub3QgdXNpbmcgdGhlIHNhbWVcbiAqIGNvbnZlbnRpb25zIGFzIHJlcXVpcmUoKSwgbWVhbmluZyB0aGF0IHRoZSBmaXJzdCBjaGFyYWN0ZXIgbXVzdCBiZSBub25hbHBoYW51bWVyaWNcbiAqIGFuZCBub3QgdGhlIEAgc2lnbiB3aGljaCBpcyB1c2VkIGZvciBzY29wZWQgcGFja2FnZXMgdG8gYmUgY29uc2lkZXJlZCBhIGZpbGUgcGF0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlUGF0aCBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgaXQncyBhIGZpbGVwYXRoLCBmYWxzZSBpZiBub3QuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc0ZpbGVQYXRoKGZpbGVQYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguaXNBYnNvbHV0ZShmaWxlUGF0aCkgfHwgIS9cXHd8QC8udGVzdChmaWxlUGF0aC5jaGFyQXQoMCkpO1xufVxuXG4vKipcbiAqIExvYWRzIGEgWUFNTCBjb25maWd1cmF0aW9uIGZyb20gYSBmaWxlLlxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIFRoZSBmaWxlbmFtZSB0byBsb2FkLlxuICogQHJldHVybnMge09iamVjdH0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZyb20gdGhlIGZpbGUuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGZpbGUgY2Fubm90IGJlIHJlYWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkWUFNTENvbmZpZ0ZpbGUoZmlsZVBhdGgpIHtcbiAgICAvLyBsYXp5IGxvYWQgWUFNTCB0byBpbXByb3ZlIHBlcmZvcm1hbmNlIHdoZW4gbm90IHVzZWRcbiAgICBjb25zdCB5YW1sID0gcmVxdWlyZSgnanMteWFtbCcpO1xuXG4gICAgdHJ5IHtcblxuICAgICAgICAvLyBlbXB0eSBZQU1MIGZpbGUgY2FuIGJlIG51bGwsIHNvIGFsd2F5cyB1c2VcbiAgICAgICAgcmV0dXJuIHlhbWwuc2FmZUxvYWQocmVhZEZpbGUoZmlsZVBhdGgpKSB8fCB7fTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGUubWVzc2FnZSA9IGBDYW5ub3QgcmVhZCBjb25maWcgZmlsZTogJHtmaWxlUGF0aH1cXG5FcnJvcjogJHtlLm1lc3NhZ2V9YDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG59XG5cbi8qKlxuICogTG9hZHMgYSBKU09OIGNvbmZpZ3VyYXRpb24gZnJvbSBhIGZpbGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZVBhdGggVGhlIGZpbGVuYW1lIHRvIGxvYWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgZnJvbSB0aGUgZmlsZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZmlsZSBjYW5ub3QgYmUgcmVhZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWRKU09OQ29uZmlnRmlsZShmaWxlUGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cmlwQ29tbWVudHMocmVhZEZpbGUoZmlsZVBhdGgpKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGUubWVzc2FnZSA9IGBDYW5ub3QgcmVhZCBjb25maWcgZmlsZTogJHtmaWxlUGF0aH1cXG5FcnJvcjogJHtlLm1lc3NhZ2V9YDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlcnJvciB0byBub3RpZnkgYWJvdXQgYSBtaXNzaW5nIGNvbmZpZyB0byBleHRlbmQgZnJvbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWdOYW1lIFRoZSBuYW1lIG9mIHRoZSBtaXNzaW5nIGNvbmZpZy5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yIG9iamVjdCB0byB0aHJvd1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29uZmlnTWlzc2luZ0Vycm9yKGNvbmZpZ05hbWUpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgY29uZmlnICcke2NvbmZpZ05hbWV9JyB0byBleHRlbmQgZnJvbS5gKTtcblxuICAgIGVycm9yLm1lc3NhZ2VUZW1wbGF0ZSA9ICdleHRlbmQtY29uZmlnLW1pc3NpbmcnO1xuICAgIGVycm9yLm1lc3NhZ2VEYXRhID0ge1xuICAgICAgICBjb25maWdOYW1lXG4gICAgfTtcbiAgICByZXR1cm4gZXJyb3I7XG59XG5cbi8qKlxuICogTG9hZHMgYSBjb25maWd1cmF0aW9uIGZpbGUgcmVnYXJkbGVzcyBvZiB0aGUgc291cmNlLiBJbnNwZWN0cyB0aGUgZmlsZSBwYXRoXG4gKiB0byBkZXRlcm1pbmUgdGhlIGNvcnJlY3RseSB3YXkgdG8gbG9hZCB0aGUgY29uZmlnIGZpbGUuXG4gKiBAcGFyYW0ge09iamVjdH0gZmlsZSBUaGUgcGF0aCB0byB0aGUgY29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZENvbmZpZ0ZpbGUoZmlsZSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZmlsZS5maWxlUGF0aDtcbiAgICBsZXQgY29uZmlnO1xuXG4gICAgc3dpdGNoIChwYXRoLmV4dG5hbWUoZmlsZVBhdGgpKSB7XG4gICAgICAgIGNhc2UgJy55YW1sJzpcbiAgICAgICAgY2FzZSAnLnltbCc6XG4gICAgICAgICAgICBjb25maWcgPSBsb2FkWUFNTENvbmZpZ0ZpbGUoZmlsZVBhdGgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbmZpZyA9IGxvYWRKU09OQ29uZmlnRmlsZShmaWxlUGF0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbmZpZ09wcy5tZXJnZShDb25maWdPcHMuY3JlYXRlRW1wdHlDb25maWcoKSwgY29uZmlnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBiYXNlIGRpcmVjdG9yeSBmb3Igbm9kZSBwYWNrYWdlcyByZWZlcmVuY2VkIGluIGEgY29uZmlnIGZpbGUuXG4gKiBUaGlzIGRvZXMgbm90IGluY2x1ZGUgbm9kZV9tb2R1bGVzIGluIHRoZSBwYXRoIHNvIGl0IGNhbiBiZSB1c2VkIGZvciBhbGxcbiAqIHJlZmVyZW5jZXMgcmVsYXRpdmUgdG8gYSBjb25maWcgZmlsZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWdGaWxlUGF0aCBUaGUgY29uZmlnIGZpbGUgcmVmZXJlbmNpbmcgdGhlIGZpbGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYmFzZSBkaXJlY3RvcnkgZm9yIHRoZSBmaWxlIHBhdGguXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRCYXNlRGlyKGNvbmZpZ0ZpbGVQYXRoKSB7XG5cbiAgICAvLyBjYWxjdWxhdGVzIHRoZSBwYXRoIG9mIHRoZSBwcm9qZWN0IGluY2x1ZGluZyBXaXN0IGFzIGRlcGVuZGVuY3lcbiAgICBjb25zdCBwcm9qZWN0UGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi8nKTtcblxuICAgIGlmIChjb25maWdGaWxlUGF0aCAmJiBwYXRoSXNJbnNpZGUoY29uZmlnRmlsZVBhdGgsIHByb2plY3RQYXRoKSkge1xuXG4gICAgICAgIC8vIGJlIGNhcmVmdWwgb2YgaHR0cHM6Ly9naXRodWIuY29tL3N1YnN0YWNrL25vZGUtcmVzb2x2ZS9pc3N1ZXMvNzhcbiAgICAgICAgcmV0dXJuIHBhdGguam9pbihwYXRoLnJlc29sdmUoY29uZmlnRmlsZVBhdGgpKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIGRlZmF1bHQgdG8gV2lzdCBwcm9qZWN0IHBhdGggc2luY2UgaXQncyB1bmxpa2VseSB0aGF0IHBsdWdpbnMgd2lsbCBiZVxuICAgICAqIGluIHRoaXMgZGlyZWN0b3J5XG4gICAgICovXG4gICAgcmV0dXJuIHBhdGguam9pbihwcm9qZWN0UGF0aCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgbG9va3VwIHBhdGgsIGluY2x1ZGluZyBub2RlX21vZHVsZXMsIGZvciBwYWNrYWdlXG4gKiByZWZlcmVuY2VzIHJlbGF0aXZlIHRvIGEgY29uZmlnIGZpbGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnRmlsZVBhdGggVGhlIGNvbmZpZyBmaWxlIHJlZmVyZW5jaW5nIHRoZSBmaWxlLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGxvb2t1cCBwYXRoIGZvciB0aGUgZmlsZSBwYXRoLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0TG9va3VwUGF0aChjb25maWdGaWxlUGF0aCkge1xuICAgIGNvbnN0IGJhc2VkaXIgPSBnZXRCYXNlRGlyKGNvbmZpZ0ZpbGVQYXRoKTtcblxuICAgIHJldHVybiBwYXRoLmpvaW4oYmFzZWRpciwgJ25vZGVfbW9kdWxlcycpO1xufVxuXG4vKipcbiAqIFJlc29sdmVzIGEgY29uZmlndXJhdGlvbiBmaWxlIHBhdGggaW50byB0aGUgZnVsbHktZm9ybWVkIHBhdGgsIHdoZXRoZXIgZmlsZW5hbWVcbiAqIG9yIHBhY2thZ2UgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlUGF0aCBUaGUgZmlsZXBhdGggdG8gcmVzb2x2ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcmVsYXRpdmVUb10gVGhlIHBhdGggdG8gcmVzb2x2ZSByZWxhdGl2ZSB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIDMgcHJvcGVydGllczpcbiAqIC0gJ2ZpbGVQYXRoJyAocmVxdWlyZWQpIHRoZSByZXNvbHZlZCBwYXRoIHRoYXQgY2FuIGJlIHVzZWQgZGlyZWN0bHkgdG8gbG9hZCB0aGUgY29uZmlndXJhdGlvbi5cbiAqIC0gJ2NvbmZpZ05hbWUnIHRoZSBuYW1lIG9mIHRoZSBjb25maWd1cmF0aW9uIGluc2lkZSB0aGUgcGx1Z2luLlxuICogLSAnY29uZmlnRnVsbE5hbWUnIChyZXF1aXJlZCkgdGhlIG5hbWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24gYXMgdXNlZCBpbiB0aGUgd2lzdCBjb25maWcoZS5nLiAncGx1Z2luOm5vZGUvcmVjb21tZW5kZWQnKSxcbiAqICAgICBvciB0aGUgYWJzb2x1dGUgcGF0aCB0byBhIGNvbmZpZyBmaWxlLiBUaGlzIHNob3VsZCB1bmlxdWVseSBpZGVudGlmeSBhIGNvbmZpZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmUoZmlsZVBhdGgsIHJlbGF0aXZlVG8pIHtcbiAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShyZWxhdGl2ZVRvIHx8ICcnLCBmaWxlUGF0aCk7XG4gICAgcmV0dXJuIHsgZmlsZVBhdGg6IGZ1bGxQYXRoLCBjb25maWdGdWxsTmFtZTogZnVsbFBhdGggfTtcbn1cblxuLyoqXG4gKiBMb2FkcyBhIGNvbmZpZ3VyYXRpb24gZmlsZSBmcm9tIHRoZSBnaXZlbiBmaWxlIHBhdGguXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzb2x2ZWRQYXRoIFRoZSB2YWx1ZSBmcm9tIGNhbGxpbmcgcmVzb2x2ZSgpIG9uIGEgZmlsZW5hbWUgb3IgcGFja2FnZSBuYW1lLlxuICogQHBhcmFtIHtDb25maWd9IGNvbmZpZ0NvbnRleHQgUGx1Z2lucyBjb250ZXh0XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbi5cbiAqL1xuZnVuY3Rpb24gbG9hZEZyb21EaXNrKHJlc29sdmVkUGF0aCwgY29uZmlnQ29udGV4dCkge1xuICAgIGNvbnN0IGRpcm5hbWUgPSBwYXRoLmRpcm5hbWUocmVzb2x2ZWRQYXRoLmZpbGVQYXRoKSxcbiAgICAgICAgbG9va3VwUGF0aCA9IGdldExvb2t1cFBhdGgoZGlybmFtZSksXG4gICAgICAgIGNvbmZpZyA9IGxvYWRDb25maWdGaWxlKHJlc29sdmVkUGF0aCk7XG5cbiAgICByZXR1cm4gY29uZmlnO1xufVxuXG4vKipcbiAqIExvYWRzIGEgY29uZmlnIG9iamVjdCBmcm9tIHRoZSBjb25maWcgY2FjaGUgYmFzZWQgb24gaXRzIGZpbGVuYW1lLCBmYWxsaW5nIGJhY2sgdG8gdGhlIGRpc2sgaWYgdGhlIGZpbGUgaXMgbm90IHlldFxuICogY2FjaGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIHRoZSBwYXRoIHRvIHRoZSBjb25maWcgZmlsZVxuICogQHBhcmFtIHtDb25maWd9IGNvbmZpZ0NvbnRleHQgQ29udGV4dCBmb3IgdGhlIGNvbmZpZyBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IFtyZWxhdGl2ZVRvXSBUaGUgcGF0aCB0byByZXNvbHZlIHJlbGF0aXZlIHRvLlxuICogQHJldHVybnMge09iamVjdH0gdGhlIHBhcnNlZCBjb25maWcgb2JqZWN0IChlbXB0eSBvYmplY3QgaWYgdGhlcmUgd2FzIGEgcGFyc2UgZXJyb3IpXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKGZpbGVQYXRoLCBjb25maWdDb250ZXh0LCByZWxhdGl2ZVRvKSB7XG4gICAgY29uc3QgcmVzb2x2ZWRQYXRoID0gcmVzb2x2ZShmaWxlUGF0aCwgcmVsYXRpdmVUbyk7XG4gICAgY29uc3QgY2FjaGVkQ29uZmlnID0gY29uZmlnQ29udGV4dC5jb25maWdDYWNoZS5nZXRDb25maWcocmVzb2x2ZWRQYXRoLmNvbmZpZ0Z1bGxOYW1lKTtcblxuICAgIGlmIChjYWNoZWRDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZENvbmZpZztcbiAgICB9XG5cbiAgICBjb25zdCBjb25maWcgPSBsb2FkRnJvbURpc2socmVzb2x2ZWRQYXRoLCBjb25maWdDb250ZXh0KTtcblxuICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgY29uZmlnLmZpbGVQYXRoID0gcmVzb2x2ZWRQYXRoLmZpbGVQYXRoO1xuICAgICAgICBjb25maWcuYmFzZURpcmVjdG9yeSA9IHBhdGguZGlybmFtZShyZXNvbHZlZFBhdGguZmlsZVBhdGgpO1xuICAgICAgICBjb25maWdDb250ZXh0LmNvbmZpZ0NhY2hlLnNldENvbmZpZyhyZXNvbHZlZFBhdGguY29uZmlnRnVsbE5hbWUsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHVibGljIEludGVyZmFjZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZ2V0QmFzZURpcixcbiAgICBnZXRMb29rdXBQYXRoLFxuICAgIGxvYWQsXG4gICAgcmVzb2x2ZSxcbiAgICBDT05GSUdfRklMRVMsXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZW5hbWUgZm9yIGEgZ2l2ZW4gZGlyZWN0b3J5LiBJdCBsb29wcyBvdmVyIGFsbFxuICAgICAqIG9mIHRoZSB2YWxpZCBjb25maWd1cmF0aW9uIGZpbGVuYW1lcyBpbiBvcmRlciB0byBmaW5kIHRoZSBmaXJzdCBvbmUgdGhhdCBleGlzdHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdG9yeSBUaGUgZGlyZWN0b3J5IHRvIGNoZWNrIGZvciBhIGNvbmZpZyBmaWxlLlxuICAgICAqIEByZXR1cm5zIHs/c3RyaW5nfSBUaGUgZmlsZW5hbWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZSBmb3IgdGhlIGRpcmVjdG9yeVxuICAgICAqICAgICAgb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBjb25maWd1cmF0aW9uIGZpbGUgaW4gdGhlIGRpcmVjdG9yeS5cbiAgICAgKi9cbiAgICBnZXRGaWxlbmFtZUZvckRpcmVjdG9yeShkaXJlY3RvcnkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IENPTkZJR19GSUxFUy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBwYXRoLmpvaW4oZGlyZWN0b3J5LCBDT05GSUdfRklMRVNbaV0pO1xuXG4gICAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlbmFtZSkgJiYgZnMuc3RhdFN5bmMoZmlsZW5hbWUpLmlzRmlsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm9zXCIpOyIsIid1c2Ugc3RyaWN0JztcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJlcXVpcmVtZW50c1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgICBvcyA9IHJlcXVpcmUoJ29zJyksXG4gICAgQ29uZmlnT3BzID0gcmVxdWlyZSgnLi9jb25maWcvY29uZmlnLW9wcycpLFxuICAgIENvbmZpZ0ZpbGUgPSByZXF1aXJlKCcuL2NvbmZpZy9jb25maWctZmlsZScpLFxuICAgIENvbmZpZ0NhY2hlID0gcmVxdWlyZSgnLi9jb25maWcvY29uZmlnLWNhY2hlJyksXG4gICAgRmlsZUZpbmRlciA9IHJlcXVpcmUoJy4vZmlsZS1maW5kZXInKTtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENvbnN0YW50c1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgUEVSU09OQUxfQ09ORklHX0RJUiA9IG9zLmhvbWVkaXIoKTtcbmNvbnN0IFNVQkNPTkZJR19TRVAgPSAnOic7XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBIZWxwZXJzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYW55IHJ1bGVzIHdlcmUgZXhwbGljaXRseSBwYXNzZWQgaW4gYXMgb3B0aW9ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZSBvcHRpb25zIHVzZWQgdG8gY3JlYXRlIG91ciBjb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgcnVsZXMgd2VyZSBwYXNzZWQgaW4gYXMgb3B0aW9ucywgZmFsc2Ugb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaGFzUnVsZXMob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLnJ1bGVzICYmIE9iamVjdC5rZXlzKG9wdGlvbnMucnVsZXMpLmxlbmd0aCA+IDA7XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBUElcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBjbGFzc1xuICovXG5jbGFzcyBDb25maWcge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyB0byBiZSBwYXNzZWQgaW5cbiAgICAgKiBAcGFyYW0ge0xpbnRlcn0gbGludGVyQ29udGV4dCBMaW50ZXIgaW5zdGFuY2Ugb2JqZWN0XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgbGludGVyQ29udGV4dCkge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB0aGlzLmxpbnRlckNvbnRleHQgPSBsaW50ZXJDb250ZXh0O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuaWdub3JlID0gb3B0aW9ucy5pZ25vcmU7XG4gICAgICAgIHRoaXMuaWdub3JlUGF0aCA9IG9wdGlvbnMuaWdub3JlUGF0aDtcblxuICAgICAgICB0aGlzLmNvbmZpZ0NhY2hlID0gbmV3IENvbmZpZ0NhY2hlKCk7XG5cbiAgICAgICAgdGhpcy5iYXNlQ29uZmlnID0gb3B0aW9ucy5iYXNlQ29uZmlnXG4gICAgICAgICAgICA/IENvbmZpZ09wcy5tZXJnZSh7fSwgQ29uZmlnRmlsZS5sb2FkT2JqZWN0KG9wdGlvbnMuYmFzZUNvbmZpZywgdGhpcykpXG4gICAgICAgICAgICA6IHsgcnVsZXM6IHt9IH07XG4gICAgICAgIHRoaXMuYmFzZUNvbmZpZy5maWxlUGF0aCA9ICcnO1xuICAgICAgICB0aGlzLmJhc2VDb25maWcuYmFzZURpcmVjdG9yeSA9IHRoaXMub3B0aW9ucy5jd2Q7XG5cbiAgICAgICAgdGhpcy5jb25maWdDYWNoZS5zZXRDb25maWcodGhpcy5iYXNlQ29uZmlnLmZpbGVQYXRoLCB0aGlzLmJhc2VDb25maWcpO1xuICAgICAgICB0aGlzLmNvbmZpZ0NhY2hlLnNldE1lcmdlZFZlY3RvckNvbmZpZyh0aGlzLmJhc2VDb25maWcuZmlsZVBhdGgsIHRoaXMuYmFzZUNvbmZpZyk7XG5cbiAgICAgICAgdGhpcy5sb2FkU3BlY2lmaWNDb25maWcob3B0aW9ucy5jb25maWdGaWxlKTtcblxuICAgICAgICAvLyBFbXB0eSB2YWx1ZXMgaW4gY29uZmlncyBkb24ndCBtZXJnZSBwcm9wZXJseVxuICAgICAgICBjb25zdCBjbGlDb25maWdPcHRpb25zID0ge1xuICAgICAgICAgICAgcnVsZXM6IHRoaXMub3B0aW9ucy5ydWxlc1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY2xpQ29uZmlnID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKGNsaUNvbmZpZ09wdGlvbnMpLmZvckVhY2goY29uZmlnS2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2xpQ29uZmlnT3B0aW9uc1tjb25maWdLZXldO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaUNvbmZpZ1tjb25maWdLZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogTG9hZHMgdGhlIGNvbmZpZyBvcHRpb25zIGZyb20gYSBjb25maWcgc3BlY2lmaWVkIG9uIHRoZSBjb21tYW5kIGxpbmUuXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZ10gQSBzaGFyZWFibGUgbmFtZWQgY29uZmlnIG9yIHBhdGggdG8gYSBjb25maWcgZmlsZS5cbiAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICovXG4gICAgbG9hZFNwZWNpZmljQ29uZmlnKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBwYXRoLnJlc29sdmUodGhpcy5vcHRpb25zLmN3ZCwgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuc3BlY2lmaWNDb25maWcgPSBDb25maWdGaWxlLmxvYWQoY29uZmlnLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBlcnNvbmFsIGNvbmZpZyBvYmplY3QgZnJvbSB1c2VyJ3MgaG9tZSBkaXJlY3RvcnkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gdGhlIHBlcnNvbmFsIGNvbmZpZyBvYmplY3QgKG51bGwgaWYgdGhlcmUgaXMgbm8gcGVyc29uYWwgY29uZmlnKVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0UGVyc29uYWxDb25maWcoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wZXJzb25hbENvbmZpZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGxldCBjb25maWc7XG4gICAgICAgICAgICBjb25zdCBmaWxlbmFtZSA9IENvbmZpZ0ZpbGUuZ2V0RmlsZW5hbWVGb3JEaXJlY3RvcnkoUEVSU09OQUxfQ09ORklHX0RJUik7XG5cbiAgICAgICAgICAgIGlmIChmaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IENvbmZpZ0ZpbGUubG9hZChmaWxlbmFtZSwgdGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGVyc29uYWxDb25maWcgPSBjb25maWcgfHwgbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNvbmFsQ29uZmlnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyBhIGhpZXJhcmNoeSBvZiBjb25maWcgb2JqZWN0cywgaW5jbHVkaW5nIHRoZSBiYXNlIGNvbmZpZywgYWxsIGxvY2FsIGNvbmZpZ3MgZnJvbSB0aGUgZGlyZWN0b3J5IHRyZWUsXG4gICAgICogYW5kIGEgY29uZmlnIGZpbGUgc3BlY2lmaWVkIG9uIHRoZSBjb21tYW5kIGxpbmUsIGlmIGFwcGxpY2FibGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdG9yeSBhIGZpbGUgaW4gd2hvc2UgZGlyZWN0b3J5IHdlIHN0YXJ0IGxvb2tpbmcgZm9yIGEgbG9jYWwgY29uZmlnXG4gICAgICogQHJldHVybnMge09iamVjdFtdfSBUaGUgY29uZmlnIG9iamVjdHMsIGluIGFzY2VuZGluZyBvcmRlciBvZiBwcmVjZWRlbmNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRDb25maWdIaWVyYXJjaHkoZGlyZWN0b3J5KSB7XG4gICAgICAgIC8vIFN0ZXAgMTogQWx3YXlzIGluY2x1ZGUgYmFzZUNvbmZpZ1xuICAgICAgICBsZXQgY29uZmlncyA9IFt0aGlzLmJhc2VDb25maWddO1xuXG4gICAgICAgIC8vIFN0ZXAgMjogQWRkIHVzZXItc3BlY2lmaWVkIGNvbmZpZyBmcm9tIC53aXN0cmMuKiBmaWxlc1xuICAgICAgICBjb25maWdzID0gY29uZmlncy5jb25jYXQodGhpcy5nZXRMb2NhbENvbmZpZ0hpZXJhcmNoeShkaXJlY3RvcnkpKTtcblxuICAgICAgICAvLyBTdGVwIDM6IE1lcmdlIGluIGNvbW1hbmQgbGluZSBjb25maWcgZmlsZVxuICAgICAgICBpZiAodGhpcy5zcGVjaWZpY0NvbmZpZykge1xuICAgICAgICAgICAgY29uZmlncy5wdXNoKHRoaXMuc3BlY2lmaWNDb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgY29uZmlnIG9iamVjdHMgZXh0cmFjdGVkIGZyb20gbG9jYWwgY29uZmlnIGZpbGVzIHRoYXQgYXBwbHkgdG8gdGhlIGN1cnJlbnQgZGlyZWN0b3J5LCBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIsIGJlZ2lubmluZyB3aXRoIHRoZSBjb25maWcgdGhhdCBpcyBoaWdoZXN0IGluIHRoZSBkaXJlY3RvcnkgdHJlZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0b3J5IFRoZSBkaXJlY3RvcnkgdG8gc3RhcnQgbG9va2luZyBpbiBmb3IgbG9jYWwgY29uZmlnIGZpbGVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3RbXX0gVGhlIHNoYWxsb3cgbG9jYWwgY29uZmlnIG9iamVjdHMsIGluIGFzY2VuZGluZyBvcmRlciBvZiBwcmVjZWRlbmNlIChjbG9zZXN0IHRvIHRoZSBjdXJyZW50XG4gICAgICogZGlyZWN0b3J5IGF0IHRoZSBlbmQpLCBvciBhbiBlbXB0eSBhcnJheSBpZiB0aGVyZSBhcmUgbm8gbG9jYWwgY29uZmlncy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldExvY2FsQ29uZmlnSGllcmFyY2h5KGRpcmVjdG9yeSkge1xuICAgICAgICBjb25zdCBsb2NhbENvbmZpZ0ZpbGVzID0gdGhpcy5maW5kTG9jYWxDb25maWdGaWxlcyhkaXJlY3RvcnkpLFxuICAgICAgICAgICAgcHJvamVjdENvbmZpZ1BhdGggPSBDb25maWdGaWxlLmdldEZpbGVuYW1lRm9yRGlyZWN0b3J5KHRoaXMub3B0aW9ucy5jd2QpLFxuICAgICAgICAgICAgc2VhcmNoZWQgPSBbXSxcbiAgICAgICAgICAgIGNvbmZpZ3MgPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IGxvY2FsQ29uZmlnRmlsZSBvZiBsb2NhbENvbmZpZ0ZpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbENvbmZpZ0RpcmVjdG9yeSA9IHBhdGguZGlybmFtZShsb2NhbENvbmZpZ0ZpbGUpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxDb25maWdIaWVyYXJjaHlDYWNoZSA9IHRoaXMuY29uZmlnQ2FjaGUuZ2V0SGllcmFyY2h5TG9jYWxDb25maWdzKGxvY2FsQ29uZmlnRGlyZWN0b3J5KTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsQ29uZmlnSGllcmFyY2h5Q2FjaGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbENvbmZpZ0hpZXJhcmNoeSA9IGxvY2FsQ29uZmlnSGllcmFyY2h5Q2FjaGUuY29uY2F0KGNvbmZpZ3MucmV2ZXJzZSgpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnQ2FjaGUuc2V0SGllcmFyY2h5TG9jYWxDb25maWdzKHNlYXJjaGVkLCBsb2NhbENvbmZpZ0hpZXJhcmNoeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsQ29uZmlnSGllcmFyY2h5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEb24ndCBjb25zaWRlciB0aGUgcGVyc29uYWwgY29uZmlnIGZpbGUgaW4gdGhlIGhvbWUgZGlyZWN0b3J5LFxuICAgICAgICAgICAgLy8gZXhjZXB0IGlmIHRoZSBob21lIGRpcmVjdG9yeSBpcyB0aGUgc2FtZSBhcyB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeVxuICAgICAgICAgICAgaWYgKGxvY2FsQ29uZmlnRGlyZWN0b3J5ID09PSBQRVJTT05BTF9DT05GSUdfRElSICYmIGxvY2FsQ29uZmlnRmlsZSAhPT0gcHJvamVjdENvbmZpZ1BhdGgpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbG9jYWxDb25maWcgPSBDb25maWdGaWxlLmxvYWQobG9jYWxDb25maWdGaWxlLCB0aGlzKTtcblxuICAgICAgICAgICAgLy8gSWdub3JlIGVtcHR5IGNvbmZpZyBmaWxlc1xuICAgICAgICAgICAgaWYgKCFsb2NhbENvbmZpZykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWdzLnB1c2gobG9jYWxDb25maWcpO1xuICAgICAgICAgICAgc2VhcmNoZWQucHVzaChsb2NhbENvbmZpZ0RpcmVjdG9yeSk7XG5cbiAgICAgICAgICAgIC8vIFN0b3AgdHJhdmVyc2luZyBpZiBhIGNvbmZpZyBpcyBmb3VuZCB3aXRoIHRoZSByb290IGZsYWcgc2V0XG4gICAgICAgICAgICBpZiAobG9jYWxDb25maWcucm9vdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb25maWdzLmxlbmd0aCAmJiAhdGhpcy5zcGVjaWZpY0NvbmZpZykge1xuICAgICAgICAgICAgLy8gRmFsbCBiYWNrIG9uIHRoZSBwZXJzb25hbCBjb25maWcgZnJvbSB+Ly53aXN0cmNcbiAgICAgICAgICAgIGNvbnN0IHBlcnNvbmFsQ29uZmlnID0gdGhpcy5nZXRQZXJzb25hbENvbmZpZygpO1xuXG4gICAgICAgICAgICBpZiAocGVyc29uYWxDb25maWcpIHtcbiAgICAgICAgICAgICAgICBjb25maWdzLnB1c2gocGVyc29uYWxDb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWhhc1J1bGVzKHRoaXMub3B0aW9ucykgJiYgIXRoaXMub3B0aW9ucy5iYXNlQ29uZmlnKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBObyBjb25maWcgZmlsZSwgbm8gbWFudWFsIGNvbmZpZ3VyYXRpb24sIGFuZCBubyBydWxlcywgc28gZXJyb3IuXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9Db25maWdFcnJvciA9IG5ldyBFcnJvcignTm8gV2lzdCBjb25maWd1cmF0aW9uIGZvdW5kLicpO1xuXG4gICAgICAgICAgICAgICAgbm9Db25maWdFcnJvci5tZXNzYWdlVGVtcGxhdGUgPSAnbm8tY29uZmlnLWZvdW5kJztcbiAgICAgICAgICAgICAgICBub0NvbmZpZ0Vycm9yLm1lc3NhZ2VEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnksXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzRXhhbWluZWQ6IGxvY2FsQ29uZmlnRmlsZXNcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgbm9Db25maWdFcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgY2FjaGVzIGZvciB0aGUgcGFyZW50IGRpcmVjdG9yaWVzXG4gICAgICAgIHRoaXMuY29uZmlnQ2FjaGUuc2V0SGllcmFyY2h5TG9jYWxDb25maWdzKHNlYXJjaGVkLCBjb25maWdzLnJldmVyc2UoKSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmVjdG9yIG9mIGFwcGxpY2FibGUgY29uZmlncyBhbmQgc3ViY29uZmlncyBmcm9tIHRoZSBoaWVyYXJjaHkgZm9yIGEgZ2l2ZW4gZmlsZS4gQSB2ZWN0b3IgaXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBlbnRyaWVzLCBlYWNoIG9mIHdoaWNoIGluIGFuIG9iamVjdCBzcGVjaWZ5aW5nIGEgY29uZmlnIGZpbGUgcGF0aCBhbmQgYW4gYXJyYXkgb2Ygb3ZlcnJpZGUgaW5kaWNlcyBjb3JyZXNwb25kaW5nXG4gICAgICogdG8gZW50cmllcyBpbiB0aGUgY29uZmlnIGZpbGUncyBvdmVycmlkZXMgc2VjdGlvbiB3aG9zZSBnbG9iIHBhdHRlcm5zIG1hdGNoIHRoZSBzcGVjaWZpZWQgZmlsZSBwYXRoOyBlLmcuLCB0aGVcbiAgICAgKiB2ZWN0b3IgZW50cnkgeyBjb25maWdGaWxlOiAnL2hvbWUvam9obi9hcHAvLndpc3RyYycsIG1hdGNoaW5nT3ZlcnJpZGVzOiBbMCwgMl0gfSB3b3VsZCBpbmRpY2F0ZSB0aGF0IHRoZSBtYWluXG4gICAgICogcHJvamVjdCAud2lzdHJjIGZpbGUgYW5kIGl0cyBmaXJzdCBhbmQgdGhpcmQgb3ZlcnJpZGUgYmxvY2tzIGFwcGx5IHRvIHRoZSBjdXJyZW50IGZpbGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIFRoZSBmaWxlIHBhdGggZm9yIHdoaWNoIHRvIGJ1aWxkIHRoZSBoaWVyYXJjaHkgYW5kIGNvbmZpZyB2ZWN0b3IuXG4gICAgICogQHJldHVybnMge0FycmF5PE9iamVjdD59IGNvbmZpZyB2ZWN0b3IgYXBwbGljYWJsZSB0byB0aGUgc3BlY2lmaWVkIHBhdGhcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldENvbmZpZ1ZlY3RvcihmaWxlUGF0aCkge1xuICAgICAgICBjb25zdCBkaXJlY3RvcnkgPSBmaWxlUGF0aCA/IHBhdGguZGlybmFtZShmaWxlUGF0aCkgOiB0aGlzLm9wdGlvbnMuY3dkO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbmZpZ0hpZXJhcmNoeShkaXJlY3RvcnkpLm1hcChjb25maWcgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmVjdG9yRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgZmlsZVBhdGg6IGNvbmZpZy5maWxlUGF0aCxcbiAgICAgICAgICAgICAgICBtYXRjaGluZ092ZXJyaWRlczogW11cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChjb25maWcub3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShjb25maWcuYmFzZURpcmVjdG9yeSwgZmlsZVBhdGggfHwgZGlyZWN0b3J5KTtcblxuICAgICAgICAgICAgICAgIGNvbmZpZy5vdmVycmlkZXMuZm9yRWFjaCgob3ZlcnJpZGUsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKENvbmZpZ09wcy5wYXRoTWF0Y2hlc0dsb2JzKHJlbGF0aXZlUGF0aCwgb3ZlcnJpZGUuZmlsZXMsIG92ZXJyaWRlLmV4Y2x1ZGVkRmlsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JFbnRyeS5tYXRjaGluZ092ZXJyaWRlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB2ZWN0b3JFbnRyeTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgbG9jYWwgY29uZmlnIGZpbGVzIGZyb20gdGhlIHNwZWNpZmllZCBkaXJlY3RvcnkgYW5kIGl0cyBwYXJlbnQgZGlyZWN0b3JpZXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdG9yeSBUaGUgZGlyZWN0b3J5IHRvIHN0YXJ0IHNlYXJjaGluZyBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtHZW5lcmF0b3JGdW5jdGlvbn0gVGhlIHBhdGhzIG9mIGxvY2FsIGNvbmZpZyBmaWxlcyBmb3VuZC5cbiAgICAgKi9cbiAgICBmaW5kTG9jYWxDb25maWdGaWxlcyhkaXJlY3RvcnkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxvY2FsQ29uZmlnRmluZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2FsQ29uZmlnRmluZGVyID0gbmV3IEZpbGVGaW5kZXIoQ29uZmlnRmlsZS5DT05GSUdfRklMRVMsIHRoaXMub3B0aW9ucy5jd2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxDb25maWdGaW5kZXIuZmluZEFsbEluRGlyZWN0b3J5QW5kUGFyZW50cyhkaXJlY3RvcnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyB0aGUgYXV0aG9yaXRhdGl2ZSBjb25maWcgb2JqZWN0IGZvciB0aGUgc3BlY2lmaWVkIGZpbGUgcGF0aCBieSBtZXJnaW5nIHRoZSBoaWVyYXJjaHkgb2YgY29uZmlnIG9iamVjdHNcbiAgICAgKiB0aGF0IGFwcGx5IHRvIHRoZSBjdXJyZW50IGZpbGUsIGluY2x1ZGluZyB0aGUgYmFzZSBjb25maWcgKGNvbmYvd2lzdC1yZWNvbW1lbmRlZCksIHRoZSB1c2VyJ3MgcGVyc29uYWwgY29uZmlnXG4gICAgICogZnJvbSB0aGVpciBob21lZGlyLCBhbGwgbG9jYWwgY29uZmlncyBmcm9tIHRoZSBkaXJlY3RvcnkgdHJlZSwgYW55IHNwZWNpZmljIGNvbmZpZyBmaWxlIHBhc3NlZCBvbiB0aGUgY29tbWFuZFxuICAgICAqIGxpbmUsIGFuZCBhbnkgY29uZmlndXJhdGlvbiBvdmVycmlkZXMgc2V0IGRpcmVjdGx5IG9uIHRoZSBjb21tYW5kIGxpbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIGEgZmlsZSBpbiB3aG9zZSBkaXJlY3Rvcnkgd2Ugc3RhcnQgbG9va2luZyBmb3IgYSBsb2NhbCBjb25maWdcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBjb25maWcgb2JqZWN0XG4gICAgICovXG4gICAgZ2V0Q29uZmlnKGZpbGVQYXRoKSB7XG4gICAgICAgIGNvbnN0IHZlY3RvciA9IHRoaXMuZ2V0Q29uZmlnVmVjdG9yKGZpbGVQYXRoKTtcbiAgICAgICAgbGV0IGNvbmZpZyA9IHRoaXMuY29uZmlnQ2FjaGUuZ2V0TWVyZ2VkQ29uZmlnKHZlY3Rvcik7XG5cbiAgICAgICAgaWYgKGNvbmZpZykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0ZXAgMTogTWVyZ2UgaW4gdGhlIGZpbGVzeXN0ZW0gY29uZmlndXJhdGlvbnMgKGJhc2UsIGxvY2FsLCBhbmQgcGVyc29uYWwpXG4gICAgICAgIGNvbmZpZyA9IENvbmZpZ09wcy5nZXRDb25maWdGcm9tVmVjdG9yKHZlY3RvciwgdGhpcy5jb25maWdDYWNoZSk7XG5cbiAgICAgICAgLy8gU3RlcCAyOiBNZXJnZSBpbiBjb21tYW5kIGxpbmUgY29uZmlndXJhdGlvbnNcbiAgICAgICAgY29uZmlnID0gQ29uZmlnT3BzLm1lcmdlKGNvbmZpZywgdGhpcy5jbGlDb25maWcpO1xuXG4gICAgICAgIHRoaXMuY29uZmlnQ2FjaGUuc2V0TWVyZ2VkQ29uZmlnKHZlY3RvciwgY29uZmlnKTtcblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25maWc7IiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBiYWxhbmNlZDtcbmZ1bmN0aW9uIGJhbGFuY2VkKGEsIGIsIHN0cikge1xuICBpZiAoYSBpbnN0YW5jZW9mIFJlZ0V4cCkgYSA9IG1heWJlTWF0Y2goYSwgc3RyKTtcbiAgaWYgKGIgaW5zdGFuY2VvZiBSZWdFeHApIGIgPSBtYXliZU1hdGNoKGIsIHN0cik7XG5cbiAgdmFyIHIgPSByYW5nZShhLCBiLCBzdHIpO1xuXG4gIHJldHVybiByICYmIHtcbiAgICBzdGFydDogclswXSxcbiAgICBlbmQ6IHJbMV0sXG4gICAgcHJlOiBzdHIuc2xpY2UoMCwgclswXSksXG4gICAgYm9keTogc3RyLnNsaWNlKHJbMF0gKyBhLmxlbmd0aCwgclsxXSksXG4gICAgcG9zdDogc3RyLnNsaWNlKHJbMV0gKyBiLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWF5YmVNYXRjaChyZWcsIHN0cikge1xuICB2YXIgbSA9IHN0ci5tYXRjaChyZWcpO1xuICByZXR1cm4gbSA/IG1bMF0gOiBudWxsO1xufVxuXG5iYWxhbmNlZC5yYW5nZSA9IHJhbmdlO1xuZnVuY3Rpb24gcmFuZ2UoYSwgYiwgc3RyKSB7XG4gIHZhciBiZWdzLCBiZWcsIGxlZnQsIHJpZ2h0LCByZXN1bHQ7XG4gIHZhciBhaSA9IHN0ci5pbmRleE9mKGEpO1xuICB2YXIgYmkgPSBzdHIuaW5kZXhPZihiLCBhaSArIDEpO1xuICB2YXIgaSA9IGFpO1xuXG4gIGlmIChhaSA+PSAwICYmIGJpID4gMCkge1xuICAgIGJlZ3MgPSBbXTtcbiAgICBsZWZ0ID0gc3RyLmxlbmd0aDtcblxuICAgIHdoaWxlIChpID49IDAgJiYgIXJlc3VsdCkge1xuICAgICAgaWYgKGkgPT0gYWkpIHtcbiAgICAgICAgYmVncy5wdXNoKGkpO1xuICAgICAgICBhaSA9IHN0ci5pbmRleE9mKGEsIGkgKyAxKTtcbiAgICAgIH0gZWxzZSBpZiAoYmVncy5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXN1bHQgPSBbIGJlZ3MucG9wKCksIGJpIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWcgPSBiZWdzLnBvcCgpO1xuICAgICAgICBpZiAoYmVnIDwgbGVmdCkge1xuICAgICAgICAgIGxlZnQgPSBiZWc7XG4gICAgICAgICAgcmlnaHQgPSBiaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpID0gc3RyLmluZGV4T2YoYiwgaSArIDEpO1xuICAgICAgfVxuXG4gICAgICBpID0gYWkgPCBiaSAmJiBhaSA+PSAwID8gYWkgOiBiaTtcbiAgICB9XG5cbiAgICBpZiAoYmVncy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IFsgbGVmdCwgcmlnaHQgXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeHMsIGZuKSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHggPSBmbih4c1tpXSwgaSk7XG4gICAgICAgIGlmIChpc0FycmF5KHgpKSByZXMucHVzaC5hcHBseShyZXMsIHgpO1xuICAgICAgICBlbHNlIHJlcy5wdXNoKHgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciBjb25jYXRNYXAgPSByZXF1aXJlKCdjb25jYXQtbWFwJyk7XG52YXIgYmFsYW5jZWQgPSByZXF1aXJlKCdiYWxhbmNlZC1tYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cGFuZFRvcDtcblxudmFyIGVzY1NsYXNoID0gJ1xcMFNMQVNIJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY09wZW4gPSAnXFwwT1BFTicrTWF0aC5yYW5kb20oKSsnXFwwJztcbnZhciBlc2NDbG9zZSA9ICdcXDBDTE9TRScrTWF0aC5yYW5kb20oKSsnXFwwJztcbnZhciBlc2NDb21tYSA9ICdcXDBDT01NQScrTWF0aC5yYW5kb20oKSsnXFwwJztcbnZhciBlc2NQZXJpb2QgPSAnXFwwUEVSSU9EJytNYXRoLnJhbmRvbSgpKydcXDAnO1xuXG5mdW5jdGlvbiBudW1lcmljKHN0cikge1xuICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCkgPT0gc3RyXG4gICAgPyBwYXJzZUludChzdHIsIDEwKVxuICAgIDogc3RyLmNoYXJDb2RlQXQoMCk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUJyYWNlcyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgnXFxcXFxcXFwnKS5qb2luKGVzY1NsYXNoKVxuICAgICAgICAgICAgLnNwbGl0KCdcXFxceycpLmpvaW4oZXNjT3BlbilcbiAgICAgICAgICAgIC5zcGxpdCgnXFxcXH0nKS5qb2luKGVzY0Nsb3NlKVxuICAgICAgICAgICAgLnNwbGl0KCdcXFxcLCcpLmpvaW4oZXNjQ29tbWEpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFwuJykuam9pbihlc2NQZXJpb2QpO1xufVxuXG5mdW5jdGlvbiB1bmVzY2FwZUJyYWNlcyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdChlc2NTbGFzaCkuam9pbignXFxcXCcpXG4gICAgICAgICAgICAuc3BsaXQoZXNjT3Blbikuam9pbigneycpXG4gICAgICAgICAgICAuc3BsaXQoZXNjQ2xvc2UpLmpvaW4oJ30nKVxuICAgICAgICAgICAgLnNwbGl0KGVzY0NvbW1hKS5qb2luKCcsJylcbiAgICAgICAgICAgIC5zcGxpdChlc2NQZXJpb2QpLmpvaW4oJy4nKTtcbn1cblxuXG4vLyBCYXNpY2FsbHkganVzdCBzdHIuc3BsaXQoXCIsXCIpLCBidXQgaGFuZGxpbmcgY2FzZXNcbi8vIHdoZXJlIHdlIGhhdmUgbmVzdGVkIGJyYWNlZCBzZWN0aW9ucywgd2hpY2ggc2hvdWxkIGJlXG4vLyB0cmVhdGVkIGFzIGluZGl2aWR1YWwgbWVtYmVycywgbGlrZSB7YSx7YixjfSxkfVxuZnVuY3Rpb24gcGFyc2VDb21tYVBhcnRzKHN0cikge1xuICBpZiAoIXN0cilcbiAgICByZXR1cm4gWycnXTtcblxuICB2YXIgcGFydHMgPSBbXTtcbiAgdmFyIG0gPSBiYWxhbmNlZCgneycsICd9Jywgc3RyKTtcblxuICBpZiAoIW0pXG4gICAgcmV0dXJuIHN0ci5zcGxpdCgnLCcpO1xuXG4gIHZhciBwcmUgPSBtLnByZTtcbiAgdmFyIGJvZHkgPSBtLmJvZHk7XG4gIHZhciBwb3N0ID0gbS5wb3N0O1xuICB2YXIgcCA9IHByZS5zcGxpdCgnLCcpO1xuXG4gIHBbcC5sZW5ndGgtMV0gKz0gJ3snICsgYm9keSArICd9JztcbiAgdmFyIHBvc3RQYXJ0cyA9IHBhcnNlQ29tbWFQYXJ0cyhwb3N0KTtcbiAgaWYgKHBvc3QubGVuZ3RoKSB7XG4gICAgcFtwLmxlbmd0aC0xXSArPSBwb3N0UGFydHMuc2hpZnQoKTtcbiAgICBwLnB1c2guYXBwbHkocCwgcG9zdFBhcnRzKTtcbiAgfVxuXG4gIHBhcnRzLnB1c2guYXBwbHkocGFydHMsIHApO1xuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZnVuY3Rpb24gZXhwYW5kVG9wKHN0cikge1xuICBpZiAoIXN0cilcbiAgICByZXR1cm4gW107XG5cbiAgLy8gSSBkb24ndCBrbm93IHdoeSBCYXNoIDQuMyBkb2VzIHRoaXMsIGJ1dCBpdCBkb2VzLlxuICAvLyBBbnl0aGluZyBzdGFydGluZyB3aXRoIHt9IHdpbGwgaGF2ZSB0aGUgZmlyc3QgdHdvIGJ5dGVzIHByZXNlcnZlZFxuICAvLyBidXQgKm9ubHkqIGF0IHRoZSB0b3AgbGV2ZWwsIHNvIHt9LGF9YiB3aWxsIG5vdCBleHBhbmQgdG8gYW55dGhpbmcsXG4gIC8vIGJ1dCBhe30sYn1jIHdpbGwgYmUgZXhwYW5kZWQgdG8gW2F9YyxhYmNdLlxuICAvLyBPbmUgY291bGQgYXJndWUgdGhhdCB0aGlzIGlzIGEgYnVnIGluIEJhc2gsIGJ1dCBzaW5jZSB0aGUgZ29hbCBvZlxuICAvLyB0aGlzIG1vZHVsZSBpcyB0byBtYXRjaCBCYXNoJ3MgcnVsZXMsIHdlIGVzY2FwZSBhIGxlYWRpbmcge31cbiAgaWYgKHN0ci5zdWJzdHIoMCwgMikgPT09ICd7fScpIHtcbiAgICBzdHIgPSAnXFxcXHtcXFxcfScgKyBzdHIuc3Vic3RyKDIpO1xuICB9XG5cbiAgcmV0dXJuIGV4cGFuZChlc2NhcGVCcmFjZXMoc3RyKSwgdHJ1ZSkubWFwKHVuZXNjYXBlQnJhY2VzKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkoZSkge1xuICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gZW1icmFjZShzdHIpIHtcbiAgcmV0dXJuICd7JyArIHN0ciArICd9Jztcbn1cbmZ1bmN0aW9uIGlzUGFkZGVkKGVsKSB7XG4gIHJldHVybiAvXi0/MFxcZC8udGVzdChlbCk7XG59XG5cbmZ1bmN0aW9uIGx0ZShpLCB5KSB7XG4gIHJldHVybiBpIDw9IHk7XG59XG5mdW5jdGlvbiBndGUoaSwgeSkge1xuICByZXR1cm4gaSA+PSB5O1xufVxuXG5mdW5jdGlvbiBleHBhbmQoc3RyLCBpc1RvcCkge1xuICB2YXIgZXhwYW5zaW9ucyA9IFtdO1xuXG4gIHZhciBtID0gYmFsYW5jZWQoJ3snLCAnfScsIHN0cik7XG4gIGlmICghbSB8fCAvXFwkJC8udGVzdChtLnByZSkpIHJldHVybiBbc3RyXTtcblxuICB2YXIgaXNOdW1lcmljU2VxdWVuY2UgPSAvXi0/XFxkK1xcLlxcLi0/XFxkKyg/OlxcLlxcLi0/XFxkKyk/JC8udGVzdChtLmJvZHkpO1xuICB2YXIgaXNBbHBoYVNlcXVlbmNlID0gL15bYS16QS1aXVxcLlxcLlthLXpBLVpdKD86XFwuXFwuLT9cXGQrKT8kLy50ZXN0KG0uYm9keSk7XG4gIHZhciBpc1NlcXVlbmNlID0gaXNOdW1lcmljU2VxdWVuY2UgfHwgaXNBbHBoYVNlcXVlbmNlO1xuICB2YXIgaXNPcHRpb25zID0gbS5ib2R5LmluZGV4T2YoJywnKSA+PSAwO1xuICBpZiAoIWlzU2VxdWVuY2UgJiYgIWlzT3B0aW9ucykge1xuICAgIC8vIHthfSxifVxuICAgIGlmIChtLnBvc3QubWF0Y2goLywuKlxcfS8pKSB7XG4gICAgICBzdHIgPSBtLnByZSArICd7JyArIG0uYm9keSArIGVzY0Nsb3NlICsgbS5wb3N0O1xuICAgICAgcmV0dXJuIGV4cGFuZChzdHIpO1xuICAgIH1cbiAgICByZXR1cm4gW3N0cl07XG4gIH1cblxuICB2YXIgbjtcbiAgaWYgKGlzU2VxdWVuY2UpIHtcbiAgICBuID0gbS5ib2R5LnNwbGl0KC9cXC5cXC4vKTtcbiAgfSBlbHNlIHtcbiAgICBuID0gcGFyc2VDb21tYVBhcnRzKG0uYm9keSk7XG4gICAgaWYgKG4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyB4e3thLGJ9fXkgPT0+IHh7YX15IHh7Yn15XG4gICAgICBuID0gZXhwYW5kKG5bMF0sIGZhbHNlKS5tYXAoZW1icmFjZSk7XG4gICAgICBpZiAobi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIHBvc3QgPSBtLnBvc3QubGVuZ3RoXG4gICAgICAgICAgPyBleHBhbmQobS5wb3N0LCBmYWxzZSlcbiAgICAgICAgICA6IFsnJ107XG4gICAgICAgIHJldHVybiBwb3N0Lm1hcChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgcmV0dXJuIG0ucHJlICsgblswXSArIHA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGF0IHRoaXMgcG9pbnQsIG4gaXMgdGhlIHBhcnRzLCBhbmQgd2Uga25vdyBpdCdzIG5vdCBhIGNvbW1hIHNldFxuICAvLyB3aXRoIGEgc2luZ2xlIGVudHJ5LlxuXG4gIC8vIG5vIG5lZWQgdG8gZXhwYW5kIHByZSwgc2luY2UgaXQgaXMgZ3VhcmFudGVlZCB0byBiZSBmcmVlIG9mIGJyYWNlLXNldHNcbiAgdmFyIHByZSA9IG0ucHJlO1xuICB2YXIgcG9zdCA9IG0ucG9zdC5sZW5ndGhcbiAgICA/IGV4cGFuZChtLnBvc3QsIGZhbHNlKVxuICAgIDogWycnXTtcblxuICB2YXIgTjtcblxuICBpZiAoaXNTZXF1ZW5jZSkge1xuICAgIHZhciB4ID0gbnVtZXJpYyhuWzBdKTtcbiAgICB2YXIgeSA9IG51bWVyaWMoblsxXSk7XG4gICAgdmFyIHdpZHRoID0gTWF0aC5tYXgoblswXS5sZW5ndGgsIG5bMV0ubGVuZ3RoKVxuICAgIHZhciBpbmNyID0gbi5sZW5ndGggPT0gM1xuICAgICAgPyBNYXRoLmFicyhudW1lcmljKG5bMl0pKVxuICAgICAgOiAxO1xuICAgIHZhciB0ZXN0ID0gbHRlO1xuICAgIHZhciByZXZlcnNlID0geSA8IHg7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIGluY3IgKj0gLTE7XG4gICAgICB0ZXN0ID0gZ3RlO1xuICAgIH1cbiAgICB2YXIgcGFkID0gbi5zb21lKGlzUGFkZGVkKTtcblxuICAgIE4gPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSB4OyB0ZXN0KGksIHkpOyBpICs9IGluY3IpIHtcbiAgICAgIHZhciBjO1xuICAgICAgaWYgKGlzQWxwaGFTZXF1ZW5jZSkge1xuICAgICAgICBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKTtcbiAgICAgICAgaWYgKGMgPT09ICdcXFxcJylcbiAgICAgICAgICBjID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjID0gU3RyaW5nKGkpO1xuICAgICAgICBpZiAocGFkKSB7XG4gICAgICAgICAgdmFyIG5lZWQgPSB3aWR0aCAtIGMubGVuZ3RoO1xuICAgICAgICAgIGlmIChuZWVkID4gMCkge1xuICAgICAgICAgICAgdmFyIHogPSBuZXcgQXJyYXkobmVlZCArIDEpLmpvaW4oJzAnKTtcbiAgICAgICAgICAgIGlmIChpIDwgMClcbiAgICAgICAgICAgICAgYyA9ICctJyArIHogKyBjLnNsaWNlKDEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBjID0geiArIGM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBOLnB1c2goYyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIE4gPSBjb25jYXRNYXAobiwgZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGV4cGFuZChlbCwgZmFsc2UpIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCBOLmxlbmd0aDsgaisrKSB7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBwb3N0Lmxlbmd0aDsgaysrKSB7XG4gICAgICB2YXIgZXhwYW5zaW9uID0gcHJlICsgTltqXSArIHBvc3Rba107XG4gICAgICBpZiAoIWlzVG9wIHx8IGlzU2VxdWVuY2UgfHwgZXhwYW5zaW9uKVxuICAgICAgICBleHBhbnNpb25zLnB1c2goZXhwYW5zaW9uKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwYW5zaW9ucztcbn1cblxuIiwibW9kdWxlLmV4cG9ydHMgPSBtaW5pbWF0Y2hcbm1pbmltYXRjaC5NaW5pbWF0Y2ggPSBNaW5pbWF0Y2hcblxudmFyIHBhdGggPSB7IHNlcDogJy8nIH1cbnRyeSB7XG4gIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbn0gY2F0Y2ggKGVyKSB7fVxuXG52YXIgR0xPQlNUQVIgPSBtaW5pbWF0Y2guR0xPQlNUQVIgPSBNaW5pbWF0Y2guR0xPQlNUQVIgPSB7fVxudmFyIGV4cGFuZCA9IHJlcXVpcmUoJ2JyYWNlLWV4cGFuc2lvbicpXG5cbnZhciBwbFR5cGVzID0ge1xuICAnISc6IHsgb3BlbjogJyg/Oig/ISg/OicsIGNsb3NlOiAnKSlbXi9dKj8pJ30sXG4gICc/JzogeyBvcGVuOiAnKD86JywgY2xvc2U6ICcpPycgfSxcbiAgJysnOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJykrJyB9LFxuICAnKic6IHsgb3BlbjogJyg/OicsIGNsb3NlOiAnKSonIH0sXG4gICdAJzogeyBvcGVuOiAnKD86JywgY2xvc2U6ICcpJyB9XG59XG5cbi8vIGFueSBzaW5nbGUgdGhpbmcgb3RoZXIgdGhhbiAvXG4vLyBkb24ndCBuZWVkIHRvIGVzY2FwZSAvIHdoZW4gdXNpbmcgbmV3IFJlZ0V4cCgpXG52YXIgcW1hcmsgPSAnW14vXSdcblxuLy8gKiA9PiBhbnkgbnVtYmVyIG9mIGNoYXJhY3RlcnNcbnZhciBzdGFyID0gcW1hcmsgKyAnKj8nXG5cbi8vICoqIHdoZW4gZG90cyBhcmUgYWxsb3dlZC4gIEFueXRoaW5nIGdvZXMsIGV4Y2VwdCAuLiBhbmQgLlxuLy8gbm90ICheIG9yIC8gZm9sbG93ZWQgYnkgb25lIG9yIHR3byBkb3RzIGZvbGxvd2VkIGJ5ICQgb3IgLyksXG4vLyBmb2xsb3dlZCBieSBhbnl0aGluZywgYW55IG51bWJlciBvZiB0aW1lcy5cbnZhciB0d29TdGFyRG90ID0gJyg/Oig/ISg/OlxcXFxcXC98XikoPzpcXFxcLnsxLDJ9KSgkfFxcXFxcXC8pKS4pKj8nXG5cbi8vIG5vdCBhIF4gb3IgLyBmb2xsb3dlZCBieSBhIGRvdCxcbi8vIGZvbGxvd2VkIGJ5IGFueXRoaW5nLCBhbnkgbnVtYmVyIG9mIHRpbWVzLlxudmFyIHR3b1N0YXJOb0RvdCA9ICcoPzooPyEoPzpcXFxcXFwvfF4pXFxcXC4pLikqPydcblxuLy8gY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZXNjYXBlZCBpbiBSZWdFeHAuXG52YXIgcmVTcGVjaWFscyA9IGNoYXJTZXQoJygpLip7fSs/W11eJFxcXFwhJylcblxuLy8gXCJhYmNcIiAtPiB7IGE6dHJ1ZSwgYjp0cnVlLCBjOnRydWUgfVxuZnVuY3Rpb24gY2hhclNldCAocykge1xuICByZXR1cm4gcy5zcGxpdCgnJykucmVkdWNlKGZ1bmN0aW9uIChzZXQsIGMpIHtcbiAgICBzZXRbY10gPSB0cnVlXG4gICAgcmV0dXJuIHNldFxuICB9LCB7fSlcbn1cblxuLy8gbm9ybWFsaXplcyBzbGFzaGVzLlxudmFyIHNsYXNoU3BsaXQgPSAvXFwvKy9cblxubWluaW1hdGNoLmZpbHRlciA9IGZpbHRlclxuZnVuY3Rpb24gZmlsdGVyIChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHJldHVybiBmdW5jdGlvbiAocCwgaSwgbGlzdCkge1xuICAgIHJldHVybiBtaW5pbWF0Y2gocCwgcGF0dGVybiwgb3B0aW9ucylcbiAgfVxufVxuXG5mdW5jdGlvbiBleHQgKGEsIGIpIHtcbiAgYSA9IGEgfHwge31cbiAgYiA9IGIgfHwge31cbiAgdmFyIHQgPSB7fVxuICBPYmplY3Qua2V5cyhiKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgdFtrXSA9IGJba11cbiAgfSlcbiAgT2JqZWN0LmtleXMoYSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIHRba10gPSBhW2tdXG4gIH0pXG4gIHJldHVybiB0XG59XG5cbm1pbmltYXRjaC5kZWZhdWx0cyA9IGZ1bmN0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYgfHwgIU9iamVjdC5rZXlzKGRlZikubGVuZ3RoKSByZXR1cm4gbWluaW1hdGNoXG5cbiAgdmFyIG9yaWcgPSBtaW5pbWF0Y2hcblxuICB2YXIgbSA9IGZ1bmN0aW9uIG1pbmltYXRjaCAocCwgcGF0dGVybiwgb3B0aW9ucykge1xuICAgIHJldHVybiBvcmlnLm1pbmltYXRjaChwLCBwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSlcbiAgfVxuXG4gIG0uTWluaW1hdGNoID0gZnVuY3Rpb24gTWluaW1hdGNoIChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBvcmlnLk1pbmltYXRjaChwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSlcbiAgfVxuXG4gIHJldHVybiBtXG59XG5cbk1pbmltYXRjaC5kZWZhdWx0cyA9IGZ1bmN0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYgfHwgIU9iamVjdC5rZXlzKGRlZikubGVuZ3RoKSByZXR1cm4gTWluaW1hdGNoXG4gIHJldHVybiBtaW5pbWF0Y2guZGVmYXVsdHMoZGVmKS5NaW5pbWF0Y2hcbn1cblxuZnVuY3Rpb24gbWluaW1hdGNoIChwLCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnbG9iIHBhdHRlcm4gc3RyaW5nIHJlcXVpcmVkJylcbiAgfVxuXG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG5cbiAgLy8gc2hvcnRjdXQ6IGNvbW1lbnRzIG1hdGNoIG5vdGhpbmcuXG4gIGlmICghb3B0aW9ucy5ub2NvbW1lbnQgJiYgcGF0dGVybi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gXCJcIiBvbmx5IG1hdGNoZXMgXCJcIlxuICBpZiAocGF0dGVybi50cmltKCkgPT09ICcnKSByZXR1cm4gcCA9PT0gJydcblxuICByZXR1cm4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKS5tYXRjaChwKVxufVxuXG5mdW5jdGlvbiBNaW5pbWF0Y2ggKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1pbmltYXRjaCkpIHtcbiAgICByZXR1cm4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dsb2IgcGF0dGVybiBzdHJpbmcgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge31cbiAgcGF0dGVybiA9IHBhdHRlcm4udHJpbSgpXG5cbiAgLy8gd2luZG93cyBzdXBwb3J0OiBuZWVkIHRvIHVzZSAvLCBub3QgXFxcbiAgaWYgKHBhdGguc2VwICE9PSAnLycpIHtcbiAgICBwYXR0ZXJuID0gcGF0dGVybi5zcGxpdChwYXRoLnNlcCkuam9pbignLycpXG4gIH1cblxuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gIHRoaXMuc2V0ID0gW11cbiAgdGhpcy5wYXR0ZXJuID0gcGF0dGVyblxuICB0aGlzLnJlZ2V4cCA9IG51bGxcbiAgdGhpcy5uZWdhdGUgPSBmYWxzZVxuICB0aGlzLmNvbW1lbnQgPSBmYWxzZVxuICB0aGlzLmVtcHR5ID0gZmFsc2VcblxuICAvLyBtYWtlIHRoZSBzZXQgb2YgcmVnZXhwcyBldGMuXG4gIHRoaXMubWFrZSgpXG59XG5cbk1pbmltYXRjaC5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAoKSB7fVxuXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1ha2UgPSBtYWtlXG5mdW5jdGlvbiBtYWtlICgpIHtcbiAgLy8gZG9uJ3QgZG8gaXQgbW9yZSB0aGFuIG9uY2UuXG4gIGlmICh0aGlzLl9tYWRlKSByZXR1cm5cblxuICB2YXIgcGF0dGVybiA9IHRoaXMucGF0dGVyblxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuXG4gIC8vIGVtcHR5IHBhdHRlcm5zIGFuZCBjb21tZW50cyBtYXRjaCBub3RoaW5nLlxuICBpZiAoIW9wdGlvbnMubm9jb21tZW50ICYmIHBhdHRlcm4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICB0aGlzLmNvbW1lbnQgPSB0cnVlXG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFwYXR0ZXJuKSB7XG4gICAgdGhpcy5lbXB0eSA9IHRydWVcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIHN0ZXAgMTogZmlndXJlIG91dCBuZWdhdGlvbiwgZXRjLlxuICB0aGlzLnBhcnNlTmVnYXRlKClcblxuICAvLyBzdGVwIDI6IGV4cGFuZCBicmFjZXNcbiAgdmFyIHNldCA9IHRoaXMuZ2xvYlNldCA9IHRoaXMuYnJhY2VFeHBhbmQoKVxuXG4gIGlmIChvcHRpb25zLmRlYnVnKSB0aGlzLmRlYnVnID0gY29uc29sZS5lcnJvclxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgLy8gc3RlcCAzOiBub3cgd2UgaGF2ZSBhIHNldCwgc28gdHVybiBlYWNoIG9uZSBpbnRvIGEgc2VyaWVzIG9mIHBhdGgtcG9ydGlvblxuICAvLyBtYXRjaGluZyBwYXR0ZXJucy5cbiAgLy8gVGhlc2Ugd2lsbCBiZSByZWdleHBzLCBleGNlcHQgaW4gdGhlIGNhc2Ugb2YgXCIqKlwiLCB3aGljaCBpc1xuICAvLyBzZXQgdG8gdGhlIEdMT0JTVEFSIG9iamVjdCBmb3IgZ2xvYnN0YXIgYmVoYXZpb3IsXG4gIC8vIGFuZCB3aWxsIG5vdCBjb250YWluIGFueSAvIGNoYXJhY3RlcnNcbiAgc2V0ID0gdGhpcy5nbG9iUGFydHMgPSBzZXQubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMuc3BsaXQoc2xhc2hTcGxpdClcbiAgfSlcblxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgc2V0KVxuXG4gIC8vIGdsb2IgLS0+IHJlZ2V4cHNcbiAgc2V0ID0gc2V0Lm1hcChmdW5jdGlvbiAocywgc2ksIHNldCkge1xuICAgIHJldHVybiBzLm1hcCh0aGlzLnBhcnNlLCB0aGlzKVxuICB9LCB0aGlzKVxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgLy8gZmlsdGVyIG91dCBldmVyeXRoaW5nIHRoYXQgZGlkbid0IGNvbXBpbGUgcHJvcGVybHkuXG4gIHNldCA9IHNldC5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcy5pbmRleE9mKGZhbHNlKSA9PT0gLTFcbiAgfSlcblxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgc2V0KVxuXG4gIHRoaXMuc2V0ID0gc2V0XG59XG5cbk1pbmltYXRjaC5wcm90b3R5cGUucGFyc2VOZWdhdGUgPSBwYXJzZU5lZ2F0ZVxuZnVuY3Rpb24gcGFyc2VOZWdhdGUgKCkge1xuICB2YXIgcGF0dGVybiA9IHRoaXMucGF0dGVyblxuICB2YXIgbmVnYXRlID0gZmFsc2VcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcbiAgdmFyIG5lZ2F0ZU9mZnNldCA9IDBcblxuICBpZiAob3B0aW9ucy5ub25lZ2F0ZSkgcmV0dXJuXG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXR0ZXJuLmxlbmd0aFxuICAgIDsgaSA8IGwgJiYgcGF0dGVybi5jaGFyQXQoaSkgPT09ICchJ1xuICAgIDsgaSsrKSB7XG4gICAgbmVnYXRlID0gIW5lZ2F0ZVxuICAgIG5lZ2F0ZU9mZnNldCsrXG4gIH1cblxuICBpZiAobmVnYXRlT2Zmc2V0KSB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuLnN1YnN0cihuZWdhdGVPZmZzZXQpXG4gIHRoaXMubmVnYXRlID0gbmVnYXRlXG59XG5cbi8vIEJyYWNlIGV4cGFuc2lvbjpcbi8vIGF7YixjfWQgLT4gYWJkIGFjZFxuLy8gYXtiLH1jIC0+IGFiYyBhY1xuLy8gYXswLi4zfWQgLT4gYTBkIGExZCBhMmQgYTNkXG4vLyBhe2IsY3tkLGV9Zn1nIC0+IGFiZyBhY2RmZyBhY2VmZ1xuLy8gYXtiLGN9ZHtlLGZ9ZyAtPiBhYmRlZyBhY2RlZyBhYmRlZyBhYmRmZ1xuLy9cbi8vIEludmFsaWQgc2V0cyBhcmUgbm90IGV4cGFuZGVkLlxuLy8gYXsyLi59YiAtPiBhezIuLn1iXG4vLyBhe2J9YyAtPiBhe2J9Y1xubWluaW1hdGNoLmJyYWNlRXhwYW5kID0gZnVuY3Rpb24gKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJyYWNlRXhwYW5kKHBhdHRlcm4sIG9wdGlvbnMpXG59XG5cbk1pbmltYXRjaC5wcm90b3R5cGUuYnJhY2VFeHBhbmQgPSBicmFjZUV4cGFuZFxuXG5mdW5jdGlvbiBicmFjZUV4cGFuZCAocGF0dGVybiwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mIE1pbmltYXRjaCkge1xuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG4gIH1cblxuICBwYXR0ZXJuID0gdHlwZW9mIHBhdHRlcm4gPT09ICd1bmRlZmluZWQnXG4gICAgPyB0aGlzLnBhdHRlcm4gOiBwYXR0ZXJuXG5cbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuZGVmaW5lZCBwYXR0ZXJuJylcbiAgfVxuXG4gIGlmIChvcHRpb25zLm5vYnJhY2UgfHxcbiAgICAhcGF0dGVybi5tYXRjaCgvXFx7LipcXH0vKSkge1xuICAgIC8vIHNob3J0Y3V0LiBubyBuZWVkIHRvIGV4cGFuZC5cbiAgICByZXR1cm4gW3BhdHRlcm5dXG4gIH1cblxuICByZXR1cm4gZXhwYW5kKHBhdHRlcm4pXG59XG5cbi8vIHBhcnNlIGEgY29tcG9uZW50IG9mIHRoZSBleHBhbmRlZCBzZXQuXG4vLyBBdCB0aGlzIHBvaW50LCBubyBwYXR0ZXJuIG1heSBjb250YWluIFwiL1wiIGluIGl0XG4vLyBzbyB3ZSdyZSBnb2luZyB0byByZXR1cm4gYSAyZCBhcnJheSwgd2hlcmUgZWFjaCBlbnRyeSBpcyB0aGUgZnVsbFxuLy8gcGF0dGVybiwgc3BsaXQgb24gJy8nLCBhbmQgdGhlbiB0dXJuZWQgaW50byBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbi8vIEEgcmVnZXhwIGlzIG1hZGUgYXQgdGhlIGVuZCB3aGljaCBqb2lucyBlYWNoIGFycmF5IHdpdGggYW5cbi8vIGVzY2FwZWQgLywgYW5kIGFub3RoZXIgZnVsbCBvbmUgd2hpY2ggam9pbnMgZWFjaCByZWdleHAgd2l0aCB8LlxuLy9cbi8vIEZvbGxvd2luZyB0aGUgbGVhZCBvZiBCYXNoIDQuMSwgbm90ZSB0aGF0IFwiKipcIiBvbmx5IGhhcyBzcGVjaWFsIG1lYW5pbmdcbi8vIHdoZW4gaXQgaXMgdGhlICpvbmx5KiB0aGluZyBpbiBhIHBhdGggcG9ydGlvbi4gIE90aGVyd2lzZSwgYW55IHNlcmllc1xuLy8gb2YgKiBpcyBlcXVpdmFsZW50IHRvIGEgc2luZ2xlICouICBHbG9ic3RhciBiZWhhdmlvciBpcyBlbmFibGVkIGJ5XG4vLyBkZWZhdWx0LCBhbmQgY2FuIGJlIGRpc2FibGVkIGJ5IHNldHRpbmcgb3B0aW9ucy5ub2dsb2JzdGFyLlxuTWluaW1hdGNoLnByb3RvdHlwZS5wYXJzZSA9IHBhcnNlXG52YXIgU1VCUEFSU0UgPSB7fVxuZnVuY3Rpb24gcGFyc2UgKHBhdHRlcm4sIGlzU3ViKSB7XG4gIGlmIChwYXR0ZXJuLmxlbmd0aCA+IDEwMjQgKiA2NCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdHRlcm4gaXMgdG9vIGxvbmcnKVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcblxuICAvLyBzaG9ydGN1dHNcbiAgaWYgKCFvcHRpb25zLm5vZ2xvYnN0YXIgJiYgcGF0dGVybiA9PT0gJyoqJykgcmV0dXJuIEdMT0JTVEFSXG4gIGlmIChwYXR0ZXJuID09PSAnJykgcmV0dXJuICcnXG5cbiAgdmFyIHJlID0gJydcbiAgdmFyIGhhc01hZ2ljID0gISFvcHRpb25zLm5vY2FzZVxuICB2YXIgZXNjYXBpbmcgPSBmYWxzZVxuICAvLyA/ID0+IG9uZSBzaW5nbGUgY2hhcmFjdGVyXG4gIHZhciBwYXR0ZXJuTGlzdFN0YWNrID0gW11cbiAgdmFyIG5lZ2F0aXZlTGlzdHMgPSBbXVxuICB2YXIgc3RhdGVDaGFyXG4gIHZhciBpbkNsYXNzID0gZmFsc2VcbiAgdmFyIHJlQ2xhc3NTdGFydCA9IC0xXG4gIHZhciBjbGFzc1N0YXJ0ID0gLTFcbiAgLy8gLiBhbmQgLi4gbmV2ZXIgbWF0Y2ggYW55dGhpbmcgdGhhdCBkb2Vzbid0IHN0YXJ0IHdpdGggLixcbiAgLy8gZXZlbiB3aGVuIG9wdGlvbnMuZG90IGlzIHNldC5cbiAgdmFyIHBhdHRlcm5TdGFydCA9IHBhdHRlcm4uY2hhckF0KDApID09PSAnLicgPyAnJyAvLyBhbnl0aGluZ1xuICAvLyBub3QgKHN0YXJ0IG9yIC8gZm9sbG93ZWQgYnkgLiBvciAuLiBmb2xsb3dlZCBieSAvIG9yIGVuZClcbiAgOiBvcHRpb25zLmRvdCA/ICcoPyEoPzpefFxcXFxcXC8pXFxcXC57MSwyfSg/OiR8XFxcXFxcLykpJ1xuICA6ICcoPyFcXFxcLiknXG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGZ1bmN0aW9uIGNsZWFyU3RhdGVDaGFyICgpIHtcbiAgICBpZiAoc3RhdGVDaGFyKSB7XG4gICAgICAvLyB3ZSBoYWQgc29tZSBzdGF0ZS10cmFja2luZyBjaGFyYWN0ZXJcbiAgICAgIC8vIHRoYXQgd2Fzbid0IGNvbnN1bWVkIGJ5IHRoaXMgcGFzcy5cbiAgICAgIHN3aXRjaCAoc3RhdGVDaGFyKSB7XG4gICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgIHJlICs9IHN0YXJcbiAgICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgcmUgKz0gcW1hcmtcbiAgICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZSArPSAnXFxcXCcgKyBzdGF0ZUNoYXJcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHNlbGYuZGVidWcoJ2NsZWFyU3RhdGVDaGFyICVqICVqJywgc3RhdGVDaGFyLCByZSlcbiAgICAgIHN0YXRlQ2hhciA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhdHRlcm4ubGVuZ3RoLCBjXG4gICAgOyAoaSA8IGxlbikgJiYgKGMgPSBwYXR0ZXJuLmNoYXJBdChpKSlcbiAgICA7IGkrKykge1xuICAgIHRoaXMuZGVidWcoJyVzXFx0JXMgJXMgJWonLCBwYXR0ZXJuLCBpLCByZSwgYylcblxuICAgIC8vIHNraXAgb3ZlciBhbnkgdGhhdCBhcmUgZXNjYXBlZC5cbiAgICBpZiAoZXNjYXBpbmcgJiYgcmVTcGVjaWFsc1tjXSkge1xuICAgICAgcmUgKz0gJ1xcXFwnICsgY1xuICAgICAgZXNjYXBpbmcgPSBmYWxzZVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGMpIHtcbiAgICAgIGNhc2UgJy8nOlxuICAgICAgICAvLyBjb21wbGV0ZWx5IG5vdCBhbGxvd2VkLCBldmVuIGVzY2FwZWQuXG4gICAgICAgIC8vIFNob3VsZCBhbHJlYWR5IGJlIHBhdGgtc3BsaXQgYnkgbm93LlxuICAgICAgICByZXR1cm4gZmFsc2VcblxuICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgIGNsZWFyU3RhdGVDaGFyKClcbiAgICAgICAgZXNjYXBpbmcgPSB0cnVlXG4gICAgICBjb250aW51ZVxuXG4gICAgICAvLyB0aGUgdmFyaW91cyBzdGF0ZUNoYXIgdmFsdWVzXG4gICAgICAvLyBmb3IgdGhlIFwiZXh0Z2xvYlwiIHN0dWZmLlxuICAgICAgY2FzZSAnPyc6XG4gICAgICBjYXNlICcqJzpcbiAgICAgIGNhc2UgJysnOlxuICAgICAgY2FzZSAnQCc6XG4gICAgICBjYXNlICchJzpcbiAgICAgICAgdGhpcy5kZWJ1ZygnJXNcXHQlcyAlcyAlaiA8LS0gc3RhdGVDaGFyJywgcGF0dGVybiwgaSwgcmUsIGMpXG5cbiAgICAgICAgLy8gYWxsIG9mIHRob3NlIGFyZSBsaXRlcmFscyBpbnNpZGUgYSBjbGFzcywgZXhjZXB0IHRoYXRcbiAgICAgICAgLy8gdGhlIGdsb2IgWyFhXSBtZWFucyBbXmFdIGluIHJlZ2V4cFxuICAgICAgICBpZiAoaW5DbGFzcykge1xuICAgICAgICAgIHRoaXMuZGVidWcoJyAgaW4gY2xhc3MnKVxuICAgICAgICAgIGlmIChjID09PSAnIScgJiYgaSA9PT0gY2xhc3NTdGFydCArIDEpIGMgPSAnXidcbiAgICAgICAgICByZSArPSBjXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHN0YXRlQ2hhciwgdGhlbiBpdCBtZWFuc1xuICAgICAgICAvLyB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgbGlrZSAqKiBvciArPyBpbiB0aGVyZS5cbiAgICAgICAgLy8gSGFuZGxlIHRoZSBzdGF0ZUNoYXIsIHRoZW4gcHJvY2VlZCB3aXRoIHRoaXMgb25lLlxuICAgICAgICBzZWxmLmRlYnVnKCdjYWxsIGNsZWFyU3RhdGVDaGFyICVqJywgc3RhdGVDaGFyKVxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG4gICAgICAgIHN0YXRlQ2hhciA9IGNcbiAgICAgICAgLy8gaWYgZXh0Z2xvYiBpcyBkaXNhYmxlZCwgdGhlbiArKGFzZGZ8Zm9vKSBpc24ndCBhIHRoaW5nLlxuICAgICAgICAvLyBqdXN0IGNsZWFyIHRoZSBzdGF0ZWNoYXIgKm5vdyosIHJhdGhlciB0aGFuIGV2ZW4gZGl2aW5nIGludG9cbiAgICAgICAgLy8gdGhlIHBhdHRlcm5MaXN0IHN0dWZmLlxuICAgICAgICBpZiAob3B0aW9ucy5ub2V4dCkgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgY29udGludWVcblxuICAgICAgY2FzZSAnKCc6XG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgcmUgKz0gJygnXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3RhdGVDaGFyKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwoJ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBwYXR0ZXJuTGlzdFN0YWNrLnB1c2goe1xuICAgICAgICAgIHR5cGU6IHN0YXRlQ2hhcixcbiAgICAgICAgICBzdGFydDogaSAtIDEsXG4gICAgICAgICAgcmVTdGFydDogcmUubGVuZ3RoLFxuICAgICAgICAgIG9wZW46IHBsVHlwZXNbc3RhdGVDaGFyXS5vcGVuLFxuICAgICAgICAgIGNsb3NlOiBwbFR5cGVzW3N0YXRlQ2hhcl0uY2xvc2VcbiAgICAgICAgfSlcbiAgICAgICAgLy8gbmVnYXRpb24gaXMgKD86KD8hanMpW14vXSopXG4gICAgICAgIHJlICs9IHN0YXRlQ2hhciA9PT0gJyEnID8gJyg/Oig/ISg/OicgOiAnKD86J1xuICAgICAgICB0aGlzLmRlYnVnKCdwbFR5cGUgJWogJWonLCBzdGF0ZUNoYXIsIHJlKVxuICAgICAgICBzdGF0ZUNoYXIgPSBmYWxzZVxuICAgICAgY29udGludWVcblxuICAgICAgY2FzZSAnKSc6XG4gICAgICAgIGlmIChpbkNsYXNzIHx8ICFwYXR0ZXJuTGlzdFN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgIHJlICs9ICdcXFxcKSdcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgdmFyIHBsID0gcGF0dGVybkxpc3RTdGFjay5wb3AoKVxuICAgICAgICAvLyBuZWdhdGlvbiBpcyAoPzooPyFqcylbXi9dKilcbiAgICAgICAgLy8gVGhlIG90aGVycyBhcmUgKD86PHBhdHRlcm4+KTx0eXBlPlxuICAgICAgICByZSArPSBwbC5jbG9zZVxuICAgICAgICBpZiAocGwudHlwZSA9PT0gJyEnKSB7XG4gICAgICAgICAgbmVnYXRpdmVMaXN0cy5wdXNoKHBsKVxuICAgICAgICB9XG4gICAgICAgIHBsLnJlRW5kID0gcmUubGVuZ3RoXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICd8JzpcbiAgICAgICAgaWYgKGluQ2xhc3MgfHwgIXBhdHRlcm5MaXN0U3RhY2subGVuZ3RoIHx8IGVzY2FwaW5nKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFx8J1xuICAgICAgICAgIGVzY2FwaW5nID0gZmFsc2VcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgICByZSArPSAnfCdcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIC8vIHRoZXNlIGFyZSBtb3N0bHkgdGhlIHNhbWUgaW4gcmVnZXhwIGFuZCBnbG9iXG4gICAgICBjYXNlICdbJzpcbiAgICAgICAgLy8gc3dhbGxvdyBhbnkgc3RhdGUtdHJhY2tpbmcgY2hhciBiZWZvcmUgdGhlIFtcbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuXG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwnICsgY1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpbkNsYXNzID0gdHJ1ZVxuICAgICAgICBjbGFzc1N0YXJ0ID0gaVxuICAgICAgICByZUNsYXNzU3RhcnQgPSByZS5sZW5ndGhcbiAgICAgICAgcmUgKz0gY1xuICAgICAgY29udGludWVcblxuICAgICAgY2FzZSAnXSc6XG4gICAgICAgIC8vICBhIHJpZ2h0IGJyYWNrZXQgc2hhbGwgbG9zZSBpdHMgc3BlY2lhbFxuICAgICAgICAvLyAgbWVhbmluZyBhbmQgcmVwcmVzZW50IGl0c2VsZiBpblxuICAgICAgICAvLyAgYSBicmFja2V0IGV4cHJlc3Npb24gaWYgaXQgb2NjdXJzXG4gICAgICAgIC8vICBmaXJzdCBpbiB0aGUgbGlzdC4gIC0tIFBPU0lYLjIgMi44LjMuMlxuICAgICAgICBpZiAoaSA9PT0gY2xhc3NTdGFydCArIDEgfHwgIWluQ2xhc3MpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCcgKyBjXG4gICAgICAgICAgZXNjYXBpbmcgPSBmYWxzZVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgbGVmdCBhIGNsYXNzIG9wZW4uXG4gICAgICAgIC8vIFwiW3otYV1cIiBpcyB2YWxpZCwgZXF1aXZhbGVudCB0byBcIlxcW3otYVxcXVwiXG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgLy8gc3BsaXQgd2hlcmUgdGhlIGxhc3QgWyB3YXMsIG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlXG4gICAgICAgICAgLy8gYW4gaW52YWxpZCByZS4gaWYgc28sIHJlLXdhbGsgdGhlIGNvbnRlbnRzIG9mIHRoZVxuICAgICAgICAgIC8vIHdvdWxkLWJlIGNsYXNzIHRvIHJlLXRyYW5zbGF0ZSBhbnkgY2hhcmFjdGVycyB0aGF0XG4gICAgICAgICAgLy8gd2VyZSBwYXNzZWQgdGhyb3VnaCBhcy1pc1xuICAgICAgICAgIC8vIFRPRE86IEl0IHdvdWxkIHByb2JhYmx5IGJlIGZhc3RlciB0byBkZXRlcm1pbmUgdGhpc1xuICAgICAgICAgIC8vIHdpdGhvdXQgYSB0cnkvY2F0Y2ggYW5kIGEgbmV3IFJlZ0V4cCwgYnV0IGl0J3MgdHJpY2t5XG4gICAgICAgICAgLy8gdG8gZG8gc2FmZWx5LiAgRm9yIG5vdywgdGhpcyBpcyBzYWZlIGFuZCB3b3Jrcy5cbiAgICAgICAgICB2YXIgY3MgPSBwYXR0ZXJuLnN1YnN0cmluZyhjbGFzc1N0YXJ0ICsgMSwgaSlcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmVnRXhwKCdbJyArIGNzICsgJ10nKVxuICAgICAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgICAgICAvLyBub3QgYSB2YWxpZCBjbGFzcyFcbiAgICAgICAgICAgIHZhciBzcCA9IHRoaXMucGFyc2UoY3MsIFNVQlBBUlNFKVxuICAgICAgICAgICAgcmUgPSByZS5zdWJzdHIoMCwgcmVDbGFzc1N0YXJ0KSArICdcXFxcWycgKyBzcFswXSArICdcXFxcXSdcbiAgICAgICAgICAgIGhhc01hZ2ljID0gaGFzTWFnaWMgfHwgc3BbMV1cbiAgICAgICAgICAgIGluQ2xhc3MgPSBmYWxzZVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5pc2ggdXAgdGhlIGNsYXNzLlxuICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgaW5DbGFzcyA9IGZhbHNlXG4gICAgICAgIHJlICs9IGNcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIHN3YWxsb3cgYW55IHN0YXRlIGNoYXIgdGhhdCB3YXNuJ3QgY29uc3VtZWRcbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuXG4gICAgICAgIGlmIChlc2NhcGluZykge1xuICAgICAgICAgIC8vIG5vIG5lZWRcbiAgICAgICAgICBlc2NhcGluZyA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAocmVTcGVjaWFsc1tjXVxuICAgICAgICAgICYmICEoYyA9PT0gJ14nICYmIGluQ2xhc3MpKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwnXG4gICAgICAgIH1cblxuICAgICAgICByZSArPSBjXG5cbiAgICB9IC8vIHN3aXRjaFxuICB9IC8vIGZvclxuXG4gIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBsZWZ0IGEgY2xhc3Mgb3Blbi5cbiAgLy8gXCJbYWJjXCIgaXMgdmFsaWQsIGVxdWl2YWxlbnQgdG8gXCJcXFthYmNcIlxuICBpZiAoaW5DbGFzcykge1xuICAgIC8vIHNwbGl0IHdoZXJlIHRoZSBsYXN0IFsgd2FzLCBhbmQgZXNjYXBlIGl0XG4gICAgLy8gdGhpcyBpcyBhIGh1Z2UgcGl0YS4gIFdlIG5vdyBoYXZlIHRvIHJlLXdhbGtcbiAgICAvLyB0aGUgY29udGVudHMgb2YgdGhlIHdvdWxkLWJlIGNsYXNzIHRvIHJlLXRyYW5zbGF0ZVxuICAgIC8vIGFueSBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBwYXNzZWQgdGhyb3VnaCBhcy1pc1xuICAgIGNzID0gcGF0dGVybi5zdWJzdHIoY2xhc3NTdGFydCArIDEpXG4gICAgc3AgPSB0aGlzLnBhcnNlKGNzLCBTVUJQQVJTRSlcbiAgICByZSA9IHJlLnN1YnN0cigwLCByZUNsYXNzU3RhcnQpICsgJ1xcXFxbJyArIHNwWzBdXG4gICAgaGFzTWFnaWMgPSBoYXNNYWdpYyB8fCBzcFsxXVxuICB9XG5cbiAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGhhZCBhICsoIHRoaW5nIGF0IHRoZSAqZW5kKlxuICAvLyBvZiB0aGUgcGF0dGVybi5cbiAgLy8gZWFjaCBwYXR0ZXJuIGxpc3Qgc3RhY2sgYWRkcyAzIGNoYXJzLCBhbmQgd2UgbmVlZCB0byBnbyB0aHJvdWdoXG4gIC8vIGFuZCBlc2NhcGUgYW55IHwgY2hhcnMgdGhhdCB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzIGZvciB0aGUgcmVnZXhwLlxuICAvLyBHbyB0aHJvdWdoIGFuZCBlc2NhcGUgdGhlbSwgdGFraW5nIGNhcmUgbm90IHRvIGRvdWJsZS1lc2NhcGUgYW55XG4gIC8vIHwgY2hhcnMgdGhhdCB3ZXJlIGFscmVhZHkgZXNjYXBlZC5cbiAgZm9yIChwbCA9IHBhdHRlcm5MaXN0U3RhY2sucG9wKCk7IHBsOyBwbCA9IHBhdHRlcm5MaXN0U3RhY2sucG9wKCkpIHtcbiAgICB2YXIgdGFpbCA9IHJlLnNsaWNlKHBsLnJlU3RhcnQgKyBwbC5vcGVuLmxlbmd0aClcbiAgICB0aGlzLmRlYnVnKCdzZXR0aW5nIHRhaWwnLCByZSwgcGwpXG4gICAgLy8gbWF5YmUgc29tZSBldmVuIG51bWJlciBvZiBcXCwgdGhlbiBtYXliZSAxIFxcLCBmb2xsb3dlZCBieSBhIHxcbiAgICB0YWlsID0gdGFpbC5yZXBsYWNlKC8oKD86XFxcXHsyfSl7MCw2NH0pKFxcXFw/KVxcfC9nLCBmdW5jdGlvbiAoXywgJDEsICQyKSB7XG4gICAgICBpZiAoISQyKSB7XG4gICAgICAgIC8vIHRoZSB8IGlzbid0IGFscmVhZHkgZXNjYXBlZCwgc28gZXNjYXBlIGl0LlxuICAgICAgICAkMiA9ICdcXFxcJ1xuICAgICAgfVxuXG4gICAgICAvLyBuZWVkIHRvIGVzY2FwZSBhbGwgdGhvc2Ugc2xhc2hlcyAqYWdhaW4qLCB3aXRob3V0IGVzY2FwaW5nIHRoZVxuICAgICAgLy8gb25lIHRoYXQgd2UgbmVlZCBmb3IgZXNjYXBpbmcgdGhlIHwgY2hhcmFjdGVyLiAgQXMgaXQgd29ya3Mgb3V0LFxuICAgICAgLy8gZXNjYXBpbmcgYW4gZXZlbiBudW1iZXIgb2Ygc2xhc2hlcyBjYW4gYmUgZG9uZSBieSBzaW1wbHkgcmVwZWF0aW5nXG4gICAgICAvLyBpdCBleGFjdGx5IGFmdGVyIGl0c2VsZi4gIFRoYXQncyB3aHkgdGhpcyB0cmljayB3b3Jrcy5cbiAgICAgIC8vXG4gICAgICAvLyBJIGFtIHNvcnJ5IHRoYXQgeW91IGhhdmUgdG8gc2VlIHRoaXMuXG4gICAgICByZXR1cm4gJDEgKyAkMSArICQyICsgJ3wnXG4gICAgfSlcblxuICAgIHRoaXMuZGVidWcoJ3RhaWw9JWpcXG4gICAlcycsIHRhaWwsIHRhaWwsIHBsLCByZSlcbiAgICB2YXIgdCA9IHBsLnR5cGUgPT09ICcqJyA/IHN0YXJcbiAgICAgIDogcGwudHlwZSA9PT0gJz8nID8gcW1hcmtcbiAgICAgIDogJ1xcXFwnICsgcGwudHlwZVxuXG4gICAgaGFzTWFnaWMgPSB0cnVlXG4gICAgcmUgPSByZS5zbGljZSgwLCBwbC5yZVN0YXJ0KSArIHQgKyAnXFxcXCgnICsgdGFpbFxuICB9XG5cbiAgLy8gaGFuZGxlIHRyYWlsaW5nIHRoaW5ncyB0aGF0IG9ubHkgbWF0dGVyIGF0IHRoZSB2ZXJ5IGVuZC5cbiAgY2xlYXJTdGF0ZUNoYXIoKVxuICBpZiAoZXNjYXBpbmcpIHtcbiAgICAvLyB0cmFpbGluZyBcXFxcXG4gICAgcmUgKz0gJ1xcXFxcXFxcJ1xuICB9XG5cbiAgLy8gb25seSBuZWVkIHRvIGFwcGx5IHRoZSBub2RvdCBzdGFydCBpZiB0aGUgcmUgc3RhcnRzIHdpdGhcbiAgLy8gc29tZXRoaW5nIHRoYXQgY291bGQgY29uY2VpdmFibHkgY2FwdHVyZSBhIGRvdFxuICB2YXIgYWRkUGF0dGVyblN0YXJ0ID0gZmFsc2VcbiAgc3dpdGNoIChyZS5jaGFyQXQoMCkpIHtcbiAgICBjYXNlICcuJzpcbiAgICBjYXNlICdbJzpcbiAgICBjYXNlICcoJzogYWRkUGF0dGVyblN0YXJ0ID0gdHJ1ZVxuICB9XG5cbiAgLy8gSGFjayB0byB3b3JrIGFyb3VuZCBsYWNrIG9mIG5lZ2F0aXZlIGxvb2tiZWhpbmQgaW4gSlNcbiAgLy8gQSBwYXR0ZXJuIGxpa2U6ICouISh4KS4hKHl8eikgbmVlZHMgdG8gZW5zdXJlIHRoYXQgYSBuYW1lXG4gIC8vIGxpa2UgJ2EueHl6Lnl6JyBkb2Vzbid0IG1hdGNoLiAgU28sIHRoZSBmaXJzdCBuZWdhdGl2ZVxuICAvLyBsb29rYWhlYWQsIGhhcyB0byBsb29rIEFMTCB0aGUgd2F5IGFoZWFkLCB0byB0aGUgZW5kIG9mXG4gIC8vIHRoZSBwYXR0ZXJuLlxuICBmb3IgKHZhciBuID0gbmVnYXRpdmVMaXN0cy5sZW5ndGggLSAxOyBuID4gLTE7IG4tLSkge1xuICAgIHZhciBubCA9IG5lZ2F0aXZlTGlzdHNbbl1cblxuICAgIHZhciBubEJlZm9yZSA9IHJlLnNsaWNlKDAsIG5sLnJlU3RhcnQpXG4gICAgdmFyIG5sRmlyc3QgPSByZS5zbGljZShubC5yZVN0YXJ0LCBubC5yZUVuZCAtIDgpXG4gICAgdmFyIG5sTGFzdCA9IHJlLnNsaWNlKG5sLnJlRW5kIC0gOCwgbmwucmVFbmQpXG4gICAgdmFyIG5sQWZ0ZXIgPSByZS5zbGljZShubC5yZUVuZClcblxuICAgIG5sTGFzdCArPSBubEFmdGVyXG5cbiAgICAvLyBIYW5kbGUgbmVzdGVkIHN0dWZmIGxpa2UgKigqLmpzfCEoKi5qc29uKSksIHdoZXJlIG9wZW4gcGFyZW5zXG4gICAgLy8gbWVhbiB0aGF0IHdlIHNob3VsZCAqbm90KiBpbmNsdWRlIHRoZSApIGluIHRoZSBiaXQgdGhhdCBpcyBjb25zaWRlcmVkXG4gICAgLy8gXCJhZnRlclwiIHRoZSBuZWdhdGVkIHNlY3Rpb24uXG4gICAgdmFyIG9wZW5QYXJlbnNCZWZvcmUgPSBubEJlZm9yZS5zcGxpdCgnKCcpLmxlbmd0aCAtIDFcbiAgICB2YXIgY2xlYW5BZnRlciA9IG5sQWZ0ZXJcbiAgICBmb3IgKGkgPSAwOyBpIDwgb3BlblBhcmVuc0JlZm9yZTsgaSsrKSB7XG4gICAgICBjbGVhbkFmdGVyID0gY2xlYW5BZnRlci5yZXBsYWNlKC9cXClbKyo/XT8vLCAnJylcbiAgICB9XG4gICAgbmxBZnRlciA9IGNsZWFuQWZ0ZXJcblxuICAgIHZhciBkb2xsYXIgPSAnJ1xuICAgIGlmIChubEFmdGVyID09PSAnJyAmJiBpc1N1YiAhPT0gU1VCUEFSU0UpIHtcbiAgICAgIGRvbGxhciA9ICckJ1xuICAgIH1cbiAgICB2YXIgbmV3UmUgPSBubEJlZm9yZSArIG5sRmlyc3QgKyBubEFmdGVyICsgZG9sbGFyICsgbmxMYXN0XG4gICAgcmUgPSBuZXdSZVxuICB9XG5cbiAgLy8gaWYgdGhlIHJlIGlzIG5vdCBcIlwiIGF0IHRoaXMgcG9pbnQsIHRoZW4gd2UgbmVlZCB0byBtYWtlIHN1cmVcbiAgLy8gaXQgZG9lc24ndCBtYXRjaCBhZ2FpbnN0IGFuIGVtcHR5IHBhdGggcGFydC5cbiAgLy8gT3RoZXJ3aXNlIGEvKiB3aWxsIG1hdGNoIGEvLCB3aGljaCBpdCBzaG91bGQgbm90LlxuICBpZiAocmUgIT09ICcnICYmIGhhc01hZ2ljKSB7XG4gICAgcmUgPSAnKD89LiknICsgcmVcbiAgfVxuXG4gIGlmIChhZGRQYXR0ZXJuU3RhcnQpIHtcbiAgICByZSA9IHBhdHRlcm5TdGFydCArIHJlXG4gIH1cblxuICAvLyBwYXJzaW5nIGp1c3QgYSBwaWVjZSBvZiBhIGxhcmdlciBwYXR0ZXJuLlxuICBpZiAoaXNTdWIgPT09IFNVQlBBUlNFKSB7XG4gICAgcmV0dXJuIFtyZSwgaGFzTWFnaWNdXG4gIH1cblxuICAvLyBza2lwIHRoZSByZWdleHAgZm9yIG5vbi1tYWdpY2FsIHBhdHRlcm5zXG4gIC8vIHVuZXNjYXBlIGFueXRoaW5nIGluIGl0LCB0aG91Z2gsIHNvIHRoYXQgaXQnbGwgYmVcbiAgLy8gYW4gZXhhY3QgbWF0Y2ggYWdhaW5zdCBhIGZpbGUgZXRjLlxuICBpZiAoIWhhc01hZ2ljKSB7XG4gICAgcmV0dXJuIGdsb2JVbmVzY2FwZShwYXR0ZXJuKVxuICB9XG5cbiAgdmFyIGZsYWdzID0gb3B0aW9ucy5ub2Nhc2UgPyAnaScgOiAnJ1xuICB0cnkge1xuICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKCdeJyArIHJlICsgJyQnLCBmbGFncylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICAvLyBJZiBpdCB3YXMgYW4gaW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb24sIHRoZW4gaXQgY2FuJ3QgbWF0Y2hcbiAgICAvLyBhbnl0aGluZy4gIFRoaXMgdHJpY2sgbG9va3MgZm9yIGEgY2hhcmFjdGVyIGFmdGVyIHRoZSBlbmQgb2ZcbiAgICAvLyB0aGUgc3RyaW5nLCB3aGljaCBpcyBvZiBjb3Vyc2UgaW1wb3NzaWJsZSwgZXhjZXB0IGluIG11bHRpLWxpbmVcbiAgICAvLyBtb2RlLCBidXQgaXQncyBub3QgYSAvbSByZWdleC5cbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnJC4nKVxuICB9XG5cbiAgcmVnRXhwLl9nbG9iID0gcGF0dGVyblxuICByZWdFeHAuX3NyYyA9IHJlXG5cbiAgcmV0dXJuIHJlZ0V4cFxufVxuXG5taW5pbWF0Y2gubWFrZVJlID0gZnVuY3Rpb24gKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBNaW5pbWF0Y2gocGF0dGVybiwgb3B0aW9ucyB8fCB7fSkubWFrZVJlKClcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5tYWtlUmUgPSBtYWtlUmVcbmZ1bmN0aW9uIG1ha2VSZSAoKSB7XG4gIGlmICh0aGlzLnJlZ2V4cCB8fCB0aGlzLnJlZ2V4cCA9PT0gZmFsc2UpIHJldHVybiB0aGlzLnJlZ2V4cFxuXG4gIC8vIGF0IHRoaXMgcG9pbnQsIHRoaXMuc2V0IGlzIGEgMmQgYXJyYXkgb2YgcGFydGlhbFxuICAvLyBwYXR0ZXJuIHN0cmluZ3MsIG9yIFwiKipcIi5cbiAgLy9cbiAgLy8gSXQncyBiZXR0ZXIgdG8gdXNlIC5tYXRjaCgpLiAgVGhpcyBmdW5jdGlvbiBzaG91bGRuJ3RcbiAgLy8gYmUgdXNlZCwgcmVhbGx5LCBidXQgaXQncyBwcmV0dHkgY29udmVuaWVudCBzb21ldGltZXMsXG4gIC8vIHdoZW4geW91IGp1c3Qgd2FudCB0byB3b3JrIHdpdGggYSByZWdleC5cbiAgdmFyIHNldCA9IHRoaXMuc2V0XG5cbiAgaWYgKCFzZXQubGVuZ3RoKSB7XG4gICAgdGhpcy5yZWdleHAgPSBmYWxzZVxuICAgIHJldHVybiB0aGlzLnJlZ2V4cFxuICB9XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgdmFyIHR3b1N0YXIgPSBvcHRpb25zLm5vZ2xvYnN0YXIgPyBzdGFyXG4gICAgOiBvcHRpb25zLmRvdCA/IHR3b1N0YXJEb3RcbiAgICA6IHR3b1N0YXJOb0RvdFxuICB2YXIgZmxhZ3MgPSBvcHRpb25zLm5vY2FzZSA/ICdpJyA6ICcnXG5cbiAgdmFyIHJlID0gc2V0Lm1hcChmdW5jdGlvbiAocGF0dGVybikge1xuICAgIHJldHVybiBwYXR0ZXJuLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIChwID09PSBHTE9CU1RBUikgPyB0d29TdGFyXG4gICAgICA6ICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpID8gcmVnRXhwRXNjYXBlKHApXG4gICAgICA6IHAuX3NyY1xuICAgIH0pLmpvaW4oJ1xcXFxcXC8nKVxuICB9KS5qb2luKCd8JylcblxuICAvLyBtdXN0IG1hdGNoIGVudGlyZSBwYXR0ZXJuXG4gIC8vIGVuZGluZyBpbiBhICogb3IgKiogd2lsbCBtYWtlIGl0IGxlc3Mgc3RyaWN0LlxuICByZSA9ICdeKD86JyArIHJlICsgJykkJ1xuXG4gIC8vIGNhbiBtYXRjaCBhbnl0aGluZywgYXMgbG9uZyBhcyBpdCdzIG5vdCB0aGlzLlxuICBpZiAodGhpcy5uZWdhdGUpIHJlID0gJ14oPyEnICsgcmUgKyAnKS4qJCdcblxuICB0cnkge1xuICAgIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChyZSwgZmxhZ3MpXG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgdGhpcy5yZWdleHAgPSBmYWxzZVxuICB9XG4gIHJldHVybiB0aGlzLnJlZ2V4cFxufVxuXG5taW5pbWF0Y2gubWF0Y2ggPSBmdW5jdGlvbiAobGlzdCwgcGF0dGVybiwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgbW0gPSBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIG9wdGlvbnMpXG4gIGxpc3QgPSBsaXN0LmZpbHRlcihmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBtbS5tYXRjaChmKVxuICB9KVxuICBpZiAobW0ub3B0aW9ucy5ub251bGwgJiYgIWxpc3QubGVuZ3RoKSB7XG4gICAgbGlzdC5wdXNoKHBhdHRlcm4pXG4gIH1cbiAgcmV0dXJuIGxpc3Rcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5tYXRjaCA9IG1hdGNoXG5mdW5jdGlvbiBtYXRjaCAoZiwgcGFydGlhbCkge1xuICB0aGlzLmRlYnVnKCdtYXRjaCcsIGYsIHRoaXMucGF0dGVybilcbiAgLy8gc2hvcnQtY2lyY3VpdCBpbiB0aGUgY2FzZSBvZiBidXN0ZWQgdGhpbmdzLlxuICAvLyBjb21tZW50cywgZXRjLlxuICBpZiAodGhpcy5jb21tZW50KSByZXR1cm4gZmFsc2VcbiAgaWYgKHRoaXMuZW1wdHkpIHJldHVybiBmID09PSAnJ1xuXG4gIGlmIChmID09PSAnLycgJiYgcGFydGlhbCkgcmV0dXJuIHRydWVcblxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuXG4gIC8vIHdpbmRvd3M6IG5lZWQgdG8gdXNlIC8sIG5vdCBcXFxuICBpZiAocGF0aC5zZXAgIT09ICcvJykge1xuICAgIGYgPSBmLnNwbGl0KHBhdGguc2VwKS5qb2luKCcvJylcbiAgfVxuXG4gIC8vIHRyZWF0IHRoZSB0ZXN0IHBhdGggYXMgYSBzZXQgb2YgcGF0aHBhcnRzLlxuICBmID0gZi5zcGxpdChzbGFzaFNwbGl0KVxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgJ3NwbGl0JywgZilcblxuICAvLyBqdXN0IE9ORSBvZiB0aGUgcGF0dGVybiBzZXRzIGluIHRoaXMuc2V0IG5lZWRzIHRvIG1hdGNoXG4gIC8vIGluIG9yZGVyIGZvciBpdCB0byBiZSB2YWxpZC4gIElmIG5lZ2F0aW5nLCB0aGVuIGp1c3Qgb25lXG4gIC8vIG1hdGNoIG1lYW5zIHRoYXQgd2UgaGF2ZSBmYWlsZWQuXG4gIC8vIEVpdGhlciB3YXksIHJldHVybiBvbiB0aGUgZmlyc3QgaGl0LlxuXG4gIHZhciBzZXQgPSB0aGlzLnNldFxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgJ3NldCcsIHNldClcblxuICAvLyBGaW5kIHRoZSBiYXNlbmFtZSBvZiB0aGUgcGF0aCBieSBsb29raW5nIGZvciB0aGUgbGFzdCBub24tZW1wdHkgc2VnbWVudFxuICB2YXIgZmlsZW5hbWVcbiAgdmFyIGlcbiAgZm9yIChpID0gZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGZpbGVuYW1lID0gZltpXVxuICAgIGlmIChmaWxlbmFtZSkgYnJlYWtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGF0dGVybiA9IHNldFtpXVxuICAgIHZhciBmaWxlID0gZlxuICAgIGlmIChvcHRpb25zLm1hdGNoQmFzZSAmJiBwYXR0ZXJuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZmlsZSA9IFtmaWxlbmFtZV1cbiAgICB9XG4gICAgdmFyIGhpdCA9IHRoaXMubWF0Y2hPbmUoZmlsZSwgcGF0dGVybiwgcGFydGlhbClcbiAgICBpZiAoaGl0KSB7XG4gICAgICBpZiAob3B0aW9ucy5mbGlwTmVnYXRlKSByZXR1cm4gdHJ1ZVxuICAgICAgcmV0dXJuICF0aGlzLm5lZ2F0ZVxuICAgIH1cbiAgfVxuXG4gIC8vIGRpZG4ndCBnZXQgYW55IGhpdHMuICB0aGlzIGlzIHN1Y2Nlc3MgaWYgaXQncyBhIG5lZ2F0aXZlXG4gIC8vIHBhdHRlcm4sIGZhaWx1cmUgb3RoZXJ3aXNlLlxuICBpZiAob3B0aW9ucy5mbGlwTmVnYXRlKSByZXR1cm4gZmFsc2VcbiAgcmV0dXJuIHRoaXMubmVnYXRlXG59XG5cbi8vIHNldCBwYXJ0aWFsIHRvIHRydWUgdG8gdGVzdCBpZiwgZm9yIGV4YW1wbGUsXG4vLyBcIi9hL2JcIiBtYXRjaGVzIHRoZSBzdGFydCBvZiBcIi8qL2IvKi9kXCJcbi8vIFBhcnRpYWwgbWVhbnMsIGlmIHlvdSBydW4gb3V0IG9mIGZpbGUgYmVmb3JlIHlvdSBydW5cbi8vIG91dCBvZiBwYXR0ZXJuLCB0aGVuIHRoYXQncyBmaW5lLCBhcyBsb25nIGFzIGFsbFxuLy8gdGhlIHBhcnRzIG1hdGNoLlxuTWluaW1hdGNoLnByb3RvdHlwZS5tYXRjaE9uZSA9IGZ1bmN0aW9uIChmaWxlLCBwYXR0ZXJuLCBwYXJ0aWFsKSB7XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUnLFxuICAgIHsgJ3RoaXMnOiB0aGlzLCBmaWxlOiBmaWxlLCBwYXR0ZXJuOiBwYXR0ZXJuIH0pXG5cbiAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUnLCBmaWxlLmxlbmd0aCwgcGF0dGVybi5sZW5ndGgpXG5cbiAgZm9yICh2YXIgZmkgPSAwLFxuICAgICAgcGkgPSAwLFxuICAgICAgZmwgPSBmaWxlLmxlbmd0aCxcbiAgICAgIHBsID0gcGF0dGVybi5sZW5ndGhcbiAgICAgIDsgKGZpIDwgZmwpICYmIChwaSA8IHBsKVxuICAgICAgOyBmaSsrLCBwaSsrKSB7XG4gICAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUgbG9vcCcpXG4gICAgdmFyIHAgPSBwYXR0ZXJuW3BpXVxuICAgIHZhciBmID0gZmlsZVtmaV1cblxuICAgIHRoaXMuZGVidWcocGF0dGVybiwgcCwgZilcblxuICAgIC8vIHNob3VsZCBiZSBpbXBvc3NpYmxlLlxuICAgIC8vIHNvbWUgaW52YWxpZCByZWdleHAgc3R1ZmYgaW4gdGhlIHNldC5cbiAgICBpZiAocCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxuXG4gICAgaWYgKHAgPT09IEdMT0JTVEFSKSB7XG4gICAgICB0aGlzLmRlYnVnKCdHTE9CU1RBUicsIFtwYXR0ZXJuLCBwLCBmXSlcblxuICAgICAgLy8gXCIqKlwiXG4gICAgICAvLyBhLyoqL2IvKiovYyB3b3VsZCBtYXRjaCB0aGUgZm9sbG93aW5nOlxuICAgICAgLy8gYS9iL3gveS96L2NcbiAgICAgIC8vIGEveC95L3ovYi9jXG4gICAgICAvLyBhL2IveC9iL3gvY1xuICAgICAgLy8gYS9iL2NcbiAgICAgIC8vIFRvIGRvIHRoaXMsIHRha2UgdGhlIHJlc3Qgb2YgdGhlIHBhdHRlcm4gYWZ0ZXJcbiAgICAgIC8vIHRoZSAqKiwgYW5kIHNlZSBpZiBpdCB3b3VsZCBtYXRjaCB0aGUgZmlsZSByZW1haW5kZXIuXG4gICAgICAvLyBJZiBzbywgcmV0dXJuIHN1Y2Nlc3MuXG4gICAgICAvLyBJZiBub3QsIHRoZSAqKiBcInN3YWxsb3dzXCIgYSBzZWdtZW50LCBhbmQgdHJ5IGFnYWluLlxuICAgICAgLy8gVGhpcyBpcyByZWN1cnNpdmVseSBhd2Z1bC5cbiAgICAgIC8vXG4gICAgICAvLyBhLyoqL2IvKiovYyBtYXRjaGluZyBhL2IveC95L3ovY1xuICAgICAgLy8gLSBhIG1hdGNoZXMgYVxuICAgICAgLy8gLSBkb3VibGVzdGFyXG4gICAgICAvLyAgIC0gbWF0Y2hPbmUoYi94L3kvei9jLCBiLyoqL2MpXG4gICAgICAvLyAgICAgLSBiIG1hdGNoZXMgYlxuICAgICAgLy8gICAgIC0gZG91Ymxlc3RhclxuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh4L3kvei9jLCBjKSAtPiBub1xuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh5L3ovYywgYykgLT4gbm9cbiAgICAgIC8vICAgICAgIC0gbWF0Y2hPbmUoei9jLCBjKSAtPiBub1xuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZShjLCBjKSB5ZXMsIGhpdFxuICAgICAgdmFyIGZyID0gZmlcbiAgICAgIHZhciBwciA9IHBpICsgMVxuICAgICAgaWYgKHByID09PSBwbCkge1xuICAgICAgICB0aGlzLmRlYnVnKCcqKiBhdCB0aGUgZW5kJylcbiAgICAgICAgLy8gYSAqKiBhdCB0aGUgZW5kIHdpbGwganVzdCBzd2FsbG93IHRoZSByZXN0LlxuICAgICAgICAvLyBXZSBoYXZlIGZvdW5kIGEgbWF0Y2guXG4gICAgICAgIC8vIGhvd2V2ZXIsIGl0IHdpbGwgbm90IHN3YWxsb3cgLy54LCB1bmxlc3NcbiAgICAgICAgLy8gb3B0aW9ucy5kb3QgaXMgc2V0LlxuICAgICAgICAvLyAuIGFuZCAuLiBhcmUgKm5ldmVyKiBtYXRjaGVkIGJ5ICoqLCBmb3IgZXhwbG9zaXZlbHlcbiAgICAgICAgLy8gZXhwb25lbnRpYWwgcmVhc29ucy5cbiAgICAgICAgZm9yICg7IGZpIDwgZmw7IGZpKyspIHtcbiAgICAgICAgICBpZiAoZmlsZVtmaV0gPT09ICcuJyB8fCBmaWxlW2ZpXSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgKCFvcHRpb25zLmRvdCAmJiBmaWxlW2ZpXS5jaGFyQXQoMCkgPT09ICcuJykpIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG5cbiAgICAgIC8vIG9rLCBsZXQncyBzZWUgaWYgd2UgY2FuIHN3YWxsb3cgd2hhdGV2ZXIgd2UgY2FuLlxuICAgICAgd2hpbGUgKGZyIDwgZmwpIHtcbiAgICAgICAgdmFyIHN3YWxsb3dlZSA9IGZpbGVbZnJdXG5cbiAgICAgICAgdGhpcy5kZWJ1ZygnXFxuZ2xvYnN0YXIgd2hpbGUnLCBmaWxlLCBmciwgcGF0dGVybiwgcHIsIHN3YWxsb3dlZSlcblxuICAgICAgICAvLyBYWFggcmVtb3ZlIHRoaXMgc2xpY2UuICBKdXN0IHBhc3MgdGhlIHN0YXJ0IGluZGV4LlxuICAgICAgICBpZiAodGhpcy5tYXRjaE9uZShmaWxlLnNsaWNlKGZyKSwgcGF0dGVybi5zbGljZShwciksIHBhcnRpYWwpKSB7XG4gICAgICAgICAgdGhpcy5kZWJ1ZygnZ2xvYnN0YXIgZm91bmQgbWF0Y2ghJywgZnIsIGZsLCBzd2FsbG93ZWUpXG4gICAgICAgICAgLy8gZm91bmQgYSBtYXRjaC5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNhbid0IHN3YWxsb3cgXCIuXCIgb3IgXCIuLlwiIGV2ZXIuXG4gICAgICAgICAgLy8gY2FuIG9ubHkgc3dhbGxvdyBcIi5mb29cIiB3aGVuIGV4cGxpY2l0bHkgYXNrZWQuXG4gICAgICAgICAgaWYgKHN3YWxsb3dlZSA9PT0gJy4nIHx8IHN3YWxsb3dlZSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgKCFvcHRpb25zLmRvdCAmJiBzd2FsbG93ZWUuY2hhckF0KDApID09PSAnLicpKSB7XG4gICAgICAgICAgICB0aGlzLmRlYnVnKCdkb3QgZGV0ZWN0ZWQhJywgZmlsZSwgZnIsIHBhdHRlcm4sIHByKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyAqKiBzd2FsbG93cyBhIHNlZ21lbnQsIGFuZCBjb250aW51ZS5cbiAgICAgICAgICB0aGlzLmRlYnVnKCdnbG9ic3RhciBzd2FsbG93IGEgc2VnbWVudCwgYW5kIGNvbnRpbnVlJylcbiAgICAgICAgICBmcisrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbm8gbWF0Y2ggd2FzIGZvdW5kLlxuICAgICAgLy8gSG93ZXZlciwgaW4gcGFydGlhbCBtb2RlLCB3ZSBjYW4ndCBzYXkgdGhpcyBpcyBuZWNlc3NhcmlseSBvdmVyLlxuICAgICAgLy8gSWYgdGhlcmUncyBtb3JlICpwYXR0ZXJuKiBsZWZ0LCB0aGVuXG4gICAgICBpZiAocGFydGlhbCkge1xuICAgICAgICAvLyByYW4gb3V0IG9mIGZpbGVcbiAgICAgICAgdGhpcy5kZWJ1ZygnXFxuPj4+IG5vIG1hdGNoLCBwYXJ0aWFsPycsIGZpbGUsIGZyLCBwYXR0ZXJuLCBwcilcbiAgICAgICAgaWYgKGZyID09PSBmbCkgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIHNvbWV0aGluZyBvdGhlciB0aGFuICoqXG4gICAgLy8gbm9uLW1hZ2ljIHBhdHRlcm5zIGp1c3QgaGF2ZSB0byBtYXRjaCBleGFjdGx5XG4gICAgLy8gcGF0dGVybnMgd2l0aCBtYWdpYyBoYXZlIGJlZW4gdHVybmVkIGludG8gcmVnZXhwcy5cbiAgICB2YXIgaGl0XG4gICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKG9wdGlvbnMubm9jYXNlKSB7XG4gICAgICAgIGhpdCA9IGYudG9Mb3dlckNhc2UoKSA9PT0gcC50b0xvd2VyQ2FzZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoaXQgPSBmID09PSBwXG4gICAgICB9XG4gICAgICB0aGlzLmRlYnVnKCdzdHJpbmcgbWF0Y2gnLCBwLCBmLCBoaXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGhpdCA9IGYubWF0Y2gocClcbiAgICAgIHRoaXMuZGVidWcoJ3BhdHRlcm4gbWF0Y2gnLCBwLCBmLCBoaXQpXG4gICAgfVxuXG4gICAgaWYgKCFoaXQpIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gTm90ZTogZW5kaW5nIGluIC8gbWVhbnMgdGhhdCB3ZSdsbCBnZXQgYSBmaW5hbCBcIlwiXG4gIC8vIGF0IHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4uICBUaGlzIGNhbiBvbmx5IG1hdGNoIGFcbiAgLy8gY29ycmVzcG9uZGluZyBcIlwiIGF0IHRoZSBlbmQgb2YgdGhlIGZpbGUuXG4gIC8vIElmIHRoZSBmaWxlIGVuZHMgaW4gLywgdGhlbiBpdCBjYW4gb25seSBtYXRjaCBhXG4gIC8vIGEgcGF0dGVybiB0aGF0IGVuZHMgaW4gLywgdW5sZXNzIHRoZSBwYXR0ZXJuIGp1c3RcbiAgLy8gZG9lc24ndCBoYXZlIGFueSBtb3JlIGZvciBpdC4gQnV0LCBhL2IvIHNob3VsZCAqbm90KlxuICAvLyBtYXRjaCBcImEvYi8qXCIsIGV2ZW4gdGhvdWdoIFwiXCIgbWF0Y2hlcyBhZ2FpbnN0IHRoZVxuICAvLyBbXi9dKj8gcGF0dGVybiwgZXhjZXB0IGluIHBhcnRpYWwgbW9kZSwgd2hlcmUgaXQgbWlnaHRcbiAgLy8gc2ltcGx5IG5vdCBiZSByZWFjaGVkIHlldC5cbiAgLy8gSG93ZXZlciwgYS9iLyBzaG91bGQgc3RpbGwgc2F0aXNmeSBhLypcblxuICAvLyBub3cgZWl0aGVyIHdlIGZlbGwgb2ZmIHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4sIG9yIHdlJ3JlIGRvbmUuXG4gIGlmIChmaSA9PT0gZmwgJiYgcGkgPT09IHBsKSB7XG4gICAgLy8gcmFuIG91dCBvZiBwYXR0ZXJuIGFuZCBmaWxlbmFtZSBhdCB0aGUgc2FtZSB0aW1lLlxuICAgIC8vIGFuIGV4YWN0IGhpdCFcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGVsc2UgaWYgKGZpID09PSBmbCkge1xuICAgIC8vIHJhbiBvdXQgb2YgZmlsZSwgYnV0IHN0aWxsIGhhZCBwYXR0ZXJuIGxlZnQuXG4gICAgLy8gdGhpcyBpcyBvayBpZiB3ZSdyZSBkb2luZyB0aGUgbWF0Y2ggYXMgcGFydCBvZlxuICAgIC8vIGEgZ2xvYiBmcyB0cmF2ZXJzYWwuXG4gICAgcmV0dXJuIHBhcnRpYWxcbiAgfSBlbHNlIGlmIChwaSA9PT0gcGwpIHtcbiAgICAvLyByYW4gb3V0IG9mIHBhdHRlcm4sIHN0aWxsIGhhdmUgZmlsZSBsZWZ0LlxuICAgIC8vIHRoaXMgaXMgb25seSBhY2NlcHRhYmxlIGlmIHdlJ3JlIG9uIHRoZSB2ZXJ5IGxhc3RcbiAgICAvLyBlbXB0eSBzZWdtZW50IG9mIGEgZmlsZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2guXG4gICAgLy8gYS8qIHNob3VsZCBtYXRjaCBhL2IvXG4gICAgdmFyIGVtcHR5RmlsZUVuZCA9IChmaSA9PT0gZmwgLSAxKSAmJiAoZmlsZVtmaV0gPT09ICcnKVxuICAgIHJldHVybiBlbXB0eUZpbGVFbmRcbiAgfVxuXG4gIC8vIHNob3VsZCBiZSB1bnJlYWNoYWJsZS5cbiAgdGhyb3cgbmV3IEVycm9yKCd3dGY/Jylcbn1cblxuLy8gcmVwbGFjZSBzdHVmZiBsaWtlIFxcKiB3aXRoICpcbmZ1bmN0aW9uIGdsb2JVbmVzY2FwZSAocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9cXFxcKC4pL2csICckMScpXG59XG5cbmZ1bmN0aW9uIHJlZ0V4cEVzY2FwZSAocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJ1bGVzRGlyLCBjd2QpIHtcbiAgICBpZiAoIXJ1bGVzRGlyKSB7XG4gICAgICAgIHJ1bGVzRGlyID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3J1bGVzJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXRoLnJlc29sdmUoY3dkLCBydWxlc0Rpcik7XG4gICAgfVxuXG4gICAgY29uc3QgcnVsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZnMucmVhZGRpclN5bmMocnVsZXNEaXIpLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgIGlmIChwYXRoLmV4dG5hbWUoZmlsZSkgIT09ICcuanMnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBydWxlc1tmaWxlLnNsaWNlKDAsIC0zKV0gPSBwYXRoLmpvaW4ocnVsZXNEaXIsIGZpbGUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1bGVzO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGxvYWRSdWxlcyA9IHJlcXVpcmUoJy4vbG9hZC1ydWxlcycpO1xuXG5jbGFzcyBSdWxlcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3J1bGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgfVxuXG4gICAgZGVmaW5lKHJ1bGVJZCwgcnVsZU1vZHVsZSkge1xuICAgICAgICB0aGlzLl9ydWxlc1tydWxlSWRdID0gcnVsZU1vZHVsZTtcbiAgICB9XG5cbiAgICBsb2FkKHJ1bGVzRGlyLCBjd2QpIHtcbiAgICAgICAgY29uc3QgbmV3UnVsZXMgPSBsb2FkUnVsZXMocnVsZXNEaXIsIGN3ZCk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMobmV3UnVsZXMpLmZvckVhY2gocnVsZUlkID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lKHJ1bGVJZCwgbmV3UnVsZXNbcnVsZUlkXSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldChydWxlSWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9ydWxlc1tydWxlSWRdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUodGhpcy5fcnVsZXNbcnVsZUlkXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcnVsZXNbcnVsZUlkXTtcbiAgICB9XG5cbiAgICBnZXRBbGxMb2FkZWRSdWxlcygpIHtcbiAgICAgICAgY29uc3QgYWxsUnVsZXMgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fcnVsZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBydWxlID0gdGhpcy5nZXQobmFtZSk7XG5cbiAgICAgICAgICAgIGFsbFJ1bGVzLnNldChuYW1lLCBydWxlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGFsbFJ1bGVzO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSdWxlczsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vL2NvbnN0IFBhcnNlciA9IHJlcXVpcmUoJy4uL3BhcnNlcicpLFxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLFxuICAgIFJ1bGVzID0gcmVxdWlyZSgnLi9ydWxlcycpLFxuICAgIENvbmZpZ09wcyA9IHJlcXVpcmUoJy4vY29uZmlnL2NvbmZpZy1vcHMnKTtcblxuZnVuY3Rpb24gY2FwdHVyZUVycm9ycyhjYikge1xuICAgIGNvbnN0IGVycm9ycyA9IFtdLFxuICAgICAgICBjb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yO1xuXG4gICAgY29uc29sZS5lcnJvciA9ICgpID0+IHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBjb25zb2xlRXJyb3IuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgZXJyb3JzLnB1c2gobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgY29uc3QgYXN0ID0gY2IoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgYXN0XG4gICAgfTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHNldmVyaXR5IGxldmVsIG9mIGEgcnVsZSAoMCAtIG5vbmUsIDEgLSB3YXJuaW5nLCAyIC0gZXJyb3IpXG4gKiBSZXR1cm5zIDAgaWYgdGhlIHJ1bGUgY29uZmlnIGlzIG5vdCB2YWxpZCAoYW4gQXJyYXkgb3IgYSBudW1iZXIpXG4gKiBAcGFyYW0ge0FycmF5fG51bWJlcn0gcnVsZUNvbmZpZyBydWxlIGNvbmZpZ3VyYXRpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IDAsIDEsIG9yIDIsIGluZGljYXRpbmcgcnVsZSBzZXZlcml0eVxuICovXG5mdW5jdGlvbiBnZXRSdWxlU2V2ZXJpdHkocnVsZUNvbmZpZykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJ1bGVDb25maWcpID8gcnVsZUNvbmZpZ1swXSA6IHJ1bGVDb25maWc7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2JsZW1Gcm9tRGVzY3JpcHRvcihkZXNjcmlwdG9yLCBydWxlSWQsIHNldmVyaXR5KSB7XG4gICAgY29uc3QgcHJvYmxlbSA9IHtcbiAgICAgICAgcnVsZUlkLFxuICAgICAgICBzZXZlcml0eSxcbiAgICAgICAgbWVzc2FnZTogZGVzY3JpcHRvci5tZXNzYWdlLFxuICAgICAgICBsaW5lOiBkZXNjcmlwdG9yLmxvYy5zdGFydC5saW5lLFxuICAgICAgICBjb2x1bW46IGRlc2NyaXB0b3IubG9jLnN0YXJ0LmNvbHVtbixcbiAgICAgICAgbm9kZVR5cGU6IGRlc2NyaXB0b3Iubm9kZSAmJiBkZXNjcmlwdG9yLm5vZGUudHlwZSB8fCBudWxsXG4gICAgfTtcblxuICAgIGlmIChkZXNjcmlwdG9yLmxvYy5lbmQpIHtcbiAgICAgICAgcHJvYmxlbS5lbmRMaW5lID0gZGVzY3JpcHRvci5sb2MuZW5kLmxpbmU7XG4gICAgICAgIHByb2JsZW0uZW5kQ29sdW1uID0gZGVzY3JpcHRvci5sb2MuZW5kLmNvbHVtbiArIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2JsZW07XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHRleHQsIGZpbGVuYW1lLCBwYXJzZXIpIHtcbiAgICBsZXQgcGFyc2VSZXN1bHQsXG4gICAgICAgIG1lc3NhZ2VzID0gW107XG5cbiAgICB0cnkge1xuICAgICAgICBwYXJzZVJlc3VsdCA9IHBhcnNlci5wYXJzZVRleHQodGV4dCk7XG5cbiAgICAgICAgaWYgKHBhcnNlUmVzdWx0LmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwYXJzZVJlc3VsdC5lcnJvcnMuZm9yRWFjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVJZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZmF0YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNldmVyaXR5OiAyLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBQYXJzaW5nIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogZXJyb3IubGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBlcnJvci5jb2x1bW5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChleCkge1xuICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgIHJ1bGVJZDogbnVsbCxcbiAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgICAgICBtZXNzYWdlOiBgUGFyc2luZyBlcnJvcjogJHtleC5tZXNzYWdlfWAsXG4gICAgICAgICAgICBsaW5lOiBleC5saW5lTnVtYmVyLFxuICAgICAgICAgICAgY29sdW1uOiBleC5jb2x1bW5cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICBhc3Q6IHBhcnNlUmVzdWx0ICYmIHBhcnNlUmVzdWx0LmFzdCA/IHBhcnNlUmVzdWx0LmFzdCA6IG51bGxcbiAgICB9O1xufVxuXG5jbGFzcyBMaW50ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gICAgICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZXMoKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgIH1cblxuICAgIHZlcmlmeSh0ZXh0LCBmaWxlbmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG51bGw7Ly9uZXcgUGFyc2VyKHRoaXMpO1xuXG4gICAgICAgIGxldCBhc3QsXG4gICAgICAgICAgICBwYXJzZVJlc3VsdDtcblxuICAgICAgICBjb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcpO1xuXG4gICAgICAgIGlmICh0ZXh0ID09IG51bGwgfHwgdGV4dC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlUmVzdWx0ID0gcGFyc2UodGV4dCwgdGhpcy5jdXJyZW50RmlsZW5hbWUsIHBhcnNlcik7XG4gICAgICAgIGFzdCA9IHBhcnNlUmVzdWx0LmFzdDtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubWVzc2FnZXMucHVzaCguLi5wYXJzZVJlc3VsdC5tZXNzYWdlcyk7XG5cbiAgICAgICAgaWYgKCFhc3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29uZmlnT3BzLm5vcm1hbGl6ZShjb25maWcpO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZy5ydWxlcykuZmlsdGVyKHJ1bGVJZCA9PiBnZXRSdWxlU2V2ZXJpdHkoY29uZmlnLnJ1bGVzW3J1bGVJZF0pID4gMCkuZm9yRWFjaChydWxlSWQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcnVsZUNyZWF0b3IgPSB0aGlzLnJ1bGVzLmdldChydWxlSWQpO1xuXG4gICAgICAgICAgICBpZiAoIXJ1bGVDcmVhdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzZXZlcml0eSA9IGdldFJ1bGVTZXZlcml0eShjb25maWcucnVsZXNbcnVsZUlkXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJ1bGVDb250ZXh0ID0gT2JqZWN0LmZyZWV6ZShPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIHtcbiAgICAgICAgICAgICAgICBpZDogcnVsZUlkLFxuICAgICAgICAgICAgICAgIHJlcG9ydDogZGVzY3JpcHRvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JsZW0gPSBjcmVhdGVQcm9ibGVtRnJvbURlc2NyaXB0b3IoZGVzY3JpcHRvciwgcnVsZUlkLCBzZXZlcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXMucHVzaChwcm9ibGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZSA9IHJ1bGVDcmVhdG9yLmNyZWF0ZShydWxlQ29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhydWxlKS5mb3JFYWNoKHNlbGVjdG9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbihzZWxlY3RvciwgcnVsZVtzZWxlY3Rvcl0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgZXgubWVzc2FnZSA9IGBFcnJvciB3aGlsZSBsb2FkaW5nIHJ1bGUgJyR7cnVsZUlkfSc6ICR7ZXgubWVzc2FnZX1gO1xuICAgICAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBwYXJzZXIudHJhdmVyc2UoYXN0KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubWVzc2FnZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGluZURpZmYgPSBhLmxpbmUgLSBiLmxpbmU7XG5cbiAgICAgICAgICAgIGlmIChsaW5lRGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLmNvbHVtbiAtIGIuY29sdW1uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbGluZURpZmY7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZXM7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpbnRlcjsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIExpbnRlciA9IHJlcXVpcmUoJy4vbGludGVyJyksXG4gICAgQ29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlU3RhdHNQZXJGaWxlKG1lc3NhZ2VzKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2VzLnJlZHVjZSgoc3RhdCwgbWVzc2FnZSkgPT4ge1xuICAgICAgICBpZiAobWVzc2FnZS5mYXRhbCB8fCBtZXNzYWdlLnNldmVyaXR5ID09PSAyKSB7XG4gICAgICAgICAgICBzdGF0LmVycm9yQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXQud2FybmluZ0NvdW50Kys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhdDtcbiAgICB9LCB7XG4gICAgICAgIGVycm9yQ291bnQ6IDAsXG4gICAgICAgIHdhcm5pbmdDb3VudDogMFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVTdGF0c1BlclJ1bihyZXN1bHRzKSB7XG4gICAgcmV0dXJuIHJlc3VsdHMucmVkdWNlKChzdGF0LCByZXN1bHQpID0+IHtcbiAgICAgICAgc3RhdC5lcnJvckNvdW50ICs9IHJlc3VsdC5lcnJvckNvdW50O1xuICAgICAgICBzdGF0Lndhcm5pbmdDb3VudCArPSByZXN1bHQud2FybmluZ0NvdW50O1xuXG4gICAgICAgIHJldHVybiBzdGF0O1xuICAgIH0sIHtcbiAgICAgICAgZXJyb3JDb3VudDogMCxcbiAgICAgICAgd2FybmluZ0NvdW50OiAwXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NUZXh0KHRleHQsIGZpbGVuYW1lLCBsaW50ZXIsIGNvbmZpZ0hlbHBlcikge1xuICAgIGxpbnRlci5yZXNldCgpO1xuXG4gICAgbGV0IGZpbGVQYXRoLFxuICAgICAgICBmaWxlRXh0ZW5zaW9uLFxuICAgICAgICBtZXNzYWdlcztcblxuICAgIGlmIChmaWxlbmFtZSkge1xuICAgICAgICBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShmaWxlbmFtZSk7XG4gICAgICAgIGZpbGVFeHRlbnNpb24gPSBwYXRoLmV4dG5hbWUoZmlsZW5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IGNvbmZpZ0hlbHBlci5nZXRDb25maWcoZmlsZVBhdGgpO1xuICAgIG1lc3NhZ2VzID0gbGludGVyLnZlcmlmeSh0ZXh0LCBmaWxlbmFtZSwgY29uZmlnKTtcblxuICAgIGNvbnN0IHN0YXRzID0gY2FsY3VsYXRlU3RhdHNQZXJGaWxlKG1lc3NhZ2VzKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgZmlsZVBhdGg6IGZpbGVuYW1lLFxuICAgICAgICBtZXNzYWdlcyxcbiAgICAgICAgZXJyb3JDb3VudDogc3RhdHMuZXJyb3JDb3VudCxcbiAgICAgICAgd2FybmluZ0NvdW50OiBzdGF0cy53YXJuaW5nQ291bnRcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ZpbGUoZmlsZW5hbWUsIGxpbnRlciwgY29uZmlnSGVscGVyKSB7XG4gICAgY29uc3QgdGV4dCA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoZmlsZW5hbWUpLCAndXRmOCcpLFxuICAgICAgICByZXN1bHQgPSBwcm9jZXNzVGV4dCh0ZXh0LCBmaWxlbmFtZSwgbGludGVyLCBjb25maWdIZWxwZXIpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcblxufVxuXG5jbGFzcyBDTElFbmdpbmUge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgICAgICAgeyBjd2Q6IHByb2Nlc3MuY3dkKCkgfSxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmxpbnRlciA9IG5ldyBMaW50ZXIoKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBuZXcgQ29uZmlnKHRoaXMub3B0aW9ucywgdGhpcy5saW50ZXIpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVPbkZpbGVzKHBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXSxcbiAgICAgICAgICAgIGNvbmZpZ0hlbHBlciA9IHRoaXMuY29uZmlnO1xuXG4gICAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVPbkZpbGUoZmlsZW5hbWUsIGxpbnRlcikge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc0ZpbGUoZmlsZW5hbWUsIGxpbnRlciwgY29uZmlnSGVscGVyKTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0dGVybnMuZm9yRWFjaChmaWxlbmFtZSA9PiB7XG4gICAgICAgICAgICBleGVjdXRlT25GaWxlKGZpbGVuYW1lLCB0aGlzLmxpbnRlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHN0YXRzID0gY2FsY3VsYXRlU3RhdHNQZXJSdW4ocmVzdWx0cyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3VsdHMsXG4gICAgICAgICAgICBlcnJvckNvdW50OiBzdGF0cy5lcnJvckNvdW50LFxuICAgICAgICAgICAgd2FybmluZ0NvdW50OiBzdGF0cy53YXJuaW5nQ291bnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBleGVjdXRlT25UZXh0KHRleHQsIGZpbGVuYW1lKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBjb25maWdIZWxwZXIgPSB0aGlzLmNvbmZpZztcblxuICAgICAgICBpZiAoZmlsZW5hbWUgJiYgIXBhdGguaXNBYnNvbHV0ZShmaWxlbmFtZSkpIHtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gcGF0aC5yZXNvbHZlKG9wdGlvbnMuY3dkLCBmaWxlbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRzLnB1c2gocHJvY2Vzc1RleHQodGV4dCwgZmlsZW5hbWUsIHRoaXMubGludGVyLCBjb25maWdIZWxwZXIpKTtcblxuICAgICAgICBjb25zdCBzdGF0cyA9IGNhbGN1bGF0ZVN0YXRzUGVyUnVuKHJlc3VsdHMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN1bHRzLFxuICAgICAgICAgICAgZXJyb3JDb3VudDogc3RhdHMuZXJyb3JDb3VudCxcbiAgICAgICAgICAgIHdhcm5pbmdDb3VudDogc3RhdHMud2FybmluZ0NvdW50XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZvcm1hdHRlciByZXByZXNlbnRpbmcgdGhlIGdpdmVuIGZvcm1hdCBvciBudWxsIGlmIG5vIGZvcm1hdHRlclxuICAgICAqIHdpdGggdGhlIGdpdmVuIG5hbWUgY2FuIGJlIGZvdW5kLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZm9ybWF0XSBUaGUgbmFtZSBvZiB0aGUgZm9ybWF0IHRvIGxvYWQgb3IgdGhlIHBhdGggdG8gYVxuICAgICAqICAgICAgY3VzdG9tIGZvcm1hdHRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFRoZSBmb3JtYXR0ZXIgZnVuY3Rpb24gb3IgbnVsbCBpZiBub3QgZm91bmQuXG4gICAgICovXG4gICAgZ2V0Rm9ybWF0dGVyKGZvcm1hdCkge1xuICAgICAgICAvLyBkZWZhdWx0IGlzIHN0eWxpc2hcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdzdHlsaXNoJztcblxuICAgICAgICAvLyBvbmx5IHN0cmluZ3MgYXJlIHZhbGlkIGZvcm1hdHRlcnNcbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlclBhdGggPSBgLi9mb3JtYXR0ZXJzLyR7Zm9ybWF0fWA7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiByZXF1aXJlKGZvcm1hdHRlclBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlLm1lc3NhZ2UgPSBgVGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIGZvcm1hdHRlcjogJHtmb3JtYXR0ZXJQYXRofVxcbkVycm9yOiAke2UubWVzc2FnZX1gO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQ0xJRW5naW5lLmdldEZvcm1hdHRlciA9IENMSUVuZ2luZS5wcm90b3R5cGUuZ2V0Rm9ybWF0dGVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENMSUVuZ2luZTsiLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjQuMFxuKGZ1bmN0aW9uKCl7XG4gIHZhciBwYXJzZWRUeXBlQ2hlY2ssIHR5cGVzLCB0b1N0cmluZyQgPSB7fS50b1N0cmluZztcbiAgcGFyc2VkVHlwZUNoZWNrID0gcmVxdWlyZSgndHlwZS1jaGVjaycpLnBhcnNlZFR5cGVDaGVjaztcbiAgdHlwZXMgPSB7XG4gICAgJyonOiBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucyl7XG4gICAgICBzd2l0Y2ggKHRvU3RyaW5nJC5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpIHtcbiAgICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgICAgcmV0dXJuIHR5cGVDYXN0KHZhbHVlLCB7XG4gICAgICAgICAgdHlwZTogJ0FycmF5J1xuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICAgIHJldHVybiB0eXBlQ2FzdCh2YWx1ZSwge1xuICAgICAgICAgIHR5cGU6ICdPYmplY3QnXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnSnVzdCcsXG4gICAgICAgICAgdmFsdWU6IHR5cGVzQ2FzdCh2YWx1ZSwgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0eXBlOiAnVW5kZWZpbmVkJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0eXBlOiAnTnVsbCdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdHlwZTogJ05hTidcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdHlwZTogJ0Jvb2xlYW4nXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdOdW1iZXInXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdEYXRlJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0eXBlOiAnUmVnRXhwJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0eXBlOiAnQXJyYXknXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdPYmplY3QnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdTdHJpbmcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSwgKG9wdGlvbnMuZXhwbGljaXQgPSB0cnVlLCBvcHRpb25zKSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFVuZGVmaW5lZDogZnVuY3Rpb24oaXQpe1xuICAgICAgaWYgKGl0ID09PSAndW5kZWZpbmVkJyB8fCBpdCA9PT0gdm9pZCA4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ0p1c3QnLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDhcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ05vdGhpbmcnXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICBOdWxsOiBmdW5jdGlvbihpdCl7XG4gICAgICBpZiAoaXQgPT09ICdudWxsJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdKdXN0JyxcbiAgICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnTm90aGluZydcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuICAgIE5hTjogZnVuY3Rpb24oaXQpe1xuICAgICAgaWYgKGl0ID09PSAnTmFOJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdKdXN0JyxcbiAgICAgICAgICB2YWx1ZTogTmFOXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdOb3RoaW5nJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgQm9vbGVhbjogZnVuY3Rpb24oaXQpe1xuICAgICAgaWYgKGl0ID09PSAndHJ1ZScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnSnVzdCcsXG4gICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoaXQgPT09ICdmYWxzZScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnSnVzdCcsXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdOb3RoaW5nJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgTnVtYmVyOiBmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnSnVzdCcsXG4gICAgICAgIHZhbHVlOiAraXRcbiAgICAgIH07XG4gICAgfSxcbiAgICBJbnQ6IGZ1bmN0aW9uKGl0KXtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdKdXN0JyxcbiAgICAgICAgdmFsdWU6ICtpdFxuICAgICAgfTtcbiAgICB9LFxuICAgIEZsb2F0OiBmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnSnVzdCcsXG4gICAgICAgIHZhbHVlOiAraXRcbiAgICAgIH07XG4gICAgfSxcbiAgICBEYXRlOiBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucyl7XG4gICAgICB2YXIgdGhhdDtcbiAgICAgIGlmICh0aGF0ID0gL15cXCMoW1xcc1xcU10qKVxcIyQvLmV4ZWModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ0p1c3QnLFxuICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgrdGhhdFsxXSB8fCB0aGF0WzFdKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmV4cGxpY2l0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ05vdGhpbmcnXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdKdXN0JyxcbiAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoK3ZhbHVlIHx8IHZhbHVlKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgUmVnRXhwOiBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucyl7XG4gICAgICB2YXIgdGhhdDtcbiAgICAgIGlmICh0aGF0ID0gL15cXC8oW1xcc1xcU10qKVxcLyhbZ2lteV0qKSQvLmV4ZWModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ0p1c3QnLFxuICAgICAgICAgIHZhbHVlOiBuZXcgUmVnRXhwKHRoYXRbMV0sIHRoYXRbMl0pXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZXhwbGljaXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnTm90aGluZydcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ0p1c3QnLFxuICAgICAgICAgIHZhbHVlOiBuZXcgUmVnRXhwKHZhbHVlKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgQXJyYXk6IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zKXtcbiAgICAgIHJldHVybiBjYXN0QXJyYXkodmFsdWUsIHtcbiAgICAgICAgb2Y6IFt7XG4gICAgICAgICAgdHlwZTogJyonXG4gICAgICAgIH1dXG4gICAgICB9LCBvcHRpb25zKTtcbiAgICB9LFxuICAgIE9iamVjdDogZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpe1xuICAgICAgcmV0dXJuIGNhc3RGaWVsZHModmFsdWUsIHtcbiAgICAgICAgb2Y6IHt9XG4gICAgICB9LCBvcHRpb25zKTtcbiAgICB9LFxuICAgIFN0cmluZzogZnVuY3Rpb24oaXQpe1xuICAgICAgdmFyIHRoYXQ7XG4gICAgICBpZiAodG9TdHJpbmckLmNhbGwoaXQpLnNsaWNlKDgsIC0xKSAhPT0gJ1N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnTm90aGluZydcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGF0ID0gaXQubWF0Y2goL14nKFtcXHNcXFNdKiknJC8pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ0p1c3QnLFxuICAgICAgICAgIHZhbHVlOiB0aGF0WzFdLnJlcGxhY2UoL1xcXFwnL2csIFwiJ1wiKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmICh0aGF0ID0gaXQubWF0Y2goL15cIihbXFxzXFxTXSopXCIkLykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnSnVzdCcsXG4gICAgICAgICAgdmFsdWU6IHRoYXRbMV0ucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdKdXN0JyxcbiAgICAgICAgICB2YWx1ZTogaXRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGNhc3RBcnJheShub2RlLCB0eXBlLCBvcHRpb25zKXtcbiAgICB2YXIgdHlwZU9mLCBlbGVtZW50O1xuICAgIGlmICh0b1N0cmluZyQuY2FsbChub2RlKS5zbGljZSg4LCAtMSkgIT09ICdBcnJheScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdOb3RoaW5nJ1xuICAgICAgfTtcbiAgICB9XG4gICAgdHlwZU9mID0gdHlwZS5vZjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0p1c3QnLFxuICAgICAgdmFsdWU6IChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgaSQsIHJlZiQsIGxlbiQsIHJlc3VsdHMkID0gW107XG4gICAgICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSBub2RlKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICAgIGVsZW1lbnQgPSByZWYkW2kkXTtcbiAgICAgICAgICByZXN1bHRzJC5wdXNoKHR5cGVzQ2FzdChlbGVtZW50LCB0eXBlT2YsIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cyQ7XG4gICAgICB9KCkpXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjYXN0VHVwbGUobm9kZSwgdHlwZSwgb3B0aW9ucyl7XG4gICAgdmFyIHJlc3VsdCwgaSwgaSQsIHJlZiQsIGxlbiQsIHR5cGVzLCBjYXN0O1xuICAgIGlmICh0b1N0cmluZyQuY2FsbChub2RlKS5zbGljZSg4LCAtMSkgIT09ICdBcnJheScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdOb3RoaW5nJ1xuICAgICAgfTtcbiAgICB9XG4gICAgcmVzdWx0ID0gW107XG4gICAgaSA9IDA7XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHR5cGUub2YpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB0eXBlcyA9IHJlZiRbaSRdO1xuICAgICAgY2FzdCA9IHR5cGVzQ2FzdChub2RlW2ldLCB0eXBlcywgb3B0aW9ucyk7XG4gICAgICBpZiAodG9TdHJpbmckLmNhbGwoY2FzdCkuc2xpY2UoOCwgLTEpICE9PSAnVW5kZWZpbmVkJykge1xuICAgICAgICByZXN1bHQucHVzaChjYXN0KTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgaWYgKG5vZGUubGVuZ3RoIDw9IGkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdKdXN0JyxcbiAgICAgICAgdmFsdWU6IHJlc3VsdFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ05vdGhpbmcnXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjYXN0RmllbGRzKG5vZGUsIHR5cGUsIG9wdGlvbnMpe1xuICAgIHZhciB0eXBlT2YsIGtleSwgdmFsdWU7XG4gICAgaWYgKHRvU3RyaW5nJC5jYWxsKG5vZGUpLnNsaWNlKDgsIC0xKSAhPT0gJ09iamVjdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdOb3RoaW5nJ1xuICAgICAgfTtcbiAgICB9XG4gICAgdHlwZU9mID0gdHlwZS5vZjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0p1c3QnLFxuICAgICAgdmFsdWU6IChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgcmVmJCwgcmVzdWx0T2JqJCA9IHt9O1xuICAgICAgICBmb3IgKGtleSBpbiByZWYkID0gbm9kZSkge1xuICAgICAgICAgIHZhbHVlID0gcmVmJFtrZXldO1xuICAgICAgICAgIHJlc3VsdE9iaiRbdHlwZXNDYXN0KGtleSwgW3tcbiAgICAgICAgICAgIHR5cGU6ICdTdHJpbmcnXG4gICAgICAgICAgfV0sIG9wdGlvbnMpXSA9IHR5cGVzQ2FzdCh2YWx1ZSwgdHlwZU9mW2tleV0gfHwgW3tcbiAgICAgICAgICAgIHR5cGU6ICcqJ1xuICAgICAgICAgIH1dLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0T2JqJDtcbiAgICAgIH0oKSlcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHR5cGVDYXN0KG5vZGUsIHR5cGVPYmosIG9wdGlvbnMpe1xuICAgIHZhciB0eXBlLCBzdHJ1Y3R1cmUsIGNhc3RGdW5jLCByZWYkO1xuICAgIHR5cGUgPSB0eXBlT2JqLnR5cGUsIHN0cnVjdHVyZSA9IHR5cGVPYmouc3RydWN0dXJlO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICBjYXN0RnVuYyA9ICgocmVmJCA9IG9wdGlvbnMuY3VzdG9tVHlwZXNbdHlwZV0pICE9IG51bGwgPyByZWYkLmNhc3QgOiB2b2lkIDgpIHx8IHR5cGVzW3R5cGVdO1xuICAgICAgaWYgKCFjYXN0RnVuYykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlIG5vdCBkZWZpbmVkOiBcIiArIHR5cGUgKyBcIi5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FzdEZ1bmMobm9kZSwgb3B0aW9ucywgdHlwZXNDYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChzdHJ1Y3R1cmUpIHtcbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgcmV0dXJuIGNhc3RBcnJheShub2RlLCB0eXBlT2JqLCBvcHRpb25zKTtcbiAgICAgIGNhc2UgJ3R1cGxlJzpcbiAgICAgICAgcmV0dXJuIGNhc3RUdXBsZShub2RlLCB0eXBlT2JqLCBvcHRpb25zKTtcbiAgICAgIGNhc2UgJ2ZpZWxkcyc6XG4gICAgICAgIHJldHVybiBjYXN0RmllbGRzKG5vZGUsIHR5cGVPYmosIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0eXBlc0Nhc3Qobm9kZSwgdHlwZXMsIG9wdGlvbnMpe1xuICAgIHZhciBpJCwgbGVuJCwgdHlwZSwgcmVmJCwgdmFsdWVUeXBlLCB2YWx1ZTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IHR5cGVzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB0eXBlID0gdHlwZXNbaSRdO1xuICAgICAgcmVmJCA9IHR5cGVDYXN0KG5vZGUsIHR5cGUsIG9wdGlvbnMpLCB2YWx1ZVR5cGUgPSByZWYkLnR5cGUsIHZhbHVlID0gcmVmJC52YWx1ZTtcbiAgICAgIGlmICh2YWx1ZVR5cGUgPT09ICdOb3RoaW5nJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZWRUeXBlQ2hlY2soW3R5cGVdLCB2YWx1ZSwge1xuICAgICAgICBjdXN0b21UeXBlczogb3B0aW9ucy5jdXN0b21UeXBlc1xuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSBcIiArIEpTT04uc3RyaW5naWZ5KG5vZGUpICsgXCIgZG9lcyBub3QgdHlwZSBjaGVjayBhZ2FpbnN0IFwiICsgSlNPTi5zdHJpbmdpZnkodHlwZXMpICsgXCIuXCIpO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZXNDYXN0O1xufSkuY2FsbCh0aGlzKTtcbiIsIi8vIEdlbmVyYXRlZCBieSBMaXZlU2NyaXB0IDEuNC4wXG4oZnVuY3Rpb24oKXtcbiAgdmFyIHJlamVjdCwgc3BlY2lhbCwgdG9rZW5SZWdleDtcbiAgcmVqZWN0ID0gcmVxdWlyZSgncHJlbHVkZS1scycpLnJlamVjdDtcbiAgZnVuY3Rpb24gY29uc3VtZU9wKHRva2Vucywgb3Ape1xuICAgIGlmICh0b2tlbnNbMF0gPT09IG9wKSB7XG4gICAgICByZXR1cm4gdG9rZW5zLnNoaWZ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkICdcIiArIG9wICsgXCInLCBidXQgZ290ICdcIiArIHRva2Vuc1swXSArIFwiJyBpbnN0ZWFkIGluIFwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW5zKSArIFwiLlwiKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVDb25zdW1lT3AodG9rZW5zLCBvcCl7XG4gICAgaWYgKHRva2Vuc1swXSA9PT0gb3ApIHtcbiAgICAgIHJldHVybiB0b2tlbnMuc2hpZnQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZUxpc3QodG9rZW5zLCBhcmckLCBoYXNEZWxpbWl0ZXJzKXtcbiAgICB2YXIgb3BlbiwgY2xvc2UsIHJlc3VsdCwgdW50aWxUZXN0O1xuICAgIG9wZW4gPSBhcmckWzBdLCBjbG9zZSA9IGFyZyRbMV07XG4gICAgaWYgKGhhc0RlbGltaXRlcnMpIHtcbiAgICAgIGNvbnN1bWVPcCh0b2tlbnMsIG9wZW4pO1xuICAgIH1cbiAgICByZXN1bHQgPSBbXTtcbiAgICB1bnRpbFRlc3QgPSBcIixcIiArIChoYXNEZWxpbWl0ZXJzID8gY2xvc2UgOiAnJyk7XG4gICAgd2hpbGUgKHRva2Vucy5sZW5ndGggJiYgKGhhc0RlbGltaXRlcnMgJiYgdG9rZW5zWzBdICE9PSBjbG9zZSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGNvbnN1bWVFbGVtZW50KHRva2VucywgdW50aWxUZXN0KSk7XG4gICAgICBtYXliZUNvbnN1bWVPcCh0b2tlbnMsICcsJyk7XG4gICAgfVxuICAgIGlmIChoYXNEZWxpbWl0ZXJzKSB7XG4gICAgICBjb25zdW1lT3AodG9rZW5zLCBjbG9zZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZUFycmF5KHRva2VucywgaGFzRGVsaW1pdGVycyl7XG4gICAgcmV0dXJuIGNvbnN1bWVMaXN0KHRva2VucywgWydbJywgJ10nXSwgaGFzRGVsaW1pdGVycyk7XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZVR1cGxlKHRva2VucywgaGFzRGVsaW1pdGVycyl7XG4gICAgcmV0dXJuIGNvbnN1bWVMaXN0KHRva2VucywgWycoJywgJyknXSwgaGFzRGVsaW1pdGVycyk7XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZUZpZWxkcyh0b2tlbnMsIGhhc0RlbGltaXRlcnMpe1xuICAgIHZhciByZXN1bHQsIHVudGlsVGVzdCwga2V5O1xuICAgIGlmIChoYXNEZWxpbWl0ZXJzKSB7XG4gICAgICBjb25zdW1lT3AodG9rZW5zLCAneycpO1xuICAgIH1cbiAgICByZXN1bHQgPSB7fTtcbiAgICB1bnRpbFRlc3QgPSBcIixcIiArIChoYXNEZWxpbWl0ZXJzID8gJ30nIDogJycpO1xuICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoICYmICghaGFzRGVsaW1pdGVycyB8fCB0b2tlbnNbMF0gIT09ICd9JykpIHtcbiAgICAgIGtleSA9IGNvbnN1bWVWYWx1ZSh0b2tlbnMsICc6Jyk7XG4gICAgICBjb25zdW1lT3AodG9rZW5zLCAnOicpO1xuICAgICAgcmVzdWx0W2tleV0gPSBjb25zdW1lRWxlbWVudCh0b2tlbnMsIHVudGlsVGVzdCk7XG4gICAgICBtYXliZUNvbnN1bWVPcCh0b2tlbnMsICcsJyk7XG4gICAgfVxuICAgIGlmIChoYXNEZWxpbWl0ZXJzKSB7XG4gICAgICBjb25zdW1lT3AodG9rZW5zLCAnfScpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGZ1bmN0aW9uIGNvbnN1bWVWYWx1ZSh0b2tlbnMsIHVudGlsVGVzdCl7XG4gICAgdmFyIG91dDtcbiAgICB1bnRpbFRlc3QgPT0gbnVsbCAmJiAodW50aWxUZXN0ID0gJycpO1xuICAgIG91dCA9ICcnO1xuICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoICYmIC0xID09PSB1bnRpbFRlc3QuaW5kZXhPZih0b2tlbnNbMF0pKSB7XG4gICAgICBvdXQgKz0gdG9rZW5zLnNoaWZ0KCk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZUVsZW1lbnQodG9rZW5zLCB1bnRpbFRlc3Qpe1xuICAgIHN3aXRjaCAodG9rZW5zWzBdKSB7XG4gICAgY2FzZSAnWyc6XG4gICAgICByZXR1cm4gY29uc3VtZUFycmF5KHRva2VucywgdHJ1ZSk7XG4gICAgY2FzZSAnKCc6XG4gICAgICByZXR1cm4gY29uc3VtZVR1cGxlKHRva2VucywgdHJ1ZSk7XG4gICAgY2FzZSAneyc6XG4gICAgICByZXR1cm4gY29uc3VtZUZpZWxkcyh0b2tlbnMsIHRydWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY29uc3VtZVZhbHVlKHRva2VucywgdW50aWxUZXN0KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZVRvcExldmVsKHRva2VucywgdHlwZXMsIG9wdGlvbnMpe1xuICAgIHZhciByZWYkLCB0eXBlLCBzdHJ1Y3R1cmUsIG9yaWdUb2tlbnMsIHJlc3VsdCwgZmluYWxSZXN1bHQsIHgkLCB5JDtcbiAgICByZWYkID0gdHlwZXNbMF0sIHR5cGUgPSByZWYkLnR5cGUsIHN0cnVjdHVyZSA9IHJlZiQuc3RydWN0dXJlO1xuICAgIG9yaWdUb2tlbnMgPSB0b2tlbnMuY29uY2F0KCk7XG4gICAgaWYgKCFvcHRpb25zLmV4cGxpY2l0ICYmIHR5cGVzLmxlbmd0aCA9PT0gMSAmJiAoKCF0eXBlICYmIHN0cnVjdHVyZSkgfHwgKHR5cGUgPT09ICdBcnJheScgfHwgdHlwZSA9PT0gJ09iamVjdCcpKSkge1xuICAgICAgcmVzdWx0ID0gc3RydWN0dXJlID09PSAnYXJyYXknIHx8IHR5cGUgPT09ICdBcnJheSdcbiAgICAgICAgPyBjb25zdW1lQXJyYXkodG9rZW5zLCB0b2tlbnNbMF0gPT09ICdbJylcbiAgICAgICAgOiBzdHJ1Y3R1cmUgPT09ICd0dXBsZSdcbiAgICAgICAgICA/IGNvbnN1bWVUdXBsZSh0b2tlbnMsIHRva2Vuc1swXSA9PT0gJygnKVxuICAgICAgICAgIDogY29uc3VtZUZpZWxkcyh0b2tlbnMsIHRva2Vuc1swXSA9PT0gJ3snKTtcbiAgICAgIGZpbmFsUmVzdWx0ID0gdG9rZW5zLmxlbmd0aCA/IGNvbnN1bWVFbGVtZW50KHN0cnVjdHVyZSA9PT0gJ2FycmF5JyB8fCB0eXBlID09PSAnQXJyYXknXG4gICAgICAgID8gKHgkID0gb3JpZ1Rva2VucywgeCQudW5zaGlmdCgnWycpLCB4JC5wdXNoKCddJyksIHgkKVxuICAgICAgICA6ICh5JCA9IG9yaWdUb2tlbnMsIHkkLnVuc2hpZnQoJygnKSwgeSQucHVzaCgnKScpLCB5JCkpIDogcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaW5hbFJlc3VsdCA9IGNvbnN1bWVFbGVtZW50KHRva2Vucyk7XG4gICAgfVxuICAgIHJldHVybiBmaW5hbFJlc3VsdDtcbiAgfVxuICBzcGVjaWFsID0gL1xcW1xcXVxcKFxcKX17OiwvLnNvdXJjZTtcbiAgdG9rZW5SZWdleCA9IFJlZ0V4cCgnKFwiKD86XFxcXFxcXFxcInxbXlwiXSkqXCIpfChcXCcoPzpcXFxcXFxcXFxcJ3xbXlxcJ10pKlxcJyl8KC8oPzpcXFxcXFxcXC98W14vXSkqL1thLXpBLVpdKil8KCMuKiMpfChbJyArIHNwZWNpYWwgKyAnXSl8KFteXFxcXHMnICsgc3BlY2lhbCArICddKD86XFxcXHMqW15cXFxccycgKyBzcGVjaWFsICsgJ10rKSopfFxcXFxzKicpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHR5cGVzLCBzdHJpbmcsIG9wdGlvbnMpe1xuICAgIHZhciB0b2tlbnMsIG5vZGU7XG4gICAgb3B0aW9ucyA9PSBudWxsICYmIChvcHRpb25zID0ge30pO1xuICAgIGlmICghb3B0aW9ucy5leHBsaWNpdCAmJiB0eXBlcy5sZW5ndGggPT09IDEgJiYgdHlwZXNbMF0udHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICAgIHJldHVybiBcIidcIiArIHN0cmluZy5yZXBsYWNlKC9cXFxcJy9nLCBcIlxcXFxcXFxcJ1wiKSArIFwiJ1wiO1xuICAgIH1cbiAgICB0b2tlbnMgPSByZWplY3Qobm90JCwgc3RyaW5nLnNwbGl0KHRva2VuUmVnZXgpKTtcbiAgICBub2RlID0gY29uc3VtZVRvcExldmVsKHRva2VucywgdHlwZXMsIG9wdGlvbnMpO1xuICAgIGlmICghbm9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgcGFyc2luZyAnXCIgKyBzdHJpbmcgKyBcIicuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcbiAgZnVuY3Rpb24gbm90JCh4KXsgcmV0dXJuICF4OyB9XG59KS5jYWxsKHRoaXMpO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS40LjBcbihmdW5jdGlvbigpe1xuICB2YXIgcGFyc2VTdHJpbmcsIGNhc3QsIHBhcnNlVHlwZSwgVkVSU0lPTiwgcGFyc2VkVHlwZVBhcnNlLCBwYXJzZTtcbiAgcGFyc2VTdHJpbmcgPSByZXF1aXJlKCcuL3BhcnNlLXN0cmluZycpO1xuICBjYXN0ID0gcmVxdWlyZSgnLi9jYXN0Jyk7XG4gIHBhcnNlVHlwZSA9IHJlcXVpcmUoJ3R5cGUtY2hlY2snKS5wYXJzZVR5cGU7XG4gIFZFUlNJT04gPSAnMC4zLjAnO1xuICBwYXJzZWRUeXBlUGFyc2UgPSBmdW5jdGlvbihwYXJzZWRUeXBlLCBzdHJpbmcsIG9wdGlvbnMpe1xuICAgIG9wdGlvbnMgPT0gbnVsbCAmJiAob3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zLmV4cGxpY2l0ID09IG51bGwgJiYgKG9wdGlvbnMuZXhwbGljaXQgPSBmYWxzZSk7XG4gICAgb3B0aW9ucy5jdXN0b21UeXBlcyA9PSBudWxsICYmIChvcHRpb25zLmN1c3RvbVR5cGVzID0ge30pO1xuICAgIHJldHVybiBjYXN0KHBhcnNlU3RyaW5nKHBhcnNlZFR5cGUsIHN0cmluZywgb3B0aW9ucyksIHBhcnNlZFR5cGUsIG9wdGlvbnMpO1xuICB9O1xuICBwYXJzZSA9IGZ1bmN0aW9uKHR5cGUsIHN0cmluZywgb3B0aW9ucyl7XG4gICAgcmV0dXJuIHBhcnNlZFR5cGVQYXJzZShwYXJzZVR5cGUodHlwZSksIHN0cmluZywgb3B0aW9ucyk7XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFZFUlNJT046IFZFUlNJT04sXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlZFR5cGVQYXJzZTogcGFyc2VkVHlwZVBhcnNlXG4gIH07XG59KS5jYWxsKHRoaXMpO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS40LjBcbihmdW5jdGlvbigpe1xuICB2YXIgcmVmJCwgYW55LCBhbGwsIGlzSXROYU4sIHR5cGVzLCBkZWZhdWx0VHlwZSwgY3VzdG9tVHlwZXMsIHRvU3RyaW5nJCA9IHt9LnRvU3RyaW5nO1xuICByZWYkID0gcmVxdWlyZSgncHJlbHVkZS1scycpLCBhbnkgPSByZWYkLmFueSwgYWxsID0gcmVmJC5hbGwsIGlzSXROYU4gPSByZWYkLmlzSXROYU47XG4gIHR5cGVzID0ge1xuICAgIE51bWJlcjoge1xuICAgICAgdHlwZU9mOiAnTnVtYmVyJyxcbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbihpdCl7XG4gICAgICAgIHJldHVybiAhaXNJdE5hTihpdCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBOYU46IHtcbiAgICAgIHR5cGVPZjogJ051bWJlcicsXG4gICAgICB2YWxpZGF0ZTogaXNJdE5hTlxuICAgIH0sXG4gICAgSW50OiB7XG4gICAgICB0eXBlT2Y6ICdOdW1iZXInLFxuICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgcmV0dXJuICFpc0l0TmFOKGl0KSAmJiBpdCAlIDEgPT09IDA7XG4gICAgICB9XG4gICAgfSxcbiAgICBGbG9hdDoge1xuICAgICAgdHlwZU9mOiAnTnVtYmVyJyxcbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbihpdCl7XG4gICAgICAgIHJldHVybiAhaXNJdE5hTihpdCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBEYXRlOiB7XG4gICAgICB0eXBlT2Y6ICdEYXRlJyxcbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbihpdCl7XG4gICAgICAgIHJldHVybiAhaXNJdE5hTihpdC5nZXRUaW1lKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZGVmYXVsdFR5cGUgPSB7XG4gICAgYXJyYXk6ICdBcnJheScsXG4gICAgdHVwbGU6ICdBcnJheSdcbiAgfTtcbiAgZnVuY3Rpb24gY2hlY2tBcnJheShpbnB1dCwgdHlwZSl7XG4gICAgcmV0dXJuIGFsbChmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4gY2hlY2tNdWx0aXBsZShpdCwgdHlwZS5vZik7XG4gICAgfSwgaW5wdXQpO1xuICB9XG4gIGZ1bmN0aW9uIGNoZWNrVHVwbGUoaW5wdXQsIHR5cGUpe1xuICAgIHZhciBpLCBpJCwgcmVmJCwgbGVuJCwgdHlwZXM7XG4gICAgaSA9IDA7XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHR5cGUub2YpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB0eXBlcyA9IHJlZiRbaSRdO1xuICAgICAgaWYgKCFjaGVja011bHRpcGxlKGlucHV0W2ldLCB0eXBlcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQubGVuZ3RoIDw9IGk7XG4gIH1cbiAgZnVuY3Rpb24gY2hlY2tGaWVsZHMoaW5wdXQsIHR5cGUpe1xuICAgIHZhciBpbnB1dEtleXMsIG51bUlucHV0S2V5cywgaywgbnVtT2ZLZXlzLCBrZXksIHJlZiQsIHR5cGVzO1xuICAgIGlucHV0S2V5cyA9IHt9O1xuICAgIG51bUlucHV0S2V5cyA9IDA7XG4gICAgZm9yIChrIGluIGlucHV0KSB7XG4gICAgICBpbnB1dEtleXNba10gPSB0cnVlO1xuICAgICAgbnVtSW5wdXRLZXlzKys7XG4gICAgfVxuICAgIG51bU9mS2V5cyA9IDA7XG4gICAgZm9yIChrZXkgaW4gcmVmJCA9IHR5cGUub2YpIHtcbiAgICAgIHR5cGVzID0gcmVmJFtrZXldO1xuICAgICAgaWYgKCFjaGVja011bHRpcGxlKGlucHV0W2tleV0sIHR5cGVzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaW5wdXRLZXlzW2tleV0pIHtcbiAgICAgICAgbnVtT2ZLZXlzKys7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0eXBlLnN1YnNldCB8fCBudW1JbnB1dEtleXMgPT09IG51bU9mS2V5cztcbiAgfVxuICBmdW5jdGlvbiBjaGVja1N0cnVjdHVyZShpbnB1dCwgdHlwZSl7XG4gICAgaWYgKCEoaW5wdXQgaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN3aXRjaCAodHlwZS5zdHJ1Y3R1cmUpIHtcbiAgICBjYXNlICdmaWVsZHMnOlxuICAgICAgcmV0dXJuIGNoZWNrRmllbGRzKGlucHV0LCB0eXBlKTtcbiAgICBjYXNlICdhcnJheSc6XG4gICAgICByZXR1cm4gY2hlY2tBcnJheShpbnB1dCwgdHlwZSk7XG4gICAgY2FzZSAndHVwbGUnOlxuICAgICAgcmV0dXJuIGNoZWNrVHVwbGUoaW5wdXQsIHR5cGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjaGVjayhpbnB1dCwgdHlwZU9iail7XG4gICAgdmFyIHR5cGUsIHN0cnVjdHVyZSwgc2V0dGluZywgdGhhdDtcbiAgICB0eXBlID0gdHlwZU9iai50eXBlLCBzdHJ1Y3R1cmUgPSB0eXBlT2JqLnN0cnVjdHVyZTtcbiAgICBpZiAodHlwZSkge1xuICAgICAgaWYgKHR5cGUgPT09ICcqJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNldHRpbmcgPSBjdXN0b21UeXBlc1t0eXBlXSB8fCB0eXBlc1t0eXBlXTtcbiAgICAgIGlmIChzZXR0aW5nKSB7XG4gICAgICAgIHJldHVybiBzZXR0aW5nLnR5cGVPZiA9PT0gdG9TdHJpbmckLmNhbGwoaW5wdXQpLnNsaWNlKDgsIC0xKSAmJiBzZXR0aW5nLnZhbGlkYXRlKGlucHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlID09PSB0b1N0cmluZyQuY2FsbChpbnB1dCkuc2xpY2UoOCwgLTEpICYmICghc3RydWN0dXJlIHx8IGNoZWNrU3RydWN0dXJlKGlucHV0LCB0eXBlT2JqKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdHJ1Y3R1cmUpIHtcbiAgICAgIGlmICh0aGF0ID0gZGVmYXVsdFR5cGVbc3RydWN0dXJlXSkge1xuICAgICAgICBpZiAodGhhdCAhPT0gdG9TdHJpbmckLmNhbGwoaW5wdXQpLnNsaWNlKDgsIC0xKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNoZWNrU3RydWN0dXJlKGlucHV0LCB0eXBlT2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdHlwZSBkZWZpbmVkLiBJbnB1dDogXCIgKyBpbnB1dCArIFwiLlwiKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2hlY2tNdWx0aXBsZShpbnB1dCwgdHlwZXMpe1xuICAgIGlmICh0b1N0cmluZyQuY2FsbCh0eXBlcykuc2xpY2UoOCwgLTEpICE9PSAnQXJyYXknKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlcyBtdXN0IGJlIGluIGFuIGFycmF5LiBJbnB1dDogXCIgKyBpbnB1dCArIFwiLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGFueShmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4gY2hlY2soaW5wdXQsIGl0KTtcbiAgICB9LCB0eXBlcyk7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJzZWRUeXBlLCBpbnB1dCwgb3B0aW9ucyl7XG4gICAgb3B0aW9ucyA9PSBudWxsICYmIChvcHRpb25zID0ge30pO1xuICAgIGN1c3RvbVR5cGVzID0gb3B0aW9ucy5jdXN0b21UeXBlcyB8fCB7fTtcbiAgICByZXR1cm4gY2hlY2tNdWx0aXBsZShpbnB1dCwgcGFyc2VkVHlwZSk7XG4gIH07XG59KS5jYWxsKHRoaXMpO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS40LjBcbihmdW5jdGlvbigpe1xuICB2YXIgaWRlbnRpZmllclJlZ2V4LCB0b2tlblJlZ2V4O1xuICBpZGVudGlmaWVyUmVnZXggPSAvW1xcJFxcd10rLztcbiAgZnVuY3Rpb24gcGVlayh0b2tlbnMpe1xuICAgIHZhciB0b2tlbjtcbiAgICB0b2tlbiA9IHRva2Vuc1swXTtcbiAgICBpZiAodG9rZW4gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG4gIGZ1bmN0aW9uIGNvbnN1bWVJZGVudCh0b2tlbnMpe1xuICAgIHZhciB0b2tlbjtcbiAgICB0b2tlbiA9IHBlZWsodG9rZW5zKTtcbiAgICBpZiAoIWlkZW50aWZpZXJSZWdleC50ZXN0KHRva2VuKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgdGV4dCwgZ290ICdcIiArIHRva2VuICsgXCInIGluc3RlYWQuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdG9rZW5zLnNoaWZ0KCk7XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZU9wKHRva2Vucywgb3Ape1xuICAgIHZhciB0b2tlbjtcbiAgICB0b2tlbiA9IHBlZWsodG9rZW5zKTtcbiAgICBpZiAodG9rZW4gIT09IG9wKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCAnXCIgKyBvcCArIFwiJywgZ290ICdcIiArIHRva2VuICsgXCInIGluc3RlYWQuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdG9rZW5zLnNoaWZ0KCk7XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVDb25zdW1lT3AodG9rZW5zLCBvcCl7XG4gICAgdmFyIHRva2VuO1xuICAgIHRva2VuID0gdG9rZW5zWzBdO1xuICAgIGlmICh0b2tlbiA9PT0gb3ApIHtcbiAgICAgIHJldHVybiB0b2tlbnMuc2hpZnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNvbnN1bWVBcnJheSh0b2tlbnMpe1xuICAgIHZhciB0eXBlcztcbiAgICBjb25zdW1lT3AodG9rZW5zLCAnWycpO1xuICAgIGlmIChwZWVrKHRva2VucykgPT09ICddJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBzcGVjaWZ5IHR5cGUgb2YgQXJyYXkgLSBlZy4gW1R5cGVdLCBnb3QgW10gaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIHR5cGVzID0gY29uc3VtZVR5cGVzKHRva2Vucyk7XG4gICAgY29uc3VtZU9wKHRva2VucywgJ10nKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RydWN0dXJlOiAnYXJyYXknLFxuICAgICAgb2Y6IHR5cGVzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjb25zdW1lVHVwbGUodG9rZW5zKXtcbiAgICB2YXIgY29tcG9uZW50cztcbiAgICBjb21wb25lbnRzID0gW107XG4gICAgY29uc3VtZU9wKHRva2VucywgJygnKTtcbiAgICBpZiAocGVlayh0b2tlbnMpID09PSAnKScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlR1cGxlIG11c3QgYmUgb2YgYXQgbGVhc3QgbGVuZ3RoIDEgLSBlZy4gKFR5cGUpLCBnb3QgKCkgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGZvciAoOzspIHtcbiAgICAgIGNvbXBvbmVudHMucHVzaChjb25zdW1lVHlwZXModG9rZW5zKSk7XG4gICAgICBtYXliZUNvbnN1bWVPcCh0b2tlbnMsICcsJyk7XG4gICAgICBpZiAoJyknID09PSBwZWVrKHRva2VucykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN1bWVPcCh0b2tlbnMsICcpJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cnVjdHVyZTogJ3R1cGxlJyxcbiAgICAgIG9mOiBjb21wb25lbnRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjb25zdW1lRmllbGRzKHRva2Vucyl7XG4gICAgdmFyIGZpZWxkcywgc3Vic2V0LCByZWYkLCBrZXksIHR5cGVzO1xuICAgIGZpZWxkcyA9IHt9O1xuICAgIGNvbnN1bWVPcCh0b2tlbnMsICd7Jyk7XG4gICAgc3Vic2V0ID0gZmFsc2U7XG4gICAgZm9yICg7Oykge1xuICAgICAgaWYgKG1heWJlQ29uc3VtZU9wKHRva2VucywgJy4uLicpKSB7XG4gICAgICAgIHN1YnNldCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVmJCA9IGNvbnN1bWVGaWVsZCh0b2tlbnMpLCBrZXkgPSByZWYkWzBdLCB0eXBlcyA9IHJlZiRbMV07XG4gICAgICBmaWVsZHNba2V5XSA9IHR5cGVzO1xuICAgICAgbWF5YmVDb25zdW1lT3AodG9rZW5zLCAnLCcpO1xuICAgICAgaWYgKCd9JyA9PT0gcGVlayh0b2tlbnMpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdW1lT3AodG9rZW5zLCAnfScpO1xuICAgIHJldHVybiB7XG4gICAgICBzdHJ1Y3R1cmU6ICdmaWVsZHMnLFxuICAgICAgb2Y6IGZpZWxkcyxcbiAgICAgIHN1YnNldDogc3Vic2V0XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjb25zdW1lRmllbGQodG9rZW5zKXtcbiAgICB2YXIga2V5LCB0eXBlcztcbiAgICBrZXkgPSBjb25zdW1lSWRlbnQodG9rZW5zKTtcbiAgICBjb25zdW1lT3AodG9rZW5zLCAnOicpO1xuICAgIHR5cGVzID0gY29uc3VtZVR5cGVzKHRva2Vucyk7XG4gICAgcmV0dXJuIFtrZXksIHR5cGVzXTtcbiAgfVxuICBmdW5jdGlvbiBtYXliZUNvbnN1bWVTdHJ1Y3R1cmUodG9rZW5zKXtcbiAgICBzd2l0Y2ggKHRva2Vuc1swXSkge1xuICAgIGNhc2UgJ1snOlxuICAgICAgcmV0dXJuIGNvbnN1bWVBcnJheSh0b2tlbnMpO1xuICAgIGNhc2UgJygnOlxuICAgICAgcmV0dXJuIGNvbnN1bWVUdXBsZSh0b2tlbnMpO1xuICAgIGNhc2UgJ3snOlxuICAgICAgcmV0dXJuIGNvbnN1bWVGaWVsZHModG9rZW5zKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY29uc3VtZVR5cGUodG9rZW5zKXtcbiAgICB2YXIgdG9rZW4sIHdpbGRjYXJkLCB0eXBlLCBzdHJ1Y3R1cmU7XG4gICAgdG9rZW4gPSBwZWVrKHRva2Vucyk7XG4gICAgd2lsZGNhcmQgPSB0b2tlbiA9PT0gJyonO1xuICAgIGlmICh3aWxkY2FyZCB8fCBpZGVudGlmaWVyUmVnZXgudGVzdCh0b2tlbikpIHtcbiAgICAgIHR5cGUgPSB3aWxkY2FyZFxuICAgICAgICA/IGNvbnN1bWVPcCh0b2tlbnMsICcqJylcbiAgICAgICAgOiBjb25zdW1lSWRlbnQodG9rZW5zKTtcbiAgICAgIHN0cnVjdHVyZSA9IG1heWJlQ29uc3VtZVN0cnVjdHVyZSh0b2tlbnMpO1xuICAgICAgaWYgKHN0cnVjdHVyZSkge1xuICAgICAgICByZXR1cm4gc3RydWN0dXJlLnR5cGUgPSB0eXBlLCBzdHJ1Y3R1cmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RydWN0dXJlID0gbWF5YmVDb25zdW1lU3RydWN0dXJlKHRva2Vucyk7XG4gICAgICBpZiAoIXN0cnVjdHVyZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGNoYXJhY3RlcjogXCIgKyB0b2tlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RydWN0dXJlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjb25zdW1lVHlwZXModG9rZW5zKXtcbiAgICB2YXIgbG9va2FoZWFkLCB0eXBlcywgdHlwZXNTb0ZhciwgdHlwZU9iaiwgdHlwZTtcbiAgICBpZiAoJzo6JyA9PT0gcGVlayh0b2tlbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBjb21tZW50IGJlZm9yZSBjb21tZW50IHNlcGFyYXRvciAnOjonIGZvdW5kLlwiKTtcbiAgICB9XG4gICAgbG9va2FoZWFkID0gdG9rZW5zWzFdO1xuICAgIGlmIChsb29rYWhlYWQgIT0gbnVsbCAmJiBsb29rYWhlYWQgPT09ICc6OicpIHtcbiAgICAgIHRva2Vucy5zaGlmdCgpO1xuICAgICAgdG9rZW5zLnNoaWZ0KCk7XG4gICAgfVxuICAgIHR5cGVzID0gW107XG4gICAgdHlwZXNTb0ZhciA9IHt9O1xuICAgIGlmICgnTWF5YmUnID09PSBwZWVrKHRva2VucykpIHtcbiAgICAgIHRva2Vucy5zaGlmdCgpO1xuICAgICAgdHlwZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnVW5kZWZpbmVkJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogJ051bGwnXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgICB0eXBlc1NvRmFyID0ge1xuICAgICAgICBVbmRlZmluZWQ6IHRydWUsXG4gICAgICAgIE51bGw6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGZvciAoOzspIHtcbiAgICAgIHR5cGVPYmogPSBjb25zdW1lVHlwZSh0b2tlbnMpLCB0eXBlID0gdHlwZU9iai50eXBlO1xuICAgICAgaWYgKCF0eXBlc1NvRmFyW3R5cGVdKSB7XG4gICAgICAgIHR5cGVzLnB1c2godHlwZU9iaik7XG4gICAgICB9XG4gICAgICB0eXBlc1NvRmFyW3R5cGVdID0gdHJ1ZTtcbiAgICAgIGlmICghbWF5YmVDb25zdW1lT3AodG9rZW5zLCAnfCcpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHlwZXM7XG4gIH1cbiAgdG9rZW5SZWdleCA9IFJlZ0V4cCgnXFxcXC5cXFxcLlxcXFwufDo6fC0+fCcgKyBpZGVudGlmaWVyUmVnZXguc291cmNlICsgJ3xcXFxcUycsICdnJyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5wdXQpe1xuICAgIHZhciB0b2tlbnMsIGU7XG4gICAgaWYgKCFpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdHlwZSBzcGVjaWZpZWQuJyk7XG4gICAgfVxuICAgIHRva2VucyA9IGlucHV0Lm1hdGNoKHRva2VuUmVnZXgpIHx8IFtdO1xuICAgIGlmIChpbiQoJy0+JywgdG9rZW5zKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRnVuY3Rpb24gdHlwZXMgYXJlIG5vdCBzdXBwb3J0ZWQuXFwgVG8gdmFsaWRhdGUgdGhhdCBzb21ldGhpbmcgaXMgYSBmdW5jdGlvbiwgeW91IG1heSB1c2UgJ0Z1bmN0aW9uJy5cIik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uc3VtZVR5cGVzKHRva2Vucyk7XG4gICAgfSBjYXRjaCAoZSQpIHtcbiAgICAgIGUgPSBlJDtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UgKyBcIiAtIFJlbWFpbmluZyB0b2tlbnM6IFwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW5zKSArIFwiIC0gSW5pdGlhbCBpbnB1dDogJ1wiICsgaW5wdXQgKyBcIidcIik7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBpbiQoeCwgeHMpe1xuICAgIHZhciBpID0gLTEsIGwgPSB4cy5sZW5ndGggPj4+IDA7XG4gICAgd2hpbGUgKCsraSA8IGwpIGlmICh4ID09PSB4c1tpXSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KS5jYWxsKHRoaXMpO1xuIiwidmFyIHdvcmR3cmFwID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RhcnQsIHN0b3AsIHBhcmFtcykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHBhcmFtcyA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IHBhcmFtcy5zdGFydDtcbiAgICAgICAgc3RvcCA9IHBhcmFtcy5zdG9wO1xuICAgIH1cbiAgICBcbiAgICBpZiAodHlwZW9mIHN0b3AgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHBhcmFtcyA9IHN0b3A7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgcGFyYW1zLnN0YXJ0O1xuICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIXN0b3ApIHtcbiAgICAgICAgc3RvcCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIFxuICAgIGlmICghcGFyYW1zKSBwYXJhbXMgPSB7fTtcbiAgICB2YXIgbW9kZSA9IHBhcmFtcy5tb2RlIHx8ICdzb2Z0JztcbiAgICB2YXIgcmUgPSBtb2RlID09PSAnaGFyZCcgPyAvXFxiLyA6IC8oXFxTK1xccyspLztcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgdmFyIGNodW5rcyA9IHRleHQudG9TdHJpbmcoKVxuICAgICAgICAgICAgLnNwbGl0KHJlKVxuICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdoYXJkJykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IHN0b3AgLSBzdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjLnB1c2goeC5zbGljZShpLCBpICsgc3RvcCAtIHN0YXJ0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBhY2MucHVzaCh4KVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9LCBbXSlcbiAgICAgICAgO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNodW5rcy5yZWR1Y2UoZnVuY3Rpb24gKGxpbmVzLCByYXdDaHVuaykge1xuICAgICAgICAgICAgaWYgKHJhd0NodW5rID09PSAnJykgcmV0dXJuIGxpbmVzO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY2h1bmsgPSByYXdDaHVuay5yZXBsYWNlKC9cXHQvZywgJyAgICAnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGkgPSBsaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKGxpbmVzW2ldLmxlbmd0aCArIGNodW5rLmxlbmd0aCA+IHN0b3ApIHtcbiAgICAgICAgICAgICAgICBsaW5lc1tpXSA9IGxpbmVzW2ldLnJlcGxhY2UoL1xccyskLywgJycpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNodW5rLnNwbGl0KC9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQXJyYXkoc3RhcnQgKyAxKS5qb2luKCcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICsgYy5yZXBsYWNlKC9eXFxzKy8sICcnKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2h1bmsubWF0Y2goL1xcbi8pKSB7XG4gICAgICAgICAgICAgICAgdmFyIHhzID0gY2h1bmsuc3BsaXQoL1xcbi8pO1xuICAgICAgICAgICAgICAgIGxpbmVzW2ldICs9IHhzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgeHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEFycmF5KHN0YXJ0ICsgMSkuam9pbignICcpXG4gICAgICAgICAgICAgICAgICAgICAgICArIGMucmVwbGFjZSgvXlxccysvLCAnJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpbmVzW2ldICs9IGNodW5rO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgICAgIH0sIFsgbmV3IEFycmF5KHN0YXJ0ICsgMSkuam9pbignICcpIF0pLmpvaW4oJ1xcbicpO1xuICAgIH07XG59O1xuXG53b3Jkd3JhcC5zb2Z0ID0gd29yZHdyYXA7XG5cbndvcmR3cmFwLmhhcmQgPSBmdW5jdGlvbiAoc3RhcnQsIHN0b3ApIHtcbiAgICByZXR1cm4gd29yZHdyYXAoc3RhcnQsIHN0b3AsIHsgbW9kZSA6ICdoYXJkJyB9KTtcbn07XG4iLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjUuMFxuKGZ1bmN0aW9uKCl7XG4gIHZhciByZWYkLCBpZCwgZmluZCwgc29ydCwgbWluLCBtYXgsIG1hcCwgdW5saW5lcywgbmFtZVRvUmF3LCBkYXNoZXJpemUsIG5hdHVyYWxKb2luLCB3b3Jkd3JhcCwgZ2V0UHJlVGV4dCwgc2V0SGVscFN0eWxlRGVmYXVsdHMsIGdlbmVyYXRlSGVscEZvck9wdGlvbiwgZ2VuZXJhdGVIZWxwO1xuICByZWYkID0gcmVxdWlyZSgncHJlbHVkZS1scycpLCBpZCA9IHJlZiQuaWQsIGZpbmQgPSByZWYkLmZpbmQsIHNvcnQgPSByZWYkLnNvcnQsIG1pbiA9IHJlZiQubWluLCBtYXggPSByZWYkLm1heCwgbWFwID0gcmVmJC5tYXAsIHVubGluZXMgPSByZWYkLnVubGluZXM7XG4gIHJlZiQgPSByZXF1aXJlKCcuL3V0aWwnKSwgbmFtZVRvUmF3ID0gcmVmJC5uYW1lVG9SYXcsIGRhc2hlcml6ZSA9IHJlZiQuZGFzaGVyaXplLCBuYXR1cmFsSm9pbiA9IHJlZiQubmF0dXJhbEpvaW47XG4gIHdvcmR3cmFwID0gcmVxdWlyZSgnd29yZHdyYXAnKTtcbiAgZ2V0UHJlVGV4dCA9IGZ1bmN0aW9uKG9wdGlvbiwgYXJnJCwgbWF4V2lkdGgpe1xuICAgIHZhciBtYWluTmFtZSwgc2hvcnROYW1lcywgcmVmJCwgbG9uZ05hbWVzLCB0eXBlLCBkZXNjcmlwdGlvbiwgYWxpYXNTZXBhcmF0b3IsIHR5cGVTZXBhcmF0b3IsIGluaXRpYWxJbmRlbnQsIG5hbWVzLCBuYW1lc1N0cmluZywgbmFtZXNTdHJpbmdMZW4sIHR5cGVTZXBhcmF0b3JTdHJpbmcsIHR5cGVTZXBhcmF0b3JTdHJpbmdMZW4sIHdyYXA7XG4gICAgbWFpbk5hbWUgPSBvcHRpb24ub3B0aW9uLCBzaG9ydE5hbWVzID0gKHJlZiQgPSBvcHRpb24uc2hvcnROYW1lcykgIT0gbnVsbFxuICAgICAgPyByZWYkXG4gICAgICA6IFtdLCBsb25nTmFtZXMgPSAocmVmJCA9IG9wdGlvbi5sb25nTmFtZXMpICE9IG51bGxcbiAgICAgID8gcmVmJFxuICAgICAgOiBbXSwgdHlwZSA9IG9wdGlvbi50eXBlLCBkZXNjcmlwdGlvbiA9IG9wdGlvbi5kZXNjcmlwdGlvbjtcbiAgICBhbGlhc1NlcGFyYXRvciA9IGFyZyQuYWxpYXNTZXBhcmF0b3IsIHR5cGVTZXBhcmF0b3IgPSBhcmckLnR5cGVTZXBhcmF0b3IsIGluaXRpYWxJbmRlbnQgPSBhcmckLmluaXRpYWxJbmRlbnQ7XG4gICAgaWYgKG9wdGlvbi5uZWdhdGVOYW1lKSB7XG4gICAgICBtYWluTmFtZSA9IFwibm8tXCIgKyBtYWluTmFtZTtcbiAgICAgIGlmIChsb25nTmFtZXMpIHtcbiAgICAgICAgbG9uZ05hbWVzID0gbWFwKGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgICByZXR1cm4gXCJuby1cIiArIGl0O1xuICAgICAgICB9LCBsb25nTmFtZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBuYW1lcyA9IG1haW5OYW1lLmxlbmd0aCA9PT0gMVxuICAgICAgPyBbbWFpbk5hbWVdLmNvbmNhdChzaG9ydE5hbWVzLCBsb25nTmFtZXMpXG4gICAgICA6IHNob3J0TmFtZXMuY29uY2F0KFttYWluTmFtZV0sIGxvbmdOYW1lcyk7XG4gICAgbmFtZXNTdHJpbmcgPSBtYXAobmFtZVRvUmF3LCBuYW1lcykuam9pbihhbGlhc1NlcGFyYXRvcik7XG4gICAgbmFtZXNTdHJpbmdMZW4gPSBuYW1lc1N0cmluZy5sZW5ndGg7XG4gICAgdHlwZVNlcGFyYXRvclN0cmluZyA9IG1haW5OYW1lID09PSAnTlVNJyA/ICc6OicgOiB0eXBlU2VwYXJhdG9yO1xuICAgIHR5cGVTZXBhcmF0b3JTdHJpbmdMZW4gPSB0eXBlU2VwYXJhdG9yU3RyaW5nLmxlbmd0aDtcbiAgICBpZiAobWF4V2lkdGggIT0gbnVsbCAmJiAhb3B0aW9uLmJvb2xlYW4gJiYgaW5pdGlhbEluZGVudCArIG5hbWVzU3RyaW5nTGVuICsgdHlwZVNlcGFyYXRvclN0cmluZ0xlbiArIHR5cGUubGVuZ3RoID4gbWF4V2lkdGgpIHtcbiAgICAgIHdyYXAgPSB3b3Jkd3JhcChpbml0aWFsSW5kZW50ICsgbmFtZXNTdHJpbmdMZW4gKyB0eXBlU2VwYXJhdG9yU3RyaW5nTGVuLCBtYXhXaWR0aCk7XG4gICAgICByZXR1cm4gbmFtZXNTdHJpbmcgKyBcIlwiICsgdHlwZVNlcGFyYXRvclN0cmluZyArIHdyYXAodHlwZSkucmVwbGFjZSgvXlxccysvLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuYW1lc1N0cmluZyArIFwiXCIgKyAob3B0aW9uLmJvb2xlYW5cbiAgICAgICAgPyAnJ1xuICAgICAgICA6IHR5cGVTZXBhcmF0b3JTdHJpbmcgKyBcIlwiICsgdHlwZSk7XG4gICAgfVxuICB9O1xuICBzZXRIZWxwU3R5bGVEZWZhdWx0cyA9IGZ1bmN0aW9uKGhlbHBTdHlsZSl7XG4gICAgaGVscFN0eWxlLmFsaWFzU2VwYXJhdG9yID09IG51bGwgJiYgKGhlbHBTdHlsZS5hbGlhc1NlcGFyYXRvciA9ICcsICcpO1xuICAgIGhlbHBTdHlsZS50eXBlU2VwYXJhdG9yID09IG51bGwgJiYgKGhlbHBTdHlsZS50eXBlU2VwYXJhdG9yID0gJyAnKTtcbiAgICBoZWxwU3R5bGUuZGVzY3JpcHRpb25TZXBhcmF0b3IgPT0gbnVsbCAmJiAoaGVscFN0eWxlLmRlc2NyaXB0aW9uU2VwYXJhdG9yID0gJyAgJyk7XG4gICAgaGVscFN0eWxlLmluaXRpYWxJbmRlbnQgPT0gbnVsbCAmJiAoaGVscFN0eWxlLmluaXRpYWxJbmRlbnQgPSAyKTtcbiAgICBoZWxwU3R5bGUuc2Vjb25kYXJ5SW5kZW50ID09IG51bGwgJiYgKGhlbHBTdHlsZS5zZWNvbmRhcnlJbmRlbnQgPSA0KTtcbiAgICBoZWxwU3R5bGUubWF4UGFkRmFjdG9yID09IG51bGwgJiYgKGhlbHBTdHlsZS5tYXhQYWRGYWN0b3IgPSAxLjUpO1xuICB9O1xuICBnZW5lcmF0ZUhlbHBGb3JPcHRpb24gPSBmdW5jdGlvbihnZXRPcHRpb24sIGFyZyQpe1xuICAgIHZhciBzdGRvdXQsIGhlbHBTdHlsZSwgcmVmJDtcbiAgICBzdGRvdXQgPSBhcmckLnN0ZG91dCwgaGVscFN0eWxlID0gKHJlZiQgPSBhcmckLmhlbHBTdHlsZSkgIT0gbnVsbFxuICAgICAgPyByZWYkXG4gICAgICA6IHt9O1xuICAgIHNldEhlbHBTdHlsZURlZmF1bHRzKGhlbHBTdHlsZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9wdGlvbk5hbWUpe1xuICAgICAgdmFyIG1heFdpZHRoLCB3cmFwLCBvcHRpb24sIGUsIHByZSwgZGVmYXVsdFN0cmluZywgcmVzdFBvc2l0aW9uYWxTdHJpbmcsIGRlc2NyaXB0aW9uLCBmdWxsRGVzY3JpcHRpb24sIHRoYXQsIHByZURlc2NyaXB0aW9uLCBkZXNjcmlwdGlvblN0cmluZywgZXhhbXBsZVN0cmluZywgZXhhbXBsZXMsIHNlcGVyYXRvcjtcbiAgICAgIG1heFdpZHRoID0gc3Rkb3V0ICE9IG51bGwgJiYgc3Rkb3V0LmlzVFRZID8gc3Rkb3V0LmNvbHVtbnMgLSAxIDogbnVsbDtcbiAgICAgIHdyYXAgPSBtYXhXaWR0aCA/IHdvcmR3cmFwKG1heFdpZHRoKSA6IGlkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW9uID0gZ2V0T3B0aW9uKGRhc2hlcml6ZShvcHRpb25OYW1lKSk7XG4gICAgICB9IGNhdGNoIChlJCkge1xuICAgICAgICBlID0gZSQ7XG4gICAgICAgIHJldHVybiBlLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgICBwcmUgPSBnZXRQcmVUZXh0KG9wdGlvbiwgaGVscFN0eWxlKTtcbiAgICAgIGRlZmF1bHRTdHJpbmcgPSBvcHRpb25bJ2RlZmF1bHQnXSAmJiAhb3B0aW9uLm5lZ2F0ZU5hbWUgPyBcIlxcbmRlZmF1bHQ6IFwiICsgb3B0aW9uWydkZWZhdWx0J10gOiAnJztcbiAgICAgIHJlc3RQb3NpdGlvbmFsU3RyaW5nID0gb3B0aW9uLnJlc3RQb3NpdGlvbmFsID8gJ0V2ZXJ5dGhpbmcgYWZ0ZXIgdGhpcyBvcHRpb24gaXMgY29uc2lkZXJlZCBhIHBvc2l0aW9uYWwgYXJndW1lbnQsIGV2ZW4gaWYgaXQgbG9va3MgbGlrZSBhbiBvcHRpb24uJyA6ICcnO1xuICAgICAgZGVzY3JpcHRpb24gPSBvcHRpb24ubG9uZ0Rlc2NyaXB0aW9uIHx8IG9wdGlvbi5kZXNjcmlwdGlvbiAmJiBzZW50ZW5jaXplKG9wdGlvbi5kZXNjcmlwdGlvbik7XG4gICAgICBmdWxsRGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbiAmJiByZXN0UG9zaXRpb25hbFN0cmluZ1xuICAgICAgICA/IGRlc2NyaXB0aW9uICsgXCIgXCIgKyByZXN0UG9zaXRpb25hbFN0cmluZ1xuICAgICAgICA6ICh0aGF0ID0gZGVzY3JpcHRpb24gfHwgcmVzdFBvc2l0aW9uYWxTdHJpbmcpID8gdGhhdCA6ICcnO1xuICAgICAgcHJlRGVzY3JpcHRpb24gPSAnZGVzY3JpcHRpb246JztcbiAgICAgIGRlc2NyaXB0aW9uU3RyaW5nID0gIWZ1bGxEZXNjcmlwdGlvblxuICAgICAgICA/ICcnXG4gICAgICAgIDogbWF4V2lkdGggJiYgZnVsbERlc2NyaXB0aW9uLmxlbmd0aCAtIDEgLSBwcmVEZXNjcmlwdGlvbi5sZW5ndGggPiBtYXhXaWR0aFxuICAgICAgICAgID8gXCJcXG5cIiArIHByZURlc2NyaXB0aW9uICsgXCJcXG5cIiArIHdyYXAoZnVsbERlc2NyaXB0aW9uKVxuICAgICAgICAgIDogXCJcXG5cIiArIHByZURlc2NyaXB0aW9uICsgXCIgXCIgKyBmdWxsRGVzY3JpcHRpb247XG4gICAgICBleGFtcGxlU3RyaW5nID0gKHRoYXQgPSBvcHRpb24uZXhhbXBsZSkgPyAoZXhhbXBsZXMgPSBbXS5jb25jYXQodGhhdCksIGV4YW1wbGVzLmxlbmd0aCA+IDFcbiAgICAgICAgPyBcIlxcbmV4YW1wbGVzOlxcblwiICsgdW5saW5lcyhleGFtcGxlcylcbiAgICAgICAgOiBcIlxcbmV4YW1wbGU6IFwiICsgZXhhbXBsZXNbMF0pIDogJyc7XG4gICAgICBzZXBlcmF0b3IgPSBkZWZhdWx0U3RyaW5nIHx8IGRlc2NyaXB0aW9uU3RyaW5nIHx8IGV4YW1wbGVTdHJpbmcgPyBcIlxcblwiICsgcmVwZWF0U3RyaW5nJCgnPScsIHByZS5sZW5ndGgpIDogJyc7XG4gICAgICByZXR1cm4gcHJlICsgXCJcIiArIHNlcGVyYXRvciArIGRlZmF1bHRTdHJpbmcgKyBkZXNjcmlwdGlvblN0cmluZyArIGV4YW1wbGVTdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgZ2VuZXJhdGVIZWxwID0gZnVuY3Rpb24oYXJnJCl7XG4gICAgdmFyIG9wdGlvbnMsIHByZXBlbmQsIGFwcGVuZCwgaGVscFN0eWxlLCByZWYkLCBzdGRvdXQsIGFsaWFzU2VwYXJhdG9yLCB0eXBlU2VwYXJhdG9yLCBkZXNjcmlwdGlvblNlcGFyYXRvciwgbWF4UGFkRmFjdG9yLCBpbml0aWFsSW5kZW50LCBzZWNvbmRhcnlJbmRlbnQ7XG4gICAgb3B0aW9ucyA9IGFyZyQub3B0aW9ucywgcHJlcGVuZCA9IGFyZyQucHJlcGVuZCwgYXBwZW5kID0gYXJnJC5hcHBlbmQsIGhlbHBTdHlsZSA9IChyZWYkID0gYXJnJC5oZWxwU3R5bGUpICE9IG51bGxcbiAgICAgID8gcmVmJFxuICAgICAgOiB7fSwgc3Rkb3V0ID0gYXJnJC5zdGRvdXQ7XG4gICAgc2V0SGVscFN0eWxlRGVmYXVsdHMoaGVscFN0eWxlKTtcbiAgICBhbGlhc1NlcGFyYXRvciA9IGhlbHBTdHlsZS5hbGlhc1NlcGFyYXRvciwgdHlwZVNlcGFyYXRvciA9IGhlbHBTdHlsZS50eXBlU2VwYXJhdG9yLCBkZXNjcmlwdGlvblNlcGFyYXRvciA9IGhlbHBTdHlsZS5kZXNjcmlwdGlvblNlcGFyYXRvciwgbWF4UGFkRmFjdG9yID0gaGVscFN0eWxlLm1heFBhZEZhY3RvciwgaW5pdGlhbEluZGVudCA9IGhlbHBTdHlsZS5pbml0aWFsSW5kZW50LCBzZWNvbmRhcnlJbmRlbnQgPSBoZWxwU3R5bGUuc2Vjb25kYXJ5SW5kZW50O1xuICAgIHJldHVybiBmdW5jdGlvbihhcmckKXtcbiAgICAgIHZhciByZWYkLCBzaG93SGlkZGVuLCBpbnRlcnBvbGF0ZSwgbWF4V2lkdGgsIG91dHB1dCwgb3V0LCBkYXRhLCBvcHRpb25Db3VudCwgdG90YWxQcmVMZW4sIHByZUxlbnMsIGkkLCBsZW4kLCBpdGVtLCB0aGF0LCBwcmUsIGRlc2NQYXJ0cywgZGVzYywgcHJlTGVuLCBzb3J0ZWRQcmVMZW5zLCBtYXhQcmVMZW4sIHByZUxlbk1lYW4sIHgsIHBhZEFtb3VudCwgZGVzY1NlcExlbiwgZnVsbFdyYXBDb3VudCwgcGFydGlhbFdyYXBDb3VudCwgZGVzY0xlbiwgdG90YWxMZW4sIGluaXRpYWxTcGFjZSwgd3JhcEFsbEZ1bGwsIGksIHdyYXA7XG4gICAgICByZWYkID0gYXJnJCAhPSBudWxsXG4gICAgICAgID8gYXJnJFxuICAgICAgICA6IHt9LCBzaG93SGlkZGVuID0gcmVmJC5zaG93SGlkZGVuLCBpbnRlcnBvbGF0ZSA9IHJlZiQuaW50ZXJwb2xhdGU7XG4gICAgICBtYXhXaWR0aCA9IHN0ZG91dCAhPSBudWxsICYmIHN0ZG91dC5pc1RUWSA/IHN0ZG91dC5jb2x1bW5zIC0gMSA6IG51bGw7XG4gICAgICBvdXRwdXQgPSBbXTtcbiAgICAgIG91dCA9IGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgcmV0dXJuIG91dHB1dC5wdXNoKGl0ICE9IG51bGwgPyBpdCA6ICcnKTtcbiAgICAgIH07XG4gICAgICBpZiAocHJlcGVuZCkge1xuICAgICAgICBvdXQoaW50ZXJwb2xhdGUgPyBpbnRlcnAocHJlcGVuZCwgaW50ZXJwb2xhdGUpIDogcHJlcGVuZCk7XG4gICAgICAgIG91dCgpO1xuICAgICAgfVxuICAgICAgZGF0YSA9IFtdO1xuICAgICAgb3B0aW9uQ291bnQgPSAwO1xuICAgICAgdG90YWxQcmVMZW4gPSAwO1xuICAgICAgcHJlTGVucyA9IFtdO1xuICAgICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IG9wdGlvbnMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICAgIGl0ZW0gPSByZWYkW2kkXTtcbiAgICAgICAgaWYgKHNob3dIaWRkZW4gfHwgIWl0ZW0uaGlkZGVuKSB7XG4gICAgICAgICAgaWYgKHRoYXQgPSBpdGVtLmhlYWRpbmcpIHtcbiAgICAgICAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHRoYXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmUgPSBnZXRQcmVUZXh0KGl0ZW0sIGhlbHBTdHlsZSwgbWF4V2lkdGgpO1xuICAgICAgICAgICAgZGVzY1BhcnRzID0gW107XG4gICAgICAgICAgICBpZiAoKHRoYXQgPSBpdGVtLmRlc2NyaXB0aW9uKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIGRlc2NQYXJ0cy5wdXNoKHRoYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoYXQgPSBpdGVtWydlbnVtJ10pIHtcbiAgICAgICAgICAgICAgZGVzY1BhcnRzLnB1c2goXCJlaXRoZXI6IFwiICsgbmF0dXJhbEpvaW4odGhhdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW1bJ2RlZmF1bHQnXSAmJiAhaXRlbS5uZWdhdGVOYW1lKSB7XG4gICAgICAgICAgICAgIGRlc2NQYXJ0cy5wdXNoKFwiZGVmYXVsdDogXCIgKyBpdGVtWydkZWZhdWx0J10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzYyA9IGRlc2NQYXJ0cy5qb2luKCcgLSAnKTtcbiAgICAgICAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdvcHRpb24nLFxuICAgICAgICAgICAgICBwcmU6IHByZSxcbiAgICAgICAgICAgICAgZGVzYzogZGVzYyxcbiAgICAgICAgICAgICAgZGVzY0xlbjogZGVzYy5sZW5ndGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJlTGVuID0gcHJlLmxlbmd0aDtcbiAgICAgICAgICAgIG9wdGlvbkNvdW50Kys7XG4gICAgICAgICAgICB0b3RhbFByZUxlbiArPSBwcmVMZW47XG4gICAgICAgICAgICBwcmVMZW5zLnB1c2gocHJlTGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNvcnRlZFByZUxlbnMgPSBzb3J0KHByZUxlbnMpO1xuICAgICAgbWF4UHJlTGVuID0gc29ydGVkUHJlTGVuc1tzb3J0ZWRQcmVMZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgcHJlTGVuTWVhbiA9IGluaXRpYWxJbmRlbnQgKyB0b3RhbFByZUxlbiAvIG9wdGlvbkNvdW50O1xuICAgICAgeCA9IG9wdGlvbkNvdW50ID4gMiA/IG1pbihwcmVMZW5NZWFuICogbWF4UGFkRmFjdG9yLCBtYXhQcmVMZW4pIDogbWF4UHJlTGVuO1xuICAgICAgZm9yIChpJCA9IHNvcnRlZFByZUxlbnMubGVuZ3RoIC0gMTsgaSQgPj0gMDsgLS1pJCkge1xuICAgICAgICBwcmVMZW4gPSBzb3J0ZWRQcmVMZW5zW2kkXTtcbiAgICAgICAgaWYgKHByZUxlbiA8PSB4KSB7XG4gICAgICAgICAgcGFkQW1vdW50ID0gcHJlTGVuO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZXNjU2VwTGVuID0gZGVzY3JpcHRpb25TZXBhcmF0b3IubGVuZ3RoO1xuICAgICAgaWYgKG1heFdpZHRoICE9IG51bGwpIHtcbiAgICAgICAgZnVsbFdyYXBDb3VudCA9IDA7XG4gICAgICAgIHBhcnRpYWxXcmFwQ291bnQgPSAwO1xuICAgICAgICBmb3IgKGkkID0gMCwgbGVuJCA9IGRhdGEubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgICAgICBpdGVtID0gZGF0YVtpJF07XG4gICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ29wdGlvbicpIHtcbiAgICAgICAgICAgIHByZSA9IGl0ZW0ucHJlLCBkZXNjID0gaXRlbS5kZXNjLCBkZXNjTGVuID0gaXRlbS5kZXNjTGVuO1xuICAgICAgICAgICAgaWYgKGRlc2NMZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgaXRlbS53cmFwID0gJ25vbmUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJlTGVuID0gbWF4KHBhZEFtb3VudCwgcHJlLmxlbmd0aCkgKyBpbml0aWFsSW5kZW50ICsgZGVzY1NlcExlbjtcbiAgICAgICAgICAgICAgdG90YWxMZW4gPSBwcmVMZW4gKyBkZXNjTGVuO1xuICAgICAgICAgICAgICBpZiAodG90YWxMZW4gPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgIGlmIChkZXNjTGVuIC8gMi41ID4gbWF4V2lkdGggLSBwcmVMZW4pIHtcbiAgICAgICAgICAgICAgICAgIGZ1bGxXcmFwQ291bnQrKztcbiAgICAgICAgICAgICAgICAgIGl0ZW0ud3JhcCA9ICdmdWxsJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGFydGlhbFdyYXBDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgaXRlbS53cmFwID0gJ3BhcnRpYWwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtLndyYXAgPSAnbm9uZSc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluaXRpYWxTcGFjZSA9IHJlcGVhdFN0cmluZyQoJyAnLCBpbml0aWFsSW5kZW50KTtcbiAgICAgIHdyYXBBbGxGdWxsID0gb3B0aW9uQ291bnQgPiAxICYmIGZ1bGxXcmFwQ291bnQgKyBwYXJ0aWFsV3JhcENvdW50ICogMC41ID4gb3B0aW9uQ291bnQgKiAwLjU7XG4gICAgICBmb3IgKGkkID0gMCwgbGVuJCA9IGRhdGEubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgICAgaSA9IGkkO1xuICAgICAgICBpdGVtID0gZGF0YVtpJF07XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdoZWFkaW5nJykge1xuICAgICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgICBvdXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0KGl0ZW0udmFsdWUgKyBcIjpcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJlID0gaXRlbS5wcmUsIGRlc2MgPSBpdGVtLmRlc2MsIGRlc2NMZW4gPSBpdGVtLmRlc2NMZW4sIHdyYXAgPSBpdGVtLndyYXA7XG4gICAgICAgICAgaWYgKG1heFdpZHRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh3cmFwQWxsRnVsbCB8fCB3cmFwID09PSAnZnVsbCcpIHtcbiAgICAgICAgICAgICAgd3JhcCA9IHdvcmR3cmFwKGluaXRpYWxJbmRlbnQgKyBzZWNvbmRhcnlJbmRlbnQsIG1heFdpZHRoKTtcbiAgICAgICAgICAgICAgb3V0KGluaXRpYWxTcGFjZSArIFwiXCIgKyBwcmUgKyBcIlxcblwiICsgd3JhcChkZXNjKSk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3cmFwID09PSAncGFydGlhbCcpIHtcbiAgICAgICAgICAgICAgd3JhcCA9IHdvcmR3cmFwKGluaXRpYWxJbmRlbnQgKyBkZXNjU2VwTGVuICsgbWF4KHBhZEFtb3VudCwgcHJlLmxlbmd0aCksIG1heFdpZHRoKTtcbiAgICAgICAgICAgICAgb3V0KGluaXRpYWxTcGFjZSArIFwiXCIgKyBwYWQocHJlLCBwYWRBbW91bnQpICsgZGVzY3JpcHRpb25TZXBhcmF0b3IgKyB3cmFwKGRlc2MpLnJlcGxhY2UoL15cXHMrLywgJycpKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZXNjTGVuID09PSAwKSB7XG4gICAgICAgICAgICBvdXQoaW5pdGlhbFNwYWNlICsgXCJcIiArIHByZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dChpbml0aWFsU3BhY2UgKyBcIlwiICsgcGFkKHByZSwgcGFkQW1vdW50KSArIGRlc2NyaXB0aW9uU2VwYXJhdG9yICsgZGVzYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXBwZW5kKSB7XG4gICAgICAgIG91dCgpO1xuICAgICAgICBvdXQoaW50ZXJwb2xhdGUgPyBpbnRlcnAoYXBwZW5kLCBpbnRlcnBvbGF0ZSkgOiBhcHBlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVubGluZXMob3V0cHV0KTtcbiAgICB9O1xuICB9O1xuICBmdW5jdGlvbiBwYWQoc3RyLCBudW0pe1xuICAgIHZhciBsZW4sIHBhZEFtb3VudDtcbiAgICBsZW4gPSBzdHIubGVuZ3RoO1xuICAgIHBhZEFtb3VudCA9IG51bSAtIGxlbjtcbiAgICByZXR1cm4gc3RyICsgXCJcIiArIHJlcGVhdFN0cmluZyQoJyAnLCBwYWRBbW91bnQgPiAwID8gcGFkQW1vdW50IDogMCk7XG4gIH1cbiAgZnVuY3Rpb24gc2VudGVuY2l6ZShzdHIpe1xuICAgIHZhciBmaXJzdCwgcmVzdCwgcGVyaW9kO1xuICAgIGZpcnN0ID0gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpO1xuICAgIHJlc3QgPSBzdHIuc2xpY2UoMSk7XG4gICAgcGVyaW9kID0gL1tcXC4hXFw/XSQvLnRlc3Qoc3RyKSA/ICcnIDogJy4nO1xuICAgIHJldHVybiBmaXJzdCArIFwiXCIgKyByZXN0ICsgcGVyaW9kO1xuICB9XG4gIGZ1bmN0aW9uIGludGVycChzdHJpbmcsIG9iamVjdCl7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC97eyhbYS16QS1aJF9dW2EtekEtWiRfMC05XSopfX0vZywgZnVuY3Rpb24oYXJnJCwga2V5KXtcbiAgICAgIHZhciByZWYkO1xuICAgICAgcmV0dXJuIChyZWYkID0gb2JqZWN0W2tleV0pICE9IG51bGxcbiAgICAgICAgPyByZWYkXG4gICAgICAgIDogXCJ7e1wiICsga2V5ICsgXCJ9fVwiO1xuICAgIH0pO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdlbmVyYXRlSGVscDogZ2VuZXJhdGVIZWxwLFxuICAgIGdlbmVyYXRlSGVscEZvck9wdGlvbjogZ2VuZXJhdGVIZWxwRm9yT3B0aW9uXG4gIH07XG4gIGZ1bmN0aW9uIHJlcGVhdFN0cmluZyQoc3RyLCBuKXtcbiAgICBmb3IgKHZhciByID0gJyc7IG4gPiAwOyAobiA+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHIgKz0gc3RyO1xuICAgIHJldHVybiByO1xuICB9XG59KS5jYWxsKHRoaXMpO1xuIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdHRocm93IG5ldyBFcnJvcihcImRlZmluZSBjYW5ub3QgYmUgdXNlZCBpbmRpcmVjdFwiKTtcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIFxuICB2YXIgY29sbGF0b3I7XG4gIHRyeSB7XG4gICAgY29sbGF0b3IgPSAodHlwZW9mIEludGwgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIEludGwuQ29sbGF0b3IgIT09IFwidW5kZWZpbmVkXCIpID8gSW50bC5Db2xsYXRvcihcImdlbmVyaWNcIiwgeyBzZW5zaXRpdml0eTogXCJiYXNlXCIgfSkgOiBudWxsO1xuICB9IGNhdGNoIChlcnIpe1xuICAgIGNvbnNvbGUubG9nKFwiQ29sbGF0b3IgY291bGQgbm90IGJlIGluaXRpYWxpemVkIGFuZCB3b3VsZG4ndCBiZSB1c2VkXCIpO1xuICB9XG4gIC8vIGFycmF5cyB0byByZS11c2VcbiAgdmFyIHByZXZSb3cgPSBbXSxcbiAgICBzdHIyQ2hhciA9IFtdO1xuICBcbiAgLyoqXG4gICAqIEJhc2VkIG9uIHRoZSBhbGdvcml0aG0gYXQgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXZlbnNodGVpbl9kaXN0YW5jZS5cbiAgICovXG4gIHZhciBMZXZlbnNodGVpbiA9IHtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgbGV2ZW5zaHRlaW4gZGlzdGFuY2Ugb2YgdGhlIHR3byBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cjEgU3RyaW5nIHRoZSBmaXJzdCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHN0cjIgU3RyaW5nIHRoZSBzZWNvbmQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBbb3B0aW9uc10gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBbb3B0aW9ucy51c2VDb2xsYXRvcl0gVXNlIGBJbnRsLkNvbGxhdG9yYCBmb3IgbG9jYWxlLXNlbnNpdGl2ZSBzdHJpbmcgY29tcGFyaXNvbi5cbiAgICAgKiBAcmV0dXJuIEludGVnZXIgdGhlIGxldmVuc2h0ZWluIGRpc3RhbmNlICgwIGFuZCBhYm92ZSkuXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbihzdHIxLCBzdHIyLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdXNlQ29sbGF0b3IgPSAob3B0aW9ucyAmJiBjb2xsYXRvciAmJiBvcHRpb25zLnVzZUNvbGxhdG9yKTtcbiAgICAgIFxuICAgICAgdmFyIHN0cjFMZW4gPSBzdHIxLmxlbmd0aCxcbiAgICAgICAgc3RyMkxlbiA9IHN0cjIubGVuZ3RoO1xuICAgICAgXG4gICAgICAvLyBiYXNlIGNhc2VzXG4gICAgICBpZiAoc3RyMUxlbiA9PT0gMCkgcmV0dXJuIHN0cjJMZW47XG4gICAgICBpZiAoc3RyMkxlbiA9PT0gMCkgcmV0dXJuIHN0cjFMZW47XG5cbiAgICAgIC8vIHR3byByb3dzXG4gICAgICB2YXIgY3VyQ29sLCBuZXh0Q29sLCBpLCBqLCB0bXA7XG5cbiAgICAgIC8vIGluaXRpYWxpc2UgcHJldmlvdXMgcm93XG4gICAgICBmb3IgKGk9MDsgaTxzdHIyTGVuOyArK2kpIHtcbiAgICAgICAgcHJldlJvd1tpXSA9IGk7XG4gICAgICAgIHN0cjJDaGFyW2ldID0gc3RyMi5jaGFyQ29kZUF0KGkpO1xuICAgICAgfVxuICAgICAgcHJldlJvd1tzdHIyTGVuXSA9IHN0cjJMZW47XG5cbiAgICAgIHZhciBzdHJDbXA7XG4gICAgICBpZiAodXNlQ29sbGF0b3IpIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIGN1cnJlbnQgcm93IGRpc3RhbmNlIGZyb20gcHJldmlvdXMgcm93IHVzaW5nIGNvbGxhdG9yXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdHIxTGVuOyArK2kpIHtcbiAgICAgICAgICBuZXh0Q29sID0gaSArIDE7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc3RyMkxlbjsgKytqKSB7XG4gICAgICAgICAgICBjdXJDb2wgPSBuZXh0Q29sO1xuXG4gICAgICAgICAgICAvLyBzdWJzdHV0aW9uXG4gICAgICAgICAgICBzdHJDbXAgPSAwID09PSBjb2xsYXRvci5jb21wYXJlKHN0cjEuY2hhckF0KGkpLCBTdHJpbmcuZnJvbUNoYXJDb2RlKHN0cjJDaGFyW2pdKSk7XG5cbiAgICAgICAgICAgIG5leHRDb2wgPSBwcmV2Um93W2pdICsgKHN0ckNtcCA/IDAgOiAxKTtcblxuICAgICAgICAgICAgLy8gaW5zZXJ0aW9uXG4gICAgICAgICAgICB0bXAgPSBjdXJDb2wgKyAxO1xuICAgICAgICAgICAgaWYgKG5leHRDb2wgPiB0bXApIHtcbiAgICAgICAgICAgICAgbmV4dENvbCA9IHRtcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlbGV0aW9uXG4gICAgICAgICAgICB0bXAgPSBwcmV2Um93W2ogKyAxXSArIDE7XG4gICAgICAgICAgICBpZiAobmV4dENvbCA+IHRtcCkge1xuICAgICAgICAgICAgICBuZXh0Q29sID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb3B5IGN1cnJlbnQgY29sIHZhbHVlIGludG8gcHJldmlvdXMgKGluIHByZXBhcmF0aW9uIGZvciBuZXh0IGl0ZXJhdGlvbilcbiAgICAgICAgICAgIHByZXZSb3dbal0gPSBjdXJDb2w7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gY29weSBsYXN0IGNvbCB2YWx1ZSBpbnRvIHByZXZpb3VzIChpbiBwcmVwYXJhdGlvbiBmb3IgbmV4dCBpdGVyYXRpb24pXG4gICAgICAgICAgcHJldlJvd1tqXSA9IG5leHRDb2w7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBjYWxjdWxhdGUgY3VycmVudCByb3cgZGlzdGFuY2UgZnJvbSBwcmV2aW91cyByb3cgd2l0aG91dCBjb2xsYXRvclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RyMUxlbjsgKytpKSB7XG4gICAgICAgICAgbmV4dENvbCA9IGkgKyAxO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IHN0cjJMZW47ICsraikge1xuICAgICAgICAgICAgY3VyQ29sID0gbmV4dENvbDtcblxuICAgICAgICAgICAgLy8gc3Vic3R1dGlvblxuICAgICAgICAgICAgc3RyQ21wID0gc3RyMS5jaGFyQ29kZUF0KGkpID09PSBzdHIyQ2hhcltqXTtcblxuICAgICAgICAgICAgbmV4dENvbCA9IHByZXZSb3dbal0gKyAoc3RyQ21wID8gMCA6IDEpO1xuXG4gICAgICAgICAgICAvLyBpbnNlcnRpb25cbiAgICAgICAgICAgIHRtcCA9IGN1ckNvbCArIDE7XG4gICAgICAgICAgICBpZiAobmV4dENvbCA+IHRtcCkge1xuICAgICAgICAgICAgICBuZXh0Q29sID0gdG1wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGVsZXRpb25cbiAgICAgICAgICAgIHRtcCA9IHByZXZSb3dbaiArIDFdICsgMTtcbiAgICAgICAgICAgIGlmIChuZXh0Q29sID4gdG1wKSB7XG4gICAgICAgICAgICAgIG5leHRDb2wgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvcHkgY3VycmVudCBjb2wgdmFsdWUgaW50byBwcmV2aW91cyAoaW4gcHJlcGFyYXRpb24gZm9yIG5leHQgaXRlcmF0aW9uKVxuICAgICAgICAgICAgcHJldlJvd1tqXSA9IGN1ckNvbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBjb3B5IGxhc3QgY29sIHZhbHVlIGludG8gcHJldmlvdXMgKGluIHByZXBhcmF0aW9uIGZvciBuZXh0IGl0ZXJhdGlvbilcbiAgICAgICAgICBwcmV2Um93W2pdID0gbmV4dENvbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRDb2w7XG4gICAgfVxuXG4gIH07XG5cbiAgLy8gYW1kXG4gIGlmICh0eXBlb2YgZGVmaW5lICE9PSBcInVuZGVmaW5lZFwiICYmIGRlZmluZSAhPT0gbnVsbCAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIExldmVuc2h0ZWluO1xuICAgIH0pO1xuICB9XG4gIC8vIGNvbW1vbmpzXG4gIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlICE9PSBudWxsICYmIHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzID09PSBleHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBMZXZlbnNodGVpbjtcbiAgfVxuICAvLyB3ZWIgd29ya2VyXG4gIGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBzZWxmLnBvc3RNZXNzYWdlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzZWxmLkxldmVuc2h0ZWluID0gTGV2ZW5zaHRlaW47XG4gIH1cbiAgLy8gYnJvd3NlciBtYWluIHRocmVhZFxuICBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdyAhPT0gbnVsbCkge1xuICAgIHdpbmRvdy5MZXZlbnNodGVpbiA9IExldmVuc2h0ZWluO1xuICB9XG59KCkpO1xuXG4iLCJ2YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIE9iamVjdF9rZXlzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nXG4gICAgPyBPYmplY3Qua2V5c1xuICAgIDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgfVxuO1xuXG52YXIgZGVlcEVxdWFsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCkge1xuICAvLyBlbmZvcmNlIE9iamVjdC5pcyArMCAhPT0gLTBcbiAgaWYgKGFjdHVhbCA9PT0gMCAmJiBleHBlY3RlZCA9PT0gMCkge1xuICAgIHJldHVybiBhcmVaZXJvc0VxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpO1xuXG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICB9IGVsc2UgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICB9IGVsc2UgaWYgKGlzTnVtYmVyTmFOKGFjdHVhbCkpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJOYU4oZXhwZWN0ZWQpO1xuXG4gIC8vIDcuMy4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICh0eXBlb2YgYWN0dWFsICE9ICdvYmplY3QnICYmIHR5cGVvZiBleHBlY3RlZCAhPSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gNy40LiBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXJOYU4odmFsdWUpIHtcbiAgLy8gTmFOID09PSBOYU4gLT4gZmFsc2VcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGFyZVplcm9zRXF1YWwoemVyb0EsIHplcm9CKSB7XG4gIC8vICgxIC8gKzB8MCkgLT4gSW5maW5pdHksIGJ1dCAoMSAvIC0wKSAtPiAtSW5maW5pdHkgYW5kIChJbmZpbml0eSAhPT0gLUluZmluaXR5KVxuICByZXR1cm4gKDEgLyB6ZXJvQSkgPT09ICgxIC8gemVyb0IpO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiKSB7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LlxuICBpZiAoYS5wcm90b3R5cGUgIT09IGIucHJvdG90eXBlKSByZXR1cm4gZmFsc2U7XG4gIC8vfn5+SSd2ZSBtYW5hZ2VkIHRvIGJyZWFrIE9iamVjdC5rZXlzIHRocm91Z2ggc2NyZXd5IGFyZ3VtZW50cyBwYXNzaW5nLlxuICAvLyAgIENvbnZlcnRpbmcgdG8gYXJyYXkgc29sdmVzIHRoZSBwcm9ibGVtLlxuICBpZiAoaXNBcmd1bWVudHMoYSkpIHtcbiAgICBpZiAoIWlzQXJndW1lbnRzKGIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGEgPSBwU2xpY2UuY2FsbChhKTtcbiAgICBiID0gcFNsaWNlLmNhbGwoYik7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiKTtcbiAgfVxuICB0cnkge1xuICAgIHZhciBrYSA9IE9iamVjdF9rZXlzKGEpLFxuICAgICAgICBrYiA9IE9iamVjdF9rZXlzKGIpLFxuICAgICAgICBrZXksIGk7XG4gIH0gY2F0Y2ggKGUpIHsvL2hhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIWRlZXBFcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsIi8vIEdlbmVyYXRlZCBieSBMaXZlU2NyaXB0IDEuNC4wXG52YXIgbWF4LCBtaW4sIG5lZ2F0ZSwgYWJzLCBzaWdudW0sIHF1b3QsIHJlbSwgZGl2LCBtb2QsIHJlY2lwLCBwaSwgdGF1LCBleHAsIHNxcnQsIGxuLCBwb3csIHNpbiwgdGFuLCBjb3MsIGFzaW4sIGFjb3MsIGF0YW4sIGF0YW4yLCB0cnVuY2F0ZSwgcm91bmQsIGNlaWxpbmcsIGZsb29yLCBpc0l0TmFOLCBldmVuLCBvZGQsIGdjZCwgbGNtO1xubWF4ID0gY3VycnkkKGZ1bmN0aW9uKHgkLCB5JCl7XG4gIHJldHVybiB4JCA+IHkkID8geCQgOiB5JDtcbn0pO1xubWluID0gY3VycnkkKGZ1bmN0aW9uKHgkLCB5JCl7XG4gIHJldHVybiB4JCA8IHkkID8geCQgOiB5JDtcbn0pO1xubmVnYXRlID0gZnVuY3Rpb24oeCl7XG4gIHJldHVybiAteDtcbn07XG5hYnMgPSBNYXRoLmFicztcbnNpZ251bSA9IGZ1bmN0aW9uKHgpe1xuICBpZiAoeCA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoeCA+IDApIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcbnF1b3QgPSBjdXJyeSQoZnVuY3Rpb24oeCwgeSl7XG4gIHJldHVybiB+fih4IC8geSk7XG59KTtcbnJlbSA9IGN1cnJ5JChmdW5jdGlvbih4JCwgeSQpe1xuICByZXR1cm4geCQgJSB5JDtcbn0pO1xuZGl2ID0gY3VycnkkKGZ1bmN0aW9uKHgsIHkpe1xuICByZXR1cm4gTWF0aC5mbG9vcih4IC8geSk7XG59KTtcbm1vZCA9IGN1cnJ5JChmdW5jdGlvbih4JCwgeSQpe1xuICB2YXIgcmVmJDtcbiAgcmV0dXJuICgoKHgkKSAlIChyZWYkID0geSQpICsgcmVmJCkgJSByZWYkKTtcbn0pO1xucmVjaXAgPSAoZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gMSAvIGl0O1xufSk7XG5waSA9IE1hdGguUEk7XG50YXUgPSBwaSAqIDI7XG5leHAgPSBNYXRoLmV4cDtcbnNxcnQgPSBNYXRoLnNxcnQ7XG5sbiA9IE1hdGgubG9nO1xucG93ID0gY3VycnkkKGZ1bmN0aW9uKHgkLCB5JCl7XG4gIHJldHVybiBNYXRoLnBvdyh4JCwgeSQpO1xufSk7XG5zaW4gPSBNYXRoLnNpbjtcbnRhbiA9IE1hdGgudGFuO1xuY29zID0gTWF0aC5jb3M7XG5hc2luID0gTWF0aC5hc2luO1xuYWNvcyA9IE1hdGguYWNvcztcbmF0YW4gPSBNYXRoLmF0YW47XG5hdGFuMiA9IGN1cnJ5JChmdW5jdGlvbih4LCB5KXtcbiAgcmV0dXJuIE1hdGguYXRhbjIoeCwgeSk7XG59KTtcbnRydW5jYXRlID0gZnVuY3Rpb24oeCl7XG4gIHJldHVybiB+fng7XG59O1xucm91bmQgPSBNYXRoLnJvdW5kO1xuY2VpbGluZyA9IE1hdGguY2VpbDtcbmZsb29yID0gTWF0aC5mbG9vcjtcbmlzSXROYU4gPSBmdW5jdGlvbih4KXtcbiAgcmV0dXJuIHggIT09IHg7XG59O1xuZXZlbiA9IGZ1bmN0aW9uKHgpe1xuICByZXR1cm4geCAlIDIgPT09IDA7XG59O1xub2RkID0gZnVuY3Rpb24oeCl7XG4gIHJldHVybiB4ICUgMiAhPT0gMDtcbn07XG5nY2QgPSBjdXJyeSQoZnVuY3Rpb24oeCwgeSl7XG4gIHZhciB6O1xuICB4ID0gTWF0aC5hYnMoeCk7XG4gIHkgPSBNYXRoLmFicyh5KTtcbiAgd2hpbGUgKHkgIT09IDApIHtcbiAgICB6ID0geCAlIHk7XG4gICAgeCA9IHk7XG4gICAgeSA9IHo7XG4gIH1cbiAgcmV0dXJuIHg7XG59KTtcbmxjbSA9IGN1cnJ5JChmdW5jdGlvbih4LCB5KXtcbiAgcmV0dXJuIE1hdGguYWJzKE1hdGguZmxvb3IoeCAvIGdjZCh4LCB5KSAqIHkpKTtcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1heDogbWF4LFxuICBtaW46IG1pbixcbiAgbmVnYXRlOiBuZWdhdGUsXG4gIGFiczogYWJzLFxuICBzaWdudW06IHNpZ251bSxcbiAgcXVvdDogcXVvdCxcbiAgcmVtOiByZW0sXG4gIGRpdjogZGl2LFxuICBtb2Q6IG1vZCxcbiAgcmVjaXA6IHJlY2lwLFxuICBwaTogcGksXG4gIHRhdTogdGF1LFxuICBleHA6IGV4cCxcbiAgc3FydDogc3FydCxcbiAgbG46IGxuLFxuICBwb3c6IHBvdyxcbiAgc2luOiBzaW4sXG4gIHRhbjogdGFuLFxuICBjb3M6IGNvcyxcbiAgYWNvczogYWNvcyxcbiAgYXNpbjogYXNpbixcbiAgYXRhbjogYXRhbixcbiAgYXRhbjI6IGF0YW4yLFxuICB0cnVuY2F0ZTogdHJ1bmNhdGUsXG4gIHJvdW5kOiByb3VuZCxcbiAgY2VpbGluZzogY2VpbGluZyxcbiAgZmxvb3I6IGZsb29yLFxuICBpc0l0TmFOOiBpc0l0TmFOLFxuICBldmVuOiBldmVuLFxuICBvZGQ6IG9kZCxcbiAgZ2NkOiBnY2QsXG4gIGxjbTogbGNtXG59O1xuZnVuY3Rpb24gY3VycnkkKGYsIGJvdW5kKXtcbiAgdmFyIGNvbnRleHQsXG4gIF9jdXJyeSA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICByZXR1cm4gZi5sZW5ndGggPiAxID8gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmdzID8gYXJncy5jb25jYXQoKSA6IFtdO1xuICAgICAgY29udGV4dCA9IGJvdW5kID8gY29udGV4dCB8fCB0aGlzIDogdGhpcztcbiAgICAgIHJldHVybiBwYXJhbXMucHVzaC5hcHBseShwYXJhbXMsIGFyZ3VtZW50cykgPFxuICAgICAgICAgIGYubGVuZ3RoICYmIGFyZ3VtZW50cy5sZW5ndGggP1xuICAgICAgICBfY3VycnkuY2FsbChjb250ZXh0LCBwYXJhbXMpIDogZi5hcHBseShjb250ZXh0LCBwYXJhbXMpO1xuICAgIH0gOiBmO1xuICB9O1xuICByZXR1cm4gX2N1cnJ5KCk7XG59IiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS40LjBcbnZhciBzcGxpdCwgam9pbiwgbGluZXMsIHVubGluZXMsIHdvcmRzLCB1bndvcmRzLCBjaGFycywgdW5jaGFycywgcmV2ZXJzZSwgcmVwZWF0LCBjYXBpdGFsaXplLCBjYW1lbGl6ZSwgZGFzaGVyaXplO1xuc3BsaXQgPSBjdXJyeSQoZnVuY3Rpb24oc2VwLCBzdHIpe1xuICByZXR1cm4gc3RyLnNwbGl0KHNlcCk7XG59KTtcbmpvaW4gPSBjdXJyeSQoZnVuY3Rpb24oc2VwLCB4cyl7XG4gIHJldHVybiB4cy5qb2luKHNlcCk7XG59KTtcbmxpbmVzID0gZnVuY3Rpb24oc3RyKXtcbiAgaWYgKCFzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xufTtcbnVubGluZXMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdC5qb2luKCdcXG4nKTtcbn07XG53b3JkcyA9IGZ1bmN0aW9uKHN0cil7XG4gIGlmICghc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gc3RyLnNwbGl0KC9bIF0rLyk7XG59O1xudW53b3JkcyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0LmpvaW4oJyAnKTtcbn07XG5jaGFycyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0LnNwbGl0KCcnKTtcbn07XG51bmNoYXJzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQuam9pbignJyk7XG59O1xucmV2ZXJzZSA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKTtcbn07XG5yZXBlYXQgPSBjdXJyeSQoZnVuY3Rpb24obiwgc3RyKXtcbiAgdmFyIHJlc3VsdCwgaSQ7XG4gIHJlc3VsdCA9ICcnO1xuICBmb3IgKGkkID0gMDsgaSQgPCBuOyArK2kkKSB7XG4gICAgcmVzdWx0ICs9IHN0cjtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5jYXBpdGFsaXplID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn07XG5jYW1lbGl6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0LnJlcGxhY2UoL1stX10rKC4pPy9nLCBmdW5jdGlvbihhcmckLCBjKXtcbiAgICByZXR1cm4gKGMgIT0gbnVsbCA/IGMgOiAnJykudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuZGFzaGVyaXplID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW14tQS1aXSkoW0EtWl0rKS9nLCBmdW5jdGlvbihhcmckLCBsb3dlciwgdXBwZXIpe1xuICAgIHJldHVybiBsb3dlciArIFwiLVwiICsgKHVwcGVyLmxlbmd0aCA+IDFcbiAgICAgID8gdXBwZXJcbiAgICAgIDogdXBwZXIudG9Mb3dlckNhc2UoKSk7XG4gIH0pLnJlcGxhY2UoL14oW0EtWl0rKS8sIGZ1bmN0aW9uKGFyZyQsIHVwcGVyKXtcbiAgICBpZiAodXBwZXIubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHVwcGVyICsgXCItXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1cHBlci50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNwbGl0OiBzcGxpdCxcbiAgam9pbjogam9pbixcbiAgbGluZXM6IGxpbmVzLFxuICB1bmxpbmVzOiB1bmxpbmVzLFxuICB3b3Jkczogd29yZHMsXG4gIHVud29yZHM6IHVud29yZHMsXG4gIGNoYXJzOiBjaGFycyxcbiAgdW5jaGFyczogdW5jaGFycyxcbiAgcmV2ZXJzZTogcmV2ZXJzZSxcbiAgcmVwZWF0OiByZXBlYXQsXG4gIGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG4gIGNhbWVsaXplOiBjYW1lbGl6ZSxcbiAgZGFzaGVyaXplOiBkYXNoZXJpemVcbn07XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjQuMFxudmFyIHZhbHVlcywga2V5cywgcGFpcnNUb09iaiwgb2JqVG9QYWlycywgbGlzdHNUb09iaiwgb2JqVG9MaXN0cywgZW1wdHksIGVhY2gsIG1hcCwgY29tcGFjdCwgZmlsdGVyLCByZWplY3QsIHBhcnRpdGlvbiwgZmluZDtcbnZhbHVlcyA9IGZ1bmN0aW9uKG9iamVjdCl7XG4gIHZhciBpJCwgeCwgcmVzdWx0cyQgPSBbXTtcbiAgZm9yIChpJCBpbiBvYmplY3QpIHtcbiAgICB4ID0gb2JqZWN0W2kkXTtcbiAgICByZXN1bHRzJC5wdXNoKHgpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn07XG5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgdmFyIHgsIHJlc3VsdHMkID0gW107XG4gIGZvciAoeCBpbiBvYmplY3QpIHtcbiAgICByZXN1bHRzJC5wdXNoKHgpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn07XG5wYWlyc1RvT2JqID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRPYmokID0ge307XG4gIGZvciAoaSQgPSAwLCBsZW4kID0gb2JqZWN0Lmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IG9iamVjdFtpJF07XG4gICAgcmVzdWx0T2JqJFt4WzBdXSA9IHhbMV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdE9iaiQ7XG59O1xub2JqVG9QYWlycyA9IGZ1bmN0aW9uKG9iamVjdCl7XG4gIHZhciBrZXksIHZhbHVlLCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGtleSBpbiBvYmplY3QpIHtcbiAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgIHJlc3VsdHMkLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59O1xubGlzdHNUb09iaiA9IGN1cnJ5JChmdW5jdGlvbihrZXlzLCB2YWx1ZXMpe1xuICB2YXIgaSQsIGxlbiQsIGksIGtleSwgcmVzdWx0T2JqJCA9IHt9O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IGtleXMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICBpID0gaSQ7XG4gICAga2V5ID0ga2V5c1tpJF07XG4gICAgcmVzdWx0T2JqJFtrZXldID0gdmFsdWVzW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHRPYmokO1xufSk7XG5vYmpUb0xpc3RzID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgdmFyIGtleXMsIHZhbHVlcywga2V5LCB2YWx1ZTtcbiAga2V5cyA9IFtdO1xuICB2YWx1ZXMgPSBbXTtcbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIFtrZXlzLCB2YWx1ZXNdO1xufTtcbmVtcHR5ID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgdmFyIHg7XG4gIGZvciAoeCBpbiBvYmplY3QpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuZWFjaCA9IGN1cnJ5JChmdW5jdGlvbihmLCBvYmplY3Qpe1xuICB2YXIgaSQsIHg7XG4gIGZvciAoaSQgaW4gb2JqZWN0KSB7XG4gICAgeCA9IG9iamVjdFtpJF07XG4gICAgZih4KTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufSk7XG5tYXAgPSBjdXJyeSQoZnVuY3Rpb24oZiwgb2JqZWN0KXtcbiAgdmFyIGssIHgsIHJlc3VsdE9iaiQgPSB7fTtcbiAgZm9yIChrIGluIG9iamVjdCkge1xuICAgIHggPSBvYmplY3Rba107XG4gICAgcmVzdWx0T2JqJFtrXSA9IGYoeCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdE9iaiQ7XG59KTtcbmNvbXBhY3QgPSBmdW5jdGlvbihvYmplY3Qpe1xuICB2YXIgaywgeCwgcmVzdWx0T2JqJCA9IHt9O1xuICBmb3IgKGsgaW4gb2JqZWN0KSB7XG4gICAgeCA9IG9iamVjdFtrXTtcbiAgICBpZiAoeCkge1xuICAgICAgcmVzdWx0T2JqJFtrXSA9IHg7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRPYmokO1xufTtcbmZpbHRlciA9IGN1cnJ5JChmdW5jdGlvbihmLCBvYmplY3Qpe1xuICB2YXIgaywgeCwgcmVzdWx0T2JqJCA9IHt9O1xuICBmb3IgKGsgaW4gb2JqZWN0KSB7XG4gICAgeCA9IG9iamVjdFtrXTtcbiAgICBpZiAoZih4KSkge1xuICAgICAgcmVzdWx0T2JqJFtrXSA9IHg7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRPYmokO1xufSk7XG5yZWplY3QgPSBjdXJyeSQoZnVuY3Rpb24oZiwgb2JqZWN0KXtcbiAgdmFyIGssIHgsIHJlc3VsdE9iaiQgPSB7fTtcbiAgZm9yIChrIGluIG9iamVjdCkge1xuICAgIHggPSBvYmplY3Rba107XG4gICAgaWYgKCFmKHgpKSB7XG4gICAgICByZXN1bHRPYmokW2tdID0geDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdE9iaiQ7XG59KTtcbnBhcnRpdGlvbiA9IGN1cnJ5JChmdW5jdGlvbihmLCBvYmplY3Qpe1xuICB2YXIgcGFzc2VkLCBmYWlsZWQsIGssIHg7XG4gIHBhc3NlZCA9IHt9O1xuICBmYWlsZWQgPSB7fTtcbiAgZm9yIChrIGluIG9iamVjdCkge1xuICAgIHggPSBvYmplY3Rba107XG4gICAgKGYoeCkgPyBwYXNzZWQgOiBmYWlsZWQpW2tdID0geDtcbiAgfVxuICByZXR1cm4gW3Bhc3NlZCwgZmFpbGVkXTtcbn0pO1xuZmluZCA9IGN1cnJ5JChmdW5jdGlvbihmLCBvYmplY3Qpe1xuICB2YXIgaSQsIHg7XG4gIGZvciAoaSQgaW4gb2JqZWN0KSB7XG4gICAgeCA9IG9iamVjdFtpJF07XG4gICAgaWYgKGYoeCkpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsdWVzOiB2YWx1ZXMsXG4gIGtleXM6IGtleXMsXG4gIHBhaXJzVG9PYmo6IHBhaXJzVG9PYmosXG4gIG9ialRvUGFpcnM6IG9ialRvUGFpcnMsXG4gIGxpc3RzVG9PYmo6IGxpc3RzVG9PYmosXG4gIG9ialRvTGlzdHM6IG9ialRvTGlzdHMsXG4gIGVtcHR5OiBlbXB0eSxcbiAgZWFjaDogZWFjaCxcbiAgbWFwOiBtYXAsXG4gIGZpbHRlcjogZmlsdGVyLFxuICBjb21wYWN0OiBjb21wYWN0LFxuICByZWplY3Q6IHJlamVjdCxcbiAgcGFydGl0aW9uOiBwYXJ0aXRpb24sXG4gIGZpbmQ6IGZpbmRcbn07XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjQuMFxudmFyIGVhY2gsIG1hcCwgY29tcGFjdCwgZmlsdGVyLCByZWplY3QsIHBhcnRpdGlvbiwgZmluZCwgaGVhZCwgZmlyc3QsIHRhaWwsIGxhc3QsIGluaXRpYWwsIGVtcHR5LCByZXZlcnNlLCB1bmlxdWUsIHVuaXF1ZUJ5LCBmb2xkLCBmb2xkbCwgZm9sZDEsIGZvbGRsMSwgZm9sZHIsIGZvbGRyMSwgdW5mb2xkciwgY29uY2F0LCBjb25jYXRNYXAsIGZsYXR0ZW4sIGRpZmZlcmVuY2UsIGludGVyc2VjdGlvbiwgdW5pb24sIGNvdW50QnksIGdyb3VwQnksIGFuZExpc3QsIG9yTGlzdCwgYW55LCBhbGwsIHNvcnQsIHNvcnRXaXRoLCBzb3J0QnksIHN1bSwgcHJvZHVjdCwgbWVhbiwgYXZlcmFnZSwgbWF4aW11bSwgbWluaW11bSwgbWF4aW11bUJ5LCBtaW5pbXVtQnksIHNjYW4sIHNjYW5sLCBzY2FuMSwgc2NhbmwxLCBzY2Fuciwgc2NhbnIxLCBzbGljZSwgdGFrZSwgZHJvcCwgc3BsaXRBdCwgdGFrZVdoaWxlLCBkcm9wV2hpbGUsIHNwYW4sIGJyZWFrTGlzdCwgemlwLCB6aXBXaXRoLCB6aXBBbGwsIHppcEFsbFdpdGgsIGF0LCBlbGVtSW5kZXgsIGVsZW1JbmRpY2VzLCBmaW5kSW5kZXgsIGZpbmRJbmRpY2VzLCB0b1N0cmluZyQgPSB7fS50b1N0cmluZywgc2xpY2UkID0gW10uc2xpY2U7XG5lYWNoID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBmKHgpO1xuICB9XG4gIHJldHVybiB4cztcbn0pO1xubWFwID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICByZXN1bHRzJC5wdXNoKGYoeCkpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xuY29tcGFjdCA9IGZ1bmN0aW9uKHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoeCkge1xuICAgICAgcmVzdWx0cyQucHVzaCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcbmZpbHRlciA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBpJCwgbGVuJCwgeCwgcmVzdWx0cyQgPSBbXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKGYoeCkpIHtcbiAgICAgIHJlc3VsdHMkLnB1c2goeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xucmVqZWN0ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoIWYoeCkpIHtcbiAgICAgIHJlc3VsdHMkLnB1c2goeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xucGFydGl0aW9uID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHBhc3NlZCwgZmFpbGVkLCBpJCwgbGVuJCwgeDtcbiAgcGFzc2VkID0gW107XG4gIGZhaWxlZCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICAoZih4KSA/IHBhc3NlZCA6IGZhaWxlZCkucHVzaCh4KTtcbiAgfVxuICByZXR1cm4gW3Bhc3NlZCwgZmFpbGVkXTtcbn0pO1xuZmluZCA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBpJCwgbGVuJCwgeDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKGYoeCkpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfVxufSk7XG5oZWFkID0gZmlyc3QgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiB4c1swXTtcbn07XG50YWlsID0gZnVuY3Rpb24oeHMpe1xuICBpZiAoIXhzLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4geHMuc2xpY2UoMSk7XG59O1xubGFzdCA9IGZ1bmN0aW9uKHhzKXtcbiAgcmV0dXJuIHhzW3hzLmxlbmd0aCAtIDFdO1xufTtcbmluaXRpYWwgPSBmdW5jdGlvbih4cyl7XG4gIGlmICgheHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiB4cy5zbGljZSgwLCAtMSk7XG59O1xuZW1wdHkgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiAheHMubGVuZ3RoO1xufTtcbnJldmVyc2UgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiB4cy5jb25jYXQoKS5yZXZlcnNlKCk7XG59O1xudW5pcXVlID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgcmVzdWx0LCBpJCwgbGVuJCwgeDtcbiAgcmVzdWx0ID0gW107XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIGlmICghaW4kKHgsIHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnVuaXF1ZUJ5ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHNlZW4sIGkkLCBsZW4kLCB4LCB2YWwsIHJlc3VsdHMkID0gW107XG4gIHNlZW4gPSBbXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgdmFsID0gZih4KTtcbiAgICBpZiAoaW4kKHZhbCwgc2VlbikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBzZWVuLnB1c2godmFsKTtcbiAgICByZXN1bHRzJC5wdXNoKHgpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xuZm9sZCA9IGZvbGRsID0gY3VycnkkKGZ1bmN0aW9uKGYsIG1lbW8sIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBtZW1vID0gZihtZW1vLCB4KTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn0pO1xuZm9sZDEgPSBmb2xkbDEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICByZXR1cm4gZm9sZChmLCB4c1swXSwgeHMuc2xpY2UoMSkpO1xufSk7XG5mb2xkciA9IGN1cnJ5JChmdW5jdGlvbihmLCBtZW1vLCB4cyl7XG4gIHZhciBpJCwgeDtcbiAgZm9yIChpJCA9IHhzLmxlbmd0aCAtIDE7IGkkID49IDA7IC0taSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIG1lbW8gPSBmKHgsIG1lbW8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufSk7XG5mb2xkcjEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICByZXR1cm4gZm9sZHIoZiwgeHNbeHMubGVuZ3RoIC0gMV0sIHhzLnNsaWNlKDAsIC0xKSk7XG59KTtcbnVuZm9sZHIgPSBjdXJyeSQoZnVuY3Rpb24oZiwgYil7XG4gIHZhciByZXN1bHQsIHgsIHRoYXQ7XG4gIHJlc3VsdCA9IFtdO1xuICB4ID0gYjtcbiAgd2hpbGUgKCh0aGF0ID0gZih4KSkgIT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKHRoYXRbMF0pO1xuICAgIHggPSB0aGF0WzFdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59KTtcbmNvbmNhdCA9IGZ1bmN0aW9uKHhzcyl7XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIHhzcyk7XG59O1xuY29uY2F0TWFwID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHg7XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIChmdW5jdGlvbigpe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB4ID0gcmVmJFtpJF07XG4gICAgICByZXN1bHRzJC5wdXNoKGYoeCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH0oKSkpO1xufSk7XG5mbGF0dGVuID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgeDtcbiAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgKGZ1bmN0aW9uKCl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB4cykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHggPSByZWYkW2kkXTtcbiAgICAgIGlmICh0b1N0cmluZyQuY2FsbCh4KS5zbGljZSg4LCAtMSkgPT09ICdBcnJheScpIHtcbiAgICAgICAgcmVzdWx0cyQucHVzaChmbGF0dGVuKHgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdHMkLnB1c2goeCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfSgpKSk7XG59O1xuZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKHhzKXtcbiAgdmFyIHlzcywgcmVzdWx0cywgaSQsIGxlbiQsIHgsIGokLCBsZW4xJCwgeXM7XG4gIHlzcyA9IHNsaWNlJC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHJlc3VsdHMgPSBbXTtcbiAgb3V0ZXI6IGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHlzcy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgIHlzID0geXNzW2okXTtcbiAgICAgIGlmIChpbiQoeCwgeXMpKSB7XG4gICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHRzLnB1c2goeCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgeXNzLCByZXN1bHRzLCBpJCwgbGVuJCwgeCwgaiQsIGxlbjEkLCB5cztcbiAgeXNzID0gc2xpY2UkLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgcmVzdWx0cyA9IFtdO1xuICBvdXRlcjogZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgZm9yIChqJCA9IDAsIGxlbjEkID0geXNzLmxlbmd0aDsgaiQgPCBsZW4xJDsgKytqJCkge1xuICAgICAgeXMgPSB5c3NbaiRdO1xuICAgICAgaWYgKCFpbiQoeCwgeXMpKSB7XG4gICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHRzLnB1c2goeCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xudW5pb24gPSBmdW5jdGlvbigpe1xuICB2YXIgeHNzLCByZXN1bHRzLCBpJCwgbGVuJCwgeHMsIGokLCBsZW4xJCwgeDtcbiAgeHNzID0gc2xpY2UkLmNhbGwoYXJndW1lbnRzKTtcbiAgcmVzdWx0cyA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzcy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHhzID0geHNzW2kkXTtcbiAgICBmb3IgKGokID0gMCwgbGVuMSQgPSB4cy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgIHggPSB4c1tqJF07XG4gICAgICBpZiAoIWluJCh4LCByZXN1bHRzKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goeCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufTtcbmNvdW50QnkgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICB2YXIgcmVzdWx0cywgaSQsIGxlbiQsIHgsIGtleTtcbiAgcmVzdWx0cyA9IHt9O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBrZXkgPSBmKHgpO1xuICAgIGlmIChrZXkgaW4gcmVzdWx0cykge1xuICAgICAgcmVzdWx0c1trZXldICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdHNba2V5XSA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufSk7XG5ncm91cEJ5ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHJlc3VsdHMsIGkkLCBsZW4kLCB4LCBrZXk7XG4gIHJlc3VsdHMgPSB7fTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAga2V5ID0gZih4KTtcbiAgICBpZiAoa2V5IGluIHJlc3VsdHMpIHtcbiAgICAgIHJlc3VsdHNba2V5XS5wdXNoKHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRzW2tleV0gPSBbeF07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufSk7XG5hbmRMaXN0ID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgaSQsIGxlbiQsIHg7XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIGlmICgheCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5vckxpc3QgPSBmdW5jdGlvbih4cyl7XG4gIHZhciBpJCwgbGVuJCwgeDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKHgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuYW55ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoZih4KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pO1xuYWxsID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoIWYoeCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59KTtcbnNvcnQgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiB4cy5jb25jYXQoKS5zb3J0KGZ1bmN0aW9uKHgsIHkpe1xuICAgIGlmICh4ID4geSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmICh4IDwgeSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0pO1xufTtcbnNvcnRXaXRoID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgcmV0dXJuIHhzLmNvbmNhdCgpLnNvcnQoZik7XG59KTtcbnNvcnRCeSA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHJldHVybiB4cy5jb25jYXQoKS5zb3J0KGZ1bmN0aW9uKHgsIHkpe1xuICAgIGlmIChmKHgpID4gZih5KSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChmKHgpIDwgZih5KSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0pO1xufSk7XG5zdW0gPSBmdW5jdGlvbih4cyl7XG4gIHZhciByZXN1bHQsIGkkLCBsZW4kLCB4O1xuICByZXN1bHQgPSAwO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICByZXN1bHQgKz0geDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnByb2R1Y3QgPSBmdW5jdGlvbih4cyl7XG4gIHZhciByZXN1bHQsIGkkLCBsZW4kLCB4O1xuICByZXN1bHQgPSAxO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICByZXN1bHQgKj0geDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbm1lYW4gPSBhdmVyYWdlID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgc3VtLCBpJCwgbGVuJCwgeDtcbiAgc3VtID0gMDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgc3VtICs9IHg7XG4gIH1cbiAgcmV0dXJuIHN1bSAvIHhzLmxlbmd0aDtcbn07XG5tYXhpbXVtID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgbWF4LCBpJCwgcmVmJCwgbGVuJCwgeDtcbiAgbWF4ID0geHNbMF07XG4gIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB4cy5zbGljZSgxKSkubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0gcmVmJFtpJF07XG4gICAgaWYgKHggPiBtYXgpIHtcbiAgICAgIG1heCA9IHg7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXg7XG59O1xubWluaW11bSA9IGZ1bmN0aW9uKHhzKXtcbiAgdmFyIG1pbiwgaSQsIHJlZiQsIGxlbiQsIHg7XG4gIG1pbiA9IHhzWzBdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMuc2xpY2UoMSkpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHJlZiRbaSRdO1xuICAgIGlmICh4IDwgbWluKSB7XG4gICAgICBtaW4gPSB4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWluO1xufTtcbm1heGltdW1CeSA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBtYXgsIGkkLCByZWYkLCBsZW4kLCB4O1xuICBtYXggPSB4c1swXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHhzLnNsaWNlKDEpKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSByZWYkW2kkXTtcbiAgICBpZiAoZih4KSA+IGYobWF4KSkge1xuICAgICAgbWF4ID0geDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heDtcbn0pO1xubWluaW11bUJ5ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIG1pbiwgaSQsIHJlZiQsIGxlbiQsIHg7XG4gIG1pbiA9IHhzWzBdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMuc2xpY2UoMSkpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHJlZiRbaSRdO1xuICAgIGlmIChmKHgpIDwgZihtaW4pKSB7XG4gICAgICBtaW4gPSB4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWluO1xufSk7XG5zY2FuID0gc2NhbmwgPSBjdXJyeSQoZnVuY3Rpb24oZiwgbWVtbywgeHMpe1xuICB2YXIgbGFzdCwgeDtcbiAgbGFzdCA9IG1lbW87XG4gIHJldHVybiBbbWVtb10uY29uY2F0KChmdW5jdGlvbigpe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB4ID0gcmVmJFtpJF07XG4gICAgICByZXN1bHRzJC5wdXNoKGxhc3QgPSBmKGxhc3QsIHgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9KCkpKTtcbn0pO1xuc2NhbjEgPSBzY2FubDEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICBpZiAoIXhzLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gc2NhbihmLCB4c1swXSwgeHMuc2xpY2UoMSkpO1xufSk7XG5zY2FuciA9IGN1cnJ5JChmdW5jdGlvbihmLCBtZW1vLCB4cyl7XG4gIHhzID0geHMuY29uY2F0KCkucmV2ZXJzZSgpO1xuICByZXR1cm4gc2NhbihmLCBtZW1vLCB4cykucmV2ZXJzZSgpO1xufSk7XG5zY2FucjEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICBpZiAoIXhzLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICB4cyA9IHhzLmNvbmNhdCgpLnJldmVyc2UoKTtcbiAgcmV0dXJuIHNjYW4oZiwgeHNbMF0sIHhzLnNsaWNlKDEpKS5yZXZlcnNlKCk7XG59KTtcbnNsaWNlID0gY3VycnkkKGZ1bmN0aW9uKHgsIHksIHhzKXtcbiAgcmV0dXJuIHhzLnNsaWNlKHgsIHkpO1xufSk7XG50YWtlID0gY3VycnkkKGZ1bmN0aW9uKG4sIHhzKXtcbiAgaWYgKG4gPD0gMCkge1xuICAgIHJldHVybiB4cy5zbGljZSgwLCAwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geHMuc2xpY2UoMCwgbik7XG4gIH1cbn0pO1xuZHJvcCA9IGN1cnJ5JChmdW5jdGlvbihuLCB4cyl7XG4gIGlmIChuIDw9IDApIHtcbiAgICByZXR1cm4geHM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHhzLnNsaWNlKG4pO1xuICB9XG59KTtcbnNwbGl0QXQgPSBjdXJyeSQoZnVuY3Rpb24obiwgeHMpe1xuICByZXR1cm4gW3Rha2UobiwgeHMpLCBkcm9wKG4sIHhzKV07XG59KTtcbnRha2VXaGlsZSA9IGN1cnJ5JChmdW5jdGlvbihwLCB4cyl7XG4gIHZhciBsZW4sIGk7XG4gIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKCFsZW4pIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbiAgaSA9IDA7XG4gIHdoaWxlIChpIDwgbGVuICYmIHAoeHNbaV0pKSB7XG4gICAgaSArPSAxO1xuICB9XG4gIHJldHVybiB4cy5zbGljZSgwLCBpKTtcbn0pO1xuZHJvcFdoaWxlID0gY3VycnkkKGZ1bmN0aW9uKHAsIHhzKXtcbiAgdmFyIGxlbiwgaTtcbiAgbGVuID0geHMubGVuZ3RoO1xuICBpZiAoIWxlbikge1xuICAgIHJldHVybiB4cztcbiAgfVxuICBpID0gMDtcbiAgd2hpbGUgKGkgPCBsZW4gJiYgcCh4c1tpXSkpIHtcbiAgICBpICs9IDE7XG4gIH1cbiAgcmV0dXJuIHhzLnNsaWNlKGkpO1xufSk7XG5zcGFuID0gY3VycnkkKGZ1bmN0aW9uKHAsIHhzKXtcbiAgcmV0dXJuIFt0YWtlV2hpbGUocCwgeHMpLCBkcm9wV2hpbGUocCwgeHMpXTtcbn0pO1xuYnJlYWtMaXN0ID0gY3VycnkkKGZ1bmN0aW9uKHAsIHhzKXtcbiAgcmV0dXJuIHNwYW4oY29tcG9zZSQocCwgbm90JCksIHhzKTtcbn0pO1xuemlwID0gY3VycnkkKGZ1bmN0aW9uKHhzLCB5cyl7XG4gIHZhciByZXN1bHQsIGxlbiwgaSQsIGxlbiQsIGksIHg7XG4gIHJlc3VsdCA9IFtdO1xuICBsZW4gPSB5cy5sZW5ndGg7XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICBpID0gaSQ7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmVzdWx0LnB1c2goW3gsIHlzW2ldXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuemlwV2l0aCA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cywgeXMpe1xuICB2YXIgcmVzdWx0LCBsZW4sIGkkLCBsZW4kLCBpLCB4O1xuICByZXN1bHQgPSBbXTtcbiAgbGVuID0geXMubGVuZ3RoO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgaSA9IGkkO1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKGkgPT09IGxlbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKGYoeCwgeXNbaV0pKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG56aXBBbGwgPSBmdW5jdGlvbigpe1xuICB2YXIgeHNzLCBtaW5MZW5ndGgsIGkkLCBsZW4kLCB4cywgcmVmJCwgaSwgbHJlc3VsdCQsIGokLCByZXN1bHRzJCA9IFtdO1xuICB4c3MgPSBzbGljZSQuY2FsbChhcmd1bWVudHMpO1xuICBtaW5MZW5ndGggPSB1bmRlZmluZWQ7XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHNzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeHMgPSB4c3NbaSRdO1xuICAgIG1pbkxlbmd0aCA8PSAocmVmJCA9IHhzLmxlbmd0aCkgfHwgKG1pbkxlbmd0aCA9IHJlZiQpO1xuICB9XG4gIGZvciAoaSQgPSAwOyBpJCA8IG1pbkxlbmd0aDsgKytpJCkge1xuICAgIGkgPSBpJDtcbiAgICBscmVzdWx0JCA9IFtdO1xuICAgIGZvciAoaiQgPSAwLCBsZW4kID0geHNzLmxlbmd0aDsgaiQgPCBsZW4kOyArK2okKSB7XG4gICAgICB4cyA9IHhzc1tqJF07XG4gICAgICBscmVzdWx0JC5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmVzdWx0cyQucHVzaChscmVzdWx0JCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcbnppcEFsbFdpdGggPSBmdW5jdGlvbihmKXtcbiAgdmFyIHhzcywgbWluTGVuZ3RoLCBpJCwgbGVuJCwgeHMsIHJlZiQsIGksIHJlc3VsdHMkID0gW107XG4gIHhzcyA9IHNsaWNlJC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIG1pbkxlbmd0aCA9IHVuZGVmaW5lZDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4c3MubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4cyA9IHhzc1tpJF07XG4gICAgbWluTGVuZ3RoIDw9IChyZWYkID0geHMubGVuZ3RoKSB8fCAobWluTGVuZ3RoID0gcmVmJCk7XG4gIH1cbiAgZm9yIChpJCA9IDA7IGkkIDwgbWluTGVuZ3RoOyArK2kkKSB7XG4gICAgaSA9IGkkO1xuICAgIHJlc3VsdHMkLnB1c2goZi5hcHBseShudWxsLCAoZm4kKCkpKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xuICBmdW5jdGlvbiBmbiQoKXtcbiAgICB2YXIgaSQsIHJlZiQsIGxlbiQsIHJlc3VsdHMkID0gW107XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHhzcykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHhzID0gcmVmJFtpJF07XG4gICAgICByZXN1bHRzJC5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9XG59O1xuYXQgPSBjdXJyeSQoZnVuY3Rpb24obiwgeHMpe1xuICBpZiAobiA8IDApIHtcbiAgICByZXR1cm4geHNbeHMubGVuZ3RoICsgbl07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHhzW25dO1xuICB9XG59KTtcbmVsZW1JbmRleCA9IGN1cnJ5JChmdW5jdGlvbihlbCwgeHMpe1xuICB2YXIgaSQsIGxlbiQsIGksIHg7XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICBpID0gaSQ7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoeCA9PT0gZWwpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxufSk7XG5lbGVtSW5kaWNlcyA9IGN1cnJ5JChmdW5jdGlvbihlbCwgeHMpe1xuICB2YXIgaSQsIGxlbiQsIGksIHgsIHJlc3VsdHMkID0gW107XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICBpID0gaSQ7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoeCA9PT0gZWwpIHtcbiAgICAgIHJlc3VsdHMkLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xuZmluZEluZGV4ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCBpLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgaSA9IGkkO1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKGYoeCkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxufSk7XG5maW5kSW5kaWNlcyA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBpJCwgbGVuJCwgaSwgeCwgcmVzdWx0cyQgPSBbXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIGkgPSBpJDtcbiAgICB4ID0geHNbaSRdO1xuICAgIGlmIChmKHgpKSB7XG4gICAgICByZXN1bHRzJC5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59KTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBlYWNoOiBlYWNoLFxuICBtYXA6IG1hcCxcbiAgZmlsdGVyOiBmaWx0ZXIsXG4gIGNvbXBhY3Q6IGNvbXBhY3QsXG4gIHJlamVjdDogcmVqZWN0LFxuICBwYXJ0aXRpb246IHBhcnRpdGlvbixcbiAgZmluZDogZmluZCxcbiAgaGVhZDogaGVhZCxcbiAgZmlyc3Q6IGZpcnN0LFxuICB0YWlsOiB0YWlsLFxuICBsYXN0OiBsYXN0LFxuICBpbml0aWFsOiBpbml0aWFsLFxuICBlbXB0eTogZW1wdHksXG4gIHJldmVyc2U6IHJldmVyc2UsXG4gIGRpZmZlcmVuY2U6IGRpZmZlcmVuY2UsXG4gIGludGVyc2VjdGlvbjogaW50ZXJzZWN0aW9uLFxuICB1bmlvbjogdW5pb24sXG4gIGNvdW50Qnk6IGNvdW50QnksXG4gIGdyb3VwQnk6IGdyb3VwQnksXG4gIGZvbGQ6IGZvbGQsXG4gIGZvbGQxOiBmb2xkMSxcbiAgZm9sZGw6IGZvbGRsLFxuICBmb2xkbDE6IGZvbGRsMSxcbiAgZm9sZHI6IGZvbGRyLFxuICBmb2xkcjE6IGZvbGRyMSxcbiAgdW5mb2xkcjogdW5mb2xkcixcbiAgYW5kTGlzdDogYW5kTGlzdCxcbiAgb3JMaXN0OiBvckxpc3QsXG4gIGFueTogYW55LFxuICBhbGw6IGFsbCxcbiAgdW5pcXVlOiB1bmlxdWUsXG4gIHVuaXF1ZUJ5OiB1bmlxdWVCeSxcbiAgc29ydDogc29ydCxcbiAgc29ydFdpdGg6IHNvcnRXaXRoLFxuICBzb3J0Qnk6IHNvcnRCeSxcbiAgc3VtOiBzdW0sXG4gIHByb2R1Y3Q6IHByb2R1Y3QsXG4gIG1lYW46IG1lYW4sXG4gIGF2ZXJhZ2U6IGF2ZXJhZ2UsXG4gIGNvbmNhdDogY29uY2F0LFxuICBjb25jYXRNYXA6IGNvbmNhdE1hcCxcbiAgZmxhdHRlbjogZmxhdHRlbixcbiAgbWF4aW11bTogbWF4aW11bSxcbiAgbWluaW11bTogbWluaW11bSxcbiAgbWF4aW11bUJ5OiBtYXhpbXVtQnksXG4gIG1pbmltdW1CeTogbWluaW11bUJ5LFxuICBzY2FuOiBzY2FuLFxuICBzY2FuMTogc2NhbjEsXG4gIHNjYW5sOiBzY2FubCxcbiAgc2NhbmwxOiBzY2FubDEsXG4gIHNjYW5yOiBzY2FucixcbiAgc2NhbnIxOiBzY2FucjEsXG4gIHNsaWNlOiBzbGljZSxcbiAgdGFrZTogdGFrZSxcbiAgZHJvcDogZHJvcCxcbiAgc3BsaXRBdDogc3BsaXRBdCxcbiAgdGFrZVdoaWxlOiB0YWtlV2hpbGUsXG4gIGRyb3BXaGlsZTogZHJvcFdoaWxlLFxuICBzcGFuOiBzcGFuLFxuICBicmVha0xpc3Q6IGJyZWFrTGlzdCxcbiAgemlwOiB6aXAsXG4gIHppcFdpdGg6IHppcFdpdGgsXG4gIHppcEFsbDogemlwQWxsLFxuICB6aXBBbGxXaXRoOiB6aXBBbGxXaXRoLFxuICBhdDogYXQsXG4gIGVsZW1JbmRleDogZWxlbUluZGV4LFxuICBlbGVtSW5kaWNlczogZWxlbUluZGljZXMsXG4gIGZpbmRJbmRleDogZmluZEluZGV4LFxuICBmaW5kSW5kaWNlczogZmluZEluZGljZXNcbn07XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn1cbmZ1bmN0aW9uIGluJCh4LCB4cyl7XG4gIHZhciBpID0gLTEsIGwgPSB4cy5sZW5ndGggPj4+IDA7XG4gIHdoaWxlICgrK2kgPCBsKSBpZiAoeCA9PT0geHNbaV0pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb21wb3NlJCgpIHtcbiAgdmFyIGZ1bmN0aW9ucyA9IGFyZ3VtZW50cztcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCByZXN1bHQ7XG4gICAgcmVzdWx0ID0gZnVuY3Rpb25zWzBdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZm9yIChpID0gMTsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgcmVzdWx0ID0gZnVuY3Rpb25zW2ldKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5mdW5jdGlvbiBub3QkKHgpeyByZXR1cm4gIXg7IH0iLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjQuMFxudmFyIGFwcGx5LCBjdXJyeSwgZmxpcCwgZml4LCBvdmVyLCBtZW1vaXplLCBzbGljZSQgPSBbXS5zbGljZSwgdG9TdHJpbmckID0ge30udG9TdHJpbmc7XG5hcHBseSA9IGN1cnJ5JChmdW5jdGlvbihmLCBsaXN0KXtcbiAgcmV0dXJuIGYuYXBwbHkobnVsbCwgbGlzdCk7XG59KTtcbmN1cnJ5ID0gZnVuY3Rpb24oZil7XG4gIHJldHVybiBjdXJyeSQoZik7XG59O1xuZmxpcCA9IGN1cnJ5JChmdW5jdGlvbihmLCB4LCB5KXtcbiAgcmV0dXJuIGYoeSwgeCk7XG59KTtcbmZpeCA9IGZ1bmN0aW9uKGYpe1xuICByZXR1cm4gZnVuY3Rpb24oZyl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gZihnKGcpKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0oZnVuY3Rpb24oZyl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gZihnKGcpKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xufTtcbm92ZXIgPSBjdXJyeSQoZnVuY3Rpb24oZiwgZywgeCwgeSl7XG4gIHJldHVybiBmKGcoeCksIGcoeSkpO1xufSk7XG5tZW1vaXplID0gZnVuY3Rpb24oZil7XG4gIHZhciBtZW1vO1xuICBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIHZhciBhcmdzLCBrZXksIGFyZztcbiAgICBhcmdzID0gc2xpY2UkLmNhbGwoYXJndW1lbnRzKTtcbiAgICBrZXkgPSAoZnVuY3Rpb24oKXtcbiAgICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgcmVzdWx0cyQgPSBbXTtcbiAgICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSBhcmdzKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICBhcmcgPSByZWYkW2kkXTtcbiAgICAgICAgcmVzdWx0cyQucHVzaChhcmcgKyB0b1N0cmluZyQuY2FsbChhcmcpLnNsaWNlKDgsIC0xKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cyQ7XG4gICAgfSgpKS5qb2luKCcnKTtcbiAgICByZXR1cm4gbWVtb1trZXldID0ga2V5IGluIG1lbW9cbiAgICAgID8gbWVtb1trZXldXG4gICAgICA6IGYuYXBwbHkobnVsbCwgYXJncyk7XG4gIH07XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGN1cnJ5OiBjdXJyeSxcbiAgZmxpcDogZmxpcCxcbiAgZml4OiBmaXgsXG4gIGFwcGx5OiBhcHBseSxcbiAgb3Zlcjogb3ZlcixcbiAgbWVtb2l6ZTogbWVtb2l6ZVxufTtcbmZ1bmN0aW9uIGN1cnJ5JChmLCBib3VuZCl7XG4gIHZhciBjb250ZXh0LFxuICBfY3VycnkgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgcmV0dXJuIGYubGVuZ3RoID4gMSA/IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgcGFyYW1zID0gYXJncyA/IGFyZ3MuY29uY2F0KCkgOiBbXTtcbiAgICAgIGNvbnRleHQgPSBib3VuZCA/IGNvbnRleHQgfHwgdGhpcyA6IHRoaXM7XG4gICAgICByZXR1cm4gcGFyYW1zLnB1c2guYXBwbHkocGFyYW1zLCBhcmd1bWVudHMpIDxcbiAgICAgICAgICBmLmxlbmd0aCAmJiBhcmd1bWVudHMubGVuZ3RoID9cbiAgICAgICAgX2N1cnJ5LmNhbGwoY29udGV4dCwgcGFyYW1zKSA6IGYuYXBwbHkoY29udGV4dCwgcGFyYW1zKTtcbiAgICB9IDogZjtcbiAgfTtcbiAgcmV0dXJuIF9jdXJyeSgpO1xufSIsIi8vIEdlbmVyYXRlZCBieSBMaXZlU2NyaXB0IDEuNS4wXG4oZnVuY3Rpb24oKXtcbiAgdmFyIFZFUlNJT04sIHJlZiQsIGlkLCBtYXAsIGNvbXBhY3QsIGFueSwgZ3JvdXBCeSwgcGFydGl0aW9uLCBjaGFycywgaXNJdE5hTiwga2V5cywgT2JqLCBjYW1lbGl6ZSwgZGVlcElzLCBjbG9zZXN0U3RyaW5nLCBuYW1lVG9SYXcsIGRhc2hlcml6ZSwgbmF0dXJhbEpvaW4sIGdlbmVyYXRlSGVscCwgZ2VuZXJhdGVIZWxwRm9yT3B0aW9uLCBwYXJzZWRUeXBlQ2hlY2ssIHBhcnNlVHlwZSwgcGFyc2VMZXZuLCBjYW1lbGl6ZUtleXMsIHBhcnNlU3RyaW5nLCBtYWluLCB0b1N0cmluZyQgPSB7fS50b1N0cmluZywgc2xpY2UkID0gW10uc2xpY2U7XG4gIFZFUlNJT04gPSAnMC44LjInO1xuICByZWYkID0gcmVxdWlyZSgncHJlbHVkZS1scycpLCBpZCA9IHJlZiQuaWQsIG1hcCA9IHJlZiQubWFwLCBjb21wYWN0ID0gcmVmJC5jb21wYWN0LCBhbnkgPSByZWYkLmFueSwgZ3JvdXBCeSA9IHJlZiQuZ3JvdXBCeSwgcGFydGl0aW9uID0gcmVmJC5wYXJ0aXRpb24sIGNoYXJzID0gcmVmJC5jaGFycywgaXNJdE5hTiA9IHJlZiQuaXNJdE5hTiwga2V5cyA9IHJlZiQua2V5cywgT2JqID0gcmVmJC5PYmosIGNhbWVsaXplID0gcmVmJC5jYW1lbGl6ZTtcbiAgZGVlcElzID0gcmVxdWlyZSgnZGVlcC1pcycpO1xuICByZWYkID0gcmVxdWlyZSgnLi91dGlsJyksIGNsb3Nlc3RTdHJpbmcgPSByZWYkLmNsb3Nlc3RTdHJpbmcsIG5hbWVUb1JhdyA9IHJlZiQubmFtZVRvUmF3LCBkYXNoZXJpemUgPSByZWYkLmRhc2hlcml6ZSwgbmF0dXJhbEpvaW4gPSByZWYkLm5hdHVyYWxKb2luO1xuICByZWYkID0gcmVxdWlyZSgnLi9oZWxwJyksIGdlbmVyYXRlSGVscCA9IHJlZiQuZ2VuZXJhdGVIZWxwLCBnZW5lcmF0ZUhlbHBGb3JPcHRpb24gPSByZWYkLmdlbmVyYXRlSGVscEZvck9wdGlvbjtcbiAgcmVmJCA9IHJlcXVpcmUoJ3R5cGUtY2hlY2snKSwgcGFyc2VkVHlwZUNoZWNrID0gcmVmJC5wYXJzZWRUeXBlQ2hlY2ssIHBhcnNlVHlwZSA9IHJlZiQucGFyc2VUeXBlO1xuICBwYXJzZUxldm4gPSByZXF1aXJlKCdsZXZuJykucGFyc2VkVHlwZVBhcnNlO1xuICBjYW1lbGl6ZUtleXMgPSBmdW5jdGlvbihvYmope1xuICAgIHZhciBrZXksIHZhbHVlLCByZXN1bHRPYmokID0ge307XG4gICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgcmVzdWx0T2JqJFtjYW1lbGl6ZShrZXkpXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0T2JqJDtcbiAgfTtcbiAgcGFyc2VTdHJpbmcgPSBmdW5jdGlvbihzdHJpbmcpe1xuICAgIHZhciBhc3NpZ25PcHQsIHJlZ2V4LCByZXBsYWNlUmVnZXgsIHJlc3VsdCwgdGhpcyQgPSB0aGlzO1xuICAgIGFzc2lnbk9wdCA9ICctLT9bYS16QS1aXVstYS16LUEtWjAtOV0qPSc7XG4gICAgcmVnZXggPSBSZWdFeHAoJyg/OicgKyBhc3NpZ25PcHQgKyAnKT8oPzpcXCcoPzpcXFxcXFxcXFxcJ3xbXlxcJ10pK1xcJ3xcIig/OlxcXFxcXFxcXCJ8W15cIl0pK1wiKXxbXlxcJ1wiXFxcXHNdKycsICdnJyk7XG4gICAgcmVwbGFjZVJlZ2V4ID0gUmVnRXhwKCdeKCcgKyBhc3NpZ25PcHQgKyAnKT9bXFwnXCJdKFtcXFxcc1xcXFxTXSopW1xcJ1wiXSQnKTtcbiAgICByZXN1bHQgPSBtYXAoZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0LnJlcGxhY2UocmVwbGFjZVJlZ2V4LCAnJDEkMicpO1xuICAgIH0sIHN0cmluZy5tYXRjaChyZWdleCkgfHwgW10pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1haW4gPSBmdW5jdGlvbihsaWJPcHRpb25zKXtcbiAgICB2YXIgb3B0cywgZGVmYXVsdHMsIHJlcXVpcmVkLCB0cmF2ZXJzZSwgZ2V0T3B0aW9uLCBwYXJzZTtcbiAgICBvcHRzID0ge307XG4gICAgZGVmYXVsdHMgPSB7fTtcbiAgICByZXF1aXJlZCA9IFtdO1xuICAgIGlmICh0b1N0cmluZyQuY2FsbChsaWJPcHRpb25zLnN0ZG91dCkuc2xpY2UoOCwgLTEpID09PSAnVW5kZWZpbmVkJykge1xuICAgICAgbGliT3B0aW9ucy5zdGRvdXQgPSBwcm9jZXNzLnN0ZG91dDtcbiAgICB9XG4gICAgbGliT3B0aW9ucy5wb3NpdGlvbmFsQW55d2hlcmUgPT0gbnVsbCAmJiAobGliT3B0aW9ucy5wb3NpdGlvbmFsQW55d2hlcmUgPSB0cnVlKTtcbiAgICBsaWJPcHRpb25zLnR5cGVBbGlhc2VzID09IG51bGwgJiYgKGxpYk9wdGlvbnMudHlwZUFsaWFzZXMgPSB7fSk7XG4gICAgbGliT3B0aW9ucy5kZWZhdWx0cyA9PSBudWxsICYmIChsaWJPcHRpb25zLmRlZmF1bHRzID0ge30pO1xuICAgIGlmIChsaWJPcHRpb25zLmNvbmNhdFJlcGVhdGVkQXJyYXlzICE9IG51bGwpIHtcbiAgICAgIGxpYk9wdGlvbnMuZGVmYXVsdHMuY29uY2F0UmVwZWF0ZWRBcnJheXMgPSBsaWJPcHRpb25zLmNvbmNhdFJlcGVhdGVkQXJyYXlzO1xuICAgIH1cbiAgICBpZiAobGliT3B0aW9ucy5tZXJnZVJlcGVhdGVkT2JqZWN0cyAhPSBudWxsKSB7XG4gICAgICBsaWJPcHRpb25zLmRlZmF1bHRzLm1lcmdlUmVwZWF0ZWRPYmplY3RzID0gbGliT3B0aW9ucy5tZXJnZVJlcGVhdGVkT2JqZWN0cztcbiAgICB9XG4gICAgdHJhdmVyc2UgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICAgIHZhciBpJCwgbGVuJCwgb3B0aW9uLCBuYW1lLCBrLCByZWYkLCB2LCB0eXBlLCB0aGF0LCBlLCBwYXJzZWRQb3NzaWJpbGl0aWVzLCBwYXJzZWRUeXBlLCBqJCwgbGVuMSQsIHBvc3NpYmlsaXR5LCByYXdEZXBlbmRzVHlwZSwgZGVwZW5kc09wdHMsIGRlcGVuZHNUeXBlLCBjcmEsIGFsaWFzLCBzaG9ydE5hbWVzLCBsb25nTmFtZXMsIHRoaXMkID0gdGhpcztcbiAgICAgIGlmICh0b1N0cmluZyQuY2FsbChvcHRpb25zKS5zbGljZSg4LCAtMSkgIT09ICdBcnJheScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBvcHRpb25zIGRlZmluZWQuJyk7XG4gICAgICB9XG4gICAgICBmb3IgKGkkID0gMCwgbGVuJCA9IG9wdGlvbnMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgICAgb3B0aW9uID0gb3B0aW9uc1tpJF07XG4gICAgICAgIGlmIChvcHRpb24uaGVhZGluZyA9PSBudWxsKSB7XG4gICAgICAgICAgbmFtZSA9IG9wdGlvbi5vcHRpb247XG4gICAgICAgICAgaWYgKG9wdHNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdcIiArIG5hbWUgKyBcIicgYWxyZWFkeSBkZWZpbmVkLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChrIGluIHJlZiQgPSBsaWJPcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICB2ID0gcmVmJFtrXTtcbiAgICAgICAgICAgIG9wdGlvbltrXSA9PSBudWxsICYmIChvcHRpb25ba10gPSB2KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGlvbi50eXBlID09PSAnQm9vbGVhbicpIHtcbiAgICAgICAgICAgIG9wdGlvbi5ib29sZWFuID09IG51bGwgJiYgKG9wdGlvbi5ib29sZWFuID0gdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRpb24ucGFyc2VkVHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHR5cGUgZGVmaW5lZCBmb3Igb3B0aW9uICdcIiArIG5hbWUgKyBcIicuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdHlwZSA9ICh0aGF0ID0gbGliT3B0aW9ucy50eXBlQWxpYXNlc1tvcHRpb24udHlwZV0pICE9IG51bGxcbiAgICAgICAgICAgICAgICA/IHRoYXRcbiAgICAgICAgICAgICAgICA6IG9wdGlvbi50eXBlO1xuICAgICAgICAgICAgICBvcHRpb24ucGFyc2VkVHlwZSA9IHBhcnNlVHlwZSh0eXBlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUkKSB7XG4gICAgICAgICAgICAgIGUgPSBlJDtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdcIiArIG5hbWUgKyBcIic6IEVycm9yIHBhcnNpbmcgdHlwZSAnXCIgKyBvcHRpb24udHlwZSArIFwiJzogXCIgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9uWydkZWZhdWx0J10pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRlZmF1bHRzW25hbWVdID0gcGFyc2VMZXZuKG9wdGlvbi5wYXJzZWRUeXBlLCBvcHRpb25bJ2RlZmF1bHQnXSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlJCkge1xuICAgICAgICAgICAgICBlID0gZSQ7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnXCIgKyBuYW1lICsgXCInOiBFcnJvciBwYXJzaW5nIGRlZmF1bHQgdmFsdWUgJ1wiICsgb3B0aW9uWydkZWZhdWx0J10gKyBcIicgZm9yIHR5cGUgJ1wiICsgb3B0aW9uLnR5cGUgKyBcIic6IFwiICsgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGlvblsnZW51bSddICYmICFvcHRpb24ucGFyc2VkUG9zc2libGl0aWVzKSB7XG4gICAgICAgICAgICBwYXJzZWRQb3NzaWJpbGl0aWVzID0gW107XG4gICAgICAgICAgICBwYXJzZWRUeXBlID0gb3B0aW9uLnBhcnNlZFR5cGU7XG4gICAgICAgICAgICBmb3IgKGokID0gMCwgbGVuMSQgPSAocmVmJCA9IG9wdGlvblsnZW51bSddKS5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgICAgICAgcG9zc2liaWxpdHkgPSByZWYkW2okXTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJzZWRQb3NzaWJpbGl0aWVzLnB1c2gocGFyc2VMZXZuKHBhcnNlZFR5cGUsIHBvc3NpYmlsaXR5KSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUkKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUkO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnXCIgKyBuYW1lICsgXCInOiBFcnJvciBwYXJzaW5nIGVudW0gdmFsdWUgJ1wiICsgcG9zc2liaWxpdHkgKyBcIicgZm9yIHR5cGUgJ1wiICsgb3B0aW9uLnR5cGUgKyBcIic6IFwiICsgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9uLnBhcnNlZFBvc3NpYmlsaXRpZXMgPSBwYXJzZWRQb3NzaWJpbGl0aWVzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhhdCA9IG9wdGlvbi5kZXBlbmRzT24pIHtcbiAgICAgICAgICAgIGlmICh0aGF0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZWYkID0gW10uY29uY2F0KG9wdGlvbi5kZXBlbmRzT24pLCByYXdEZXBlbmRzVHlwZSA9IHJlZiRbMF0sIGRlcGVuZHNPcHRzID0gc2xpY2UkLmNhbGwocmVmJCwgMSk7XG4gICAgICAgICAgICAgIGRlcGVuZHNUeXBlID0gcmF3RGVwZW5kc1R5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgaWYgKGRlcGVuZHNPcHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChkZXBlbmRzVHlwZSA9PT0gJ2FuZCcgfHwgZGVwZW5kc1R5cGUgPT09ICdvcicpIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbi5kZXBlbmRzT24gPSBbZGVwZW5kc1R5cGVdLmNvbmNhdChzbGljZSQuY2FsbChkZXBlbmRzT3B0cykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ1wiICsgbmFtZSArIFwiJzogSWYgeW91IGhhdmUgbW9yZSB0aGFuIG9uZSBkZXBlbmRlbmN5LCB5b3UgbXVzdCBzcGVjaWZ5IGVpdGhlciAnYW5kJyBvciAnb3InXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHJlZiQgPSBkZXBlbmRzVHlwZS50b0xvd2VyQ2FzZSgpKSA9PT0gJ2FuZCcgfHwgcmVmJCA9PT0gJ29yJykge1xuICAgICAgICAgICAgICAgICAgb3B0aW9uLmRlcGVuZHNPbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbi5kZXBlbmRzT24gPSBbJ2FuZCcsIHJhd0RlcGVuZHNUeXBlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9wdGlvbi5kZXBlbmRzT24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9uLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICByZXF1aXJlZC5wdXNoKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRzW25hbWVdID0gb3B0aW9uO1xuICAgICAgICAgIGlmIChvcHRpb24uY29uY2F0UmVwZWF0ZWRBcnJheXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgY3JhID0gb3B0aW9uLmNvbmNhdFJlcGVhdGVkQXJyYXlzO1xuICAgICAgICAgICAgaWYgKCdCb29sZWFuJyA9PT0gdG9TdHJpbmckLmNhbGwoY3JhKS5zbGljZSg4LCAtMSkpIHtcbiAgICAgICAgICAgICAgb3B0aW9uLmNvbmNhdFJlcGVhdGVkQXJyYXlzID0gW2NyYSwge31dO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjcmEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIG9wdGlvbi5jb25jYXRSZXBlYXRlZEFycmF5cyA9IFtjcmFbMF0sIHt9XTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3JhLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNldHRpbmcgZm9yIGNvbmNhdFJlcGVhdGVkQXJyYXlzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9uLmFsaWFzIHx8IG9wdGlvbi5hbGlhc2VzKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ05VTScpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiLU5VTSBvcHRpb24gY2FuJ3QgaGF2ZSBhbGlhc2VzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb24uYWxpYXMpIHtcbiAgICAgICAgICAgICAgb3B0aW9uLmFsaWFzZXMgPT0gbnVsbCAmJiAob3B0aW9uLmFsaWFzZXMgPSBbXS5jb25jYXQob3B0aW9uLmFsaWFzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGokID0gMCwgbGVuMSQgPSAocmVmJCA9IG9wdGlvbi5hbGlhc2VzKS5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgICAgICAgYWxpYXMgPSByZWYkW2okXTtcbiAgICAgICAgICAgICAgaWYgKG9wdHNbYWxpYXNdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ1wiICsgYWxpYXMgKyBcIicgYWxyZWFkeSBkZWZpbmVkLlwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvcHRzW2FsaWFzXSA9IG9wdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZiQgPSBwYXJ0aXRpb24oZm4kLCBvcHRpb24uYWxpYXNlcyksIHNob3J0TmFtZXMgPSByZWYkWzBdLCBsb25nTmFtZXMgPSByZWYkWzFdO1xuICAgICAgICAgICAgb3B0aW9uLnNob3J0TmFtZXMgPT0gbnVsbCAmJiAob3B0aW9uLnNob3J0TmFtZXMgPSBzaG9ydE5hbWVzKTtcbiAgICAgICAgICAgIG9wdGlvbi5sb25nTmFtZXMgPT0gbnVsbCAmJiAob3B0aW9uLmxvbmdOYW1lcyA9IGxvbmdOYW1lcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoIW9wdGlvbi5hbGlhc2VzIHx8IG9wdGlvbi5zaG9ydE5hbWVzLmxlbmd0aCA9PT0gMCkgJiYgb3B0aW9uLnR5cGUgPT09ICdCb29sZWFuJyAmJiBvcHRpb25bJ2RlZmF1bHQnXSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICBvcHRpb24ubmVnYXRlTmFtZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBmbiQoaXQpe1xuICAgICAgICByZXR1cm4gaXQubGVuZ3RoID09PSAxO1xuICAgICAgfVxuICAgIH07XG4gICAgdHJhdmVyc2UobGliT3B0aW9ucy5vcHRpb25zKTtcbiAgICBnZXRPcHRpb24gPSBmdW5jdGlvbihuYW1lKXtcbiAgICAgIHZhciBvcHQsIHBvc3NpYmx5TWVhbnQ7XG4gICAgICBvcHQgPSBvcHRzW25hbWVdO1xuICAgICAgaWYgKG9wdCA9PSBudWxsKSB7XG4gICAgICAgIHBvc3NpYmx5TWVhbnQgPSBjbG9zZXN0U3RyaW5nKGtleXMob3B0cyksIG5hbWUpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9wdGlvbiAnXCIgKyBuYW1lVG9SYXcobmFtZSkgKyBcIidcIiArIChwb3NzaWJseU1lYW50ID8gXCIgLSBwZXJoYXBzIHlvdSBtZWFudCAnXCIgKyBuYW1lVG9SYXcocG9zc2libHlNZWFudCkgKyBcIic/XCIgOiAnLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHQ7XG4gICAgfTtcbiAgICBwYXJzZSA9IGZ1bmN0aW9uKGlucHV0LCBhcmckKXtcbiAgICAgIHZhciBzbGljZSwgb2JqLCBwb3NpdGlvbmFsLCByZXN0UG9zaXRpb25hbCwgb3ZlcnJpZGVSZXF1aXJlZCwgcHJvcCwgc2V0VmFsdWUsIHNldERlZmF1bHRzLCBjaGVja1JlcXVpcmVkLCBtdXR1YWxseUV4Y2x1c2l2ZUVycm9yLCBjaGVja011dHVhbGx5RXhjbHVzaXZlLCBjaGVja0RlcGVuZGVuY3ksIGNoZWNrRGVwZW5kZW5jaWVzLCBjaGVja1Byb3AsIGFyZ3MsIGtleSwgdmFsdWUsIG9wdGlvbiwgcmVmJCwgaSQsIGxlbiQsIGFyZywgdGhhdCwgcmVzdWx0LCBzaG9ydCwgYXJnTmFtZSwgdXNpbmdBc3NpZ24sIHZhbCwgZmxhZ3MsIGxlbiwgaiQsIGxlbjEkLCBpLCBmbGFnLCBvcHQsIG5hbWUsIHZhbFByaW1lLCBuZWdhdGVkLCBub2VkTmFtZTtcbiAgICAgIHNsaWNlID0gKGFyZyQgIT0gbnVsbFxuICAgICAgICA/IGFyZyRcbiAgICAgICAgOiB7fSkuc2xpY2U7XG4gICAgICBvYmogPSB7fTtcbiAgICAgIHBvc2l0aW9uYWwgPSBbXTtcbiAgICAgIHJlc3RQb3NpdGlvbmFsID0gZmFsc2U7XG4gICAgICBvdmVycmlkZVJlcXVpcmVkID0gZmFsc2U7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpe1xuICAgICAgICB2YXIgb3B0LCB2YWwsIGNyYSwgZSwgY3VycmVudFR5cGU7XG4gICAgICAgIG9wdCA9IGdldE9wdGlvbihuYW1lKTtcbiAgICAgICAgaWYgKG9wdC5ib29sZWFuKSB7XG4gICAgICAgICAgdmFsID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNyYSA9IG9wdC5jb25jYXRSZXBlYXRlZEFycmF5cztcbiAgICAgICAgICAgIGlmIChjcmEgIT0gbnVsbCAmJiBjcmFbMF0gJiYgY3JhWzFdLm9uZVZhbHVlUGVyRmxhZyAmJiBvcHQucGFyc2VkVHlwZS5sZW5ndGggPT09IDEgJiYgb3B0LnBhcnNlZFR5cGVbMF0uc3RydWN0dXJlID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgIHZhbCA9IFtwYXJzZUxldm4ob3B0LnBhcnNlZFR5cGVbMF0ub2YsIHZhbHVlKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWwgPSBwYXJzZUxldm4ob3B0LnBhcnNlZFR5cGUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlJCkge1xuICAgICAgICAgICAgZSA9IGUkO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uICdcIiArIG5hbWUgKyBcIicgLSBleHBlY3RlZCB0eXBlIFwiICsgb3B0LnR5cGUgKyBcIiwgcmVjZWl2ZWQgdmFsdWU6IFwiICsgdmFsdWUgKyBcIi5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRbJ2VudW0nXSAmJiAhYW55KGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgICAgIHJldHVybiBkZWVwSXMoaXQsIHZhbCk7XG4gICAgICAgICAgfSwgb3B0LnBhcnNlZFBvc3NpYmlsaXRpZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gXCIgKyBuYW1lICsgXCI6ICdcIiArIHZhbCArIFwiJyBub3Qgb25lIG9mIFwiICsgbmF0dXJhbEpvaW4ob3B0WydlbnVtJ10pICsgXCIuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50VHlwZSA9IHRvU3RyaW5nJC5jYWxsKG9ialtuYW1lXSkuc2xpY2UoOCwgLTEpO1xuICAgICAgICBpZiAob2JqW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAob3B0LmNvbmNhdFJlcGVhdGVkQXJyYXlzICE9IG51bGwgJiYgb3B0LmNvbmNhdFJlcGVhdGVkQXJyYXlzWzBdICYmIGN1cnJlbnRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgICAgICAgICBvYmpbbmFtZV0gPSBvYmpbbmFtZV0uY29uY2F0KHZhbCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHQubWVyZ2VSZXBlYXRlZE9iamVjdHMgJiYgY3VycmVudFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgICAgICAgICBpbXBvcnQkKG9ialtuYW1lXSwgdmFsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqW25hbWVdID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmpbbmFtZV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdC5yZXN0UG9zaXRpb25hbCkge1xuICAgICAgICAgIHJlc3RQb3NpdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0Lm92ZXJyaWRlUmVxdWlyZWQpIHtcbiAgICAgICAgICBvdmVycmlkZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHNldERlZmF1bHRzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIG5hbWUsIHJlZiQsIHZhbHVlO1xuICAgICAgICBmb3IgKG5hbWUgaW4gcmVmJCA9IGRlZmF1bHRzKSB7XG4gICAgICAgICAgdmFsdWUgPSByZWYkW25hbWVdO1xuICAgICAgICAgIGlmIChvYmpbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgb2JqW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hlY2tSZXF1aXJlZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgbmFtZTtcbiAgICAgICAgaWYgKG92ZXJyaWRlUmVxdWlyZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHJlcXVpcmVkKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICAgIG5hbWUgPSByZWYkW2kkXTtcbiAgICAgICAgICBpZiAoIW9ialtuYW1lXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uIFwiICsgbmFtZVRvUmF3KG5hbWUpICsgXCIgaXMgcmVxdWlyZWQuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG11dHVhbGx5RXhjbHVzaXZlRXJyb3IgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG9wdGlvbnMgXCIgKyBuYW1lVG9SYXcoZmlyc3QpICsgXCIgYW5kIFwiICsgbmFtZVRvUmF3KHNlY29uZCkgKyBcIiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlIC0geW91IGNhbm5vdCB1c2UgdGhlbSBhdCB0aGUgc2FtZSB0aW1lLlwiKTtcbiAgICAgIH07XG4gICAgICBjaGVja011dHVhbGx5RXhjbHVzaXZlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHJ1bGVzLCBpJCwgbGVuJCwgcnVsZSwgcHJlc2VudCwgaiQsIGxlbjEkLCBlbGVtZW50LCBrJCwgbGVuMiQsIG9wdDtcbiAgICAgICAgcnVsZXMgPSBsaWJPcHRpb25zLm11dHVhbGx5RXhjbHVzaXZlO1xuICAgICAgICBpZiAoIXJ1bGVzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSQgPSAwLCBsZW4kID0gcnVsZXMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgICAgICBydWxlID0gcnVsZXNbaSRdO1xuICAgICAgICAgIHByZXNlbnQgPSBudWxsO1xuICAgICAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHJ1bGUubGVuZ3RoOyBqJCA8IGxlbjEkOyArK2okKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gcnVsZVtqJF07XG4gICAgICAgICAgICBpZiAodG9TdHJpbmckLmNhbGwoZWxlbWVudCkuc2xpY2UoOCwgLTEpID09PSAnQXJyYXknKSB7XG4gICAgICAgICAgICAgIGZvciAoayQgPSAwLCBsZW4yJCA9IGVsZW1lbnQubGVuZ3RoOyBrJCA8IGxlbjIkOyArK2skKSB7XG4gICAgICAgICAgICAgICAgb3B0ID0gZWxlbWVudFtrJF07XG4gICAgICAgICAgICAgICAgaWYgKG9wdCBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICAgIGlmIChwcmVzZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbXV0dWFsbHlFeGNsdXNpdmVFcnJvcihwcmVzZW50LCBvcHQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCA9IG9wdDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudCBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAocHJlc2VudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBtdXR1YWxseUV4Y2x1c2l2ZUVycm9yKHByZXNlbnQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwcmVzZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaGVja0RlcGVuZGVuY3kgPSBmdW5jdGlvbihvcHRpb24pe1xuICAgICAgICB2YXIgZGVwZW5kc09uLCB0eXBlLCB0YXJnZXRPcHRpb25OYW1lcywgaSQsIGxlbiQsIHRhcmdldE9wdGlvbk5hbWUsIHRhcmdldE9wdGlvbjtcbiAgICAgICAgZGVwZW5kc09uID0gb3B0aW9uLmRlcGVuZHNPbjtcbiAgICAgICAgaWYgKCFkZXBlbmRzT24gfHwgb3B0aW9uLmRlcGVuZGVuY2llc01ldCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHR5cGUgPSBkZXBlbmRzT25bMF0sIHRhcmdldE9wdGlvbk5hbWVzID0gc2xpY2UkLmNhbGwoZGVwZW5kc09uLCAxKTtcbiAgICAgICAgZm9yIChpJCA9IDAsIGxlbiQgPSB0YXJnZXRPcHRpb25OYW1lcy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICAgIHRhcmdldE9wdGlvbk5hbWUgPSB0YXJnZXRPcHRpb25OYW1lc1tpJF07XG4gICAgICAgICAgdGFyZ2V0T3B0aW9uID0gb2JqW3RhcmdldE9wdGlvbk5hbWVdO1xuICAgICAgICAgIGlmICh0YXJnZXRPcHRpb24gJiYgY2hlY2tEZXBlbmRlbmN5KHRhcmdldE9wdGlvbikpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnb3InKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2FuZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBvcHRpb24gJ1wiICsgb3B0aW9uLm9wdGlvbiArIFwiJyBkaWQgbm90IGhhdmUgaXRzIGRlcGVuZGVuY2llcyBtZXQuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2FuZCcpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgb3B0aW9uICdcIiArIG9wdGlvbi5vcHRpb24gKyBcIicgZGlkIG5vdCBtZWV0IGFueSBvZiBpdHMgZGVwZW5kZW5jaWVzLlwiKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNoZWNrRGVwZW5kZW5jaWVzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIG5hbWU7XG4gICAgICAgIGZvciAobmFtZSBpbiBvYmopIHtcbiAgICAgICAgICBjaGVja0RlcGVuZGVuY3kob3B0c1tuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaGVja1Byb3AgPSBmdW5jdGlvbigpe1xuICAgICAgICBpZiAocHJvcCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIGZvciAnXCIgKyBwcm9wICsgXCInIG9mIHR5cGUgJ1wiICsgZ2V0T3B0aW9uKHByb3ApLnR5cGUgKyBcIicgcmVxdWlyZWQuXCIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgc3dpdGNoICh0b1N0cmluZyQuY2FsbChpbnB1dCkuc2xpY2UoOCwgLTEpKSB7XG4gICAgICBjYXNlICdTdHJpbmcnOlxuICAgICAgICBhcmdzID0gcGFyc2VTdHJpbmcoaW5wdXQuc2xpY2Uoc2xpY2UgIT0gbnVsbCA/IHNsaWNlIDogMCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgICAgYXJncyA9IGlucHV0LnNsaWNlKHNsaWNlICE9IG51bGwgPyBzbGljZSA6IDIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICAgIG9iaiA9IHt9O1xuICAgICAgICBmb3IgKGtleSBpbiBpbnB1dCkge1xuICAgICAgICAgIHZhbHVlID0gaW5wdXRba2V5XTtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnXycpIHtcbiAgICAgICAgICAgIG9wdGlvbiA9IGdldE9wdGlvbihkYXNoZXJpemUoa2V5KSk7XG4gICAgICAgICAgICBpZiAocGFyc2VkVHlwZUNoZWNrKG9wdGlvbi5wYXJzZWRUeXBlLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgb2JqW29wdGlvbi5vcHRpb25dID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ1wiICsgb3B0aW9uLm9wdGlvbiArIFwiJzogSW52YWxpZCB0eXBlIGZvciAnXCIgKyB2YWx1ZSArIFwiJyAtIGV4cGVjdGVkIHR5cGUgJ1wiICsgb3B0aW9uLnR5cGUgKyBcIicuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaGVja011dHVhbGx5RXhjbHVzaXZlKCk7XG4gICAgICAgIGNoZWNrRGVwZW5kZW5jaWVzKCk7XG4gICAgICAgIHNldERlZmF1bHRzKCk7XG4gICAgICAgIGNoZWNrUmVxdWlyZWQoKTtcbiAgICAgICAgcmV0dXJuIHJlZiQgPSBjYW1lbGl6ZUtleXMob2JqKSwgcmVmJC5fID0gaW5wdXQuXyB8fCBbXSwgcmVmJDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgdG8gJ3BhcnNlJzogXCIgKyBpbnB1dCArIFwiLlwiKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSQgPSAwLCBsZW4kID0gYXJncy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICBhcmcgPSBhcmdzW2kkXTtcbiAgICAgICAgaWYgKGFyZyA9PT0gJy0tJykge1xuICAgICAgICAgIHJlc3RQb3NpdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN0UG9zaXRpb25hbCkge1xuICAgICAgICAgIHBvc2l0aW9uYWwucHVzaChhcmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGF0ID0gYXJnLm1hdGNoKC9eKC0tPykoW2EtekEtWl1bLWEtekEtWjAtOV0qKSg9KT8oLiopPyQvKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhhdDtcbiAgICAgICAgICAgIGNoZWNrUHJvcCgpO1xuICAgICAgICAgICAgc2hvcnQgPSByZXN1bHRbMV0ubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgYXJnTmFtZSA9IHJlc3VsdFsyXTtcbiAgICAgICAgICAgIHVzaW5nQXNzaWduID0gcmVzdWx0WzNdICE9IG51bGw7XG4gICAgICAgICAgICB2YWwgPSByZXN1bHRbNF07XG4gICAgICAgICAgICBpZiAodXNpbmdBc3NpZ24gJiYgdmFsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdmFsdWUgZm9yICdcIiArIGFyZ05hbWUgKyBcIicgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG9ydCkge1xuICAgICAgICAgICAgICBmbGFncyA9IGNoYXJzKGFyZ05hbWUpO1xuICAgICAgICAgICAgICBsZW4gPSBmbGFncy5sZW5ndGg7XG4gICAgICAgICAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IGZsYWdzLmxlbmd0aDsgaiQgPCBsZW4xJDsgKytqJCkge1xuICAgICAgICAgICAgICAgIGkgPSBqJDtcbiAgICAgICAgICAgICAgICBmbGFnID0gZmxhZ3NbaiRdO1xuICAgICAgICAgICAgICAgIG9wdCA9IGdldE9wdGlvbihmbGFnKTtcbiAgICAgICAgICAgICAgICBuYW1lID0gb3B0Lm9wdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAocmVzdFBvc2l0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uYWwucHVzaChmbGFnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh1c2luZ0Fzc2lnbikge1xuICAgICAgICAgICAgICAgICAgICB2YWxQcmltZSA9IG9wdC5ib29sZWFuID8gcGFyc2VMZXZuKFt7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0Jvb2xlYW4nXG4gICAgICAgICAgICAgICAgICAgIH1dLCB2YWwpIDogdmFsO1xuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShuYW1lLCB2YWxQcmltZSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdC5ib29sZWFuKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKG5hbWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcCA9IG5hbWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHQuYm9vbGVhbikge1xuICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHNldCBhcmd1bWVudCAnXCIgKyBmbGFnICsgXCInIHdoZW4gbm90IGxhc3QgZmxhZyBpbiBhIGdyb3VwIG9mIHNob3J0IGZsYWdzLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5lZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKHRoYXQgPSBhcmdOYW1lLm1hdGNoKC9ebm8tKC4rKSQvKSkge1xuICAgICAgICAgICAgICAgIG5lZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG5vZWROYW1lID0gdGhhdFsxXTtcbiAgICAgICAgICAgICAgICBvcHQgPSBnZXRPcHRpb24obm9lZE5hbWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdCA9IGdldE9wdGlvbihhcmdOYW1lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuYW1lID0gb3B0Lm9wdGlvbjtcbiAgICAgICAgICAgICAgaWYgKG9wdC5ib29sZWFuKSB7XG4gICAgICAgICAgICAgICAgdmFsUHJpbWUgPSB1c2luZ0Fzc2lnbiA/IHBhcnNlTGV2bihbe1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ0Jvb2xlYW4nXG4gICAgICAgICAgICAgICAgfV0sIHZhbCkgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChuZWdhdGVkKSB7XG4gICAgICAgICAgICAgICAgICBzZXRWYWx1ZShuYW1lLCAhdmFsUHJpbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzZXRWYWx1ZShuYW1lLCB2YWxQcmltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChuZWdhdGVkKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IHVzZSAnbm8tJyBwcmVmaXggZm9yIEJvb2xlYW4gb3B0aW9ucywgbm90IHdpdGggJ1wiICsgbm9lZE5hbWUgKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodXNpbmdBc3NpZ24pIHtcbiAgICAgICAgICAgICAgICAgIHNldFZhbHVlKG5hbWUsIHZhbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHByb3AgPSBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhhdCA9IGFyZy5tYXRjaCgvXi0oWzAtOV0rKD86XFwuWzAtOV0rKT8pJC8pKSB7XG4gICAgICAgICAgICBvcHQgPSBvcHRzLk5VTTtcbiAgICAgICAgICAgIGlmICghb3B0KSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gLU5VTSBvcHRpb24gZGVmaW5lZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFZhbHVlKG9wdC5vcHRpb24sIHRoYXRbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvcCkge1xuICAgICAgICAgICAgICBzZXRWYWx1ZShwcm9wLCBhcmcpO1xuICAgICAgICAgICAgICBwcm9wID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uYWwucHVzaChhcmcpO1xuICAgICAgICAgICAgICBpZiAoIWxpYk9wdGlvbnMucG9zaXRpb25hbEFueXdoZXJlKSB7XG4gICAgICAgICAgICAgICAgcmVzdFBvc2l0aW9uYWwgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AoKTtcbiAgICAgIGNoZWNrTXV0dWFsbHlFeGNsdXNpdmUoKTtcbiAgICAgIGNoZWNrRGVwZW5kZW5jaWVzKCk7XG4gICAgICBzZXREZWZhdWx0cygpO1xuICAgICAgY2hlY2tSZXF1aXJlZCgpO1xuICAgICAgcmV0dXJuIHJlZiQgPSBjYW1lbGl6ZUtleXMob2JqKSwgcmVmJC5fID0gcG9zaXRpb25hbCwgcmVmJDtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBwYXJzZTogcGFyc2UsXG4gICAgICBwYXJzZUFyZ3Y6IGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgcmV0dXJuIHBhcnNlKGl0LCB7XG4gICAgICAgICAgc2xpY2U6IDJcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZ2VuZXJhdGVIZWxwOiBnZW5lcmF0ZUhlbHAobGliT3B0aW9ucyksXG4gICAgICBnZW5lcmF0ZUhlbHBGb3JPcHRpb246IGdlbmVyYXRlSGVscEZvck9wdGlvbihnZXRPcHRpb24sIGxpYk9wdGlvbnMpXG4gICAgfTtcbiAgfTtcbiAgbWFpbi5WRVJTSU9OID0gVkVSU0lPTjtcbiAgbW9kdWxlLmV4cG9ydHMgPSBtYWluO1xuICBmdW5jdGlvbiBpbXBvcnQkKG9iaiwgc3JjKXtcbiAgICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gICAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG59KS5jYWxsKHRoaXMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBvcHRpb25hdG9yID0gcmVxdWlyZSgnb3B0aW9uYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9wdGlvbmF0b3Ioe1xuICAgIHByZXBlbmQ6IFwid2lzdCBbb3B0aW9uc10gZmlsZS5icnMgW2ZpbGUuYnJzXSBbZGlyXVwiLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGNvbmNhdFJlcGVhdGVkQXJyYXlzOiB0cnVlLFxuICAgICAgICBtZXJnZVJlcGVhdGVkT2JqZWN0czogdHJ1ZVxuICAgIH0sXG4gICAgb3B0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBoZWFkaW5nOiBcIkJhc2ljIGNvbmZpZ3VyYXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBvcHRpb246IFwiaW5pdFwiLFxuICAgICAgICAgICAgYWxpYXM6IFwiaVwiLFxuICAgICAgICAgICAgdHlwZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJJbml0aWFsaXplIFdpc3RcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBvcHRpb246IFwiY29uZmlnXCIsXG4gICAgICAgICAgICBhbGlhczogXCJjXCIsXG4gICAgICAgICAgICB0eXBlOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVXNlIHNwZWNpZmllZCBjb25maWd1cmF0aW9uIGZpbGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBvcHRpb246IFwiZm9ybWF0XCIsXG4gICAgICAgICAgICBhbGlhczogXCJmXCIsXG4gICAgICAgICAgICB0eXBlOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgZW51bTogW1wiY29tcGFjdFwiLCBcImpzb25cIiwgXCJzdHlsaXNoXCIsIFwidW5peFwiLCBcInZpc3VhbHN0dWRpb1wiXSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IFwic3R5bGlzaFwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiT3V0cHV0IGZvcm1hdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG9wdGlvbjogXCJ2ZXJib3NlXCIsXG4gICAgICAgICAgICBhbGlhczogXCJ2XCIsXG4gICAgICAgICAgICB0eXBlOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVmVyYm9zZSBsb2dnaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgb3B0aW9uOiBcImhlbHBcIixcbiAgICAgICAgICAgIGFsaWFzOiBcImhcIixcbiAgICAgICAgICAgIHR5cGU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU2hvdyBoZWxwXCJcbiAgICAgICAgfVxuICAgIF1cbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgb3B0aW9ucyA9IHJlcXVpcmUoJy4vb3B0aW9ucycpLFxuICAgIENMSUVuZ2luZSA9IHJlcXVpcmUoXCIuL2NsaS1lbmdpbmVcIiksXG4gICAgbG9nID0gcmVxdWlyZSgnLi9sb2dnaW5nJyksXG4gICAgZnMgPSByZXF1aXJlKCdmcycpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cblxuLyoqXG4gKiBPdXRwdXRzIHRoZSByZXN1bHRzIG9mIHRoZSBsaW50aW5nLlxuICogQHBhcmFtIHtDTElFbmdpbmV9IGVuZ2luZSBUaGUgQ0xJRW5naW5lIHRvIHVzZS5cbiAqIEBwYXJhbSB7TGludFJlc3VsdFtdfSByZXN1bHRzIFRoZSByZXN1bHRzIHRvIHByaW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCBUaGUgbmFtZSBvZiB0aGUgZm9ybWF0dGVyIHRvIHVzZSBvciB0aGUgcGF0aCB0byB0aGUgZm9ybWF0dGVyLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByaW50aW5nIHN1Y2NlZWRzLCBmYWxzZSBpZiBub3QuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwcmludFJlc3VsdHMoZW5naW5lLCByZXN1bHRzLCBmb3JtYXQpIHtcbiAgICBsZXQgZm9ybWF0dGVyO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZm9ybWF0dGVyID0gZW5naW5lLmdldEZvcm1hdHRlcihmb3JtYXQpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dCA9IGZvcm1hdHRlcihyZXN1bHRzKTtcblxuICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgbG9nLmluZm8ob3V0cHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuY29uc3QgY2xpID0ge1xuICAgIGV4ZWN1dGUoYXJncykge1xuICAgICAgICBsZXQgY3VycmVudE9wdGlvbnM7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGN1cnJlbnRPcHRpb25zID0gb3B0aW9ucy5wYXJzZShhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWxlcyA9IGN1cnJlbnRPcHRpb25zLl87XG5cbiAgICAgICAgaWYgKGN1cnJlbnRPcHRpb25zLmluaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVJbml0aWFsaXplKGN1cnJlbnRPcHRpb25zKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRPcHRpb25zLmNvbmZpZykge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUNvbmZpZ3VyYXRpb24oY3VycmVudE9wdGlvbnMuY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRPcHRpb25zLmhlbHAgfHwgIWZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nLmluZm8ob3B0aW9ucy5nZW5lcmF0ZUhlbHAoKSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBocnN0YXJ0ID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBDTElFbmdpbmUoY3VycmVudE9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgcmVwb3J0ID0gZW5naW5lLmV4ZWN1dGVPbkZpbGVzKGZpbGVzKTtcblxuICAgICAgICAgICAgaWYgKHByaW50UmVzdWx0cyhlbmdpbmUsIHJlcG9ydC5yZXN1bHRzLCBjdXJyZW50T3B0aW9ucy5mb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhyZW5kID0gcHJvY2Vzcy5ocnRpbWUoaHJzdGFydCk7XG4gICAgICAgICAgICAgICAgbG9nLmluZm8oYEZpbmlzaGVkIGluICR7KGhyZW5kWzBdICsgKGhyZW5kWzFdIC8xZTkpKS50b0ZpeGVkKDIpfXNcXG5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwb3J0LmVycm9yQ291bnQgPyAxIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSAud2lzdHJjLmpzb24gZmlsZSBpbiB0aGUgZGVmYXVsdCBsb2NhdGlvbiBpZiBhIGNvbmZpZ3VyYXRpb24gcGF0aCBpcyBub3Qgc3BlY2lmaWVkLlxuICogQHBhcmFtIGN1cnJlbnRPcHRpb25zIENvbW1hbmQgbGluZXMgYXJndW1lbnRzIGlucHV0IGJ5IHVzZXIuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgaW5pdGlhbGl6YXRpb24gc3VjY2VlZHMsIGZhbHNlIGlmIG5vdC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUluaXRpYWxpemUoY3VycmVudE9wdGlvbnMpIHtcbiAgICBjb25zdCByZWNvbW1lbmRlZEZpbGVQYXRoID0gJy4uL2NvbmZpZy93aXN0LXJlY29tbWVuZGVkLmpzb24nO1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGlmIChjdXJyZW50T3B0aW9ucy5jb25maWcpIHtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlQ29uZmlndXJhdGlvbihjdXJyZW50T3B0aW9ucy5jb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGhhbmRsZUNvbmZpZ3VyYXRpb24ocmVjb21tZW5kZWRGaWxlUGF0aCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBDcmVhdGVzIHRoZSAud2lzdHJjLmpzb24gZmlsZSBmcm9tIHRoZSB1c2VyLWRlZmluZWQgY29uZmlndXJhdGlvbiBmaWxlLlxuICogQHBhcmFtIGZpbGVQYXRoIFBhdGggdG8gdGhlIHVzZXItZGVmaW5lZCBjb25maWd1cmF0aW9uIGZpbGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZSBzdWNjZWVkcywgZmFsc2UgaWYgbm90LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaGFuZGxlQ29uZmlndXJhdGlvbihmaWxlUGF0aCkge1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSkge1xuICAgICAgICBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShmaWxlUGF0aCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIHBhdGggdG8gY29uZmlndXJhdGlvbiBmaWxlLicpO1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIHNldHVwQ29uZmlndXJhdGlvbkZpbGUoZmlsZVBhdGgpO1xufVxuXG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgLndpc3RyYy5qc29uIGZpbGUgZnJvbSB0aGUgY29udGVudHMgb2YgdGhlIHNwZWNpZmllZCBmaWxlLlxuICogQHBhcmFtIGNvbmZpZ0ZpbGVQYXRoIFBhdGggdG8gdGhlIGNvbmZpZ3VyYXRpb24gZmlsZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBjcmVhdGlvbiBvZiB0aGUgY29uZmlndXJhdGlvbiBmaWxlIHN1Y2NlZWRzLCBmYWxzZSBpZiBub3QuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cENvbmZpZ3VyYXRpb25GaWxlKGNvbmZpZ0ZpbGVQYXRoKSB7XG4gICAgY29uc3QgZmlsZU5hbWUgPSAnLndpc3RyYy5qc29uJztcblxuICAgIHRyeSB7XG4gICAgICAgIGxldCBjb250ZW50cyA9IHJlcXVpcmUoY29uZmlnRmlsZVBhdGgpO1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVOYW1lLCBKU09OLnN0cmluZ2lmeShjb250ZW50cywgbnVsbCwgMikpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==